import Util;
import DingUtil;
import Url;

type @serverUrl = string
type @accessKeyId = string
type @accessKeySecret = string
type @session = string
type @suiteTicket = string
type @corpId = string
type @userAgent = string
type @readTimeout = number
type @connectTimeout = number
type @httpProxy = string
type @httpsProxy = string
type @noProxy = string
type @maxIdleConns = number

/**
 * Model for initing client
 */
model Config {
  accessKeyId?: string,
  accessKeySecret?: string,
  session?: string,
  suiteTicket?: string,
  corpId?: string,
  readTimeout?: number,
  connectTimeout?: number,
  httpProxy?: string,
  httpsProxy?: string,
  serverUrl?: string,
  noProxy?: string,
  maxIdleConns?: number,
  userAgent?: string,
}

/**
 * Init client with Config
 * @param config config contains the necessary information to create a client
 */
init(config: Config) {
  if (Util.isUnset(config)) {
    throw {
      code = 'ParameterMissing',
      message = '\'config\' can not be unset'
    };
  }

  if (Util.isUnset(config.serverUrl)) {
    throw {
      code = 'ParameterMissing',
      message = '\'config.serverUrl\' can not be unset'
    };
  }

  @accessKeyId = config.accessKeyId;
  @accessKeySecret = config.accessKeySecret;
  @serverUrl = config.serverUrl;
  @session = config.session;
  @userAgent = config.userAgent;
  @readTimeout = config.readTimeout;
  @connectTimeout = config.connectTimeout;
  @httpProxy = config.httpProxy;
  @httpsProxy = config.httpsProxy;
  @noProxy = config.noProxy;
  @maxIdleConns = config.maxIdleConns;
}

/**
 * Encapsulate the request and invoke the network
 * @param action api name
 * @param method e.g. GET
 * @param pathname the path of api
 * @param headers which contains request headers
 * @param appParams which contains request params
 * @param runtime which controls some details of call api, such as retry times
 * @return the response
 */
api doRequest(action: string, method: string, pathname: string, headers: map[string]string, appParams: map[string]string, runtime: Util.RuntimeOptions): object {
  var u = Url.parseUrl(@serverUrl);
  __request.protocol = u.scheme;
  __request.method = method;
  __request.pathname = pathname;
  __request.query = {
    method = action,
    v = '2.0',
    timestamp = DingUtil.getTimestamp(),
    format = 'json',
    sign_method = 'hmac-sha256',
    session = @session,
    partner_id = 'top-sdk-java-dynamicVersionNo',
    simplify = 'true',
  };

  var endpoint = u.host.hostname;
  if (!Util.isUnset(u.host.port)) {
    endpoint = `${u.host.hostname}:${u.host.port}`;
  }

  __request.headers = {
    host = endpoint,
    user-agent = getUserAgent(),
    ...headers,
  };

  if (!Util.isUnset(appParams)) {
    __request.body = Util.toFormString(Util.anyifyMapValue(appParams));
    __request.headers.content-type = 'application/x-www-form-urlencoded';
  }
} returns {
  var obj = Util.readAsJSON(__response.body);
  var res = Util.assertAsMap(obj);
  if (DingUtil.hasError(res)) {
    var tmp = res.error_response;
    var e =  Util.assertAsMap(tmp);
    throw {
      code = e.sub_code,
      message = e.sub_msg,
      data = res,
    };
  }
  return {
    body = res,
    headers = __response.headers,
  };
} runtime {
  timeouted = 'retry',
  readTimeout = Util.defaultNumber(runtime.readTimeout, @readTimeout),
  connectTimeout = Util.defaultNumber(runtime.connectTimeout, @connectTimeout),
  httpProxy = Util.defaultString(runtime.httpProxy, @httpProxy),
  httpsProxy = Util.defaultString(runtime.httpsProxy, @httpsProxy),
  noProxy = Util.defaultString(runtime.noProxy, @noProxy),
  maxIdleConns = Util.defaultNumber(runtime.maxIdleConns, @maxIdleConns),
  retry = {
    retryable = runtime.autoretry,
    maxAttempts = Util.defaultNumber(runtime.maxAttempts, 3)
  },
  backoff = {
    policy = Util.defaultString(runtime.backoffPolicy, 'no'),
    period = Util.defaultNumber(runtime.backoffPeriod, 1)
  },
  ignoreSSL = runtime.ignoreSSL
}

/**
 * Encapsulate the request and invoke the network
 * @param method e.g. GET
 * @param pathname the path of api
 * @param headers which contains headers params
 * @param appParams which contains request params
 * @param runtime which controls some details of call api, such as retry times
 * @return the response
 */
api doRequestOApi(method: string, pathname: string, headers: map[string]string, appParams: map[string]string, runtime: Util.RuntimeOptions): object {
  var u = Url.parseUrl(@serverUrl);
  __request.protocol = u.scheme;
  __request.method = method;
  __request.pathname = pathname;
  var endpoint = u.host.hostname;
  if (!Util.isUnset(u.host.port)) {
    endpoint = `${u.host.hostname}:${u.host.port}`;
  }

  __request.headers = {
    host = endpoint,
    user-agent = getUserAgent(),
    ...headers,
  };

  if (!Util.isUnset(@accessKeyId)) {
    var timestamp = DingUtil.getTimestamp();
    var canonicalString = DingUtil.getCanonicalStringForIsv(timestamp, @suiteTicket);
    __request.query.accessKey = @accessKeyId;
    __request.query.timestamp = timestamp;
    __request.query.signature = DingUtil.computeSignature(@accessKeySecret, canonicalString);
    if (!Util.isUnset(@suiteTicket)) {
      __request.query.suiteTicket = @suiteTicket;
    }

    if (!Util.isUnset(@corpId)) {
      __request.query.corpId = @corpId;
    }
  } else {
    __request.query.access_token = @session;
  }

  if (!Util.isUnset(appParams)) {
    if (Util.equalString(method, 'GET')) {
      __request.query = {
        ...__request.query,
        ...appParams,
      };
      __request.headers.content-type = 'application/x-www-form-urlencoded;charset=uft-8';
    } else {
      __request.body = Util.toJSONString(appParams);
      __request.headers.content-type = 'application/json;charset=utf-8';
    }
  }
} returns {
  var obj = Util.readAsJSON(__response.body);
  var res = Util.assertAsMap(obj);
  if (DingUtil.hasError(res)) {
    throw {
      code = res.errcode,
      message = res.errmsg,
      data = res,
    };
  }
  return {
    body = res,
    headers = __response.headers,
  };
} runtime {
  timeouted = 'retry',
  readTimeout = Util.defaultNumber(runtime.readTimeout, @readTimeout),
  connectTimeout = Util.defaultNumber(runtime.connectTimeout, @connectTimeout),
  httpProxy = Util.defaultString(runtime.httpProxy, @httpProxy),
  httpsProxy = Util.defaultString(runtime.httpsProxy, @httpsProxy),
  noProxy = Util.defaultString(runtime.noProxy, @noProxy),
  maxIdleConns = Util.defaultNumber(runtime.maxIdleConns, @maxIdleConns),
  retry = {
    retryable = runtime.autoretry,
    maxAttempts = Util.defaultNumber(runtime.maxAttempts, 3)
  },
  backoff = {
    policy = Util.defaultString(runtime.backoffPolicy, 'no'),
    period = Util.defaultNumber(runtime.backoffPeriod, 1)
  },
  ignoreSSL = runtime.ignoreSSL
}

/**
 * Get user agent
 * @return user agent
 */
function getUserAgent(): string {
  var userAgent = 'TeaClient/1.0.0';
  return Util.getUserAgent(userAgent);
}

model DelemployeedismissionandhandoverCorpHrmEmployeeParams = {
  dismissionInfoWithHandOver: {
    handOverUserid?: string(description='交接人userid', name='hand_over_userid'),
    dismissionMemo?: string(description='离职描述', name='dismission_memo'),
    dismissionReason: string(description='离职原因（1：家庭原因，2:个人原因，3：发展原因，4：合同到期不续签，5：协议解除，6：无法胜任工作，7：经济性裁员，8：严重违法违纪，9：其他）', name='dismission_reason'),
    lastWorkDate: string(description='最后工作日', pattern='\\\\d{4}[-]\\\\d{1,2}[-]\\\\d{1,2}[T]\\\\d{2}:\\\\d{2}:\\\\d{2}[Z]', name='last_work_date'),
    dismissionUserid: string(description='离职人userid', name='dismission_userid'),
  }(description='确认离职对象', name='dismission_info_with_hand_over'),
  opUserid: string(description='操作人userid', name='op_userid'),
}

model DelemployeedismissionandhandoverCorpHrmEmployeeRequest = {
  headers?: map[string]string,
  params:DelemployeedismissionandhandoverCorpHrmEmployeeParams,
}

model DelemployeedismissionandhandoverCorpHrmEmployeeResponseBody = {
  result?: {
    success?: boolean(description='是否成功', name='success'),
    errorMsg?: string(description='错误信息', name='error_msg'),
    dingOpenErrcode?: int64(description='错误码', name='ding_open_errcode'),
  }(description='返回对象', name='result'),
}

model DelemployeedismissionandhandoverCorpHrmEmployeeResponse = {
  headers: map[string]string,
  body: DelemployeedismissionandhandoverCorpHrmEmployeeResponseBody,
}

/**
 * Description: 确认离职并指定交接人，会从通讯录删除
 */
async function delemployeedismissionandhandoverCorpHrmEmployee(request: DelemployeedismissionandhandoverCorpHrmEmployeeRequest): DelemployeedismissionandhandoverCorpHrmEmployeeResponse {
  var runtime = new Util.RuntimeOptions{};
  return delemployeedismissionandhandoverCorpHrmEmployeeEx(request, runtime);
}

/**
 * Description: 确认离职并指定交接人，会从通讯录删除
 */
async function delemployeedismissionandhandoverCorpHrmEmployeeEx(request: DelemployeedismissionandhandoverCorpHrmEmployeeRequest, runtime: Util.RuntimeOptions): DelemployeedismissionandhandoverCorpHrmEmployeeResponse {
  Util.validateModel(request);
  var appParams = Util.stringifyMapValue(Util.toMap(request.params));
  return doRequest('dingtalk.corp.hrm.employee.delemployeedismissionandhandover', 'POST', '/router/rest', request.headers, appParams, runtime);
}

model GetdismissionlistCorpHrmEmployeeParams = {
  current: int64(description='第几页，从1开始', name='current'),
  pageSize: int64(description='一页多少数据，在1-100之间', name='page_size'),
  opUserid: string(description='操作人userid', name='op_userid'),
}

model GetdismissionlistCorpHrmEmployeeRequest = {
  headers?: map[string]string,
  params:GetdismissionlistCorpHrmEmployeeParams,
}

model GetdismissionlistCorpHrmEmployeeResponseBody = {
  result?: {
    success?: boolean(description='是否成功', name='success'),
    dingOpenErrcode?: int64(description='错误码', name='ding_open_errcode'),
    errorMsg?: string(description='错误信息', name='error_msg'),
    page?: {
      current?: int64(description='当前页', name='current'),
      pageSize?: int64(description='每页最大数量，最大100', name='page_size'),
      total?: int64(description='总数', name='total'),
      dataList?: [
        {
          userid?: string(description='userId', name='userid'),
          name?: string(description='名称', name='name'),
          employeeType?: string(description='员工类型（0:无类型，1:全职，2:兼职，3:实习，4:劳务派遣，5:退休返聘，6:劳务外包）', name='employee_type'),
          deptName?: string(description='部门名称', name='dept_name'),
          position?: string(description='职位', name='position'),
          employeeStatus?: string(description='员工状态（-1:无状态，1:待入职，2:试用，3:正式，4:离职，5:待离职）', name='employee_status'),
          dismissionReason?: string(description='离职原因（1：家庭原因，2:个人原因，3：发展原因，4：合同到期不续签，5：协议解除，6：无法胜任工作，7：经济性裁员，8：严重违法违纪，9：其他）', name='dismission_reason'),
          confirmJoinTime?: string(description='入职时间', pattern='\\\\d{4}[-]\\\\d{1,2}[-]\\\\d{1,2}[T]\\\\d{2}:\\\\d{2}:\\\\d{2}[Z]', name='confirm_join_time'),
          lastWorkDate?: string(description='离职时间', pattern='\\\\d{4}[-]\\\\d{1,2}[-]\\\\d{1,2}[T]\\\\d{2}:\\\\d{2}:\\\\d{2}[Z]', name='last_work_date'),
          dismissionMemo?: string(description='离职描述', name='dismission_memo'),
          email?: string(description='email', name='email'),
        }
      ](description='实际每条数据', name='data_list'),
      totalPage?: int64(description='总页数', name='total_page'),
    }(description='分页数据', name='page'),
  }(description='result', name='result'),
}

model GetdismissionlistCorpHrmEmployeeResponse = {
  headers: map[string]string,
  body: GetdismissionlistCorpHrmEmployeeResponseBody,
}

/**
 * Description: 智能人事开放接口-查询离职人员列表
 */
async function getdismissionlistCorpHrmEmployee(request: GetdismissionlistCorpHrmEmployeeRequest): GetdismissionlistCorpHrmEmployeeResponse {
  var runtime = new Util.RuntimeOptions{};
  return getdismissionlistCorpHrmEmployeeEx(request, runtime);
}

/**
 * Description: 智能人事开放接口-查询离职人员列表
 */
async function getdismissionlistCorpHrmEmployeeEx(request: GetdismissionlistCorpHrmEmployeeRequest, runtime: Util.RuntimeOptions): GetdismissionlistCorpHrmEmployeeResponse {
  Util.validateModel(request);
  var appParams = Util.stringifyMapValue(Util.toMap(request.params));
  return doRequest('dingtalk.corp.hrm.employee.getdismissionlist', 'POST', '/router/rest', request.headers, appParams, runtime);
}

model GetCorpDingindexParams = {
  statDates: [ string ](description='统计日期', maxItems=5, name='stat_dates'),
}

model GetCorpDingindexRequest = {
  headers?: map[string]string,
  params:GetCorpDingindexParams,
}

model GetCorpDingindexResponseBody = {
  result?: {
    dingOpenErrcode?: int64(description='dingOpenErrcode', name='ding_open_errcode'),
    success?: boolean(description='success', name='success'),
    errorMsg?: string(description='errorMsg', name='error_msg'),
    dingIndexList?: [
      {
        statDate?: string(description='统计时间', name='stat_date'),
        dayIndex?: string(description='日钉钉指数', name='day_index'),
        avarageMonthIndex?: string(description='月平均钉钉指数', name='avarage_month_index'),
      }
    ](description='result', name='ding_index_list'),
  }(description='result', name='result'),
}

model GetCorpDingindexResponse = {
  headers: map[string]string,
  body: GetCorpDingindexResponseBody,
}

/**
 * Description: 查询企业的日钉钉指数和月平均钉钉指数
 */
async function getCorpDingindex(request: GetCorpDingindexRequest): GetCorpDingindexResponse {
  var runtime = new Util.RuntimeOptions{};
  return getCorpDingindexEx(request, runtime);
}

/**
 * Description: 查询企业的日钉钉指数和月平均钉钉指数
 */
async function getCorpDingindexEx(request: GetCorpDingindexRequest, runtime: Util.RuntimeOptions): GetCorpDingindexResponse {
  Util.validateModel(request);
  var appParams = Util.stringifyMapValue(Util.toMap(request.params));
  return doRequest('dingtalk.corp.dingindex.get', 'POST', '/router/rest', request.headers, appParams, runtime);
}

model StatisticsOapiReportParams = {
  reportId: string(description='日志id', name='report_id'),
}

model StatisticsOapiReportRequest = {
  headers?: map[string]string,
  params:StatisticsOapiReportParams,
}

model StatisticsOapiReportResponseBody = {
  result?: {
    readNum?: int64(description='已读人数', name='read_num'),
    commentNum?: int64(description='评论个数', name='comment_num'),
    commentUserNum?: int64(description='评论人数，去重', name='comment_user_num'),
    likeNum?: int64(description='点赞人数', name='like_num'),
  }(description='统计结果', name='result'),
  errcode?: int64(description='错误码', name='errcode'),
  errmsg?: string(description='错误信息', name='errmsg'),
  success?: boolean(description='是否成功', name='success'),
}

model StatisticsOapiReportResponse = {
  headers: map[string]string,
  body: StatisticsOapiReportResponseBody,
}

/**
 * Description: 获取日志统计数据
 */
async function statisticsOapiReport(request: StatisticsOapiReportRequest): StatisticsOapiReportResponse {
  var runtime = new Util.RuntimeOptions{};
  return statisticsOapiReportEx(request, runtime);
}

/**
 * Description: 获取日志统计数据
 */
async function statisticsOapiReportEx(request: StatisticsOapiReportRequest, runtime: Util.RuntimeOptions): StatisticsOapiReportResponse {
  Util.validateModel(request);
  var appParams = Util.stringifyMapValue(Util.toMap(request.params));
  return doRequestOApi('POST', '/topapi/report/statistics', request.headers, appParams, runtime);
}

model ModjobinfoCorpHrmEmployeeParams = {
  opUserid: string(description='操作人userid，必须是拥有被操作人操作权限的管理员userid', name='op_userid'),
  hrmApiJobModel: {
    userid: string(description='被操作人userid', name='userid'),
    employeeType?: int64(description='员工类型（1:全职，2:兼职，3:实习，4:劳务派遣，5:退休返聘，6:劳务外包）', name='employee_type'),
    employeeStatus?: int64(description='员工状态（2:试用，3:正式）', name='employee_status'),
    confirmJoinTime?: string(description='入职日期', pattern='\\\\d{4}[-]\\\\d{1,2}[-]\\\\d{1,2}[T]\\\\d{2}:\\\\d{2}:\\\\d{2}[Z]', name='confirm_join_time'),
    probationPeriodType?: int64(description='试用期（1:无试用期，2:1个月，3:2个月，4:3个月，5:4个月，6:5个月，7:6个月，8:其他）', name='probation_period_type'),
    regularTime?: string(description='转正时间', pattern='\\\\d{4}[-]\\\\d{1,2}[-]\\\\d{1,2}[T]\\\\d{2}:\\\\d{2}:\\\\d{2}[Z]', name='regular_time'),
    joinWorkingTime?: string(description='首次参加工作时间', pattern='\\\\d{4}[-]\\\\d{1,2}[-]\\\\d{1,2}[T]\\\\d{2}:\\\\d{2}:\\\\d{2}[Z]', name='join_working_time'),
    birthTime?: string(description='生日日期', pattern='\\\\d{4}[-]\\\\d{1,2}[-]\\\\d{1,2}[T]\\\\d{2}:\\\\d{2}:\\\\d{2}[Z]', name='birth_time'),
  }(description='员工信息对象，被操作人userid是必填，其他信息选填，填写则更新', name='hrm_api_job_model'),
}

model ModjobinfoCorpHrmEmployeeRequest = {
  headers?: map[string]string,
  params:ModjobinfoCorpHrmEmployeeParams,
}

model ModjobinfoCorpHrmEmployeeResponseBody = {
  result?: {
    success?: boolean(description='是否成功', name='success'),
    dingOpenErrcode?: int64(description='错误码', name='ding_open_errcode'),
    errorMsg?: string(description='错误信息', name='error_msg'),
  }(description='返回对象', name='result'),
}

model ModjobinfoCorpHrmEmployeeResponse = {
  headers: map[string]string,
  body: ModjobinfoCorpHrmEmployeeResponseBody,
}

/**
 * Description: 钉钉智能人事开放接口-更新员工工作信息
 */
async function modjobinfoCorpHrmEmployee(request: ModjobinfoCorpHrmEmployeeRequest): ModjobinfoCorpHrmEmployeeResponse {
  var runtime = new Util.RuntimeOptions{};
  return modjobinfoCorpHrmEmployeeEx(request, runtime);
}

/**
 * Description: 钉钉智能人事开放接口-更新员工工作信息
 */
async function modjobinfoCorpHrmEmployeeEx(request: ModjobinfoCorpHrmEmployeeRequest, runtime: Util.RuntimeOptions): ModjobinfoCorpHrmEmployeeResponse {
  Util.validateModel(request);
  var appParams = Util.stringifyMapValue(Util.toMap(request.params));
  return doRequest('dingtalk.corp.hrm.employee.modjobinfo', 'POST', '/router/rest', request.headers, appParams, runtime);
}

model RemoveOapiMedalCorpmedalParams = {
  userid: string(description='员工ID', name='userid'),
  templateId: int64(description='勋章模板ID', name='template_id'),
}

model RemoveOapiMedalCorpmedalRequest = {
  headers?: map[string]string,
  params:RemoveOapiMedalCorpmedalParams,
}

model RemoveOapiMedalCorpmedalResponseBody = {
  result?: boolean(description='收回勋章结果', name='result'),
  success?: boolean(description='调用结果', name='success'),
  errcode?: int64(description='错误码', name='errcode'),
  errmsg?: string(description='错误描述', name='errmsg'),
}

model RemoveOapiMedalCorpmedalResponse = {
  headers: map[string]string,
  body: RemoveOapiMedalCorpmedalResponseBody,
}

/**
 * Description: 由于勋章到期、员工离职、员工违规等原因，企业收回已授予员工的勋章
 */
async function removeOapiMedalCorpmedal(request: RemoveOapiMedalCorpmedalRequest): RemoveOapiMedalCorpmedalResponse {
  var runtime = new Util.RuntimeOptions{};
  return removeOapiMedalCorpmedalEx(request, runtime);
}

/**
 * Description: 由于勋章到期、员工离职、员工违规等原因，企业收回已授予员工的勋章
 */
async function removeOapiMedalCorpmedalEx(request: RemoveOapiMedalCorpmedalRequest, runtime: Util.RuntimeOptions): RemoveOapiMedalCorpmedalResponse {
  Util.validateModel(request);
  var appParams = Util.stringifyMapValue(Util.toMap(request.params));
  return doRequestOApi('POST', '/topapi/medal/corpmedal/remove', request.headers, appParams, runtime);
}

model CreateOapiWorkspaceCircleGroupParams = {
  req?: {
    name: string(description='群名称，长度[3,20]字符', name='name'),
    userid: string(description='创建人，在圈子内的userid，这个人会成为群主。当圈子群超过100个时会禁止新建', name='userid'),
  }(description='入参', name='req'),
}

model CreateOapiWorkspaceCircleGroupRequest = {
  headers?: map[string]string,
  params?:CreateOapiWorkspaceCircleGroupParams,
}

model CreateOapiWorkspaceCircleGroupResponseBody = {
  result?: {
    conversationId?: string(description='群id', name='conversation_id'),
  }(description='返回值', name='result'),
  errcode?: int64(description='dingOpenErrcode', name='errcode'),
  errmsg?: string(description='errorMsg', name='errmsg'),
}

model CreateOapiWorkspaceCircleGroupResponse = {
  headers: map[string]string,
  body: CreateOapiWorkspaceCircleGroupResponseBody,
}

/**
 * Description: 创建圈子群
 */
async function createOapiWorkspaceCircleGroup(request: CreateOapiWorkspaceCircleGroupRequest): CreateOapiWorkspaceCircleGroupResponse {
  var runtime = new Util.RuntimeOptions{};
  return createOapiWorkspaceCircleGroupEx(request, runtime);
}

/**
 * Description: 创建圈子群
 */
async function createOapiWorkspaceCircleGroupEx(request: CreateOapiWorkspaceCircleGroupRequest, runtime: Util.RuntimeOptions): CreateOapiWorkspaceCircleGroupResponse {
  Util.validateModel(request);
  var appParams = Util.stringifyMapValue(Util.toMap(request.params));
  return doRequestOApi('POST', '/topapi/workspace/circle/group/create', request.headers, appParams, runtime);
}

model ListOapiWorkspaceCircleGroupParams = {
  size: int64(description='取多少条数据，取值范围[1,20]', name='size'),
  cursor?: int64(description='分页的游标，第一页传0', name='cursor'),
}

model ListOapiWorkspaceCircleGroupRequest = {
  headers?: map[string]string,
  params:ListOapiWorkspaceCircleGroupParams,
}

model ListOapiWorkspaceCircleGroupResponseBody = {
  result?: {
    groups?: [
      {
        memberLimit?: int64(description='群人数上限', name='member_limit'),
        memberCount?: int64(description='当前人数', name='member_count'),
        avatarMediaId?: string(description='群头像mediaId，需要再调用开放平台官网提供的接口转成http地址', name='avatar_media_id'),
        name?: string(description='群名称', name='name'),
        conversationId?: string(description='群id', name='conversation_id'),
      }
    ](description='圈子群列表', name='groups'),
    hasMore?: boolean(description='是否有更多数据', name='has_more'),
    nextCursor?: int64(description='下一次分页的游标', name='next_cursor'),
  }(description='返回值', name='result'),
  errcode?: int64(description='dingOpenErrcode', name='errcode'),
  errmsg?: string(description='errorMsg', name='errmsg'),
}

model ListOapiWorkspaceCircleGroupResponse = {
  headers: map[string]string,
  body: ListOapiWorkspaceCircleGroupResponseBody,
}

/**
 * Description: 查询圈子群列表
 */
async function listOapiWorkspaceCircleGroup(request: ListOapiWorkspaceCircleGroupRequest): ListOapiWorkspaceCircleGroupResponse {
  var runtime = new Util.RuntimeOptions{};
  return listOapiWorkspaceCircleGroupEx(request, runtime);
}

/**
 * Description: 查询圈子群列表
 */
async function listOapiWorkspaceCircleGroupEx(request: ListOapiWorkspaceCircleGroupRequest, runtime: Util.RuntimeOptions): ListOapiWorkspaceCircleGroupResponse {
  Util.validateModel(request);
  var appParams = Util.stringifyMapValue(Util.toMap(request.params));
  return doRequestOApi('POST', '/topapi/workspace/circle/group/list', request.headers, appParams, runtime);
}

model ListOapiSmartdeviceMeetingroomParticipantParams = {
  cursor?: string(description='分页游标', name='cursor'),
  size: int64(description='最大200(含)', name='size'),
  bookid: string(description='会议室预订id', name='bookid'),
}

model ListOapiSmartdeviceMeetingroomParticipantRequest = {
  headers?: map[string]string,
  params:ListOapiSmartdeviceMeetingroomParticipantParams,
}

model ListOapiSmartdeviceMeetingroomParticipantResponseBody = {
  errcode?: int64(description='错误码', name='errcode'),
  errmsg?: string(description='错误码信息', name='errmsg'),
  result?: {
    nextCursor?: string(description='游标', name='next_cursor'),
    participants?: [
      {
        userid?: string(description='参会人userid', name='userid'),
      }
    ](description='参会人列表', name='participants'),
    hasMore?: boolean(description='是否有下一页', name='has_more'),
  }(description='结果', name='result'),
}

model ListOapiSmartdeviceMeetingroomParticipantResponse = {
  headers: map[string]string,
  body: ListOapiSmartdeviceMeetingroomParticipantResponseBody,
}

/**
 * Description: 获取会议室预订相关参会人(当前组织内)列表
 */
async function listOapiSmartdeviceMeetingroomParticipant(request: ListOapiSmartdeviceMeetingroomParticipantRequest): ListOapiSmartdeviceMeetingroomParticipantResponse {
  var runtime = new Util.RuntimeOptions{};
  return listOapiSmartdeviceMeetingroomParticipantEx(request, runtime);
}

/**
 * Description: 获取会议室预订相关参会人(当前组织内)列表
 */
async function listOapiSmartdeviceMeetingroomParticipantEx(request: ListOapiSmartdeviceMeetingroomParticipantRequest, runtime: Util.RuntimeOptions): ListOapiSmartdeviceMeetingroomParticipantResponse {
  Util.validateModel(request);
  var appParams = Util.stringifyMapValue(Util.toMap(request.params));
  return doRequestOApi('POST', '/topapi/smartdevice/meetingroom/participant/list', request.headers, appParams, runtime);
}

model UpdatebanwordsOapiChatParams = {
  useridList: [ string ](description='被禁言人id列表', maxItems=20, name='userid_list'),
  chatid: string(description='chatid', name='chatid'),
  type: int64(description='0表示剔除禁言名单，1表示加入禁言名单', name='type'),
  banWordsTime: int64(description='禁言时间，单位ms', name='ban_words_time'),
}

model UpdatebanwordsOapiChatRequest = {
  headers?: map[string]string,
  params:UpdatebanwordsOapiChatParams,
}

model UpdatebanwordsOapiChatResponseBody = {
  success?: boolean(description='成功', name='success'),
  errcode?: int64(description='成功', name='errcode'),
  errmsg?: string(description='成功', name='errmsg'),
}

model UpdatebanwordsOapiChatResponse = {
  headers: map[string]string,
  body: UpdatebanwordsOapiChatResponseBody,
}

/**
 * Description: API实现群主对成员单个人的禁言
 */
async function updatebanwordsOapiChat(request: UpdatebanwordsOapiChatRequest): UpdatebanwordsOapiChatResponse {
  var runtime = new Util.RuntimeOptions{};
  return updatebanwordsOapiChatEx(request, runtime);
}

/**
 * Description: API实现群主对成员单个人的禁言
 */
async function updatebanwordsOapiChatEx(request: UpdatebanwordsOapiChatRequest, runtime: Util.RuntimeOptions): UpdatebanwordsOapiChatResponse {
  Util.validateModel(request);
  var appParams = Util.stringifyMapValue(Util.toMap(request.params));
  return doRequestOApi('POST', '/topapi/chat/updatebanwords', request.headers, appParams, runtime);
}

model ListOapiProcessTemplateParams = {
  userid?: string(description='abc123', name='userid'),
  offset?: int64(description='游标属性', name='offset'),
  size?: int64(description='每页数量', name='size'),
}

model ListOapiProcessTemplateRequest = {
  headers?: map[string]string,
  params?:ListOapiProcessTemplateParams,
}

model ListOapiProcessTemplateResponseBody = {
  result?: {
    templateList?: [
      {
        canModify?: boolean(description='是否有管理权限', name='can_modify'),
        formContent?: string(description='模板内容', name='form_content'),
        iconUrl?: string(description='模板图标url', name='icon_url'),
        name?: string(description='模板名称', name='name'),
        processCode?: string(description='模板code', name='process_code'),
        url?: string(description='模板跳转地址', name='url'),
        canBeUpgraded?: boolean(description='是否可升级，加入收款账户组件', name='can_be_upgraded'),
      }
    ](description='list', name='template_list'),
    nextCursor?: string(description='下次调用时的offset入参', name='next_cursor'),
  }(description='result', name='result'),
  errcode?: int64(description='dingOpenErrcode', name='errcode'),
  errmsg?: string(description='errorMsg', name='errmsg'),
  success?: boolean(description='是否成功', name='success'),
}

model ListOapiProcessTemplateResponse = {
  headers: map[string]string,
  body: ListOapiProcessTemplateResponseBody,
}

/**
 * Description: 分页获取企业下所有的流程模板
 */
async function listOapiProcessTemplate(request: ListOapiProcessTemplateRequest): ListOapiProcessTemplateResponse {
  var runtime = new Util.RuntimeOptions{};
  return listOapiProcessTemplateEx(request, runtime);
}

/**
 * Description: 分页获取企业下所有的流程模板
 */
async function listOapiProcessTemplateEx(request: ListOapiProcessTemplateRequest, runtime: Util.RuntimeOptions): ListOapiProcessTemplateResponse {
  Util.validateModel(request);
  var appParams = Util.stringifyMapValue(Util.toMap(request.params));
  return doRequestOApi('POST', '/topapi/process/template/list', request.headers, appParams, runtime);
}

model ListOapiAttendanceVacationRecordParams = {
  opUserid: string(description='操作者ID', name='op_userid'),
  leaveCode: string(description='假期类型唯一标识', name='leave_code'),
  userids: [ string ](description='待查询员工ID列表', maxItems=50, name='userids'),
  offset: int64(description='分页偏移(从0开始非负整数)', minimum=0, name='offset'),
  size: int64(description='分页偏移(正整数 最大50)', maximum=200, name='size'),
}

model ListOapiAttendanceVacationRecordRequest = {
  headers?: map[string]string,
  params:ListOapiAttendanceVacationRecordParams,
}

model ListOapiAttendanceVacationRecordResponseBody = {
  result?: {
    hasMore?: boolean(description='是否存在更多记录', name='has_more'),
    leaveRecords?: [
      {
        userid?: string(description='员工ID', name='userid'),
        leaveCode?: string(description='假期类型唯一标识', name='leave_code'),
        recordId?: string(description='假期消费记录唯一标识', name='record_id'),
        quotaId?: string(description='假期额度唯一标识', name='quota_id'),
        startTime?: int64(description='额度有效期开始时间(毫秒级时间戳)', name='start_time'),
        endTime?: int64(description='额度有效期结束时间(毫秒级时间戳)', name='end_time'),
        parentRecordId?: string(description='假期记录标识(扣减多条假期配额 该值不为空)', name='parent_record_id'),
        leaveViewUnit?: string(description='显示单位(day hour 其中一种按天、小时计算)', name='leave_view_unit'),
        calType?: string(description='计算类型(add delete update 如果是请假则为null)', name='cal_type'),
        leaveReason?: string(description='原因', name='leave_reason'),
        leaveStatus?: string(description='请假状态(请假申请 init 请假通过 success 请假被拒 refuse 请假撤销 abort 撤销已同意的请假单并通过 revoke其中一种)', name='leave_status'),
        leaveRecordType?: string(description='假期记录类型(leave update其中一种 请假还是更新配额)', name='leave_record_type'),
        recordNumPerDay?: int64(description='单位以天计算的消费额度(假期类型按天计算该值不为空且按百分之一天折算 例如 100=1天)', name='record_num_per_day'),
        recordNumPerHour?: int64(description='单位以小时计算的消费额度(假期类型按小时计算该值不为空且按百分之一小时折算 例如 100=1小时)', name='record_num_per_hour'),
      }
    ](description='假期消费记录列表', name='leave_records'),
  }(description='结果值', name='result'),
  errcode?: int64(description='dingOpenErrcode', name='errcode'),
  errmsg?: string(description='errorMsg', name='errmsg'),
  success?: boolean(description='是否正确访问', name='success'),
}

model ListOapiAttendanceVacationRecordResponse = {
  headers: map[string]string,
  body: ListOapiAttendanceVacationRecordResponseBody,
}

/**
 * Description: 根据企业或员工分页获取假期消费记录信息 每次返回50条数据
 */
async function listOapiAttendanceVacationRecord(request: ListOapiAttendanceVacationRecordRequest): ListOapiAttendanceVacationRecordResponse {
  var runtime = new Util.RuntimeOptions{};
  return listOapiAttendanceVacationRecordEx(request, runtime);
}

/**
 * Description: 根据企业或员工分页获取假期消费记录信息 每次返回50条数据
 */
async function listOapiAttendanceVacationRecordEx(request: ListOapiAttendanceVacationRecordRequest, runtime: Util.RuntimeOptions): ListOapiAttendanceVacationRecordResponse {
  Util.validateModel(request);
  var appParams = Util.stringifyMapValue(Util.toMap(request.params));
  return doRequestOApi('POST', '/topapi/attendance/vacation/record/list', request.headers, appParams, runtime);
}

model UpdateOapiProcessPropertyParams = {
  userid?: string(description='员工工号 企业唯一', name='userid'),
  processCode?: string(description='模板code', name='process_code'),
  componentId?: string(description='控件id', name='component_id'),
  props?: {
    payEnable?: boolean(description='单个控件属性', name='pay_enable'),
  }(description='控件属性集', name='props'),
}

model UpdateOapiProcessPropertyRequest = {
  headers?: map[string]string,
  params?:UpdateOapiProcessPropertyParams,
}

model UpdateOapiProcessPropertyResponseBody = {
  result?: boolean(description='是否成功', name='result'),
  errcode?: int64(description='dingOpenErrcode', name='errcode'),
  errmsg?: string(description='errorMsg', name='errmsg'),
  success?: boolean(description='success', name='success'),
}

model UpdateOapiProcessPropertyResponse = {
  headers: map[string]string,
  body: UpdateOapiProcessPropertyResponseBody,
}

/**
 * Description: 修改用户指定审批流程模板的支付属性
 */
async function updateOapiProcessProperty(request: UpdateOapiProcessPropertyRequest): UpdateOapiProcessPropertyResponse {
  var runtime = new Util.RuntimeOptions{};
  return updateOapiProcessPropertyEx(request, runtime);
}

/**
 * Description: 修改用户指定审批流程模板的支付属性
 */
async function updateOapiProcessPropertyEx(request: UpdateOapiProcessPropertyRequest, runtime: Util.RuntimeOptions): UpdateOapiProcessPropertyResponse {
  Util.validateModel(request);
  var appParams = Util.stringifyMapValue(Util.toMap(request.params));
  return doRequestOApi('POST', '/topapi/process/property/update', request.headers, appParams, runtime);
}

model ListOapiAttendanceVacationQuotaParams = {
  leaveCode: string(description='假期类型唯一标识', name='leave_code'),
  opUserid: string(description='操作者ID', name='op_userid'),
  userids: [ string ](description='待查询的员工ID列表', maxItems=50, name='userids'),
  offset: int64(description='分页偏移(从0开始非负整数)', minimum=0, name='offset'),
  size: int64(description='分页偏移(正整数 最大50)', maximum=50, name='size'),
}

model ListOapiAttendanceVacationQuotaRequest = {
  headers?: map[string]string,
  params:ListOapiAttendanceVacationQuotaParams,
}

model ListOapiAttendanceVacationQuotaResponseBody = {
  result?: {
    hasMore?: boolean(description='是否存在更多记录', name='has_more'),
    leaveQuotas?: [
      {
        userid?: string(description='员工ID', name='userid'),
        leaveCode?: string(description='假期类型唯一标识', name='leave_code'),
        quotaCycle?: string(description='额度所对应的周期', name='quota_cycle'),
        quotaId?: string(description='配额唯一标记', name='quota_id'),
        startTime?: int64(description='额度有效期开始时间(毫秒级时间戳)', name='start_time'),
        endTime?: int64(description='额度有效期结束时间(毫秒级时间戳)', name='end_time'),
        quotaNumPerHour?: int64(description='单位以天计算的额度总数(假期类型按天计算该值不为空且按百分之一天折算 例如 1000=10天)', name='quota_num_per_hour'),
        quotaNumPerDay?: int64(description='单位以小时计算的额度总数(假期类型按小时计算该值不为空且按百分之一小时折算 例如 1000=10小时)', name='quota_num_per_day'),
        usedNumPerDay?: int64(description='单位以天计算的使用额度(假期类型按天计算该值不为空且按百分之一天折算 例如 100=1天)', name='used_num_per_day'),
        usedNumPerHour?: int64(description='单位以小时计算的使用额度(假期类型按小时计算该值不为空且按百分之一小时折算 例如 100=1小时)', name='used_num_per_hour'),
      }
    ](description='假期余额列表', name='leave_quotas'),
  }(description='结果值', name='result'),
  errcode?: int64(description='dingOpenErrcode', name='errcode'),
  errmsg?: string(description='errorMsg', name='errmsg'),
  success?: boolean(description='是否正确访问', name='success'),
}

model ListOapiAttendanceVacationQuotaResponse = {
  headers: map[string]string,
  body: ListOapiAttendanceVacationQuotaResponseBody,
}

/**
 * Description: 根据企业或员工分页获取假期余额信息 每次返回50条数据
 */
async function listOapiAttendanceVacationQuota(request: ListOapiAttendanceVacationQuotaRequest): ListOapiAttendanceVacationQuotaResponse {
  var runtime = new Util.RuntimeOptions{};
  return listOapiAttendanceVacationQuotaEx(request, runtime);
}

/**
 * Description: 根据企业或员工分页获取假期余额信息 每次返回50条数据
 */
async function listOapiAttendanceVacationQuotaEx(request: ListOapiAttendanceVacationQuotaRequest, runtime: Util.RuntimeOptions): ListOapiAttendanceVacationQuotaResponse {
  Util.validateModel(request);
  var appParams = Util.stringifyMapValue(Util.toMap(request.params));
  return doRequestOApi('POST', '/topapi/attendance/vacation/quota/list', request.headers, appParams, runtime);
}

model GetOapiChatbotPictureurlParams = {
  downloadCode: string(description='图片临时下载码', maxLength=4000, name='download_code'),
}

model GetOapiChatbotPictureurlRequest = {
  headers?: map[string]string,
  params:GetOapiChatbotPictureurlParams,
}

model GetOapiChatbotPictureurlResponseBody = {
  errmsg?: string(description='错误描述', name='errmsg'),
  errcode?: int64(description='错误码', name='errcode'),
  result?: string(description='图片地址', name='result'),
  success?: boolean(description='是否成功', name='success'),
}

model GetOapiChatbotPictureurlResponse = {
  headers: map[string]string,
  body: GetOapiChatbotPictureurlResponseBody,
}

/**
 * Description: 通过downloadCode获取下载url
 */
async function getOapiChatbotPictureurl(request: GetOapiChatbotPictureurlRequest): GetOapiChatbotPictureurlResponse {
  var runtime = new Util.RuntimeOptions{};
  return getOapiChatbotPictureurlEx(request, runtime);
}

/**
 * Description: 通过downloadCode获取下载url
 */
async function getOapiChatbotPictureurlEx(request: GetOapiChatbotPictureurlRequest, runtime: Util.RuntimeOptions): GetOapiChatbotPictureurlResponse {
  Util.validateModel(request);
  var appParams = Util.stringifyMapValue(Util.toMap(request.params));
  return doRequestOApi('POST', '/topapi/chatbot/pictureurl/get', request.headers, appParams, runtime);
}

model ListbyuseridOapiReportTemplateParams = {
  userid?: string(description='员工userId, 不传递表示获取所有日志模板', name='userid'),
  offset?: int64(description='分页游标，从0开始。根据返回结果里的next_cursor是否为空来判断是否还有下一页，且再次调用时offset设置成next_cursor的值', name='offset'),
  size?: int64(description='分页大小，最大可设置成100', name='size'),
}

model ListbyuseridOapiReportTemplateRequest = {
  headers?: map[string]string,
  params?:ListbyuseridOapiReportTemplateParams,
}

model ListbyuseridOapiReportTemplateResponseBody = {
  errcode?: int64(description='错误码', name='errcode'),
  errmsg?: string(description='错误信息', name='errmsg'),
  result?: {
    templateList?: [
      {
        name?: string(description='日志模板名称', name='name'),
        iconUrl?: string(description='模板图标url', name='icon_url'),
        reportCode?: string(description='模板唯一标识', name='report_code'),
        url?: string(description='模板的url', name='url'),
      }
    ](description='list', name='template_list'),
    nextCursor?: int64(description='下一次分页调用的offset值，当返回结果里没有nextCursor时，表示分页结束', name='next_cursor'),
  }(description='result', name='result'),
}

model ListbyuseridOapiReportTemplateResponse = {
  headers: map[string]string,
  body: ListbyuseridOapiReportTemplateResponseBody,
}

/**
 * Description: 根据用户userId获取当前企业下可见的日志模板列表
 */
async function listbyuseridOapiReportTemplate(request: ListbyuseridOapiReportTemplateRequest): ListbyuseridOapiReportTemplateResponse {
  var runtime = new Util.RuntimeOptions{};
  return listbyuseridOapiReportTemplateEx(request, runtime);
}

/**
 * Description: 根据用户userId获取当前企业下可见的日志模板列表
 */
async function listbyuseridOapiReportTemplateEx(request: ListbyuseridOapiReportTemplateRequest, runtime: Util.RuntimeOptions): ListbyuseridOapiReportTemplateResponse {
  Util.validateModel(request);
  var appParams = Util.stringifyMapValue(Util.toMap(request.params));
  return doRequestOApi('POST', '/topapi/report/template/listbyuserid', request.headers, appParams, runtime);
}

model TestOapiTestParams = {
  input?: string(description='1', name='input'),
}

model TestOapiTestRequest = {
  headers?: map[string]string,
  params?:TestOapiTestParams,
}

model TestOapiTestResponseBody = {
  errcode?: int64(description='errcode', name='errcode'),
  errmsg?: string(description='errmsg', name='errmsg'),
  result?: string(description='result', name='result'),
}

model TestOapiTestResponse = {
  headers: map[string]string,
  body: TestOapiTestResponseBody,
}

/**
 * Description: test
 */
async function testOapiTest(request: TestOapiTestRequest): TestOapiTestResponse {
  var runtime = new Util.RuntimeOptions{};
  return testOapiTestEx(request, runtime);
}

/**
 * Description: test
 */
async function testOapiTestEx(request: TestOapiTestRequest, runtime: Util.RuntimeOptions): TestOapiTestResponse {
  Util.validateModel(request);
  var appParams = Util.stringifyMapValue(Util.toMap(request.params));
  return doRequestOApi('GET,POST', '/test/test', request.headers, appParams, runtime);
}

model GetOapiAppstoreInternalOrderParams = {
  bizOrderId: int64(description='内购商品订单号', name='biz_order_id'),
}

model GetOapiAppstoreInternalOrderRequest = {
  headers?: map[string]string,
  params:GetOapiAppstoreInternalOrderParams,
}

model GetOapiAppstoreInternalOrderResponseBody = {
  result?: {
    createTimestamp?: int64(description='订单创建时间', name='create_timestamp'),
    paidTimestamp?: int64(description='订单支付时间', name='paid_timestamp'),
    quantity?: int64(description='订购数量，周期型商品此字段为空', name='quantity'),
    status?: int64(description='订单状态，0 - 订单关闭，3 - 订单支付，4 - 订单创建', name='status'),
    totalActualPayFee?: int64(description='实际支付总金额，单位为分(RMB)', name='total_actual_pay_fee'),
    itemCode?: string(description='内购商品规格码', name='item_code'),
    corpId?: string(description='购买商品的企业开放Id', name='corp_id'),
    bizOrderId?: int64(description='内购商品订单号', name='biz_order_id'),
    endTimestamp?: int64(description='订购的服务结束时间', name='end_timestamp'),
    startTimestamp?: int64(description='订购的服务开始时间', name='start_timestamp'),
    goodsCode?: string(description='内购商品码', name='goods_code'),
  }(description='订单信息', name='result'),
  errmsg?: string(description='服务调用成功', name='errmsg'),
  errcode?: int64(description='服务调用成功', name='errcode'),
}

model GetOapiAppstoreInternalOrderResponse = {
  headers: map[string]string,
  body: GetOapiAppstoreInternalOrderResponseBody,
}

/**
 * Description: 应用内购流程中，通过该接口查询内购订单信息
 */
async function getOapiAppstoreInternalOrder(request: GetOapiAppstoreInternalOrderRequest): GetOapiAppstoreInternalOrderResponse {
  var runtime = new Util.RuntimeOptions{};
  return getOapiAppstoreInternalOrderEx(request, runtime);
}

/**
 * Description: 应用内购流程中，通过该接口查询内购订单信息
 */
async function getOapiAppstoreInternalOrderEx(request: GetOapiAppstoreInternalOrderRequest, runtime: Util.RuntimeOptions): GetOapiAppstoreInternalOrderResponse {
  Util.validateModel(request);
  var appParams = Util.stringifyMapValue(Util.toMap(request.params));
  return doRequestOApi('POST', '/topapi/appstore/internal/order/get', request.headers, appParams, runtime);
}

model GetOapiAppstoreInternalSkupageParams = {
  goodsCode: string(description='内购商品码', name='goods_code'),
  itemCode?: string(description='内购商品规格码，如果设置了规格码，页面会默认选中该规格码', name='item_code'),
  callbackPage?: string(description='回调页面(进行URLEncode处理)，微应用为页面URL，E应用为页面路径地址', name='callback_page'),
  extendParam?: string(description='与callbackPage配合使用。当用户从SKU页面下单并支付成功后，会跳转回ISV页面，此时将此参数原样回传。主要用于用户页面引导等操作，不能作为权益开通凭证。', name='extend_param'),
}

model GetOapiAppstoreInternalSkupageRequest = {
  headers?: map[string]string,
  params:GetOapiAppstoreInternalSkupageParams,
}

model GetOapiAppstoreInternalSkupageResponseBody = {
  result?: string(description='内购商品SKU页面地址', name='result'),
  errmsg?: string(description='服务结果描述', name='errmsg'),
  errcode?: int64(description='服务结果码', name='errcode'),
}

model GetOapiAppstoreInternalSkupageResponse = {
  headers: map[string]string,
  body: GetOapiAppstoreInternalSkupageResponseBody,
}

/**
 * Description: 应用内购流程中，通过该接口获取内购商品SKU页面地址
 */
async function getOapiAppstoreInternalSkupage(request: GetOapiAppstoreInternalSkupageRequest): GetOapiAppstoreInternalSkupageResponse {
  var runtime = new Util.RuntimeOptions{};
  return getOapiAppstoreInternalSkupageEx(request, runtime);
}

/**
 * Description: 应用内购流程中，通过该接口获取内购商品SKU页面地址
 */
async function getOapiAppstoreInternalSkupageEx(request: GetOapiAppstoreInternalSkupageRequest, runtime: Util.RuntimeOptions): GetOapiAppstoreInternalSkupageResponse {
  Util.validateModel(request);
  var appParams = Util.stringifyMapValue(Util.toMap(request.params));
  return doRequestOApi('POST', '/topapi/appstore/internal/skupage/get', request.headers, appParams, runtime);
}

model ListOapiAppstoreInternalUnfinishedorderParams = {
  itemCode?: string(description='商品规格码', name='item_code'),
  page: int64(description='分页查询页码，其实页码为1', name='page'),
  pageSize: int64(description='分页查询每页大小，最大限制100', name='page_size'),
}

model ListOapiAppstoreInternalUnfinishedorderRequest = {
  headers?: map[string]string,
  params:ListOapiAppstoreInternalUnfinishedorderParams,
}

model ListOapiAppstoreInternalUnfinishedorderResponseBody = {
  result?: {
    total?: int64(description='总记录数', name='total'),
    items?: [
      {
        createTimestamp?: int64(description='订单创建时间戳', name='create_timestamp'),
        paidTimestamp?: int64(description='订单支付时间戳', name='paid_timestamp'),
        quantity?: int64(description='订购数量，周期型商品该字段为空', name='quantity'),
        status?: int64(description='订单状态，3 - 已支付状态', name='status'),
        totalActualPayFee?: int64(description='实际支付总金额，CNY(分)', name='total_actual_pay_fee'),
        itemCode?: string(description='内购商品规格码', name='item_code'),
        corpId?: string(description='购买商品的企业开放Id', name='corp_id'),
        bizOrderId?: int64(description='订单号', name='biz_order_id'),
        goodsCode?: string(description='商品码', name='goods_code'),
      }
    ](description='订单信息列表', name='items'),
  }(description='查询结果', name='result'),
  errcode?: int64(description='服务结果码', name='errcode'),
  errmsg?: string(description='服务结果描述', name='errmsg'),
}

model ListOapiAppstoreInternalUnfinishedorderResponse = {
  headers: map[string]string,
  body: ListOapiAppstoreInternalUnfinishedorderResponseBody,
}

/**
 * Description: 应用内购流程中，通过该接口获取ISV未处理完成的内购订单列表。
 */
async function listOapiAppstoreInternalUnfinishedorder(request: ListOapiAppstoreInternalUnfinishedorderRequest): ListOapiAppstoreInternalUnfinishedorderResponse {
  var runtime = new Util.RuntimeOptions{};
  return listOapiAppstoreInternalUnfinishedorderEx(request, runtime);
}

/**
 * Description: 应用内购流程中，通过该接口获取ISV未处理完成的内购订单列表。
 */
async function listOapiAppstoreInternalUnfinishedorderEx(request: ListOapiAppstoreInternalUnfinishedorderRequest, runtime: Util.RuntimeOptions): ListOapiAppstoreInternalUnfinishedorderResponse {
  Util.validateModel(request);
  var appParams = Util.stringifyMapValue(Util.toMap(request.params));
  return doRequestOApi('POST', '/topapi/appstore/internal/unfinishedorder/list', request.headers, appParams, runtime);
}

model SendOapiEduGroupMsgParams = {
  agentId: int64(description='订购此应用的企业标识', name='agent_id'),
  classId: int64(description='班级id', name='class_id'),
  userid?: string(description='发送消息人的员工id', name='userid'),
  bizId: string(description='发送此消息的唯一ID', name='biz_id'),
  replace?: string(description='根据消息模板传递待填充的内容，消息模板具体见场景说明。key/value值不能出现“:”和“,”字符，防止出现解析错误', name='replace'),
  templateCode: string(description='群发消息模板id', name='template_code'),
  receiveUseridList?: [ string ](description='群中哪些人接受此消息，不填默认全部', maxItems=20, name='receive_userid_list'),
  imageUrl?: string(description='消息卡片图片地址。由业务对接人员提供', name='image_url'),
}

model SendOapiEduGroupMsgRequest = {
  headers?: map[string]string,
  params:SendOapiEduGroupMsgParams,
}

model SendOapiEduGroupMsgResponseBody = {
  success?: boolean(description='是否发送成功', name='success'),
  errcode?: int64(description='错误码', name='errcode'),
  errmsg?: string(description='错误信息', name='errmsg'),
}

model SendOapiEduGroupMsgResponse = {
  headers: map[string]string,
  body: SendOapiEduGroupMsgResponseBody,
}

/**
 * Description: 场景化消息通道
 */
async function sendOapiEduGroupMsg(request: SendOapiEduGroupMsgRequest): SendOapiEduGroupMsgResponse {
  var runtime = new Util.RuntimeOptions{};
  return sendOapiEduGroupMsgEx(request, runtime);
}

/**
 * Description: 场景化消息通道
 */
async function sendOapiEduGroupMsgEx(request: SendOapiEduGroupMsgRequest, runtime: Util.RuntimeOptions): SendOapiEduGroupMsgResponse {
  Util.validateModel(request);
  var appParams = Util.stringifyMapValue(Util.toMap(request.params));
  return doRequestOApi('POST', '/topapi/edu/group/msg/send', request.headers, appParams, runtime);
}

model FinishOapiAppstoreInternalOrderParams = {
  bizOrderId: int64(description='内购订单号', name='biz_order_id'),
}

model FinishOapiAppstoreInternalOrderRequest = {
  headers?: map[string]string,
  params:FinishOapiAppstoreInternalOrderParams,
}

model FinishOapiAppstoreInternalOrderResponseBody = {
  errmsg?: string(description='服务结果描述', name='errmsg'),
  errcode?: int64(description='服务结果码', name='errcode'),
}

model FinishOapiAppstoreInternalOrderResponse = {
  headers: map[string]string,
  body: FinishOapiAppstoreInternalOrderResponseBody,
}

/**
 * Description: 应用内购流程中，通过该接口回传ISV完成订单处理的状态
 */
async function finishOapiAppstoreInternalOrder(request: FinishOapiAppstoreInternalOrderRequest): FinishOapiAppstoreInternalOrderResponse {
  var runtime = new Util.RuntimeOptions{};
  return finishOapiAppstoreInternalOrderEx(request, runtime);
}

/**
 * Description: 应用内购流程中，通过该接口回传ISV完成订单处理的状态
 */
async function finishOapiAppstoreInternalOrderEx(request: FinishOapiAppstoreInternalOrderRequest, runtime: Util.RuntimeOptions): FinishOapiAppstoreInternalOrderResponse {
  Util.validateModel(request);
  var appParams = Util.stringifyMapValue(Util.toMap(request.params));
  return doRequestOApi('POST', '/topapi/appstore/internal/order/finish', request.headers, appParams, runtime);
}

model ConsumeOapiAppstoreInternalOrderParams = {
  bizOrderId: int64(description='内购商品订单号', name='biz_order_id'),
  requestId: string(description='核销请求Id，由ISV生成，用于请求幂等', name='request_id'),
  quantity: int64(description='订购商品核销数量', name='quantity'),
  userid: string(description='员工在当前企业内的唯一标识，也称staffId', name='userid'),
}

model ConsumeOapiAppstoreInternalOrderRequest = {
  headers?: map[string]string,
  params:ConsumeOapiAppstoreInternalOrderParams,
}

model ConsumeOapiAppstoreInternalOrderResponseBody = {
  errmsg?: string(description='服务结果描述', name='errmsg'),
  errcode?: int64(description='服务结果码', name='errcode'),
}

model ConsumeOapiAppstoreInternalOrderResponse = {
  headers: map[string]string,
  body: ConsumeOapiAppstoreInternalOrderResponseBody,
}

/**
 * Description: 应用内购流程中，通过该接口对内购订单进行核销
 */
async function consumeOapiAppstoreInternalOrder(request: ConsumeOapiAppstoreInternalOrderRequest): ConsumeOapiAppstoreInternalOrderResponse {
  var runtime = new Util.RuntimeOptions{};
  return consumeOapiAppstoreInternalOrderEx(request, runtime);
}

/**
 * Description: 应用内购流程中，通过该接口对内购订单进行核销
 */
async function consumeOapiAppstoreInternalOrderEx(request: ConsumeOapiAppstoreInternalOrderRequest, runtime: Util.RuntimeOptions): ConsumeOapiAppstoreInternalOrderResponse {
  Util.validateModel(request);
  var appParams = Util.stringifyMapValue(Util.toMap(request.params));
  return doRequestOApi('POST', '/topapi/appstore/internal/order/consume', request.headers, appParams, runtime);
}

model DeleteOapiMicroappScopeParams = {
  agentid: int64(description='应用id', name='agentid'),
  useridList: [ string ](description='用户列表，逗号分割', maxItems=999, name='userid_list'),
}

model DeleteOapiMicroappScopeRequest = {
  headers?: map[string]string,
  params:DeleteOapiMicroappScopeParams,
}

model DeleteOapiMicroappScopeResponseBody = {
  errcode?: int64(description='错误码', name='errcode'),
  errmsg?: string(description='错误信息', name='errmsg'),
}

model DeleteOapiMicroappScopeResponse = {
  headers: map[string]string,
  body: DeleteOapiMicroappScopeResponseBody,
}

/**
 * Description: 删除用户可见范围
 */
async function deleteOapiMicroappScope(request: DeleteOapiMicroappScopeRequest): DeleteOapiMicroappScopeResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteOapiMicroappScopeEx(request, runtime);
}

/**
 * Description: 删除用户可见范围
 */
async function deleteOapiMicroappScopeEx(request: DeleteOapiMicroappScopeRequest, runtime: Util.RuntimeOptions): DeleteOapiMicroappScopeResponse {
  Util.validateModel(request);
  var appParams = Util.stringifyMapValue(Util.toMap(request.params));
  return doRequestOApi('POST', '/topapi/microapp/scope/delete', request.headers, appParams, runtime);
}

model AddOapiMicroappScopeParams = {
  agentid: int64(description='应用id', name='agentid'),
  useridList: [ string ](description='用户列表，逗号分割', maxItems=999, name='userid_list'),
}

model AddOapiMicroappScopeRequest = {
  headers?: map[string]string,
  params:AddOapiMicroappScopeParams,
}

model AddOapiMicroappScopeResponseBody = {
  errcode?: int64(description='错误码', name='errcode'),
  errmsg?: string(description='错误信息', name='errmsg'),
}

model AddOapiMicroappScopeResponse = {
  headers: map[string]string,
  body: AddOapiMicroappScopeResponseBody,
}

/**
 * Description: 新增用户到可见范围
 */
async function addOapiMicroappScope(request: AddOapiMicroappScopeRequest): AddOapiMicroappScopeResponse {
  var runtime = new Util.RuntimeOptions{};
  return addOapiMicroappScopeEx(request, runtime);
}

/**
 * Description: 新增用户到可见范围
 */
async function addOapiMicroappScopeEx(request: AddOapiMicroappScopeRequest, runtime: Util.RuntimeOptions): AddOapiMicroappScopeResponse {
  Util.validateModel(request);
  var appParams = Util.stringifyMapValue(Util.toMap(request.params));
  return doRequestOApi('POST', '/topapi/microapp/scope/add', request.headers, appParams, runtime);
}

model AddOapiConferenceParticipantParams = {
  conferenceId: string(description='会务id', name='conference_id'),
  userid: string(description='操作用户id', name='userid'),
  participantUseridList: [ string ](description='参会人id列表', maxItems=1000, name='participant_userid_list'),
}

model AddOapiConferenceParticipantRequest = {
  headers?: map[string]string,
  params:AddOapiConferenceParticipantParams,
}

model AddOapiConferenceParticipantResponseBody = {
  errmsg?: string(description='errorMsg', name='errmsg'),
  errcode?: int64(description='dingOpenErrcode', name='errcode'),
}

model AddOapiConferenceParticipantResponse = {
  headers: map[string]string,
  body: AddOapiConferenceParticipantResponseBody,
}

/**
 * Description: 钉钉智能会务项目-添加参会人
 */
async function addOapiConferenceParticipant(request: AddOapiConferenceParticipantRequest): AddOapiConferenceParticipantResponse {
  var runtime = new Util.RuntimeOptions{};
  return addOapiConferenceParticipantEx(request, runtime);
}

/**
 * Description: 钉钉智能会务项目-添加参会人
 */
async function addOapiConferenceParticipantEx(request: AddOapiConferenceParticipantRequest, runtime: Util.RuntimeOptions): AddOapiConferenceParticipantResponse {
  Util.validateModel(request);
  var appParams = Util.stringifyMapValue(Util.toMap(request.params));
  return doRequestOApi('POST', '/topapi/conference/participant/add', request.headers, appParams, runtime);
}

model DeleteOapiConferenceParticipantParams = {
  conferenceId: string(description='会务id', name='conference_id'),
  userid: string(description='操作用户id', name='userid'),
  participantUseridList: [ string ](description='参会人员列表', maxItems=1000, name='participant_userid_list'),
}

model DeleteOapiConferenceParticipantRequest = {
  headers?: map[string]string,
  params:DeleteOapiConferenceParticipantParams,
}

model DeleteOapiConferenceParticipantResponseBody = {
  errmsg?: string(description='错误描述', name='errmsg'),
  errcode?: int64(description='错误码', name='errcode'),
}

model DeleteOapiConferenceParticipantResponse = {
  headers: map[string]string,
  body: DeleteOapiConferenceParticipantResponseBody,
}

/**
 * Description: 钉钉智能会务，删除会务参会人
 */
async function deleteOapiConferenceParticipant(request: DeleteOapiConferenceParticipantRequest): DeleteOapiConferenceParticipantResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteOapiConferenceParticipantEx(request, runtime);
}

/**
 * Description: 钉钉智能会务，删除会务参会人
 */
async function deleteOapiConferenceParticipantEx(request: DeleteOapiConferenceParticipantRequest, runtime: Util.RuntimeOptions): DeleteOapiConferenceParticipantResponse {
  Util.validateModel(request);
  var appParams = Util.stringifyMapValue(Util.toMap(request.params));
  return doRequestOApi('POST', '/topapi/conference/participant/delete', request.headers, appParams, runtime);
}

model SyncOapiConferenceParticipantParams = {
  conferenceId: string(description='会务id', name='conference_id'),
  userid: string(description='操作用户id', name='userid'),
  batchId?: string(description='全量同步id，第一批上传时为空，后续批次需要带上', name='batch_id'),
  batchIndex: int64(description='标识批次，从1递增', name='batch_index'),
  isFinished: boolean(description='是否最后一批', name='is_finished'),
  participantUseridList: [ string ](description='参会人员id列表', maxItems=1000, name='participant_userid_list'),
}

model SyncOapiConferenceParticipantRequest = {
  headers?: map[string]string,
  params:SyncOapiConferenceParticipantParams,
}

model SyncOapiConferenceParticipantResponseBody = {
  batchId?: string(description='批次号，首次上传后生成，后续批次需要在参数中带上', name='batch_id'),
  errmsg?: string(description='错误描述', name='errmsg'),
  errcode?: int64(description='错误代码', name='errcode'),
}

model SyncOapiConferenceParticipantResponse = {
  headers: map[string]string,
  body: SyncOapiConferenceParticipantResponseBody,
}

/**
 * Description: 智能会务全量同步参会人
 */
async function syncOapiConferenceParticipant(request: SyncOapiConferenceParticipantRequest): SyncOapiConferenceParticipantResponse {
  var runtime = new Util.RuntimeOptions{};
  return syncOapiConferenceParticipantEx(request, runtime);
}

/**
 * Description: 智能会务全量同步参会人
 */
async function syncOapiConferenceParticipantEx(request: SyncOapiConferenceParticipantRequest, runtime: Util.RuntimeOptions): SyncOapiConferenceParticipantResponse {
  Util.validateModel(request);
  var appParams = Util.stringifyMapValue(Util.toMap(request.params));
  return doRequestOApi('POST', '/topapi/conference/participant/sync', request.headers, appParams, runtime);
}

model PublishOapiConferenceParams = {
  conferenceId: string(description='会务id', name='conference_id'),
  userid: string(description='操作用户id', name='userid'),
}

model PublishOapiConferenceRequest = {
  headers?: map[string]string,
  params:PublishOapiConferenceParams,
}

model PublishOapiConferenceResponseBody = {
  errmsg?: string(description='errorMsg', name='errmsg'),
  errcode?: int64(description='dingOpenErrcode', name='errcode'),
}

model PublishOapiConferenceResponse = {
  headers: map[string]string,
  body: PublishOapiConferenceResponseBody,
}

/**
 * Description: 钉钉智能会务，将会务信息发布到工作台，参会者可见
 */
async function publishOapiConference(request: PublishOapiConferenceRequest): PublishOapiConferenceResponse {
  var runtime = new Util.RuntimeOptions{};
  return publishOapiConferenceEx(request, runtime);
}

/**
 * Description: 钉钉智能会务，将会务信息发布到工作台，参会者可见
 */
async function publishOapiConferenceEx(request: PublishOapiConferenceRequest, runtime: Util.RuntimeOptions): PublishOapiConferenceResponse {
  Util.validateModel(request);
  var appParams = Util.stringifyMapValue(Util.toMap(request.params));
  return doRequestOApi('POST', '/topapi/conference/publish', request.headers, appParams, runtime);
}

model GetOapiConferenceParams = {
  conferenceId: string(description='会务Id', name='conference_id'),
}

model GetOapiConferenceRequest = {
  headers?: map[string]string,
  params:GetOapiConferenceParams,
}

model GetOapiConferenceResponseBody = {
  errcode?: int64(description='服务调用结果码', name='errcode'),
  errmsg?: string(description='服务调用结果码描述', name='errmsg'),
  result?: {
    endTime?: int64(description='会务结束时间，时间戳格式，单位为毫秒', name='end_time'),
    startTime?: int64(description='会务开始时间，时间戳格式，单位为毫秒', name='start_time'),
    content?: string(description='会务简介', name='content'),
    address?: string(description='会务地点', name='address'),
    poi?: string(description='高德经纬度，格式:longitude,latitude', name='poi'),
    arrangeUseridList?: [ string ](description='会务筹备者userid列表', name='arrange_userid_list'),
    adminUserid?: string(description='会务管理员userid', name='admin_userid'),
    createUserid?: string(description='会务创建者userid', name='create_userid'),
    status?: int64(description='会务状态，2 - 筹备中，3 - 已发布，10 - 已结束', name='status'),
    topic?: string(description='会务主题', name='topic'),
    type?: int64(description='会务类型，1 - 年会，2 - 沙龙', name='type'),
    corpId?: string(description='举办会务的企业Id', name='corp_id'),
    conferenceId?: string(description='会务Id', name='conference_id'),
    version?: int64(description='会务信息版本号，信息更新时进行递增', name='version'),
    modifiedUserid?: string(description='最近更新会务信息的userid', name='modified_userid'),
    topicPicUrl?: string(description='会务主题图片地址', name='topic_pic_url'),
  }(description='服务调用结果对象', name='result'),
}

model GetOapiConferenceResponse = {
  headers: map[string]string,
  body: GetOapiConferenceResponseBody,
}

/**
 * Description: 钉钉智能会务，提供给ISV获取会务基础信息
 */
async function getOapiConference(request: GetOapiConferenceRequest): GetOapiConferenceResponse {
  var runtime = new Util.RuntimeOptions{};
  return getOapiConferenceEx(request, runtime);
}

/**
 * Description: 钉钉智能会务，提供给ISV获取会务基础信息
 */
async function getOapiConferenceEx(request: GetOapiConferenceRequest, runtime: Util.RuntimeOptions): GetOapiConferenceResponse {
  Util.validateModel(request);
  var appParams = Util.stringifyMapValue(Util.toMap(request.params));
  return doRequestOApi('POST', '/topapi/conference/get', request.headers, appParams, runtime);
}

model UnpublishOapiConferenceParams = {
  conferenceId: string(description='会务id', name='conference_id'),
  userid: string(description='操作用户id', name='userid'),
}

model UnpublishOapiConferenceRequest = {
  headers?: map[string]string,
  params:UnpublishOapiConferenceParams,
}

model UnpublishOapiConferenceResponseBody = {
  errcode?: int64(description='dingOpenErrcode', name='errcode'),
  errmsg?: string(description='errorMsg', name='errmsg'),
}

model UnpublishOapiConferenceResponse = {
  headers: map[string]string,
  body: UnpublishOapiConferenceResponseBody,
}

/**
 * Description: 钉钉智能会务，将会务信息从工作台tag中撤销，参会者不可见
 */
async function unpublishOapiConference(request: UnpublishOapiConferenceRequest): UnpublishOapiConferenceResponse {
  var runtime = new Util.RuntimeOptions{};
  return unpublishOapiConferenceEx(request, runtime);
}

/**
 * Description: 钉钉智能会务，将会务信息从工作台tag中撤销，参会者不可见
 */
async function unpublishOapiConferenceEx(request: UnpublishOapiConferenceRequest, runtime: Util.RuntimeOptions): UnpublishOapiConferenceResponse {
  Util.validateModel(request);
  var appParams = Util.stringifyMapValue(Util.toMap(request.params));
  return doRequestOApi('POST', '/topapi/conference/unpublish', request.headers, appParams, runtime);
}

model CreateCorpCalendarParams = {
  createVo?: {
    summary: string(description='主题', maxLength=5000, name='summary'),
    reminder?: {
      minutes?: int64(description='距开始时多久进行提醒(单位:分钟)', maximum=2880, name='minutes'),
      remindType?: string(description='提醒类型:app-应用内;', name='remind_type'),
    }(description='事项开始前提醒', name='reminder'),
    location?: string(description='地点', maxLength=512, name='location'),
    receiverUserids: [ string ](description='接收者工号', maxItems=600, name='receiver_userids'),
    endTime: {
      unixTimestamp: int64(description='结束的unix时间戳(单位:毫秒)', name='unix_timestamp'),
      timezone?: string(description='时区', name='timezone'),
    }(description='结束时间', name='end_time'),
    calendarType: string(description='日程类型:task-任务;meeting-会议;notification-提醒', name='calendar_type'),
    startTime: {
      unixTimestamp: int64(description='开始的unix时间戳(单位:毫秒)', name='unix_timestamp'),
      timezone?: string(description='时区', name='timezone'),
    }(description='开始时间', name='start_time'),
    source?: {
      title: string(description='日程来源', name='title'),
      url: string(description='点击日程跳转目标地址', name='url'),
    }(description='显示日程来源', name='source'),
    description?: string(description='备注', maxLength=1024, name='description'),
    creatorUserid: string(description='创建者工号', name='creator_userid'),
    uuid: string(description='请求的唯一标识, 保证请求唯一性', name='uuid'),
    bizId: string(description='业务方自己的主键', name='biz_id'),
  }(description='创建日程实体', name='create_vo'),
}

model CreateCorpCalendarRequest = {
  headers?: map[string]string,
  params?:CreateCorpCalendarParams,
}

model CreateCorpCalendarResponseBody = {
  result?: {
    result?: {
      dingtalkCalendarId?: string(description='dingtalkCalendarId', name='dingtalk_calendar_id'),
      invalidUserids?: [ string ](description='invalidUser', name='invalid_userids'),
    }(description='result', name='result'),
    dingOpenErrcode?: int64(description='dingOpenErrcode', name='ding_open_errcode'),
    errorMsg?: string(description='errorMsg', name='error_msg'),
    success?: boolean(description='创建结果', name='success'),
  }(description='result', name='result'),
}

model CreateCorpCalendarResponse = {
  headers: map[string]string,
  body: CreateCorpCalendarResponseBody,
}

/**
 * Description: 通过此接口可以把企业员工的待办事项导入到钉钉日历并在钉钉日历中展示, 支持任务, 会议,审批,普通日程等.
该接口处于内部灰度阶段, 申请使用请邮件联系:wusuan.yby@alibaba-inc.com
 */
async function createCorpCalendar(request: CreateCorpCalendarRequest): CreateCorpCalendarResponse {
  var runtime = new Util.RuntimeOptions{};
  return createCorpCalendarEx(request, runtime);
}

/**
 * Description: 通过此接口可以把企业员工的待办事项导入到钉钉日历并在钉钉日历中展示, 支持任务, 会议,审批,普通日程等.
该接口处于内部灰度阶段, 申请使用请邮件联系:wusuan.yby@alibaba-inc.com
 */
async function createCorpCalendarEx(request: CreateCorpCalendarRequest, runtime: Util.RuntimeOptions): CreateCorpCalendarResponse {
  Util.validateModel(request);
  var appParams = Util.stringifyMapValue(Util.toMap(request.params));
  return doRequest('dingtalk.corp.calendar.create', 'POST', '/router/rest', request.headers, appParams, runtime);
}

model ListsimpleOapiRhinoMosLayoutOperationdefsParams = {
  operationUids: [ int64 ](description='工序唯一ID', maxItems=2000, name='operation_uids'),
  tenantId: string(description='租户ID', name='tenant_id'),
  userid?: string(description='用户ID', name='userid'),
  orderId?: int64(description='订单ID', name='order_id'),
}

model ListsimpleOapiRhinoMosLayoutOperationdefsRequest = {
  headers?: map[string]string,
  params:ListsimpleOapiRhinoMosLayoutOperationdefsParams,
}

model ListsimpleOapiRhinoMosLayoutOperationdefsResponseBody = {
  errmsg?: string(description='错误提示', name='errmsg'),
  result?: [
    {
      applicableSizeCode?: string(description='适用尺码', name='applicable_size_code'),
      autoSchedule?: boolean(description='是否需要调度', name='auto_schedule'),
      enterCondition?: string(description='进入条件：ANY_MATCH/ALL_MATCH', name='enter_condition'),
      flowId?: int64(description='PaaSflowID（只用于返回，保存会自增）', name='flow_id'),
      flowVersion?: int64(description='工序定义版本', name='flow_version'),
      name?: string(description='工序名称', name='name'),
      operationExternalId?: string(description='工序外部ID', name='operation_external_id'),
      operationType?: string(description='工序类型：ASSIST/QUALITY_INSPECT/TECHNOLOGY', name='operation_type'),
      operationUid?: int64(description='工序唯一ID', name='operation_uid'),
      processTypeCode?: string(description='工序能力类型：SJ/PP/TR等', name='process_type_code'),
      sectionCode?: string(description='工段CODE：F-SL/C..', name='section_code'),
      sectionName?: string(description='工段名称：缝制-碎料/裁床..', name='section_name'),
      skip?: boolean(description='是否跳过(不生产)', name='skip'),
      stdCost?: string(description='标准工时/秒', name='std_cost'),
      bizCode?: string(description='业务编码', name='biz_code'),
      bizSource?: string(description='业务来源', name='biz_source'),
      execSystem?: string(description='执行系统', name='exec_system'),
    }
  ](description='工序定义图', name='result'),
  errcode?: int64(description='错误码', name='errcode'),
}

model ListsimpleOapiRhinoMosLayoutOperationdefsResponse = {
  headers: map[string]string,
  body: ListsimpleOapiRhinoMosLayoutOperationdefsResponseBody,
}

/**
 * Description: 批量获取最后版本工序精简信息
 */
async function listsimpleOapiRhinoMosLayoutOperationdefs(request: ListsimpleOapiRhinoMosLayoutOperationdefsRequest): ListsimpleOapiRhinoMosLayoutOperationdefsResponse {
  var runtime = new Util.RuntimeOptions{};
  return listsimpleOapiRhinoMosLayoutOperationdefsEx(request, runtime);
}

/**
 * Description: 批量获取最后版本工序精简信息
 */
async function listsimpleOapiRhinoMosLayoutOperationdefsEx(request: ListsimpleOapiRhinoMosLayoutOperationdefsRequest, runtime: Util.RuntimeOptions): ListsimpleOapiRhinoMosLayoutOperationdefsResponse {
  Util.validateModel(request);
  var appParams = Util.stringifyMapValue(Util.toMap(request.params));
  return doRequestOApi('POST', '/topapi/rhino/mos/layout/operationdefs/listsimple', request.headers, appParams, runtime);
}

model CreateCorpDingParams = {
  creatorUserid: string(description='发送者工号', name='creator_userid'),
  receiverUserids: [ string ](description='接收者工号列表', maxItems=20, name='receiver_userids'),
  remindType: int64(description='提醒类型:1-应用内;2-短信', name='remind_type'),
  remindTime: int64(description='发送时间(单位:毫秒)', name='remind_time'),
  textContent: string(description='通知内容', maxLength=5000, name='text_content'),
  attachment?: {
    fileId?: string(description='上传DING盘后的文件ID', name='file_id'),
    fileSize?: int64(description='文件大小(单位:Byte, 最大2G)', maximum=2147483648, name='file_size'),
    linkPicUrl?: string(description='链接缩略图', name='link_pic_url'),
    detailType?: string(description='文件后缀, 用于展示文件对应图标', name='detail_type'),
    linkText?: string(description='链接摘要', maxLength=5000, name='link_text'),
    linkUrl?: string(description='链接URL', name='link_url'),
    fileName?: string(description='文件名', name='file_name'),
    linkTitle?: string(description='链接标题', maxLength=200, name='link_title'),
    type?: string(description='附件类型:img-图片,link-链接,file-文件', name='type'),
    fileSpaceId?: string(description='上传DING盘后的SpaceId', name='file_space_id'),
  }(description='附件内容', name='attachment'),
}

model CreateCorpDingRequest = {
  headers?: map[string]string,
  params:CreateCorpDingParams,
}

model CreateCorpDingResponseBody = {
  result?: {
    result?: {
      openDingId?: string(description='openDingId', name='open_ding_id'),
      invalidUsers?: [ string ](description='invalidUser', name='invalid_users'),
    }(description='返回结果', name='result'),
    dingOpenErrcode?: int64(description='错码码', name='ding_open_errcode'),
    errorMsg?: string(description='失败原因', name='error_msg'),
    success?: boolean(description='调用结果', name='success'),
  }(description='result', name='result'),
}

model CreateCorpDingResponse = {
  headers: map[string]string,
  body: CreateCorpDingResponseBody,
}

/**
 * Description: 通过此接口发DING通知给企业内部员工, 支持短信DING和应用内DING. 
该接口正在灰度内测中, 需要申请使用权限请联系: wusuan.yby@alibaba-inc.com
 */
async function createCorpDing(request: CreateCorpDingRequest): CreateCorpDingResponse {
  var runtime = new Util.RuntimeOptions{};
  return createCorpDingEx(request, runtime);
}

/**
 * Description: 通过此接口发DING通知给企业内部员工, 支持短信DING和应用内DING. 
该接口正在灰度内测中, 需要申请使用权限请联系: wusuan.yby@alibaba-inc.com
 */
async function createCorpDingEx(request: CreateCorpDingRequest, runtime: Util.RuntimeOptions): CreateCorpDingResponse {
  Util.validateModel(request);
  var appParams = Util.stringifyMapValue(Util.toMap(request.params));
  return doRequest('dingtalk.corp.ding.create', 'POST', '/router/rest', request.headers, appParams, runtime);
}

model SectionfirstOapiRhinoMosLayoutOperationdefsParams = {
  flowVersion?: int64(description='版本：如果为空，查生效版本；不为空，查指定版本', name='flow_version'),
  needAssignInfo: boolean(description='是否需要分配信息', name='need_assign_info'),
  orderId: int64(description='订单ID', name='order_id'),
  tenantId: string(description='租户ID', name='tenant_id'),
  tmpSave?: boolean(description='查询暂存版本', name='tmp_save'),
  sectionCode: string(description='工段编码', name='section_code'),
  userid?: string(description='订单ID', name='userid'),
}

model SectionfirstOapiRhinoMosLayoutOperationdefsRequest = {
  headers?: map[string]string,
  params:SectionfirstOapiRhinoMosLayoutOperationdefsParams,
}

model SectionfirstOapiRhinoMosLayoutOperationdefsResponseBody = {
  errmsg?: string(description='错误提示', name='errmsg'),
  result?: [
    {
      applicableSizeCode?: string(description='适用尺码', name='applicable_size_code'),
      autoSchedule?: boolean(description='是否需要调度', name='auto_schedule'),
      enterCondition?: string(description='进入条件：ANY_MATCH/ALL_MATCH', name='enter_condition'),
      flowId?: int64(description='PaaSflowID（只用于返回，保存会自增）', name='flow_id'),
      flowVersion?: int64(description='工序定义版本', name='flow_version'),
      name?: string(description='工序名称', name='name'),
      nextOperationExternalIds?: [ string ](description='后续工序外部ID列表', name='next_operation_external_ids'),
      nextOperationUids?: [ int64 ](description='后续工序唯一ID列表', name='next_operation_uids'),
      operationExecutorAssigns?: [
        {
          executorId?: string(description='工序执行器ID', name='executor_id'),
          orderNum?: int64(description='排序值', name='order_num'),
        }
      ](description='工序执行器分配', name='operation_executor_assigns'),
      operationExternalId?: string(description='工序外部ID', name='operation_external_id'),
      operationType?: string(description='工序类型：ASSIST/QUALITY_INSPECT/TECHNOLOGY', name='operation_type'),
      operationUid?: int64(description='工序唯一ID', name='operation_uid'),
      processTypeCode?: string(description='工序能力类型：SJ/PP/TR等', name='process_type_code'),
      sectionCode?: string(description='工段CODE：F-SL/C..', name='section_code'),
      sectionName?: string(description='工段名称：缝制-碎料/裁床..', name='section_name'),
      skip?: boolean(description='是否跳过(不生产)', name='skip'),
      stdCost?: string(description='标准工时/秒', name='std_cost'),
      workUnits?: [
        {
          deviceAssigns?: [
            {
              deviceModelId?: string(description='设备模型ID', name='device_model_id'),
              deviceModelName?: string(description='设备模型名称', name='device_model_name'),
              deviceModelVersion?: string(description='设备模型版本', name='device_model_version'),
              deviceId?: int64(description='设备ID', name='device_id'),
            }
          ](description='设备分配列表', name='device_assigns'),
          workerAssigns?: [
            {
              name?: string(description='姓名', name='name'),
              workNo?: string(description='工号', name='work_no'),
            }
          ](description='人员分配列表', name='worker_assigns'),
          workstationAssigns?: [
            {
              workstationCode?: string(description='站位编码', name='workstation_code'),
            }
          ](description='站位分配', name='workstation_assigns'),
        }
      ](description='分配单元列表', name='work_units'),
      bizSource?: string(description='业务来源', name='biz_source'),
      bizCode?: string(description='业务编码', name='biz_code'),
      execSystem?: string(description='执行系统', name='exec_system'),
    }
  ](description='工序定义图', name='result'),
  errcode?: int64(description='错误码', name='errcode'),
}

model SectionfirstOapiRhinoMosLayoutOperationdefsResponse = {
  headers: map[string]string,
  body: SectionfirstOapiRhinoMosLayoutOperationdefsResponseBody,
}

/**
 * Description: 查询工段最前工序定义列表
 */
async function sectionfirstOapiRhinoMosLayoutOperationdefs(request: SectionfirstOapiRhinoMosLayoutOperationdefsRequest): SectionfirstOapiRhinoMosLayoutOperationdefsResponse {
  var runtime = new Util.RuntimeOptions{};
  return sectionfirstOapiRhinoMosLayoutOperationdefsEx(request, runtime);
}

/**
 * Description: 查询工段最前工序定义列表
 */
async function sectionfirstOapiRhinoMosLayoutOperationdefsEx(request: SectionfirstOapiRhinoMosLayoutOperationdefsRequest, runtime: Util.RuntimeOptions): SectionfirstOapiRhinoMosLayoutOperationdefsResponse {
  Util.validateModel(request);
  var appParams = Util.stringifyMapValue(Util.toMap(request.params));
  return doRequestOApi('POST', '/topapi/rhino/mos/layout/operationdefs/sectionfirst', request.headers, appParams, runtime);
}

model FinishOapiRhinoMosExecPerformParams = {
  deviceIds?: [ int64 ](description='工序执行设备列表', maxItems=20, name='device_ids'),
  operationPerformRecordIds: [ int64 ](description='工序执行记录ID列表', maxItems=500, name='operation_perform_record_ids'),
  tenantId: string(description='租户ID', name='tenant_id'),
  workNos?: [ string ](description='工序执行员工列表', maxItems=20, name='work_nos'),
  userid?: string(description='系统参数', name='userid'),
  processCostTime?: string(description='执行耗时', name='process_cost_time'),
  orderId?: int64(description='订单ID', name='order_id'),
}

model FinishOapiRhinoMosExecPerformRequest = {
  headers?: map[string]string,
  params:FinishOapiRhinoMosExecPerformParams,
}

model FinishOapiRhinoMosExecPerformResponseBody = {
  errmsg?: string(description='错误信息', name='errmsg'),
  model?: boolean(description='操作结果', name='model'),
  success?: boolean(description='是否成功', name='success'),
  errcode?: int64(description='错误码', name='errcode'),
}

model FinishOapiRhinoMosExecPerformResponse = {
  headers: map[string]string,
  body: FinishOapiRhinoMosExecPerformResponseBody,
}

/**
 * Description: 完成工序执行
 */
async function finishOapiRhinoMosExecPerform(request: FinishOapiRhinoMosExecPerformRequest): FinishOapiRhinoMosExecPerformResponse {
  var runtime = new Util.RuntimeOptions{};
  return finishOapiRhinoMosExecPerformEx(request, runtime);
}

/**
 * Description: 完成工序执行
 */
async function finishOapiRhinoMosExecPerformEx(request: FinishOapiRhinoMosExecPerformRequest, runtime: Util.RuntimeOptions): FinishOapiRhinoMosExecPerformResponse {
  Util.validateModel(request);
  var appParams = Util.stringifyMapValue(Util.toMap(request.params));
  return doRequestOApi('POST', '/topapi/rhino/mos/exec/perform/finish', request.headers, appParams, runtime);
}

model InactiveOapiRhinoMosExecPerformParams = {
  tenantId: string(description='租户ID', name='tenant_id'),
  ids: [ int64 ](description='工序执行ID列表', maxItems=500, name='ids'),
  userid?: string(description='业务参数[这里先预留],这里是用户ID,比如钉钉用户ID', name='userid'),
  orderId?: int64(description='订单ID', name='order_id'),
}

model InactiveOapiRhinoMosExecPerformRequest = {
  headers?: map[string]string,
  params:InactiveOapiRhinoMosExecPerformParams,
}

model InactiveOapiRhinoMosExecPerformResponseBody = {
  errmsg?: string(description='错误信息', name='errmsg'),
  model?: boolean(description='操作结果', name='model'),
  success?: boolean(description='是否成功', name='success'),
  errcode?: int64(description='错误码', name='errcode'),
}

model InactiveOapiRhinoMosExecPerformResponse = {
  headers: map[string]string,
  body: InactiveOapiRhinoMosExecPerformResponseBody,
}

/**
 * Description: 失效工序执行
 */
async function inactiveOapiRhinoMosExecPerform(request: InactiveOapiRhinoMosExecPerformRequest): InactiveOapiRhinoMosExecPerformResponse {
  var runtime = new Util.RuntimeOptions{};
  return inactiveOapiRhinoMosExecPerformEx(request, runtime);
}

/**
 * Description: 失效工序执行
 */
async function inactiveOapiRhinoMosExecPerformEx(request: InactiveOapiRhinoMosExecPerformRequest, runtime: Util.RuntimeOptions): InactiveOapiRhinoMosExecPerformResponse {
  Util.validateModel(request);
  var appParams = Util.stringifyMapValue(Util.toMap(request.params));
  return doRequestOApi('POST', '/topapi/rhino/mos/exec/perform/inactive', request.headers, appParams, runtime);
}

model SynccreateOapiRhinoMosExecClothesParams = {
  additionalOperations?: [
    {
      deviceIds?: [ int64 ](description='设备ID列表', maxItems=20, name='device_ids'),
      flowVersion: int64(description='排位布局版本', name='flow_version'),
      operationType: string(description='工序类型', name='operation_type'),
      operationUid: int64(description='工序ID', name='operation_uid'),
      performStatus: string(description='工序执行状态', name='perform_status'),
      priority: int64(description='优先级', name='priority'),
      processTypeCode?: string(description='工序能力类型', name='process_type_code'),
      sectionCode?: string(description='工段', name='section_code'),
      workNos?: [ string ](description='执行人', maxItems=20, name='work_nos'),
      workstationCode?: string(description='工位', name='workstation_code'),
      processEndTime?: string(description='工序执行完成时间', pattern='\\\\d{4}[-]\\\\d{1,2}[-]\\\\d{1,2}[T]\\\\d{2}:\\\\d{2}:\\\\d{2}[Z]', name='process_end_time'),
      processStartTime?: string(description='工序执行开始时间', pattern='\\\\d{4}[-]\\\\d{1,2}[-]\\\\d{1,2}[T]\\\\d{2}:\\\\d{2}:\\\\d{2}[Z]', name='process_start_time'),
    }
  ](description='工序信息', maxItems=500, name='additional_operations'),
  autoStart?: boolean(description='衣服状态是否自动开启', name='auto_start'),
  entityType: string(description='实体类型', name='entity_type'),
  orderId: int64(description='订单ID', name='order_id'),
  source: {
    sourceId: string(description='来源ID', name='source_id'),
    sourceType: string(description='来源类型', name='source_type'),
  }(description='来源', name='source'),
  tenantId?: string(description='租户ID', name='tenant_id'),
  userid?: string(description='业务参数[这里先预留],这里是用户ID,比如钉钉用户ID', name='userid'),
  clothes?: [
    {
      colorCode?: string(description='颜色code', name='color_code'),
      colorName?: string(description='颜色名', name='color_name'),
      sizeCode: string(description='尺码code', name='size_code'),
      sizeName?: string(description='尺码名称', name='size_name'),
      count?: int64(description='数量', name='count'),
      finishTime?: string(description='衣服完成时间', pattern='\\\\d{4}[-]\\\\d{1,2}[-]\\\\d{1,2}[T]\\\\d{2}:\\\\d{2}:\\\\d{2}[Z]', name='finish_time'),
      startTime?: string(description='衣服开始时间', pattern='\\\\d{4}[-]\\\\d{1,2}[-]\\\\d{1,2}[T]\\\\d{2}:\\\\d{2}:\\\\d{2}[Z]', name='start_time'),
    }
  ](description='衣服详情', maxItems=20, name='clothes'),
  bizType?: string(description='业务类型', name='biz_type'),
}

model SynccreateOapiRhinoMosExecClothesRequest = {
  headers?: map[string]string,
  params:SynccreateOapiRhinoMosExecClothesParams,
}

model SynccreateOapiRhinoMosExecClothesResponseBody = {
  errmsg?: string(description='错误信息', name='errmsg'),
  model?: [ int64 ](description='衣服ID列表', name='model'),
  success?: boolean(description='是否成功', name='success'),
  errcode?: int64(description='钉钉错误码', name='errcode'),
}

model SynccreateOapiRhinoMosExecClothesResponse = {
  headers: map[string]string,
  body: SynccreateOapiRhinoMosExecClothesResponseBody,
}

/**
 * Description: 通过衣服详情，同步批量创建衣服实体
 */
async function synccreateOapiRhinoMosExecClothes(request: SynccreateOapiRhinoMosExecClothesRequest): SynccreateOapiRhinoMosExecClothesResponse {
  var runtime = new Util.RuntimeOptions{};
  return synccreateOapiRhinoMosExecClothesEx(request, runtime);
}

/**
 * Description: 通过衣服详情，同步批量创建衣服实体
 */
async function synccreateOapiRhinoMosExecClothesEx(request: SynccreateOapiRhinoMosExecClothesRequest, runtime: Util.RuntimeOptions): SynccreateOapiRhinoMosExecClothesResponse {
  Util.validateModel(request);
  var appParams = Util.stringifyMapValue(Util.toMap(request.params));
  return doRequestOApi('POST', '/topapi/rhino/mos/exec/clothes/synccreate', request.headers, appParams, runtime);
}

model ListCorpDingReceiverstatusParams = {
  dingId: string(description='dingid', name='ding_id'),
  pageSize: int64(description='每页显示数量，最大值50', maximum=50, name='page_size'),
  pageNo: int64(description='分页页码，从1开始', name='page_no'),
  confirmedStatus?: int64(description='确认状态，三种情况：不传表示查所有；传0表示查未确认状态；传1表示查已经确认状态；', name='confirmed_status'),
}

model ListCorpDingReceiverstatusRequest = {
  headers?: map[string]string,
  params:ListCorpDingReceiverstatusParams,
}

model ListCorpDingReceiverstatusResponseBody = {
  result?: {
    success?: boolean(description='接口调用是否成功', name='success'),
    dingOpenErrcode?: int64(description='错误码', name='ding_open_errcode'),
    errorMsg?: string(description='错误信息', name='error_msg'),
    resultList?: [
      {
        confirmedStatus?: int64(description='确认状态。0-未确认；1-已确认；', name='confirmed_status'),
        dingId?: string(description='dingId', name='ding_id'),
        confirmedTime?: int64(description='确认时间', name='confirmed_time'),
        userid?: string(description='接收者id', name='userid'),
      }
    ](description='接收者状态列表，当这里返回为null表示分页已经结束', name='result_list'),
  }(description='返回的根对象', name='result'),
}

model ListCorpDingReceiverstatusResponse = {
  headers: map[string]string,
  body: ListCorpDingReceiverstatusResponseBody,
}

/**
 * Description: ding接收者状态列表
 */
async function listCorpDingReceiverstatus(request: ListCorpDingReceiverstatusRequest): ListCorpDingReceiverstatusResponse {
  var runtime = new Util.RuntimeOptions{};
  return listCorpDingReceiverstatusEx(request, runtime);
}

/**
 * Description: ding接收者状态列表
 */
async function listCorpDingReceiverstatusEx(request: ListCorpDingReceiverstatusRequest, runtime: Util.RuntimeOptions): ListCorpDingReceiverstatusResponse {
  Util.validateModel(request);
  var appParams = Util.stringifyMapValue(Util.toMap(request.params));
  return doRequest('dingtalk.corp.ding.receiverstatus.list', 'POST', '/router/rest', request.headers, appParams, runtime);
}

model UpdateOapiAttendanceVacationQuotaParams = {
  leaveQuotas: [
    {
      userid: string(description='员工ID', name='userid'),
      endTime?: int64(description='额度有效期结束时间(毫秒级时间戳)', name='end_time'),
      startTime?: int64(description='额度有效期开始时间(毫秒级时间戳)', name='start_time'),
      leaveCode: string(description='假期类型唯一标识', name='leave_code'),
      reason?: string(description='操作原因', name='reason'),
      quotaNumPerDay?: int64(description='单位以天计算的额度总数(假期类型按天计算该值不为空且按百分之一天折算 例如 100=1天)', name='quota_num_per_day'),
      quotaNumPerHour?: int64(description='单位以小时计算的额度总数(假期类型按小时计算该值不为空且按百分之一小时折算 例如 100=1小时)', name='quota_num_per_hour'),
      quotaCycle?: string(description='额度所对应的周期(除了假期类型为调休的时候可以为空之外 其他情况均不能为空 且格式必须满足"yyyy")', name='quota_cycle'),
    }
  ](description='待更新的假期余额记录', maxItems=100, name='leave_quotas'),
  opUserid: string(description='操作者ID', name='op_userid'),
}

model UpdateOapiAttendanceVacationQuotaRequest = {
  headers?: map[string]string,
  params:UpdateOapiAttendanceVacationQuotaParams,
}

model UpdateOapiAttendanceVacationQuotaResponseBody = {
  result?: [
    {
      reason?: string(description='失败原因', name='reason'),
      quota?: {
        leaveCode?: string(description='假期类型唯一标识', name='leave_code'),
        userid?: string(description='员工ID', name='userid'),
        quotaCycle?: string(description='额度所对应的周期(除了假期类型为调休的时候可以为空之外 其他情况均不能为空 且格式必须满足"yyyy")', name='quota_cycle'),
      }(description='失败记录', name='quota'),
    }
  ](description='结果值', name='result'),
  errcode?: int64(description='dingOpenErrcode', name='errcode'),
  errmsg?: string(description='errorMsg', name='errmsg'),
  success?: boolean(description='是否正确访问', name='success'),
}

model UpdateOapiAttendanceVacationQuotaResponse = {
  headers: map[string]string,
  body: UpdateOapiAttendanceVacationQuotaResponseBody,
}

/**
 * Description: 企业批量更新假期余额信息
 */
async function updateOapiAttendanceVacationQuota(request: UpdateOapiAttendanceVacationQuotaRequest): UpdateOapiAttendanceVacationQuotaResponse {
  var runtime = new Util.RuntimeOptions{};
  return updateOapiAttendanceVacationQuotaEx(request, runtime);
}

/**
 * Description: 企业批量更新假期余额信息
 */
async function updateOapiAttendanceVacationQuotaEx(request: UpdateOapiAttendanceVacationQuotaRequest, runtime: Util.RuntimeOptions): UpdateOapiAttendanceVacationQuotaResponse {
  Util.validateModel(request);
  var appParams = Util.stringifyMapValue(Util.toMap(request.params));
  return doRequestOApi('POST', '/topapi/attendance/vacation/quota/update', request.headers, appParams, runtime);
}

model CreateOapiRhinoMosExecPerformParams = {
  operations: [
    {
      context?: string(description='执行上下文', name='context'),
      deviceIds?: [ int64 ](description='设备ID列表', maxItems=20, name='device_ids'),
      entityId: int64(description='实体ID', name='entity_id'),
      entityType: string(description='实体类型', name='entity_type'),
      flowVersion: int64(description='排位布局版本', name='flow_version'),
      operationType: string(description='工序类型', name='operation_type'),
      operationUid: int64(description='工序ID', name='operation_uid'),
      orderId: int64(description='订单ID', name='order_id'),
      performStatus?: string(description='执行状态', name='perform_status'),
      performType: string(description='执行类型', name='perform_type'),
      priority: int64(description='优先级', name='priority'),
      processTypeCode: string(description='工序能力类型', name='process_type_code'),
      sectionCode?: string(description='工段', name='section_code'),
      sourceId: string(description='来源ID', name='source_id'),
      sourceType: string(description='来源类型', name='source_type'),
      workNos?: [ string ](description='执行人工号', maxItems=20, name='work_nos'),
      workstationCode?: string(description='执行工位', name='workstation_code'),
      processCostTime?: string(description='工序执行耗时，单位秒', name='process_cost_time'),
      processEndTime?: string(description='执行完成时间', pattern='\\\\d{4}[-]\\\\d{1,2}[-]\\\\d{1,2}[T]\\\\d{2}:\\\\d{2}:\\\\d{2}[Z]', name='process_end_time'),
      processStartTime?: string(description='执行开始时间', pattern='\\\\d{4}[-]\\\\d{1,2}[-]\\\\d{1,2}[T]\\\\d{2}:\\\\d{2}:\\\\d{2}[Z]', name='process_start_time'),
    }
  ](description='工序执行记录', maxItems=500, name='operations'),
  tenantId: string(description='租户ID', name='tenant_id'),
  userid?: string(description='用户ID', name='userid'),
  orderId?: int64(description='订单ID', name='order_id'),
}

model CreateOapiRhinoMosExecPerformRequest = {
  headers?: map[string]string,
  params:CreateOapiRhinoMosExecPerformParams,
}

model CreateOapiRhinoMosExecPerformResponseBody = {
  errmsg?: string(description='错误信息', name='errmsg'),
  model?: [
    {
      active?: string(description='是否有效', name='active'),
      batchId?: int64(description='分批ID', name='batch_id'),
      context?: string(description='上下文', name='context'),
      createType?: string(description='创建类型，是新建的还是已存在的', name='create_type'),
      deviceIds?: [ int64 ](description='设备ID列表', name='device_ids'),
      entityId?: int64(description='实例ID', name='entity_id'),
      entityType?: string(description='实体类型', name='entity_type'),
      flowVersion?: int64(description='排位布局版本', name='flow_version'),
      id?: int64(description='工序执行ID', name='id'),
      operationType?: string(description='工序类型', name='operation_type'),
      operationUid?: int64(description='工序ID', name='operation_uid'),
      orderId?: int64(description='订单ID', name='order_id'),
      performStatus?: string(description='执行状态', name='perform_status'),
      performType?: string(description='执行类型', name='perform_type'),
      priority?: int64(description='优先级', name='priority'),
      processTypeCode?: string(description='工序能力类型', name='process_type_code'),
      processingEndTime?: string(description='工序执行结束时间', pattern='\\\\d{4}[-]\\\\d{1,2}[-]\\\\d{1,2}[T]\\\\d{2}:\\\\d{2}:\\\\d{2}[Z]', name='processing_end_time'),
      processingStartTime?: string(description='工序执行开始时间', pattern='\\\\d{4}[-]\\\\d{1,2}[-]\\\\d{1,2}[T]\\\\d{2}:\\\\d{2}:\\\\d{2}[Z]', name='processing_start_time'),
      sectionCode?: string(description='工段', name='section_code'),
      sourceId?: string(description='来源ID', name='source_id'),
      sourceType?: string(description='来源类型', name='source_type'),
      tenantId?: string(description='租户ID', name='tenant_id'),
      workNos?: [ string ](description='执行人工号', name='work_nos'),
      workstationCode?: string(description='执行工位', name='workstation_code'),
      processCostTime?: string(description='工序执行耗时', name='process_cost_time'),
    }
  ](description='创建后的工段执行记录', name='model'),
  success?: boolean(description='是否成功', name='success'),
  errcode?: int64(description='错误码', name='errcode'),
}

model CreateOapiRhinoMosExecPerformResponse = {
  headers: map[string]string,
  body: CreateOapiRhinoMosExecPerformResponseBody,
}

/**
 * Description: 创建工序执行记录，无行为含义的插入，使用entity_id, entity_type, operation_uid来做幂等控制，CANCEL&EXCEP状态的已有记录不包含在幂等控制判断在内
 */
async function createOapiRhinoMosExecPerform(request: CreateOapiRhinoMosExecPerformRequest): CreateOapiRhinoMosExecPerformResponse {
  var runtime = new Util.RuntimeOptions{};
  return createOapiRhinoMosExecPerformEx(request, runtime);
}

/**
 * Description: 创建工序执行记录，无行为含义的插入，使用entity_id, entity_type, operation_uid来做幂等控制，CANCEL&EXCEP状态的已有记录不包含在幂等控制判断在内
 */
async function createOapiRhinoMosExecPerformEx(request: CreateOapiRhinoMosExecPerformRequest, runtime: Util.RuntimeOptions): CreateOapiRhinoMosExecPerformResponse {
  Util.validateModel(request);
  var appParams = Util.stringifyMapValue(Util.toMap(request.params));
  return doRequestOApi('POST', '/topapi/rhino/mos/exec/perform/create', request.headers, appParams, runtime);
}

model InitOapiAttendanceVacationQuotaParams = {
  opUserid: string(description='操作者ID', name='op_userid'),
  leaveQuotas: [
    {
      userid: string(description='员工ID', name='userid'),
      endTime: int64(description='额度有效期结束时间(毫秒级时间戳)', name='end_time'),
      startTime: int64(description='额度有效期开始时间(毫秒级时间戳)', name='start_time'),
      leaveCode: string(description='假期类型唯一标识', name='leave_code'),
      reason?: string(description='操作原因', name='reason'),
      quotaNumPerDay?: int64(description='单位以天计算的额度总数(假期类型按天计算该值不为空且按百分之一天折算 例如 100=1天)', name='quota_num_per_day'),
      quotaNumPerHour?: int64(description='单位以小时计算的额度总数(假期类型按小时计算该值不为空且按百分之一小时折算 例如 100=1小时)', name='quota_num_per_hour'),
      quotaCycle?: string(description='额度所对应的周期(除了假期类型为调休的时候可以为空之外 其他情况均不能为空 且格式必须满足"yyyy")', name='quota_cycle'),
    }
  ](description='待初始化的假期余额记录', maxItems=100, name='leave_quotas'),
}

model InitOapiAttendanceVacationQuotaRequest = {
  headers?: map[string]string,
  params:InitOapiAttendanceVacationQuotaParams,
}

model InitOapiAttendanceVacationQuotaResponseBody = {
  result?: [
    {
      reason?: string(description='失败原因', name='reason'),
      quota?: {
        leaveCode?: string(description='假期类型唯一标识', name='leave_code'),
        userid?: string(description='员工ID', name='userid'),
        quotaCycle?: string(description='额度所对应的周期(除了假期类型为调休的时候可以为空之外 其他情况均不能为空 且格式必须满足"yyyy")', name='quota_cycle'),
      }(description='失败记录', name='quota'),
    }
  ](description='结果值', name='result'),
  errcode?: int64(description='dingOpenErrcode', name='errcode'),
  errmsg?: string(description='errorMsg', name='errmsg'),
  success?: boolean(description='是否正确访问', name='success'),
}

model InitOapiAttendanceVacationQuotaResponse = {
  headers: map[string]string,
  body: InitOapiAttendanceVacationQuotaResponseBody,
}

/**
 * Description: 批量初始化假期余额 清空指定假期类型 指定员工所有假期余额 消费记录
 */
async function initOapiAttendanceVacationQuota(request: InitOapiAttendanceVacationQuotaRequest): InitOapiAttendanceVacationQuotaResponse {
  var runtime = new Util.RuntimeOptions{};
  return initOapiAttendanceVacationQuotaEx(request, runtime);
}

/**
 * Description: 批量初始化假期余额 清空指定假期类型 指定员工所有假期余额 消费记录
 */
async function initOapiAttendanceVacationQuotaEx(request: InitOapiAttendanceVacationQuotaRequest, runtime: Util.RuntimeOptions): InitOapiAttendanceVacationQuotaResponse {
  Util.validateModel(request);
  var appParams = Util.stringifyMapValue(Util.toMap(request.params));
  return doRequestOApi('POST', '/topapi/attendance/vacation/quota/init', request.headers, appParams, runtime);
}

model UpdateOapiAttendanceVacationTypeParams = {
  opUserid: string(description='操作者ID', name='op_userid'),
  leaveName?: string(description='假期名称', name='leave_name'),
  leaveViewUnit?: string(description='请假单位，可以按照天半天或者小时请假。(day、halfday、hour其中一种)', name='leave_view_unit'),
  bizType?: string(description='假期类型，普通假期或者加班转调休假期。(general_leave、lieu_leave其中一种)', name='biz_type'),
  naturalDayLeave?: boolean(description='是否按照自然日统计请假时长，当为false的时候，用户发起请假时候会根据用户在请假时间段内的排班情况来计算请假时长。', name='natural_day_leave'),
  leaveCode: string(description='假期类型唯一标识', name='leave_code'),
  hoursInPerDay?: int64(description='每天折算的工作时长(百分之一 例如1天=10小时=1000)', name='hours_in_per_day'),
  extras?: string(description='调休假有效期规则(validity_type:有效类型 absolute_time(绝对时间)、relative_time(相对时间)其中一种 validity_value:延长日期(当validity_type为absolute_time该值该值不为空且满足yy-mm格式 validity_type为relative_time该值为大于1的整数))', name='extras'),
}

model UpdateOapiAttendanceVacationTypeRequest = {
  headers?: map[string]string,
  params:UpdateOapiAttendanceVacationTypeParams,
}

model UpdateOapiAttendanceVacationTypeResponseBody = {
  errcode?: int64(description='dingOpenErrcode', name='errcode'),
  errmsg?: string(description='errorMsg', name='errmsg'),
  success?: boolean(description='是否正确访问', name='success'),
  result?: {
    leaveName?: string(description='假期名称', name='leave_name'),
    leaveCode?: string(description='假期类型唯一标识', name='leave_code'),
    leaveViewUnit?: string(description='请假单位，可以按照天半天或者小时请假。(day、halfday、hour其中一种)', name='leave_view_unit'),
    bizType?: string(description='假期类型，普通假期或者加班转调休假期。(general_leave、lieu_leave其中一种)', name='biz_type'),
    naturalDayLeave?: boolean(description='是否按照自然日统计请假时长，当为false的时候，用户发起请假时候会根据用户在请假时间段内的排班情况来计算请假时长。', name='natural_day_leave'),
    hoursInPerDay?: int64(description='每天折算的工作时长(百分之一 例如1天=10小时=1000)', name='hours_in_per_day'),
  }(description='结果值', name='result'),
}

model UpdateOapiAttendanceVacationTypeResponse = {
  headers: map[string]string,
  body: UpdateOapiAttendanceVacationTypeResponseBody,
}

/**
 * Description: 该接口用于更新指定企业下的指定假期类型的相关规则
 */
async function updateOapiAttendanceVacationType(request: UpdateOapiAttendanceVacationTypeRequest): UpdateOapiAttendanceVacationTypeResponse {
  var runtime = new Util.RuntimeOptions{};
  return updateOapiAttendanceVacationTypeEx(request, runtime);
}

/**
 * Description: 该接口用于更新指定企业下的指定假期类型的相关规则
 */
async function updateOapiAttendanceVacationTypeEx(request: UpdateOapiAttendanceVacationTypeRequest, runtime: Util.RuntimeOptions): UpdateOapiAttendanceVacationTypeResponse {
  Util.validateModel(request);
  var appParams = Util.stringifyMapValue(Util.toMap(request.params));
  return doRequestOApi('POST', '/topapi/attendance/vacation/type/update', request.headers, appParams, runtime);
}

model ListOapiAttendanceVacationTypeParams = {
  opUserid: string(description='操作员ID', name='op_userid'),
  vacationSource?: string(description='空:开放接口定义假期类型;all:所有假期类型', name='vacation_source'),
}

model ListOapiAttendanceVacationTypeRequest = {
  headers?: map[string]string,
  params:ListOapiAttendanceVacationTypeParams,
}

model ListOapiAttendanceVacationTypeResponseBody = {
  errcode?: int64(description='dingOpenErrcode', name='errcode'),
  errmsg?: string(description='errorMsg', name='errmsg'),
  success?: boolean(description='是否正确访问', name='success'),
  result?: [
    {
      leaveCode?: string(description='假期类型唯一标识', name='leave_code'),
      leaveName?: string(description='假期名称', name='leave_name'),
      leaveViewUnit?: string(description='请假单位，可以按照天半天或者小时请假。(day、halfday、hour其中一种)', name='leave_view_unit'),
      bizType?: string(description='假期类型，普通假期或者加班转调休假期。(general_leave、lieu_leave其中一种)', name='biz_type'),
      naturalDayLeave?: string(description='是否按照自然日统计请假时长，当为false的时候，用户发起请假时候会根据用户在请假时间段内的排班情况来计算请假时长。', name='natural_day_leave'),
      validityType?: string(description='有效类型 absolute_time(绝对时间)、relative_time(相对时间)其中一种', name='validity_type'),
      validityValue?: string(description='延长日期(当validity_type为absolute_time该值该值不为空且满足yy-mm格式 validity_type为relative_time该值为大于1的整数)', name='validity_value'),
      hoursInPerDay?: int64(description='每天折算的工作时长(百分之一 例如1天=10小时=1000)', name='hours_in_per_day'),
      source?: string(description='开放接口自定义的:external oa后台新建的：inner', name='source'),
    }
  ](description='result', name='result'),
}

model ListOapiAttendanceVacationTypeResponse = {
  headers: map[string]string,
  body: ListOapiAttendanceVacationTypeResponseBody,
}

/**
 * Description: 查询假期类型
 */
async function listOapiAttendanceVacationType(request: ListOapiAttendanceVacationTypeRequest): ListOapiAttendanceVacationTypeResponse {
  var runtime = new Util.RuntimeOptions{};
  return listOapiAttendanceVacationTypeEx(request, runtime);
}

/**
 * Description: 查询假期类型
 */
async function listOapiAttendanceVacationTypeEx(request: ListOapiAttendanceVacationTypeRequest, runtime: Util.RuntimeOptions): ListOapiAttendanceVacationTypeResponse {
  Util.validateModel(request);
  var appParams = Util.stringifyMapValue(Util.toMap(request.params));
  return doRequestOApi('POST', '/topapi/attendance/vacation/type/list', request.headers, appParams, runtime);
}

model DeleteOapiAttendanceVacationTypeParams = {
  leaveCode: string(description='假期类型唯一标识', name='leave_code'),
  opUserid: string(description='操作员ID', name='op_userid'),
}

model DeleteOapiAttendanceVacationTypeRequest = {
  headers?: map[string]string,
  params:DeleteOapiAttendanceVacationTypeParams,
}

model DeleteOapiAttendanceVacationTypeResponseBody = {
  result?: {
    leaveCode?: string(description='假期类型唯一标示', name='leave_code'),
    leaveName?: string(description='假期名称', name='leave_name'),
    leaveViewUnit?: string(description='请假单位，可以按照天半天或者小时请假。(day、halfday、hour其中一种)', name='leave_view_unit'),
    bizType?: string(description='假期类型，普通假期或者加班转调休假期。(general_leave、lieu_leave其中一种)', name='biz_type'),
    naturalDayLeave?: boolean(description='是否按照自然日统计请假时长，当为false的时候，用户发起请假时候会根据用户在请假时间段内的排班情况来计算请假时长。', name='natural_day_leave'),
    hoursInPerDay?: int64(description='每天折算的工作时长(百分之一 例如1天=10小时=1000)', name='hours_in_per_day'),
  }(description='LeaveTypeVo', name='result'),
  errcode?: int64(description='dingOpenErrcode', name='errcode'),
  errmsg?: string(description='errorMsg', name='errmsg'),
  success?: boolean(description='是否正确访问', name='success'),
}

model DeleteOapiAttendanceVacationTypeResponse = {
  headers: map[string]string,
  body: DeleteOapiAttendanceVacationTypeResponseBody,
}

/**
 * Description: 删除指定的假期类型
 */
async function deleteOapiAttendanceVacationType(request: DeleteOapiAttendanceVacationTypeRequest): DeleteOapiAttendanceVacationTypeResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteOapiAttendanceVacationTypeEx(request, runtime);
}

/**
 * Description: 删除指定的假期类型
 */
async function deleteOapiAttendanceVacationTypeEx(request: DeleteOapiAttendanceVacationTypeRequest, runtime: Util.RuntimeOptions): DeleteOapiAttendanceVacationTypeResponse {
  Util.validateModel(request);
  var appParams = Util.stringifyMapValue(Util.toMap(request.params));
  return doRequestOApi('POST', '/topapi/attendance/vacation/type/delete', request.headers, appParams, runtime);
}

model CreateOapiAttendanceVacationTypeParams = {
  leaveName: string(description='假期名称', name='leave_name'),
  leaveViewUnit: string(description='请假单位，可以按照天半天或者小时请假。(day、halfday、hour其中一种)', name='leave_view_unit'),
  bizType: string(description='假期类型，普通假期或者加班转调休假期。(general_leave、lieu_leave其中一种)', name='biz_type'),
  naturalDayLeave: boolean(description='是否按照自然日统计请假时长，当为false的时候，用户发起请假时候会根据用户在请假时间段内的排班情况来计算请假时长', name='natural_day_leave'),
  opUserid: string(description='操作者ID', name='op_userid'),
  hoursInPerDay: int64(description='每天折算的工作时长(百分之一 例如1天=10小时=1000)', name='hours_in_per_day'),
  extras?: string(description='调休假有效期规则(validity_type:有效类型 absolute_time(绝对时间)、relative_time(相对时间)其中一种 validity_value:延长日期(当validity_type为absolute_time该值该值不为空且满足yy-mm格式 validity_type为relative_time该值为大于1的整数))', name='extras'),
}

model CreateOapiAttendanceVacationTypeRequest = {
  headers?: map[string]string,
  params:CreateOapiAttendanceVacationTypeParams,
}

model CreateOapiAttendanceVacationTypeResponseBody = {
  errcode?: int64(description='错误码', name='errcode'),
  errmsg?: string(description='错误消息', name='errmsg'),
  success?: boolean(description='是否正确访问', name='success'),
  result?: {
    leaveName?: string(description='假期名称', name='leave_name'),
    leaveCode?: string(description='假期类型唯一标识', name='leave_code'),
    leaveViewUnit?: string(description='请假单位，可以按照天半天或者小时请假。(day、halfday、hour其中一种)', name='leave_view_unit'),
    bizType?: string(description='假期类型，普通假期或者加班转调休假期。(general_leave、lieu_leave其中一种)', name='biz_type'),
    naturalDayLeave?: boolean(description='是否按照自然日统计请假时长，当为false的时候，用户发起请假时候会根据用户在请假时间段内的排班情况来计算请假时长。', name='natural_day_leave'),
    hoursInPerDay?: int64(description='每天折算的工作时长(百分之一 例如1天=10小时=1000)', name='hours_in_per_day'),
  }(description='业务结果', name='result'),
}

model CreateOapiAttendanceVacationTypeResponse = {
  headers: map[string]string,
  body: CreateOapiAttendanceVacationTypeResponseBody,
}

/**
 * Description: 添加假期类型
 */
async function createOapiAttendanceVacationType(request: CreateOapiAttendanceVacationTypeRequest): CreateOapiAttendanceVacationTypeResponse {
  var runtime = new Util.RuntimeOptions{};
  return createOapiAttendanceVacationTypeEx(request, runtime);
}

/**
 * Description: 添加假期类型
 */
async function createOapiAttendanceVacationTypeEx(request: CreateOapiAttendanceVacationTypeRequest, runtime: Util.RuntimeOptions): CreateOapiAttendanceVacationTypeResponse {
  Util.validateModel(request);
  var appParams = Util.stringifyMapValue(Util.toMap(request.params));
  return doRequestOApi('POST', '/topapi/attendance/vacation/type/create', request.headers, appParams, runtime);
}

model ListOapiEduGuardianParams = {
  classId: int64(description='班级ID', name='class_id'),
  pageNo: int64(description='分页页数', name='page_no'),
  pageSize: int64(description='每页大小', name='page_size'),
}

model ListOapiEduGuardianRequest = {
  headers?: map[string]string,
  params:ListOapiEduGuardianParams,
}

model ListOapiEduGuardianResponseBody = {
  result?: {
    list?: [
      {
        relation?: string(description='关系（F爸爸、M妈妈、O其他）', name='relation'),
        guardianUserid?: string(description='家长ID', name='guardian_userid'),
        studentUserid?: string(description='学生ID', name='student_userid'),
        nick?: string(description='关系名称', name='nick'),
      }
    ](description='list', name='list'),
    hasMore?: boolean(description='是否存在下一页', name='has_more'),
    nextCursor?: int64(description='分页游标', name='next_cursor'),
  }(description='result', name='result'),
  errcode?: int64(description='错误码', name='errcode'),
  errmsg?: string(description='错误信息', name='errmsg'),
  success?: boolean(description='成功状态', name='success'),
}

model ListOapiEduGuardianResponse = {
  headers: map[string]string,
  body: ListOapiEduGuardianResponseBody,
}

/**
 * Description: 查询班级下家长列表信息，通过orgid，班级id查询家长的nick（如：小A的爸爸），非真实姓名，关系类别（妈妈、爸爸、其他亲属），学生staffid
 */
async function listOapiEduGuardian(request: ListOapiEduGuardianRequest): ListOapiEduGuardianResponse {
  var runtime = new Util.RuntimeOptions{};
  return listOapiEduGuardianEx(request, runtime);
}

/**
 * Description: 查询班级下家长列表信息，通过orgid，班级id查询家长的nick（如：小A的爸爸），非真实姓名，关系类别（妈妈、爸爸、其他亲属），学生staffid
 */
async function listOapiEduGuardianEx(request: ListOapiEduGuardianRequest, runtime: Util.RuntimeOptions): ListOapiEduGuardianResponse {
  Util.validateModel(request);
  var appParams = Util.stringifyMapValue(Util.toMap(request.params));
  return doRequestOApi('POST', '/topapi/edu/guardian/list', request.headers, appParams, runtime);
}

model GetOapiEduGuardianParams = {
  classId: int64(description='班级ID', name='class_id'),
  guardianUserid: string(description='家长ID', name='guardian_userid'),
}

model GetOapiEduGuardianRequest = {
  headers?: map[string]string,
  params:GetOapiEduGuardianParams,
}

model GetOapiEduGuardianResponseBody = {
  result?: {
    nick?: string(description='关系名称', name='nick'),
    studentUserid?: string(description='学生ID', name='student_userid'),
    guardianUserid?: string(description='家长ID', name='guardian_userid'),
    relation?: string(description='关系类型（M妈妈，D爸爸，O其他）', name='relation'),
    relations?: [
      {
        studentUserid?: string(description='fafa\\', name='student_userid'),
        nick?: string(description='fafa\\', name='nick'),
        relation?: string(description='fafa\\', name='relation'),
      }
    ](description='fdaf', name='relations'),
  }(description='result', name='result'),
  errcode?: int64(description='错误码', name='errcode'),
  errmsg?: string(description='错误信息', name='errmsg'),
  success?: boolean(description='成功状态', name='success'),
}

model GetOapiEduGuardianResponse = {
  headers: map[string]string,
  body: GetOapiEduGuardianResponseBody,
}

/**
 * Description: 家长信息查询，查询家长信息，通过orgid，班级id查询家长的nick（如：小A的爸爸），非真实姓名，关系类别（妈妈、爸爸、其他亲属），学生staffid
 */
async function getOapiEduGuardian(request: GetOapiEduGuardianRequest): GetOapiEduGuardianResponse {
  var runtime = new Util.RuntimeOptions{};
  return getOapiEduGuardianEx(request, runtime);
}

/**
 * Description: 家长信息查询，查询家长信息，通过orgid，班级id查询家长的nick（如：小A的爸爸），非真实姓名，关系类别（妈妈、爸爸、其他亲属），学生staffid
 */
async function getOapiEduGuardianEx(request: GetOapiEduGuardianRequest, runtime: Util.RuntimeOptions): GetOapiEduGuardianResponse {
  Util.validateModel(request);
  var appParams = Util.stringifyMapValue(Util.toMap(request.params));
  return doRequestOApi('POST', '/topapi/edu/guardian/get', request.headers, appParams, runtime);
}

model GetOapiEduStudentParams = {
  classId: int64(description='班级ID', name='class_id'),
  studentUserid: string(description='学生ID', name='student_userid'),
}

model GetOapiEduStudentRequest = {
  headers?: map[string]string,
  params:GetOapiEduStudentParams,
}

model GetOapiEduStudentResponseBody = {
  result?: {
    name?: string(description='名称', name='name'),
    classId?: int64(description='班级ID', name='class_id'),
    gradeId?: int64(description='年级ID', name='grade_id'),
    periodId?: int64(description='学段ID', name='period_id'),
    campusId?: int64(description='校区ID', name='campus_id'),
    guardians?: [
      {
        guardianUserid?: string(description='家长ID', name='guardian_userid'),
        relation?: string(description='关系', name='relation'),
        nick?: string(description='别名', name='nick'),
      }
    ](description='guardians', name='guardians'),
    studentNo?: string(description='学号', name='student_no'),
  }(description='result', name='result'),
  success?: boolean(description='成功状态', name='success'),
  errcode?: int64(description='错误码', name='errcode'),
  errmsg?: string(description='错误信息', name='errmsg'),
}

model GetOapiEduStudentResponse = {
  headers: map[string]string,
  body: GetOapiEduStudentResponseBody,
}

/**
 * Description: 学生信息查询，通过orgid，学生id，班级id,查询学生的名称、所在校区id、年级id、学段id、学生的staffid
 */
async function getOapiEduStudent(request: GetOapiEduStudentRequest): GetOapiEduStudentResponse {
  var runtime = new Util.RuntimeOptions{};
  return getOapiEduStudentEx(request, runtime);
}

/**
 * Description: 学生信息查询，通过orgid，学生id，班级id,查询学生的名称、所在校区id、年级id、学段id、学生的staffid
 */
async function getOapiEduStudentEx(request: GetOapiEduStudentRequest, runtime: Util.RuntimeOptions): GetOapiEduStudentResponse {
  Util.validateModel(request);
  var appParams = Util.stringifyMapValue(Util.toMap(request.params));
  return doRequestOApi('POST', '/topapi/edu/student/get', request.headers, appParams, runtime);
}

model ListOapiEduStudentParams = {
  classId: int64(description='班级ID', name='class_id'),
  pageNo: int64(description='页码', name='page_no'),
  pageSize: int64(description='每页大小', name='page_size'),
}

model ListOapiEduStudentRequest = {
  headers?: map[string]string,
  params:ListOapiEduStudentParams,
}

model ListOapiEduStudentResponseBody = {
  result?: {
    hasMore?: boolean(description='是否有下一页', name='has_more'),
    list?: [
      {
        name?: string(description='名称', name='name'),
        studentNo?: string(description='学号', name='student_no'),
        studentUserid?: string(description='学生ID', name='student_userid'),
        campusId?: int64(description='校区ID', name='campus_id'),
        periodId?: int64(description='学段ID', name='period_id'),
        gradeId?: int64(description='年级ID', name='grade_id'),
        classId?: int64(description='班级ID', name='class_id'),
      }
    ](description='list', name='list'),
    nextCursor?: int64(description='下一页游标', name='next_cursor'),
  }(description='result', name='result'),
  errcode?: int64(description='错误码', name='errcode'),
  errmsg?: string(description='错误消息', name='errmsg'),
  success?: boolean(description='成功状态', name='success'),
}

model ListOapiEduStudentResponse = {
  headers: map[string]string,
  body: ListOapiEduStudentResponseBody,
}

/**
 * Description: 学生列表信息查询,查询学生的名称、所在的班级id、校区id、年级id、学段id、学生的staffid
 */
async function listOapiEduStudent(request: ListOapiEduStudentRequest): ListOapiEduStudentResponse {
  var runtime = new Util.RuntimeOptions{};
  return listOapiEduStudentEx(request, runtime);
}

/**
 * Description: 学生列表信息查询,查询学生的名称、所在的班级id、校区id、年级id、学段id、学生的staffid
 */
async function listOapiEduStudentEx(request: ListOapiEduStudentRequest, runtime: Util.RuntimeOptions): ListOapiEduStudentResponse {
  Util.validateModel(request);
  var appParams = Util.stringifyMapValue(Util.toMap(request.params));
  return doRequestOApi('POST', '/topapi/edu/student/list', request.headers, appParams, runtime);
}

model GetOapiEduClassParams = {
  classId: int64(description='班级ID', name='class_id'),
}

model GetOapiEduClassRequest = {
  headers?: map[string]string,
  params:GetOapiEduClassParams,
}

model GetOapiEduClassResponseBody = {
  result?: {
    classLevel?: int64(description='班级级数（1班为1，二班为2）', name='class_level'),
    gradeLevel?: int64(description='年级级数（一年级为1，二年级为2）', name='grade_level'),
    gradeId?: int64(description='年级ID', name='grade_id'),
    periodId?: int64(description='学段ID', name='period_id'),
    campusId?: int64(description='校区ID', name='campus_id'),
    name?: string(description='名称', name='name'),
    nick?: string(description='别名', name='nick'),
  }(description='result', name='result'),
  errcode?: int64(description='错误码', name='errcode'),
  errmsg?: string(description='错误信息', name='errmsg'),
  success?: boolean(description='成功状态', name='success'),
}

model GetOapiEduClassResponse = {
  headers: map[string]string,
  body: GetOapiEduClassResponseBody,
}

/**
 * Description: 班级信息查询，通过orgid、班级id查询班级名称、所在学段id、校区id
 */
async function getOapiEduClass(request: GetOapiEduClassRequest): GetOapiEduClassResponse {
  var runtime = new Util.RuntimeOptions{};
  return getOapiEduClassEx(request, runtime);
}

/**
 * Description: 班级信息查询，通过orgid、班级id查询班级名称、所在学段id、校区id
 */
async function getOapiEduClassEx(request: GetOapiEduClassRequest, runtime: Util.RuntimeOptions): GetOapiEduClassResponse {
  Util.validateModel(request);
  var appParams = Util.stringifyMapValue(Util.toMap(request.params));
  return doRequestOApi('POST', '/topapi/edu/class/get', request.headers, appParams, runtime);
}

model ListOapiEduClassParams = {
  gradeId: int64(description='年级ID', name='grade_id'),
  pageNo: int64(description='分页页数', name='page_no'),
  pageSize: int64(description='分页每页大小', name='page_size'),
}

model ListOapiEduClassRequest = {
  headers?: map[string]string,
  params:ListOapiEduClassParams,
}

model ListOapiEduClassResponseBody = {
  result?: {
    list?: [
      {
        classId?: int64(description='班级ID', name='class_id'),
        gradeId?: int64(description='年级ID', name='grade_id'),
        periodId?: int64(description='学段ID', name='period_id'),
        campusId?: int64(description='校区ID', name='campus_id'),
        nick?: string(description='别名', name='nick'),
        name?: string(description='班级名称', name='name'),
        gradeLevel?: int64(description='年级级数（一年级为1，二年级为2）', name='grade_level'),
        classLevel?: int64(description='每个年级下班级级数（1班为1,2班为2）', name='class_level'),
      }
    ](description='列表', name='list'),
    hasMore?: boolean(description='是否有分页', name='has_more'),
    nextCursor?: int64(description='分页游标', name='next_cursor'),
  }(description='result', name='result'),
  errcode?: int64(description='错误码', name='errcode'),
  errmsg?: string(description='错误信息', name='errmsg'),
  success?: boolean(description='成功状态', name='success'),
}

model ListOapiEduClassResponse = {
  headers: map[string]string,
  body: ListOapiEduClassResponseBody,
}

/**
 * Description: 班级列表信息，通过orgid、班级id查询班级名称、所在学段id、校区id
 */
async function listOapiEduClass(request: ListOapiEduClassRequest): ListOapiEduClassResponse {
  var runtime = new Util.RuntimeOptions{};
  return listOapiEduClassEx(request, runtime);
}

/**
 * Description: 班级列表信息，通过orgid、班级id查询班级名称、所在学段id、校区id
 */
async function listOapiEduClassEx(request: ListOapiEduClassRequest, runtime: Util.RuntimeOptions): ListOapiEduClassResponse {
  Util.validateModel(request);
  var appParams = Util.stringifyMapValue(Util.toMap(request.params));
  return doRequestOApi('POST', '/topapi/edu/class/list', request.headers, appParams, runtime);
}

model GetOapiEduGradeParams = {
  gradeId: int64(description='年级ID', name='grade_id'),
}

model GetOapiEduGradeRequest = {
  headers?: map[string]string,
  params:GetOapiEduGradeParams,
}

model GetOapiEduGradeResponseBody = {
  result?: {
    startYear?: string(description='入学年份', name='start_year'),
    gradeLevel?: int64(description='年级级数（一年级为1，二年级为2）', name='grade_level'),
    periodId?: int64(description='学段ID', name='period_id'),
    nick?: string(description='别名', name='nick'),
    name?: string(description='名称', name='name'),
    campusId?: int64(description='校区ID', name='campus_id'),
  }(description='result', name='result'),
  errcode?: int64(description='错误码', name='errcode'),
  errmsg?: string(description='错误信息', name='errmsg'),
  success?: boolean(description='成功状态', name='success'),
}

model GetOapiEduGradeResponse = {
  headers: map[string]string,
  body: GetOapiEduGradeResponseBody,
}

/**
 * Description: 年级信息查询接口，通过组织id和年级id查询年级名称、年级的级别、学段id、校区id
 */
async function getOapiEduGrade(request: GetOapiEduGradeRequest): GetOapiEduGradeResponse {
  var runtime = new Util.RuntimeOptions{};
  return getOapiEduGradeEx(request, runtime);
}

/**
 * Description: 年级信息查询接口，通过组织id和年级id查询年级名称、年级的级别、学段id、校区id
 */
async function getOapiEduGradeEx(request: GetOapiEduGradeRequest, runtime: Util.RuntimeOptions): GetOapiEduGradeResponse {
  Util.validateModel(request);
  var appParams = Util.stringifyMapValue(Util.toMap(request.params));
  return doRequestOApi('POST', '/topapi/edu/grade/get', request.headers, appParams, runtime);
}

model ListOapiEduGradeParams = {
  periodId: int64(description='学段ID', name='period_id'),
}

model ListOapiEduGradeRequest = {
  headers?: map[string]string,
  params:ListOapiEduGradeParams,
}

model ListOapiEduGradeResponseBody = {
  result?: [
    {
      gradeId?: int64(description='年级ID', name='grade_id'),
      gradeLevel?: int64(description='年级级数（一年级为1，二年级为2）', name='grade_level'),
      startYear?: string(description='入学年份', name='start_year'),
      campusId?: int64(description='校区ID', name='campus_id'),
      name?: string(description='年级名称', name='name'),
    }
  ](description='result', name='result'),
  errcode?: int64(description='错误码', name='errcode'),
  errmsg?: string(description='错误信息', name='errmsg'),
  success?: boolean(description='成功状态', name='success'),
}

model ListOapiEduGradeResponse = {
  headers: map[string]string,
  body: ListOapiEduGradeResponseBody,
}

/**
 * Description: 年级列表查询，通过学段id查询其下面的年级信息列表，最多返回10条数据
 */
async function listOapiEduGrade(request: ListOapiEduGradeRequest): ListOapiEduGradeResponse {
  var runtime = new Util.RuntimeOptions{};
  return listOapiEduGradeEx(request, runtime);
}

/**
 * Description: 年级列表查询，通过学段id查询其下面的年级信息列表，最多返回10条数据
 */
async function listOapiEduGradeEx(request: ListOapiEduGradeRequest, runtime: Util.RuntimeOptions): ListOapiEduGradeResponse {
  Util.validateModel(request);
  var appParams = Util.stringifyMapValue(Util.toMap(request.params));
  return doRequestOApi('POST', '/topapi/edu/grade/list', request.headers, appParams, runtime);
}

model GetOapiEduTeacherParams = {
  classId: int64(description='班级ID', name='class_id'),
  teacherUserid: string(description='用户ID', name='teacher_userid'),
}

model GetOapiEduTeacherRequest = {
  headers?: map[string]string,
  params:GetOapiEduTeacherParams,
}

model GetOapiEduTeacherResponseBody = {
  result?: {
    gradeId?: int64(description='年级ID', name='grade_id'),
    campusId?: int64(description='校区ID', name='campus_id'),
    isAdviser?: int64(description='是否为班主任，1是，0不是', name='is_adviser'),
    teacherName?: string(description='老师名称', name='teacher_name'),
    classId?: int64(description='班级ID', name='class_id'),
  }(description='result', name='result'),
  errcode?: int64(description='错误码', name='errcode'),
  errmsg?: string(description='错误信息', name='errmsg'),
  success?: boolean(description='成功状态', name='success'),
}

model GetOapiEduTeacherResponse = {
  headers: map[string]string,
  body: GetOapiEduTeacherResponseBody,
}

/**
 * Description: 查询老师信息，查询班级下老师列表，通过组织id和班级id查询老师的名称、班级id、staffid、是否为班主任、校区id信息
 */
async function getOapiEduTeacher(request: GetOapiEduTeacherRequest): GetOapiEduTeacherResponse {
  var runtime = new Util.RuntimeOptions{};
  return getOapiEduTeacherEx(request, runtime);
}

/**
 * Description: 查询老师信息，查询班级下老师列表，通过组织id和班级id查询老师的名称、班级id、staffid、是否为班主任、校区id信息
 */
async function getOapiEduTeacherEx(request: GetOapiEduTeacherRequest, runtime: Util.RuntimeOptions): GetOapiEduTeacherResponse {
  Util.validateModel(request);
  var appParams = Util.stringifyMapValue(Util.toMap(request.params));
  return doRequestOApi('POST', '/topapi/edu/teacher/get', request.headers, appParams, runtime);
}

model ListOapiEduCampusRequest = {
  headers?: map[string]string,
}

model ListOapiEduCampusResponseBody = {
  result?: [
    {
      campusId?: int64(description='校区ID', name='campus_id'),
      name?: string(description='校区名称', name='name'),
      nick?: string(description='校区别名', name='nick'),
    }
  ](description='result', name='result'),
  errcode?: int64(description='错误码', name='errcode'),
  errmsg?: string(description='错误信息', name='errmsg'),
  success?: boolean(description='成功状态', name='success'),
}

model ListOapiEduCampusResponse = {
  headers: map[string]string,
  body: ListOapiEduCampusResponseBody,
}

/**
 * Description: 查询某个组织下面的学校信息
 */
async function listOapiEduCampus(request: ListOapiEduCampusRequest): ListOapiEduCampusResponse {
  var runtime = new Util.RuntimeOptions{};
  return listOapiEduCampusEx(request, runtime);
}

/**
 * Description: 查询某个组织下面的学校信息
 */
async function listOapiEduCampusEx(request: ListOapiEduCampusRequest, runtime: Util.RuntimeOptions): ListOapiEduCampusResponse {
  Util.validateModel(request);
  var appParams : map[string]string = {};
  return doRequestOApi('POST', '/topapi/edu/campus/list', request.headers, appParams, runtime);
}

model GetOapiEduCampusParams = {
  campusId: int64(description='校区ID', name='campus_id'),
}

model GetOapiEduCampusRequest = {
  headers?: map[string]string,
  params:GetOapiEduCampusParams,
}

model GetOapiEduCampusResponseBody = {
  result?: {
    campusId?: int64(description='校区ID', name='campus_id'),
    name?: string(description='校区名称', name='name'),
    nick?: string(description='校区Nick', name='nick'),
  }(description='result', name='result'),
  errcode?: int64(description='错误码', name='errcode'),
  errmsg?: string(description='错误信息', name='errmsg'),
  success?: boolean(description='成功状态', name='success'),
}

model GetOapiEduCampusResponse = {
  headers: map[string]string,
  body: GetOapiEduCampusResponseBody,
}

/**
 * Description: 查询校区基本信息接口，返回校区的名称和校区id
 */
async function getOapiEduCampus(request: GetOapiEduCampusRequest): GetOapiEduCampusResponse {
  var runtime = new Util.RuntimeOptions{};
  return getOapiEduCampusEx(request, runtime);
}

/**
 * Description: 查询校区基本信息接口，返回校区的名称和校区id
 */
async function getOapiEduCampusEx(request: GetOapiEduCampusRequest, runtime: Util.RuntimeOptions): GetOapiEduCampusResponse {
  Util.validateModel(request);
  var appParams = Util.stringifyMapValue(Util.toMap(request.params));
  return doRequestOApi('POST', '/topapi/edu/campus/get', request.headers, appParams, runtime);
}

model RecognitionOapiAttendanceFaceParams = {
  mediaId: string(description='钉钉mediaId', name='media_id'),
}

model RecognitionOapiAttendanceFaceRequest = {
  headers?: map[string]string,
  params:RecognitionOapiAttendanceFaceParams,
}

model RecognitionOapiAttendanceFaceResponseBody = {
  errcode?: int64(description='错误码，0代表成功', name='errcode'),
  errmsg?: string(description='错误信息', name='errmsg'),
  result?: {
    userid?: string(description='识别出来的员工userId', name='userid'),
  }(description='demo', name='result'),
}

model RecognitionOapiAttendanceFaceResponse = {
  headers: map[string]string,
  body: RecognitionOapiAttendanceFaceResponseBody,
}

/**
 * Description: 通过mediaId识别人员信息
 */
async function recognitionOapiAttendanceFace(request: RecognitionOapiAttendanceFaceRequest): RecognitionOapiAttendanceFaceResponse {
  var runtime = new Util.RuntimeOptions{};
  return recognitionOapiAttendanceFaceEx(request, runtime);
}

/**
 * Description: 通过mediaId识别人员信息
 */
async function recognitionOapiAttendanceFaceEx(request: RecognitionOapiAttendanceFaceRequest, runtime: Util.RuntimeOptions): RecognitionOapiAttendanceFaceResponse {
  Util.validateModel(request);
  var appParams = Util.stringifyMapValue(Util.toMap(request.params));
  return doRequestOApi('POST', '/topapi/attendance/face/recognition', request.headers, appParams, runtime);
}

model ListOapiEduPeriodParams = {
  campusId: int64(description='校区ID', name='campus_id'),
}

model ListOapiEduPeriodRequest = {
  headers?: map[string]string,
  params:ListOapiEduPeriodParams,
}

model ListOapiEduPeriodResponseBody = {
  result?: [
    {
      periodType?: string(description='学段类型：（幼儿园：kindergarten、小学：primary_school，初中：middle_school，高中：high_school）', name='period_type'),
      periodId?: int64(description='学段ID', name='period_id'),
      name?: string(description='学段名称', name='name'),
      nick?: string(description='学段别名', name='nick'),
      nameMode?: string(description='学段名称类型，text表示文本型，如中学为七年级，八年级，九年级，number表示数字型，如初中一年级1班，二年级1班等', name='name_mode'),
    }
  ](description='result', name='result'),
  errcode?: int64(description='错误码', name='errcode'),
  errmsg?: string(description='错误信息', name='errmsg'),
  success?: boolean(description='成功状态', name='success'),
}

model ListOapiEduPeriodResponse = {
  headers: map[string]string,
  body: ListOapiEduPeriodResponseBody,
}

/**
 * Description: 学段列表查询，每个校区仅有4个学段，幼儿园、小学、初中、高中，因此最多4条数据
 */
async function listOapiEduPeriod(request: ListOapiEduPeriodRequest): ListOapiEduPeriodResponse {
  var runtime = new Util.RuntimeOptions{};
  return listOapiEduPeriodEx(request, runtime);
}

/**
 * Description: 学段列表查询，每个校区仅有4个学段，幼儿园、小学、初中、高中，因此最多4条数据
 */
async function listOapiEduPeriodEx(request: ListOapiEduPeriodRequest, runtime: Util.RuntimeOptions): ListOapiEduPeriodResponse {
  Util.validateModel(request);
  var appParams = Util.stringifyMapValue(Util.toMap(request.params));
  return doRequestOApi('POST', '/topapi/edu/period/list', request.headers, appParams, runtime);
}

model ListOapiSmartworkHrmEmployeeFieldParams = {
  agentid?: int64(description='微应用在企业的AgentId，不需要自定义字段可不传', name='agentid'),
}

model ListOapiSmartworkHrmEmployeeFieldRequest = {
  headers?: map[string]string,
  params?:ListOapiSmartworkHrmEmployeeFieldParams,
}

model ListOapiSmartworkHrmEmployeeFieldResponseBody = {
  errmsg?: string(description='错误描述', name='errmsg'),
  errcode?: int64(description='错误码', name='errcode'),
  success?: boolean(description='成功标记', name='success'),
  result?: [
    {
      fieldCode?: string(description='字段code', name='field_code'),
      fieldName?: string(description='字段描述', name='field_name'),
      fieldType?: string(description='字段类型', name='field_type'),
    }
  ](description='结果集', name='result'),
}

model ListOapiSmartworkHrmEmployeeFieldResponse = {
  headers: map[string]string,
  body: ListOapiSmartworkHrmEmployeeFieldResponseBody,
}

/**
 * Description: 提供给ISV查询花名册的员工档案信息中有权限的字段列表
 */
async function listOapiSmartworkHrmEmployeeField(request: ListOapiSmartworkHrmEmployeeFieldRequest): ListOapiSmartworkHrmEmployeeFieldResponse {
  var runtime = new Util.RuntimeOptions{};
  return listOapiSmartworkHrmEmployeeFieldEx(request, runtime);
}

/**
 * Description: 提供给ISV查询花名册的员工档案信息中有权限的字段列表
 */
async function listOapiSmartworkHrmEmployeeFieldEx(request: ListOapiSmartworkHrmEmployeeFieldRequest, runtime: Util.RuntimeOptions): ListOapiSmartworkHrmEmployeeFieldResponse {
  Util.validateModel(request);
  var appParams = Util.stringifyMapValue(Util.toMap(request.params));
  return doRequestOApi('POST', '/topapi/smartwork/hrm/employee/field/list', request.headers, appParams, runtime);
}

model GetOapiEduPeriodParams = {
  periodId: int64(description='学段ID', name='period_id'),
}

model GetOapiEduPeriodRequest = {
  headers?: map[string]string,
  params:GetOapiEduPeriodParams,
}

model GetOapiEduPeriodResponseBody = {
  result?: {
    periodType?: string(description='学段类型（幼儿园：kindergarten、小学：primary_school，初中：middle_school，高中：high_school）', name='period_type'),
    periodId?: int64(description='学段ID', name='period_id'),
    name?: string(description='学段名称', name='name'),
    nick?: string(description='学段别名', name='nick'),
    campusId?: int64(description='校区ID', name='campus_id'),
    nameMode?: string(description='学段名称类型，text表示文本型，如中学为七年级，八年级，九年级，number表示数字型，如初中一年级1班，二年级1班等', name='name_mode'),
  }(description='result', name='result'),
  errcode?: int64(description='错误码', name='errcode'),
  errmsg?: string(description='错误信息', name='errmsg'),
  success?: boolean(description='成功状态', name='success'),
}

model GetOapiEduPeriodResponse = {
  headers: map[string]string,
  body: GetOapiEduPeriodResponseBody,
}

/**
 * Description: 学段信息查询接口，通过orgid，学段id查询学段信息，返回学段名称、nick、校区id
 */
async function getOapiEduPeriod(request: GetOapiEduPeriodRequest): GetOapiEduPeriodResponse {
  var runtime = new Util.RuntimeOptions{};
  return getOapiEduPeriodEx(request, runtime);
}

/**
 * Description: 学段信息查询接口，通过orgid，学段id查询学段信息，返回学段名称、nick、校区id
 */
async function getOapiEduPeriodEx(request: GetOapiEduPeriodRequest, runtime: Util.RuntimeOptions): GetOapiEduPeriodResponse {
  Util.validateModel(request);
  var appParams = Util.stringifyMapValue(Util.toMap(request.params));
  return doRequestOApi('POST', '/topapi/edu/period/get', request.headers, appParams, runtime);
}

model ListOapiEduTeacherParams = {
  classId: int64(description='班级ID', name='class_id'),
}

model ListOapiEduTeacherRequest = {
  headers?: map[string]string,
  params:ListOapiEduTeacherParams,
}

model ListOapiEduTeacherResponseBody = {
  result?: [
    {
      periodId?: int64(description='学段ID', name='period_id'),
      gradeId?: int64(description='年级ID', name='grade_id'),
      isAdviser?: int64(description='是否为班主任，1是，0不是', name='is_adviser'),
      campusId?: int64(description='校区ID', name='campus_id'),
      teacherName?: string(description='名称', name='teacher_name'),
      teacherUserid?: string(description='老师ID', name='teacher_userid'),
    }
  ](description='result', name='result'),
  errcode?: int64(description='错误码', name='errcode'),
  errmsg?: string(description='错误信息', name='errmsg'),
  success?: boolean(description='成功状态', name='success'),
}

model ListOapiEduTeacherResponse = {
  headers: map[string]string,
  body: ListOapiEduTeacherResponseBody,
}

/**
 * Description: 查询班级下老师列表，通过组织id和班级id查询老师的名称、班级id、staffid、是否为班主任、校区id信息
 */
async function listOapiEduTeacher(request: ListOapiEduTeacherRequest): ListOapiEduTeacherResponse {
  var runtime = new Util.RuntimeOptions{};
  return listOapiEduTeacherEx(request, runtime);
}

/**
 * Description: 查询班级下老师列表，通过组织id和班级id查询老师的名称、班级id、staffid、是否为班主任、校区id信息
 */
async function listOapiEduTeacherEx(request: ListOapiEduTeacherRequest, runtime: Util.RuntimeOptions): ListOapiEduTeacherResponse {
  Util.validateModel(request);
  var appParams = Util.stringifyMapValue(Util.toMap(request.params));
  return doRequestOApi('POST', '/topapi/edu/teacher/list', request.headers, appParams, runtime);
}

model SendOapiDingParams = {
  openDingSendVo: {
    attachment?: {
      detailType?: string(description='文件后缀, 用于展示文件对应图标', name='detail_type'),
      linkTitle?: string(description='链接标题', name='link_title'),
      fileName?: string(description='文件名', name='file_name'),
      fileSize?: int64(description='文件大小(单位:Byte, 最大2G)', name='file_size'),
      linkUrl?: string(description='链接URL', name='link_url'),
      fileSpaceId?: string(description='上传DING盘后的SpaceId', name='file_space_id'),
      linkText?: string(description='链接摘要', name='link_text'),
      type?: string(description='附件类型:img-图片,link-链接,file-文件', name='type'),
      linkPicUrl?: string(description='链接缩略图', name='link_pic_url'),
      fileId?: string(description='上传DING盘后的文件ID', name='file_id'),
    }(description='附件', name='attachment'),
    textContent: string(description='通知内容', name='text_content'),
    receiverUids: [ string ](description='接收者工号列表', maxItems=20, name='receiver_uids'),
    remindType: int64(description='提醒类型:1-应用内;2-短信', name='remind_type'),
  }(description='发DING的请求体', name='open_ding_send_vo'),
}

model SendOapiDingRequest = {
  headers?: map[string]string,
  params:SendOapiDingParams,
}

model SendOapiDingResponseBody = {
  result?: {
    openDingId?: string(description='发送成功的DING_ID', name='open_ding_id'),
    invalidUsers?: [ string ](description='不能接收DING的用户列表', name='invalid_users'),
  }(description='返回结果', name='result'),
  errcode?: int64(description='错误码', name='errcode'),
  errmsg?: string(description='失败原因', name='errmsg'),
}

model SendOapiDingResponse = {
  headers: map[string]string,
  body: SendOapiDingResponseBody,
}

/**
 * Description: 通过此接口发DING通知给企业内部员工, 支持短信DING和应用内DING. 
该接口正在灰度内测中, 暂不对外开放
 */
async function sendOapiDing(request: SendOapiDingRequest): SendOapiDingResponse {
  var runtime = new Util.RuntimeOptions{};
  return sendOapiDingEx(request, runtime);
}

/**
 * Description: 通过此接口发DING通知给企业内部员工, 支持短信DING和应用内DING. 
该接口正在灰度内测中, 暂不对外开放
 */
async function sendOapiDingEx(request: SendOapiDingRequest, runtime: Util.RuntimeOptions): SendOapiDingResponse {
  Util.validateModel(request);
  var appParams = Util.stringifyMapValue(Util.toMap(request.params));
  return doRequestOApi('POST', '/topapi/ding/send', request.headers, appParams, runtime);
}

model ListOapiAtsPluginStatisticsResumeParams = {
  bizCode: string(description='招聘业务标识', name='biz_code'),
  cursor?: string(description='分页游标位置，不传默认第一页', name='cursor'),
  size: int64(description='分页大小，最大1000', name='size'),
}

model ListOapiAtsPluginStatisticsResumeRequest = {
  headers?: map[string]string,
  params:ListOapiAtsPluginStatisticsResumeParams,
}

model ListOapiAtsPluginStatisticsResumeResponseBody = {
  errcode?: int64(description='错误码', name='errcode'),
  errmsg?: string(description='错误信息', name='errmsg'),
  result?: {
    nextCursor?: string(description='游标，下次分页请求使用', name='next_cursor'),
    hasMore?: boolean(description='是否还有数据', name='has_more'),
    list?: [
      {
        bizCode?: string(description='招聘业务标识', name='biz_code'),
        corpId?: string(description='企业id', name='corp_id'),
        resumeId?: string(description='简历id', name='resume_id'),
        channel?: string(description='lagou,51job,58tongcheng,zhilian,liepin,boss,other', name='channel'),
        candidateId?: string(description='候选人id', name='candidate_id'),
        gmtCreateMils?: int64(description='创建时间，unix时间戳，单位毫秒', name='gmt_create_mils'),
        gmtModifiedMils?: int64(description='更新时间，unix时间戳，单位毫秒', name='gmt_modified_mils'),
      }
    ](description='简历信息列表', name='list'),
  }(description='分页结果', name='result'),
}

model ListOapiAtsPluginStatisticsResumeResponse = {
  headers: map[string]string,
  body: ListOapiAtsPluginStatisticsResumeResponseBody,
}

/**
 * Description: 获取简历的基本信息
 */
async function listOapiAtsPluginStatisticsResume(request: ListOapiAtsPluginStatisticsResumeRequest): ListOapiAtsPluginStatisticsResumeResponse {
  var runtime = new Util.RuntimeOptions{};
  return listOapiAtsPluginStatisticsResumeEx(request, runtime);
}

/**
 * Description: 获取简历的基本信息
 */
async function listOapiAtsPluginStatisticsResumeEx(request: ListOapiAtsPluginStatisticsResumeRequest, runtime: Util.RuntimeOptions): ListOapiAtsPluginStatisticsResumeResponse {
  Util.validateModel(request);
  var appParams = Util.stringifyMapValue(Util.toMap(request.params));
  return doRequestOApi('POST', '/topapi/ats/plugin/statistics/resume/list', request.headers, appParams, runtime);
}

model ListOapiHirePluginStatisticsBizflowParams = {
  cursor?: string(description='分页游标位置，不传默认第一页', name='cursor'),
  size: int64(description='分页大小，最大1000', name='size'),
}

model ListOapiHirePluginStatisticsBizflowRequest = {
  headers?: map[string]string,
  params:ListOapiHirePluginStatisticsBizflowParams,
}

model ListOapiHirePluginStatisticsBizflowResponseBody = {
  result?: {
    nextCursor?: string(description='游标，下次分页请求使用', name='next_cursor'),
    hasMore?: boolean(description='是否还有数据', name='has_more'),
    list?: [
      {
        corpId?: string(description='企业id', name='corp_id'),
        flowId?: string(description='应聘流程id', name='flow_id'),
        candidateId?: string(description='候选人id', name='candidate_id'),
        resumeId?: string(description='简历id', name='resume_id'),
        jobId?: string(description='职位id', name='job_id'),
        flowStatus?: int64(description='应聘状态  11：待初筛  12：初筛通过 13：初筛不通过  21： 应聘流程中  22：应聘通过  23：应聘不通过(不录用)  31： offer流程中  32： offer通过(录用)  33：offer失败  34： offer取消(取消录用)  41：待入职  42：已入职', name='flow_status'),
        recruitId?: string(description='应聘id', name='recruit_id'),
        ownerUserid?: string(description='负责人userid', name='owner_userid'),
        creatorUserid?: string(description='创建人userid', name='creator_userid'),
        gmtCreateMils?: int64(description='创建时间，unix时间戳，单位毫秒', name='gmt_create_mils'),
        gmtModifiedMils?: int64(description='更新时间，unix时间戳，单位毫秒', name='gmt_modified_mils'),
      }
    ](description='职位信息列表', name='list'),
  }(description='分页结果', name='result'),
  errcode?: int64(description='错误码', name='errcode'),
  errmsg?: string(description='错误信息', name='errmsg'),
}

model ListOapiHirePluginStatisticsBizflowResponse = {
  headers: map[string]string,
  body: ListOapiHirePluginStatisticsBizflowResponseBody,
}

/**
 * Description: 获取业务流程的基本信息
 */
async function listOapiHirePluginStatisticsBizflow(request: ListOapiHirePluginStatisticsBizflowRequest): ListOapiHirePluginStatisticsBizflowResponse {
  var runtime = new Util.RuntimeOptions{};
  return listOapiHirePluginStatisticsBizflowEx(request, runtime);
}

/**
 * Description: 获取业务流程的基本信息
 */
async function listOapiHirePluginStatisticsBizflowEx(request: ListOapiHirePluginStatisticsBizflowRequest, runtime: Util.RuntimeOptions): ListOapiHirePluginStatisticsBizflowResponse {
  Util.validateModel(request);
  var appParams = Util.stringifyMapValue(Util.toMap(request.params));
  return doRequestOApi('POST', '/topapi/hire/plugin/statistics/bizflow/list', request.headers, appParams, runtime);
}

model ListOapiAtsPluginStatisticsJobParams = {
  bizCode: string(description='招聘业务标识', name='biz_code'),
  cursor?: string(description='分页游标位置，不传默认第一页', name='cursor'),
  size: int64(description='分页大小', name='size'),
}

model ListOapiAtsPluginStatisticsJobRequest = {
  headers?: map[string]string,
  params:ListOapiAtsPluginStatisticsJobParams,
}

model ListOapiAtsPluginStatisticsJobResponseBody = {
  result?: {
    nextCursor?: string(description='游标，下次分页请求使用', name='next_cursor'),
    hasMore?: boolean(description='是否还有数据', name='has_more'),
    list?: [
      {
        bizCode?: string(description='招聘业务标识', name='biz_code'),
        corpId?: string(description='企业id', name='corp_id'),
        jobId?: string(description='职位id', name='job_id'),
        name?: string(description='职位名称', name='name'),
        status?: int64(description='0：新创建  1：已发布  2：废弃  3：招满', name='status'),
        mainDeptId?: int64(description='职位归属部门id', name='main_dept_id'),
        headCount?: int64(description='招聘人数', name='head_count'),
        ownerUserid?: string(description='职位负责人id', name='owner_userid'),
        creatorUserid?: string(description='职位创建人id', name='creator_userid'),
        gmtCreateMils?: int64(description='创建时间，unix时间戳，单位毫秒', name='gmt_create_mils'),
        gmtModifiedMils?: int64(description='更新时间，unix时间戳，单位毫秒', name='gmt_modified_mils'),
      }
    ](description='职位信息列表', name='list'),
  }(description='分页结果', name='result'),
  errcode?: int64(description='错误码', name='errcode'),
  errmsg?: string(description='错误信息', name='errmsg'),
}

model ListOapiAtsPluginStatisticsJobResponse = {
  headers: map[string]string,
  body: ListOapiAtsPluginStatisticsJobResponseBody,
}

/**
 * Description: 获取职位的基本信息
 */
async function listOapiAtsPluginStatisticsJob(request: ListOapiAtsPluginStatisticsJobRequest): ListOapiAtsPluginStatisticsJobResponse {
  var runtime = new Util.RuntimeOptions{};
  return listOapiAtsPluginStatisticsJobEx(request, runtime);
}

/**
 * Description: 获取职位的基本信息
 */
async function listOapiAtsPluginStatisticsJobEx(request: ListOapiAtsPluginStatisticsJobRequest, runtime: Util.RuntimeOptions): ListOapiAtsPluginStatisticsJobResponse {
  Util.validateModel(request);
  var appParams = Util.stringifyMapValue(Util.toMap(request.params));
  return doRequestOApi('POST', '/topapi/ats/plugin/statistics/job/list', request.headers, appParams, runtime);
}

model ListOapiKacDatavVideoliveViewerParams = {
  request: {
    cid: string(description='群标识id', name='cid'),
    cursor: int64(description='分页游标；首页请使用0，之后直接使用返回结果中的next_cursor', name='cursor'),
    liveUuid: string(description='直播uuid', name='live_uuid'),
    size: int64(description='分页大小;不超过500', name='size'),
  }(description='请求对象', name='request'),
}

model ListOapiKacDatavVideoliveViewerRequest = {
  headers?: map[string]string,
  params:ListOapiKacDatavVideoliveViewerParams,
}

model ListOapiKacDatavVideoliveViewerResponseBody = {
  errcode?: int64(description='结果码', name='errcode'),
  errmsg?: string(description='提示信息', name='errmsg'),
  result?: {
    data?: [
      {
        playDuration?: int64(description='观看直播时长（毫秒）', name='play_duration'),
        playDurationMin?: string(description='观看直播时长（分钟）', name='play_duration_min'),
        playRecordDuration?: int64(description='观看直播回放时长（毫秒）', name='play_record_duration'),
        playRecordDurationMin?: string(description='观看直播回放时长（分钟）', name='play_record_duration_min'),
        userid?: string(description='员工在当前企业内的唯一标识，也称staffId。可由企业在创建时指定，并代表一定含义比如工号，创建后不可修改', name='userid'),
      }
    ](description='列表数据项', name='data'),
    hasMore?: boolean(description='是否有下一页；true则存在更多分页', name='has_more'),
    nextCursor?: int64(description='下一次请求的分页游标', name='next_cursor'),
  }(description='结果对象', name='result'),
}

model ListOapiKacDatavVideoliveViewerResponse = {
  headers: map[string]string,
  body: ListOapiKacDatavVideoliveViewerResponseBody,
}

/**
 * Description: 查询指定场次的视频直播的观看人员列表（含回看人员）
 */
async function listOapiKacDatavVideoliveViewer(request: ListOapiKacDatavVideoliveViewerRequest): ListOapiKacDatavVideoliveViewerResponse {
  var runtime = new Util.RuntimeOptions{};
  return listOapiKacDatavVideoliveViewerEx(request, runtime);
}

/**
 * Description: 查询指定场次的视频直播的观看人员列表（含回看人员）
 */
async function listOapiKacDatavVideoliveViewerEx(request: ListOapiKacDatavVideoliveViewerRequest, runtime: Util.RuntimeOptions): ListOapiKacDatavVideoliveViewerResponse {
  Util.validateModel(request);
  var appParams = Util.stringifyMapValue(Util.toMap(request.params));
  return doRequestOApi('POST', '/topapi/kac/datav/videolive/viewer/list', request.headers, appParams, runtime);
}

model ListscheduleOapiAttendanceParams = {
  workDate: string(description='排班时间，只取年月日部分', pattern='\\\\d{4}[-]\\\\d{1,2}[-]\\\\d{1,2}[T]\\\\d{2}:\\\\d{2}:\\\\d{2}[Z]', name='workDate'),
  offset?: int64(description='偏移位置', name='offset'),
  size?: int64(description='分页大小，最大200', name='size'),
}

model ListscheduleOapiAttendanceRequest = {
  headers?: map[string]string,
  params:ListscheduleOapiAttendanceParams,
}

model ListscheduleOapiAttendanceResponseBody = {
  result?: {
    schedules?: [
      {
        planId?: int64(description='排班id', name='plan_id'),
        checkType?: string(description='打卡类型，Onduty表示上班打卡，OffDuty表示下班打卡', name='check_type'),
        approveId?: int64(description='审批id,结果集中没有的话表示没有审批单', name='approve_id'),
        userid?: string(description='userId', name='userid'),
        classId?: int64(description='考勤班次id', name='class_id'),
        classSettingId?: int64(description='班次配置id，结果集中没有的话表示使用全局班次配置', name='class_setting_id'),
        planCheckTime?: string(description='打卡时间', pattern='\\\\d{4}[-]\\\\d{1,2}[-]\\\\d{1,2}[T]\\\\d{2}:\\\\d{2}:\\\\d{2}[Z]', name='plan_check_time'),
        groupId?: int64(description='考勤组id', name='group_id'),
        changedCheckTime?: string(description='调整后的卡点时间', pattern='\\\\d{4}[-]\\\\d{1,2}[-]\\\\d{1,2}[T]\\\\d{2}:\\\\d{2}:\\\\d{2}[Z]', name='changed_check_time'),
      }
    ](description='schedules', name='schedules'),
    hasMore?: boolean(description='分页用，表示是否还有下一页', name='has_more'),
  }(description='result', name='result'),
  errmsg?: string(description='errmsg', name='errmsg'),
  errcode?: int64(description='errcode', name='errcode'),
}

model ListscheduleOapiAttendanceResponse = {
  headers: map[string]string,
  body: ListscheduleOapiAttendanceResponseBody,
}

/**
 * Description: 按天查询企业考勤排班全量信息，使用分页功能
 */
async function listscheduleOapiAttendance(request: ListscheduleOapiAttendanceRequest): ListscheduleOapiAttendanceResponse {
  var runtime = new Util.RuntimeOptions{};
  return listscheduleOapiAttendanceEx(request, runtime);
}

/**
 * Description: 按天查询企业考勤排班全量信息，使用分页功能
 */
async function listscheduleOapiAttendanceEx(request: ListscheduleOapiAttendanceRequest, runtime: Util.RuntimeOptions): ListscheduleOapiAttendanceResponse {
  Util.validateModel(request);
  var appParams = Util.stringifyMapValue(Util.toMap(request.params));
  return doRequestOApi('POST', '/topapi/attendance/listschedule', request.headers, appParams, runtime);
}

model ListOapiRoleParams = {
  size?: int64(description='分页大小', name='size'),
  offset?: int64(description='分页偏移', name='offset'),
}

model ListOapiRoleRequest = {
  headers?: map[string]string,
  params?:ListOapiRoleParams,
}

model ListOapiRoleResponseBody = {
  errcode?: int64(description='errcode', name='errcode'),
  errmsg?: string(description='errmsg', name='errmsg'),
  result?: {
    hasMore?: boolean(description='hasMore', name='hasMore'),
    nextCursor?: int64(description='下次拉取数据的游标', name='nextCursor'),
    list?: [
      {
        name?: string(description='角色组名称', name='name'),
        groupId?: int64(description='角色组id', name='groupId'),
        roles?: [
          {
            name?: string(description='角色名称', name='name'),
            id?: int64(description='角色id', name='id'),
          }
        ](description='roles', name='roles'),
      }
    ](description='list', name='list'),
  }(description='result', name='result'),
}

model ListOapiRoleResponse = {
  headers: map[string]string,
  body: ListOapiRoleResponseBody,
}

/**
 * Description: 获取企业角色列表
 */
async function listOapiRole(request: ListOapiRoleRequest): ListOapiRoleResponse {
  var runtime = new Util.RuntimeOptions{};
  return listOapiRoleEx(request, runtime);
}

/**
 * Description: 获取企业角色列表
 */
async function listOapiRoleEx(request: ListOapiRoleRequest, runtime: Util.RuntimeOptions): ListOapiRoleResponse {
  Util.validateModel(request);
  var appParams = Util.stringifyMapValue(Util.toMap(request.params));
  return doRequestOApi('POST', '/topapi/role/list', request.headers, appParams, runtime);
}

model GetDeptMemberOapiUserParams = {
  deptId?: string(description='部门id', name='deptId'),
}

model GetDeptMemberOapiUserRequest = {
  headers?: map[string]string,
  params?:GetDeptMemberOapiUserParams,
}

model GetDeptMemberOapiUserResponseBody = {
  userIds?: [ string ](description='userIds', name='userIds'),
  errmsg?: string(description='errmsg', name='errmsg'),
  errcode?: int64(description='errcode', name='errcode'),
}

model GetDeptMemberOapiUserResponse = {
  headers: map[string]string,
  body: GetDeptMemberOapiUserResponseBody,
}

/**
 * Description: aa
 */
async function getDeptMemberOapiUser(request: GetDeptMemberOapiUserRequest): GetDeptMemberOapiUserResponse {
  var runtime = new Util.RuntimeOptions{};
  return getDeptMemberOapiUserEx(request, runtime);
}

/**
 * Description: aa
 */
async function getDeptMemberOapiUserEx(request: GetDeptMemberOapiUserRequest, runtime: Util.RuntimeOptions): GetDeptMemberOapiUserResponse {
  Util.validateModel(request);
  var appParams = Util.stringifyMapValue(Util.toMap(request.params));
  return doRequestOApi('GET', '/user/getDeptMember', request.headers, appParams, runtime);
}

model CreateOapiCollectionSchemaParams = {
  request: {
    icon: string(description='图标', name='icon'),
    processVisibleList?: [
      {
        visibleType?: int64(description='类型', name='visible_type'),
        visibleValue?: string(description='值', name='visible_value'),
      }
    ](description='可见范围', maxItems=1000, name='process_visible_list'),
    memo: string(description='提示', name='memo'),
    content?: string(description='控件字符串', name='content'),
    name: string(description='表单名称', name='name'),
    customSetting: {
      replyTime?: boolean(description='回复时间开关/循环周期启用', name='reply_time'),
      formType: int64(description='表单类型', name='form_type'),
      bizType: int64(description='业务类型', name='biz_type'),
      loopDayOfWeeks?: [ int64 ](description='循环周期', maxItems=20, name='loop_day_of_weeks'),
      endTime?: string(description='填写结束时间/循环表单的循环结束时间', pattern='\\\\d{4}[-]\\\\d{1,2}[-]\\\\d{1,2}[T]\\\\d{2}:\\\\d{2}:\\\\d{2}[Z]', name='end_time'),
      loopTime?: string(description='提醒时间', name='loop_time'),
    }(description='表单设置', name='custom_setting'),
    userid: string(description='用户id', name='userid'),
    formContent: {
      items?: [
        {
          props?: {
            behaviorLinkage?: [
              {
                targets?: [
                  {
                    fieldId?: string(description='控件ID', name='field_id'),
                    behavior?: string(description='行为', name='behavior'),
                  }
                ](description='选项级联目标', maxItems=100, name='targets'),
                value?: string(description='值', name='value'),
              }
            ](description='选项级联属性', maxItems=1000, name='behavior_linkage'),
            options?: [
              {
                value?: string(description='选项值', name='value'),
                key?: string(description='名称', name='key'),
              }
            ](description='带选项的组件的option', maxItems=1000, name='options'),
            cols?: [
              {
                alias?: string(description='别名', name='alias'),
                name?: string(description='名称', name='name'),
                key?: string(description='主键', name='key'),
              }
            ](description='矩阵表单组件列定义', maxItems=1000, name='cols'),
            rows?: [
              {
                alias?: string(description='别名', name='alias'),
                name?: string(description='名称', name='name'),
                key?: string(description='主键', name='key'),
              }
            ](description='矩阵表单组件行定义', maxItems=1000, name='rows'),
            bizAlias?: string(description='系统别名', name='biz_alias'),
            required?: boolean(description='是否必填', name='required'),
            placeholder?: string(description='占位符', name='placeholder'),
            label?: string(description='标签', name='label'),
            id?: string(description='控件id', name='id'),
          }(description='控件属性', name='props'),
          componentName?: string(description='控件名称', name='component_name'),
        }
      ](description='控件数组', maxItems=1000, name='items'),
    }(description='控件对象', name='form_content'),
  }(description='根请求', name='request'),
}

model CreateOapiCollectionSchemaRequest = {
  headers?: map[string]string,
  params:CreateOapiCollectionSchemaParams,
}

model CreateOapiCollectionSchemaResponseBody = {
  result?: string(description='formcode', name='result'),
  success?: boolean(description='是否成功', name='success'),
  errcode?: int64(description='错误码', name='errcode'),
  errmsg?: string(description='错误信息', name='errmsg'),
}

model CreateOapiCollectionSchemaResponse = {
  headers: map[string]string,
  body: CreateOapiCollectionSchemaResponseBody,
}

/**
 * Description: 创建智能填表的填写任务
 */
async function createOapiCollectionSchema(request: CreateOapiCollectionSchemaRequest): CreateOapiCollectionSchemaResponse {
  var runtime = new Util.RuntimeOptions{};
  return createOapiCollectionSchemaEx(request, runtime);
}

/**
 * Description: 创建智能填表的填写任务
 */
async function createOapiCollectionSchemaEx(request: CreateOapiCollectionSchemaRequest, runtime: Util.RuntimeOptions): CreateOapiCollectionSchemaResponse {
  Util.validateModel(request);
  var appParams = Util.stringifyMapValue(Util.toMap(request.params));
  return doRequestOApi('POST', '/topapi/collection/schema/create', request.headers, appParams, runtime);
}

model CreateOapiExtcontactParams = {
  contact: {
    title?: string(description='职位', name='title'),
    labelIds: [ int64 ](description='标签列表', maxItems=20, name='label_ids'),
    shareDeptIds?: [ int64 ](description='共享给的部门ID', maxItems=20, name='share_dept_ids'),
    address?: string(description='地址', name='address'),
    remark?: string(description='备注', name='remark'),
    followerUserId: string(description='负责人userId', name='follower_user_id'),
    name: string(description='名称', name='name'),
    stateCode: string(description='手机号国家码', name='state_code'),
    companyName?: string(description='企业名', name='company_name'),
    shareUserIds?: [ string ](description='共享给的员工userId列表', maxItems=20, name='share_user_ids'),
    mobile: string(description='手机号', name='mobile'),
  }(description='外部联系人信息', name='contact'),
}

model CreateOapiExtcontactRequest = {
  headers?: map[string]string,
  params:CreateOapiExtcontactParams,
}

model CreateOapiExtcontactResponseBody = {
  userid?: string(description='新外部联系人的userId', name='userid'),
  errcode?: int64(description='errcode', name='errcode'),
  errmsg?: string(description='errmsg', name='errmsg'),
}

model CreateOapiExtcontactResponse = {
  headers: map[string]string,
  body: CreateOapiExtcontactResponseBody,
}

/**
 * Description: 添加企业外部联系人
 */
async function createOapiExtcontact(request: CreateOapiExtcontactRequest): CreateOapiExtcontactResponse {
  var runtime = new Util.RuntimeOptions{};
  return createOapiExtcontactEx(request, runtime);
}

/**
 * Description: 添加企业外部联系人
 */
async function createOapiExtcontactEx(request: CreateOapiExtcontactRequest, runtime: Util.RuntimeOptions): CreateOapiExtcontactResponse {
  Util.validateModel(request);
  var appParams = Util.stringifyMapValue(Util.toMap(request.params));
  return doRequestOApi('POST', '/topapi/extcontact/create', request.headers, appParams, runtime);
}

model SimplelistOapiRoleParams = {
  roleId: int64(description='角色ID', name='role_id'),
  size?: int64(description='分页大小', name='size'),
  offset?: int64(description='分页偏移', name='offset'),
}

model SimplelistOapiRoleRequest = {
  headers?: map[string]string,
  params:SimplelistOapiRoleParams,
}

model SimplelistOapiRoleResponseBody = {
  errcode?: int64(description='errcode', name='errcode'),
  errmsg?: string(description='errmsg', name='errmsg'),
  result?: {
    hasMore?: boolean(description='后面是否还有数据', name='hasMore'),
    nextCursor?: int64(description='下次拉取数据的游标', name='nextCursor'),
    list?: [
      {
        userid?: string(description='员工id', name='userid'),
        name?: string(description='员工姓名', name='name'),
        manageScopes?: [
          {
            deptId?: int64(description='部门id', name='dept_id'),
            name?: string(description='部门名称', name='name'),
          }
        ](description='管理范围', name='manageScopes'),
      }
    ](description='list', name='list'),
  }(description='result', name='result'),
}

model SimplelistOapiRoleResponse = {
  headers: map[string]string,
  body: SimplelistOapiRoleResponseBody,
}

/**
 * Description: 获取企业中角色下的员工列表
 */
async function simplelistOapiRole(request: SimplelistOapiRoleRequest): SimplelistOapiRoleResponse {
  var runtime = new Util.RuntimeOptions{};
  return simplelistOapiRoleEx(request, runtime);
}

/**
 * Description: 获取企业中角色下的员工列表
 */
async function simplelistOapiRoleEx(request: SimplelistOapiRoleRequest, runtime: Util.RuntimeOptions): SimplelistOapiRoleResponse {
  Util.validateModel(request);
  var appParams = Util.stringifyMapValue(Util.toMap(request.params));
  return doRequestOApi('POST', '/topapi/role/simplelist', request.headers, appParams, runtime);
}

model GetOapiTrainingGroupinfoParams = {
  request?: {
    ids?: [ string ](description='群id', maxItems=999, name='ids'),
    corpId?: string(description='组织唯一标识corpid', name='corp_id'),
  }(description='系统自动生成', name='request'),
}

model GetOapiTrainingGroupinfoRequest = {
  headers?: map[string]string,
  params?:GetOapiTrainingGroupinfoParams,
}

model GetOapiTrainingGroupinfoResponseBody = {
  result?: {
    corpId?: string(description='组织corpid', name='corp_id'),
    orgName?: string(description='组织名称', name='org_name'),
    groupInfoList?: [
      {
        conversationId?: string(description='群id', name='conversation_id'),
        memberCount?: int64(description='群成员数', name='member_count'),
        createAt?: int64(description='群创建时间', name='create_at'),
        iconUrl?: string(description='群头像', name='icon_url'),
        title?: string(description='群名称', name='title'),
        inviteUrl?: string(description='邀请链接', name='invite_url'),
        status?: string(description='群状态：1、available（可用），2、dismiss(解散），3、full（已满）', name='status'),
      }
    ](description='群信息列表', name='group_info_list'),
  }(description='返回群信息', name='result'),
  errcode?: int64(description='错误码', name='errcode'),
  errmsg?: string(description='错误信息', name='errmsg'),
}

model GetOapiTrainingGroupinfoResponse = {
  headers: map[string]string,
  body: GetOapiTrainingGroupinfoResponseBody,
}

/**
 * Description: 根据群id获取班级群的可用状态，及班级邀请链接，每次最多获取100个群。
 */
async function getOapiTrainingGroupinfo(request: GetOapiTrainingGroupinfoRequest): GetOapiTrainingGroupinfoResponse {
  var runtime = new Util.RuntimeOptions{};
  return getOapiTrainingGroupinfoEx(request, runtime);
}

/**
 * Description: 根据群id获取班级群的可用状态，及班级邀请链接，每次最多获取100个群。
 */
async function getOapiTrainingGroupinfoEx(request: GetOapiTrainingGroupinfoRequest, runtime: Util.RuntimeOptions): GetOapiTrainingGroupinfoResponse {
  Util.validateModel(request);
  var appParams = Util.stringifyMapValue(Util.toMap(request.params));
  return doRequestOApi('POST', '/topapi/training/groupinfo/get', request.headers, appParams, runtime);
}

model GetsimplegroupsOapiAttendanceParams = {
  offset?: int64(description='偏移位置', name='offset'),
  size?: int64(description='分页大小，最大10', name='size'),
}

model GetsimplegroupsOapiAttendanceRequest = {
  headers?: map[string]string,
  params?:GetsimplegroupsOapiAttendanceParams,
}

model GetsimplegroupsOapiAttendanceResponseBody = {
  errcode?: int64(description='errcode', name='errcode'),
  errmsg?: string(description='errmsg', name='errmsg'),
  result?: {
    hasMore?: boolean(description='分页用，表示是否还有下一页', name='has_more'),
    groups?: [
      {
        groupId?: int64(description='考勤组id', name='group_id'),
        isDefault?: boolean(description='是否默认考勤组', name='is_default'),
        groupName?: string(description='考勤组名称', name='group_name'),
        selectedClass?: [
          {
            setting?: {
              classSettingId?: int64(description='考勤组班次id', name='class_setting_id'),
              restBeginTime?: {
                checkTime?: string(description='开始时间', pattern='\\\\d{4}[-]\\\\d{1,2}[-]\\\\d{1,2}[T]\\\\d{2}:\\\\d{2}:\\\\d{2}[Z]', name='check_time'),
              }(description='休息开始时间，只有一个时间段的班次有', name='rest_begin_time'),
              permitLateMinutes?: int64(description='允许迟到时长，单位分钟', name='permit_late_minutes'),
              workTimeMinutes?: int64(description='工作时长，单位分钟，-1表示关闭该功能', name='work_time_minutes'),
              restEndTime?: {
                checkTime?: string(description='结束时间', pattern='\\\\d{4}[-]\\\\d{1,2}[-]\\\\d{1,2}[T]\\\\d{2}:\\\\d{2}:\\\\d{2}[Z]', name='check_time'),
              }(description='休息结束时间，只有一个时间段的班次有', name='rest_end_time'),
              absenteeismLateMinutes?: int64(description='旷工迟到时长,单位分钟', name='absenteeism_late_minutes'),
              seriousLateMinutes?: int64(description='严重迟到时长,单位分钟', name='serious_late_minutes'),
              isOffDutyFreeCheck?: string(description='Y表示下班不强制打卡,N表示下班强制打卡', name='is_off_duty_free_check'),
            }(description='考勤组班次配置', name='setting'),
            classId?: int64(description='考勤班次id', name='class_id'),
            sections?: [
              {
                times?: [
                  {
                    checkTime?: string(description='打卡时间', pattern='\\\\d{4}[-]\\\\d{1,2}[-]\\\\d{1,2}[T]\\\\d{2}:\\\\d{2}:\\\\d{2}[Z]', name='check_time'),
                    checkType?: string(description='打卡类型枚举（Onduty和OffDuty）', name='check_type'),
                    across?: int64(description='打卡时间跨度', name='across'),
                  }
                ](description='时间段列表', name='times'),
              }
            ](description='班次打卡时间段,最多', name='sections'),
            className?: string(description='考勤班次名称', name='class_name'),
          }
        ](description='考勤组对应的考勤班次列表', name='selected_class'),
        type?: string(description='考勤类型，FIXED为固定排班，TURN为轮班排班，NONE为无班次', name='type'),
        memberCount?: int64(description='成员人数', name='member_count'),
        defaultClassId?: int64(description='默认班次id', name='default_class_id'),
        workDayList?: [ string ](description='固定班次的工作日班次', name='work_day_list'),
        classesList?: [ string ](description='一周的班次时间展示列表。["周一、二 班次A:09:00-18:00", "周六、周日 休息"]', name='classes_list'),
        managerList?: [ string ](description='考勤组负责人', name='manager_list'),
        deptNameList?: [ string ](description='关联的部门', name='dept_name_list'),
        userIds?: [ string ](description='考勤组里按照人添加的人', name='user_ids'),
        deptIds?: [ int64 ](description='考勤组添加的部门Id列表', name='dept_ids'),
        ownerUserId?: string(description='考勤组主负责人', name='owner_user_id'),
      }
    ](description='考勤组列表', name='groups'),
  }(description='result', name='result'),
}

model GetsimplegroupsOapiAttendanceResponse = {
  headers: map[string]string,
  body: GetsimplegroupsOapiAttendanceResponseBody,
}

/**
 * Description: 获取公司自身的考勤组列表详情信息
 */
async function getsimplegroupsOapiAttendance(request: GetsimplegroupsOapiAttendanceRequest): GetsimplegroupsOapiAttendanceResponse {
  var runtime = new Util.RuntimeOptions{};
  return getsimplegroupsOapiAttendanceEx(request, runtime);
}

/**
 * Description: 获取公司自身的考勤组列表详情信息
 */
async function getsimplegroupsOapiAttendanceEx(request: GetsimplegroupsOapiAttendanceRequest, runtime: Util.RuntimeOptions): GetsimplegroupsOapiAttendanceResponse {
  Util.validateModel(request);
  var appParams = Util.stringifyMapValue(Util.toMap(request.params));
  return doRequestOApi('POST', '/topapi/attendance/getsimplegroups', request.headers, appParams, runtime);
}

model GetleaveapprovedurationOapiAttendanceParams = {
  userid: string(description='员工在企业内的UserID，企业用来唯一标识用户的字段。', name='userid'),
  fromDate: string(description='请假开始时间', pattern='\\\\d{4}[-]\\\\d{1,2}[-]\\\\d{1,2}[T]\\\\d{2}:\\\\d{2}:\\\\d{2}[Z]', name='from_date'),
  toDate: string(description='请假结束时间', pattern='\\\\d{4}[-]\\\\d{1,2}[-]\\\\d{1,2}[T]\\\\d{2}:\\\\d{2}:\\\\d{2}[Z]', name='to_date'),
}

model GetleaveapprovedurationOapiAttendanceRequest = {
  headers?: map[string]string,
  params:GetleaveapprovedurationOapiAttendanceParams,
}

model GetleaveapprovedurationOapiAttendanceResponseBody = {
  result?: {
    durationInMinutes?: int64(description='请假时长（单位分钟）', name='duration_in_minutes'),
  }(description='result', name='result'),
  errcode?: int64(description='errcode', name='errcode'),
  errmsg?: string(description='errmsg', name='errmsg'),
}

model GetleaveapprovedurationOapiAttendanceResponse = {
  headers: map[string]string,
  body: GetleaveapprovedurationOapiAttendanceResponseBody,
}

/**
 * Description: 钉钉考勤微应用，提供了排班的功能，企业管理员可以设置排班规则，该接口可以自动根据排班规则统计出每个员工的请假时长，进而可以与企业自有的请假／财务系统对接，进行工资统计，如果您的企业使用了钉钉考勤并希望依赖考勤系统自动计算员工请假时长，可选择使用此接口
 */
async function getleaveapprovedurationOapiAttendance(request: GetleaveapprovedurationOapiAttendanceRequest): GetleaveapprovedurationOapiAttendanceResponse {
  var runtime = new Util.RuntimeOptions{};
  return getleaveapprovedurationOapiAttendanceEx(request, runtime);
}

/**
 * Description: 钉钉考勤微应用，提供了排班的功能，企业管理员可以设置排班规则，该接口可以自动根据排班规则统计出每个员工的请假时长，进而可以与企业自有的请假／财务系统对接，进行工资统计，如果您的企业使用了钉钉考勤并希望依赖考勤系统自动计算员工请假时长，可选择使用此接口
 */
async function getleaveapprovedurationOapiAttendanceEx(request: GetleaveapprovedurationOapiAttendanceRequest, runtime: Util.RuntimeOptions): GetleaveapprovedurationOapiAttendanceResponse {
  Util.validateModel(request);
  var appParams = Util.stringifyMapValue(Util.toMap(request.params));
  return doRequestOApi('POST', '/topapi/attendance/getleaveapproveduration', request.headers, appParams, runtime);
}

model ListOapiHireStatisticsBizflowParams = {
  cursor?: string(description='分页游标位置，不传默认第一页', name='cursor'),
  size: int64(description='分页大小，最大200', maximum=200, name='size'),
}

model ListOapiHireStatisticsBizflowRequest = {
  headers?: map[string]string,
  params:ListOapiHireStatisticsBizflowParams,
}

model ListOapiHireStatisticsBizflowResponseBody = {
  result?: {
    nextCursor?: string(description='游标，下次分页请求使用', name='next_cursor'),
    hasMore?: boolean(description='是否还有数据', name='has_more'),
    list?: [
      {
        corpId?: string(description='企业id', name='corp_id'),
        flowId?: string(description='应聘流程id', name='flow_id'),
        candidateId?: string(description='候选人id', name='candidate_id'),
        resumeId?: string(description='简历id', name='resume_id'),
        jobId?: string(description='职位id', name='job_id'),
        flowStatus?: int64(description='应聘状态  11：待初筛  12：初筛通过 13：初筛不通过  21： 应聘流程中  22：应聘通过  23：应聘不通过(不录用)  31： offer流程中  32： offer通过(录用)  33：offer失败  34： offer取消(取消录用)  41：待入职  42：已入职', name='flow_status'),
        recruitId?: string(description='应聘id', name='recruit_id'),
        ownerUserid?: string(description='负责人userid', name='owner_userid'),
        creatorUserid?: string(description='创建人userid', name='creator_userid'),
        gmtCreateMils?: int64(description='创建时间，unix时间戳，单位毫秒', name='gmt_create_mils'),
        gmtModifiedMils?: int64(description='更新时间，unix时间戳，单位毫秒', name='gmt_modified_mils'),
      }
    ](description='职位信息列表', name='list'),
  }(description='分页结果', name='result'),
  errcode?: int64(description='错误码', name='errcode'),
  errmsg?: string(description='错误信息', name='errmsg'),
}

model ListOapiHireStatisticsBizflowResponse = {
  headers: map[string]string,
  body: ListOapiHireStatisticsBizflowResponseBody,
}

/**
 * Description: 获取业务流程的基本信息
 */
async function listOapiHireStatisticsBizflow(request: ListOapiHireStatisticsBizflowRequest): ListOapiHireStatisticsBizflowResponse {
  var runtime = new Util.RuntimeOptions{};
  return listOapiHireStatisticsBizflowEx(request, runtime);
}

/**
 * Description: 获取业务流程的基本信息
 */
async function listOapiHireStatisticsBizflowEx(request: ListOapiHireStatisticsBizflowRequest, runtime: Util.RuntimeOptions): ListOapiHireStatisticsBizflowResponse {
  Util.validateModel(request);
  var appParams = Util.stringifyMapValue(Util.toMap(request.params));
  return doRequestOApi('POST', '/topapi/hire/statistics/bizflow/list', request.headers, appParams, runtime);
}

model AddrolesforempsOapiRoleParams = {
  roleIds: [ int64 ](description='角色id list', maxItems=20, name='roleIds'),
  userIds: [ string ](description='员工id list', maxItems=20, name='userIds'),
}

model AddrolesforempsOapiRoleRequest = {
  headers?: map[string]string,
  params:AddrolesforempsOapiRoleParams,
}

model AddrolesforempsOapiRoleResponseBody = {
  errcode?: int64(description='errcode', name='errcode'),
  errmsg?: string(description='errmsg', name='errmsg'),
}

model AddrolesforempsOapiRoleResponse = {
  headers: map[string]string,
  body: AddrolesforempsOapiRoleResponseBody,
}

/**
 * Description: 企业在做企业员工管理的时候，需要对部分员工进行角色分类，该接口可以批量为员工增加角色信息
 */
async function addrolesforempsOapiRole(request: AddrolesforempsOapiRoleRequest): AddrolesforempsOapiRoleResponse {
  var runtime = new Util.RuntimeOptions{};
  return addrolesforempsOapiRoleEx(request, runtime);
}

/**
 * Description: 企业在做企业员工管理的时候，需要对部分员工进行角色分类，该接口可以批量为员工增加角色信息
 */
async function addrolesforempsOapiRoleEx(request: AddrolesforempsOapiRoleRequest, runtime: Util.RuntimeOptions): AddrolesforempsOapiRoleResponse {
  Util.validateModel(request);
  var appParams = Util.stringifyMapValue(Util.toMap(request.params));
  return doRequestOApi('POST', '/topapi/role/addrolesforemps', request.headers, appParams, runtime);
}

model ListOapiAtsStatisticsJobParams = {
  bizCode: string(description='招聘业务标识', name='biz_code'),
  cursor?: string(description='分页游标位置，不传默认第一页', name='cursor'),
  size: int64(description='分页大小，最大200', maximum=200, name='size'),
}

model ListOapiAtsStatisticsJobRequest = {
  headers?: map[string]string,
  params:ListOapiAtsStatisticsJobParams,
}

model ListOapiAtsStatisticsJobResponseBody = {
  result?: {
    nextCursor?: string(description='游标，下次分页请求使用', name='next_cursor'),
    hasMore?: boolean(description='是否还有数据', name='has_more'),
    list?: [
      {
        bizCode?: string(description='招聘业务标识', name='biz_code'),
        corpId?: string(description='企业id', name='corp_id'),
        jobId?: string(description='职位id', name='job_id'),
        name?: string(description='职位名称', name='name'),
        status?: int64(description='0：新创建  1：已发布  2：废弃  3：招满', name='status'),
        mainDeptId?: int64(description='职位归属部门id', name='main_dept_id'),
        headCount?: int64(description='招聘人数', name='head_count'),
        ownerUserid?: string(description='职位负责人id', name='owner_userid'),
        creatorUserid?: string(description='职位创建人id', name='creator_userid'),
        gmtCreateMils?: int64(description='创建时间，unix时间戳，单位毫秒', name='gmt_create_mils'),
        gmtModifiedMils?: int64(description='更新时间，unix时间戳，单位毫秒', name='gmt_modified_mils'),
      }
    ](description='职位信息列表', name='list'),
  }(description='分页结果', name='result'),
  errcode?: int64(description='错误码', name='errcode'),
  errmsg?: string(description='错误信息', name='errmsg'),
}

model ListOapiAtsStatisticsJobResponse = {
  headers: map[string]string,
  body: ListOapiAtsStatisticsJobResponseBody,
}

/**
 * Description: 获取职位的基本信息
 */
async function listOapiAtsStatisticsJob(request: ListOapiAtsStatisticsJobRequest): ListOapiAtsStatisticsJobResponse {
  var runtime = new Util.RuntimeOptions{};
  return listOapiAtsStatisticsJobEx(request, runtime);
}

/**
 * Description: 获取职位的基本信息
 */
async function listOapiAtsStatisticsJobEx(request: ListOapiAtsStatisticsJobRequest, runtime: Util.RuntimeOptions): ListOapiAtsStatisticsJobResponse {
  Util.validateModel(request);
  var appParams = Util.stringifyMapValue(Util.toMap(request.params));
  return doRequestOApi('POST', '/topapi/ats/statistics/job/list', request.headers, appParams, runtime);
}

model GetOapiExtcontactParams = {
  userId: string(description='userId', name='user_id'),
}

model GetOapiExtcontactRequest = {
  headers?: map[string]string,
  params:GetOapiExtcontactParams,
}

model GetOapiExtcontactResponseBody = {
  result?: {
    title?: string(description='职位', name='title'),
    shareDeptIds?: [ int64 ](description='共享部门ID列表', name='share_dept_ids'),
    labelIds?: [ int64 ](description='标签', name='label_ids'),
    remark?: string(description='备注', name='remark'),
    address?: string(description='地址', name='address'),
    name?: string(description='姓名', name='name'),
    followerUserId?: string(description='负责人UserID', name='follower_user_id'),
    stateCode?: string(description='国家码', name='state_code'),
    companyName?: string(description='公司名', name='company_name'),
    shareUserIds?: [ string ](description='共享员工UserID列表', name='share_user_ids'),
    mobile?: string(description='手机号', name='mobile'),
    userid?: string(description='外部联系人UserID', name='userid'),
    email?: string(description='邮箱', name='email'),
  }(description='result', name='result'),
  errcode?: int64(description='errcode', name='errcode'),
  errmsg?: string(description='errmsg', name='errmsg'),
}

model GetOapiExtcontactResponse = {
  headers: map[string]string,
  body: GetOapiExtcontactResponseBody,
}

/**
 * Description: 获取企业外部联系人详情
 */
async function getOapiExtcontact(request: GetOapiExtcontactRequest): GetOapiExtcontactResponse {
  var runtime = new Util.RuntimeOptions{};
  return getOapiExtcontactEx(request, runtime);
}

/**
 * Description: 获取企业外部联系人详情
 */
async function getOapiExtcontactEx(request: GetOapiExtcontactRequest, runtime: Util.RuntimeOptions): GetOapiExtcontactResponse {
  Util.validateModel(request);
  var appParams = Util.stringifyMapValue(Util.toMap(request.params));
  return doRequestOApi('POST', '/topapi/extcontact/get', request.headers, appParams, runtime);
}

model ListOapiAtsStatisticsResumeParams = {
  bizCode: string(description='招聘业务标识', name='biz_code'),
  cursor?: string(description='分页游标位置，不传默认第一页', name='cursor'),
  size: int64(description='分页大小，最大200', maximum=200, name='size'),
}

model ListOapiAtsStatisticsResumeRequest = {
  headers?: map[string]string,
  params:ListOapiAtsStatisticsResumeParams,
}

model ListOapiAtsStatisticsResumeResponseBody = {
  errcode?: int64(description='错误码', name='errcode'),
  errmsg?: string(description='错误信息', name='errmsg'),
  result?: {
    nextCursor?: string(description='游标，下次分页请求使用', name='next_cursor'),
    hasMore?: boolean(description='是否还有数据', name='has_more'),
    list?: [
      {
        bizCode?: string(description='招聘业务标识', name='biz_code'),
        corpId?: string(description='企业id', name='corp_id'),
        resumeId?: string(description='简历id', name='resume_id'),
        channel?: string(description='lagou,51job,58tongcheng,zhilian,liepin,boss,other', name='channel'),
        candidateId?: string(description='候选人id', name='candidate_id'),
        gmtCreateMils?: int64(description='创建时间，unix时间戳，单位毫秒', name='gmt_create_mils'),
        gmtModifiedMils?: int64(description='更新时间，unix时间戳，单位毫秒', name='gmt_modified_mils'),
      }
    ](description='简历信息列表', name='list'),
  }(description='分页结果', name='result'),
}

model ListOapiAtsStatisticsResumeResponse = {
  headers: map[string]string,
  body: ListOapiAtsStatisticsResumeResponseBody,
}

/**
 * Description: 获取简历的基本信息
 */
async function listOapiAtsStatisticsResume(request: ListOapiAtsStatisticsResumeRequest): ListOapiAtsStatisticsResumeResponse {
  var runtime = new Util.RuntimeOptions{};
  return listOapiAtsStatisticsResumeEx(request, runtime);
}

/**
 * Description: 获取简历的基本信息
 */
async function listOapiAtsStatisticsResumeEx(request: ListOapiAtsStatisticsResumeRequest, runtime: Util.RuntimeOptions): ListOapiAtsStatisticsResumeResponse {
  Util.validateModel(request);
  var appParams = Util.stringifyMapValue(Util.toMap(request.params));
  return doRequestOApi('POST', '/topapi/ats/statistics/resume/list', request.headers, appParams, runtime);
}

model GetusergroupOapiAttendanceParams = {
  userid: string(description='员工在企业内的UserID，企业用来唯一标识用户的字段。', name='userid'),
}

model GetusergroupOapiAttendanceRequest = {
  headers?: map[string]string,
  params:GetusergroupOapiAttendanceParams,
}

model GetusergroupOapiAttendanceResponseBody = {
  result?: {
    name?: string(description='考勤组名称', name='name'),
    groupId?: int64(description='考勤组id', name='group_id'),
    type?: string(description='考勤组类型', name='type'),
    classes?: [
      {
        classId?: int64(description='班次id', name='class_id'),
        name?: string(description='班次名称', name='name'),
        sections?: [
          {
            times?: [
              {
                checkTime?: string(description='打卡时间', pattern='\\\\d{4}[-]\\\\d{1,2}[-]\\\\d{1,2}[T]\\\\d{2}:\\\\d{2}:\\\\d{2}[Z]', name='check_time'),
                checkType?: string(description='打卡类型OnDuty：上班，OffDuty：下班', name='check_type'),
                across?: int64(description='打卡时间跨几天', name='across'),
                beginMin?: int64(description='允许的最早提前打卡时间，分钟为单位', name='begin_min'),
                endMin?: int64(description='允许的最晚延后打卡时间，分钟为单位', name='end_min'),
              }
            ](description='班次中上下班详情列表', name='times'),
          }
        ](description='班次中上下班列表', name='sections'),
        setting?: {
          restBeginTime?: {
            across?: int64(description='across', name='across'),
            beginMin?: int64(description='beginMin', name='begin_min'),
            endMin?: int64(description='endMin', name='end_min'),
            checkTime?: string(description='开始时间', pattern='\\\\d{4}[-]\\\\d{1,2}[-]\\\\d{1,2}[T]\\\\d{2}:\\\\d{2}:\\\\d{2}[Z]', name='check_time'),
            checkType?: string(description='类型OnDuty：休息开始，OffDuty：休息结束', name='check_type'),
          }(description='休息开始时间', name='rest_begin_time'),
          restEndTime?: {
            across?: int64(description='across', name='across'),
            beginMin?: int64(description='beginMin', name='begin_min'),
            endMin?: int64(description='endMin', name='end_min'),
            checkTime?: string(description='结束时间', pattern='\\\\d{4}[-]\\\\d{1,2}[-]\\\\d{1,2}[T]\\\\d{2}:\\\\d{2}:\\\\d{2}[Z]', name='check_time'),
            checkType?: string(description='类型OnDuty：休息开始，OffDuty：休息结束', name='check_type'),
          }(description='休息结束时间', name='rest_end_time'),
        }(description='班次配置', name='setting'),
      }
    ](description='考勤组中的班次列表', name='classes'),
  }(description='result', name='result'),
  errcode?: int64(description='errcode', name='errcode'),
  errmsg?: string(description='errmsg', name='errmsg'),
}

model GetusergroupOapiAttendanceResponse = {
  headers: map[string]string,
  body: GetusergroupOapiAttendanceResponseBody,
}

/**
 * Description: 在钉钉考勤微应用中，考勤组是一类具有相同的班次、考勤位置等考勤规则的人或部门的组合，一个企业中的一个人只能属于一个考勤组。如果您的企业使用了钉钉考勤并希望获取员工的考勤组信息，可选择使用此接口
 */
async function getusergroupOapiAttendance(request: GetusergroupOapiAttendanceRequest): GetusergroupOapiAttendanceResponse {
  var runtime = new Util.RuntimeOptions{};
  return getusergroupOapiAttendanceEx(request, runtime);
}

/**
 * Description: 在钉钉考勤微应用中，考勤组是一类具有相同的班次、考勤位置等考勤规则的人或部门的组合，一个企业中的一个人只能属于一个考勤组。如果您的企业使用了钉钉考勤并希望获取员工的考勤组信息，可选择使用此接口
 */
async function getusergroupOapiAttendanceEx(request: GetusergroupOapiAttendanceRequest, runtime: Util.RuntimeOptions): GetusergroupOapiAttendanceResponse {
  Util.validateModel(request);
  var appParams = Util.stringifyMapValue(Util.toMap(request.params));
  return doRequestOApi('POST', '/topapi/attendance/getusergroup', request.headers, appParams, runtime);
}

model RemoverolesforempsOapiRoleParams = {
  roleIds: [ int64 ](description='角色标签id', maxItems=20, name='roleIds'),
  userIds: [ string ](description='用户userId', maxItems=100, name='userIds'),
}

model RemoverolesforempsOapiRoleRequest = {
  headers?: map[string]string,
  params:RemoverolesforempsOapiRoleParams,
}

model RemoverolesforempsOapiRoleResponseBody = {
  errcode?: int64(description='errcode', name='errcode'),
  errmsg?: string(description='errmsg', name='errmsg'),
}

model RemoverolesforempsOapiRoleResponse = {
  headers: map[string]string,
  body: RemoverolesforempsOapiRoleResponseBody,
}

/**
 * Description: 企业在做企业员工管理的时候，需要对部分员工进行角色分类，该接口可以批量删除员工的角色信息。 角色在钉钉的组织结构里面就是标签的意思，你可以批量为一批用户添加一批角色信息（dingtalk.corp.role.addrolesforemps），那么调用该接口就可以批量删除已经存在的角色和员工对应关系，角色和员工是多对多的关系。参考代码如下： req.setRolelidList("1,2,3,4,5"); // 已经存在的角色id列表 req.setUseridList("a,b,c,d,e"); // 用户的id列表
 */
async function removerolesforempsOapiRole(request: RemoverolesforempsOapiRoleRequest): RemoverolesforempsOapiRoleResponse {
  var runtime = new Util.RuntimeOptions{};
  return removerolesforempsOapiRoleEx(request, runtime);
}

/**
 * Description: 企业在做企业员工管理的时候，需要对部分员工进行角色分类，该接口可以批量删除员工的角色信息。 角色在钉钉的组织结构里面就是标签的意思，你可以批量为一批用户添加一批角色信息（dingtalk.corp.role.addrolesforemps），那么调用该接口就可以批量删除已经存在的角色和员工对应关系，角色和员工是多对多的关系。参考代码如下： req.setRolelidList("1,2,3,4,5"); // 已经存在的角色id列表 req.setUseridList("a,b,c,d,e"); // 用户的id列表
 */
async function removerolesforempsOapiRoleEx(request: RemoverolesforempsOapiRoleRequest, runtime: Util.RuntimeOptions): RemoverolesforempsOapiRoleResponse {
  Util.validateModel(request);
  var appParams = Util.stringifyMapValue(Util.toMap(request.params));
  return doRequestOApi('POST', '/topapi/role/removerolesforemps', request.headers, appParams, runtime);
}

model DeleteroleOapiRoleParams = {
  roleId: int64(description='角色id', name='role_id'),
}

model DeleteroleOapiRoleRequest = {
  headers?: map[string]string,
  params:DeleteroleOapiRoleParams,
}

model DeleteroleOapiRoleResponseBody = {
  errcode?: int64(description='errcode', name='errcode'),
  errmsg?: string(description='errmsg', name='errmsg'),
}

model DeleteroleOapiRoleResponse = {
  headers: map[string]string,
  body: DeleteroleOapiRoleResponseBody,
}

/**
 * Description: 企业在做企业内部组织结构角色管理的时候，如果需要删除该企业下某个角色信息，可以调用该接口。调用的前提是该角色下面的所有员工都已经被删除该角色
 */
async function deleteroleOapiRole(request: DeleteroleOapiRoleRequest): DeleteroleOapiRoleResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteroleOapiRoleEx(request, runtime);
}

/**
 * Description: 企业在做企业内部组织结构角色管理的时候，如果需要删除该企业下某个角色信息，可以调用该接口。调用的前提是该角色下面的所有员工都已经被删除该角色
 */
async function deleteroleOapiRoleEx(request: DeleteroleOapiRoleRequest, runtime: Util.RuntimeOptions): DeleteroleOapiRoleResponse {
  Util.validateModel(request);
  var appParams = Util.stringifyMapValue(Util.toMap(request.params));
  return doRequestOApi('POST', '/topapi/role/deleterole', request.headers, appParams, runtime);
}

model GetOapiVillageScreenParams = {
  req?: {
    params?: string(description='-', name='params'),
  }(description='-', name='req'),
}

model GetOapiVillageScreenRequest = {
  headers?: map[string]string,
  params?:GetOapiVillageScreenParams,
}

model GetOapiVillageScreenResponseBody = {
  result?: string(description='-', name='result'),
  success?: boolean(description='-', name='success'),
  errcode?: int64(description='-', name='errcode'),
  errmsg?: string(description='-', name='errmsg'),
}

model GetOapiVillageScreenResponse = {
  headers: map[string]string,
  body: GetOapiVillageScreenResponseBody,
}

/**
 * Description: 获取数字乡村组织的大屏信息
 */
async function getOapiVillageScreen(request: GetOapiVillageScreenRequest): GetOapiVillageScreenResponse {
  var runtime = new Util.RuntimeOptions{};
  return getOapiVillageScreenEx(request, runtime);
}

/**
 * Description: 获取数字乡村组织的大屏信息
 */
async function getOapiVillageScreenEx(request: GetOapiVillageScreenRequest, runtime: Util.RuntimeOptions): GetOapiVillageScreenResponse {
  Util.validateModel(request);
  var appParams = Util.stringifyMapValue(Util.toMap(request.params));
  return doRequestOApi('POST', '/topapi/village/screen/get', request.headers, appParams, runtime);
}

model GetrolegroupOapiRoleParams = {
  groupId: int64(description='角色组的Id', name='group_id'),
}

model GetrolegroupOapiRoleRequest = {
  headers?: map[string]string,
  params:GetrolegroupOapiRoleParams,
}

model GetrolegroupOapiRoleResponseBody = {
  roleGroup?: {
    roles?: [
      {
        roleId?: int64(description='角色id', name='role_id'),
        roleName?: string(description='角色名', name='role_name'),
      }
    ](description='角色列表信息', name='roles'),
    groupName?: string(description='角色组名', name='group_name'),
  }(description='角色组信息', name='role_group'),
  errcode?: int64(description='errcode', name='errcode'),
  errmsg?: string(description='errmsg', name='errmsg'),
}

model GetrolegroupOapiRoleResponse = {
  headers: map[string]string,
  body: GetrolegroupOapiRoleResponseBody,
}

/**
 * Description: 该接口通过groupId参数可以获取该角色组详细信息以及下面所有关联的角色的信息
 */
async function getrolegroupOapiRole(request: GetrolegroupOapiRoleRequest): GetrolegroupOapiRoleResponse {
  var runtime = new Util.RuntimeOptions{};
  return getrolegroupOapiRoleEx(request, runtime);
}

/**
 * Description: 该接口通过groupId参数可以获取该角色组详细信息以及下面所有关联的角色的信息
 */
async function getrolegroupOapiRoleEx(request: GetrolegroupOapiRoleRequest, runtime: Util.RuntimeOptions): GetrolegroupOapiRoleResponse {
  Util.validateModel(request);
  var appParams = Util.stringifyMapValue(Util.toMap(request.params));
  return doRequestOApi('POST', '/topapi/role/getrolegroup', request.headers, appParams, runtime);
}

model DeleteOapiCalendarParams = {
  userid?: string(description='员工id', name='userid'),
  calendarId?: string(description='日程id', name='calendar_id'),
}

model DeleteOapiCalendarRequest = {
  headers?: map[string]string,
  params?:DeleteOapiCalendarParams,
}

model DeleteOapiCalendarResponseBody = {
  errmsg?: string(description='错误信息', name='errmsg'),
  errcode?: int64(description='错误码', name='errcode'),
}

model DeleteOapiCalendarResponse = {
  headers: map[string]string,
  body: DeleteOapiCalendarResponseBody,
}

/**
 * Description: 删除一个指定的日程
 */
async function deleteOapiCalendar(request: DeleteOapiCalendarRequest): DeleteOapiCalendarResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteOapiCalendarEx(request, runtime);
}

/**
 * Description: 删除一个指定的日程
 */
async function deleteOapiCalendarEx(request: DeleteOapiCalendarRequest, runtime: Util.RuntimeOptions): DeleteOapiCalendarResponse {
  Util.validateModel(request);
  var appParams = Util.stringifyMapValue(Util.toMap(request.params));
  return doRequestOApi('POST', '/topapi/calendar/delete', request.headers, appParams, runtime);
}

model GetuseridsOapiWorkspaceCorpMemberParams = {
  sourceCorpId: string(description='小圈corpId', name='source_corp_id'),
  userids: [ string ](description='小圈的userid列表', maxItems=20, name='userids'),
}

model GetuseridsOapiWorkspaceCorpMemberRequest = {
  headers?: map[string]string,
  params:GetuseridsOapiWorkspaceCorpMemberParams,
}

model GetuseridsOapiWorkspaceCorpMemberResponseBody = {
  errmsg?: string(description='错误信息', name='errmsg'),
  errcode?: int64(description='错误码', name='errcode'),
  result?: string(description='userid到userid的映射', name='result'),
}

model GetuseridsOapiWorkspaceCorpMemberResponse = {
  headers: map[string]string,
  body: GetuseridsOapiWorkspaceCorpMemberResponseBody,
}

/**
 * Description: 以运营主体或归属企业的身份，通过传递小圈和小圈userid列表换取与当前组织的userid映射，子圈userId-> (运营主体或归属企业)大圈userId
 */
async function getuseridsOapiWorkspaceCorpMember(request: GetuseridsOapiWorkspaceCorpMemberRequest): GetuseridsOapiWorkspaceCorpMemberResponse {
  var runtime = new Util.RuntimeOptions{};
  return getuseridsOapiWorkspaceCorpMemberEx(request, runtime);
}

/**
 * Description: 以运营主体或归属企业的身份，通过传递小圈和小圈userid列表换取与当前组织的userid映射，子圈userId-> (运营主体或归属企业)大圈userId
 */
async function getuseridsOapiWorkspaceCorpMemberEx(request: GetuseridsOapiWorkspaceCorpMemberRequest, runtime: Util.RuntimeOptions): GetuseridsOapiWorkspaceCorpMemberResponse {
  Util.validateModel(request);
  var appParams = Util.stringifyMapValue(Util.toMap(request.params));
  return doRequestOApi('POST', '/topapi/workspace/corp/member/getuserids', request.headers, appParams, runtime);
}

model GetOapiCheckinRecordParams = {
  useridList: [ string ](description='需要查询的用户列表', maxItems=10, name='userid_list'),
  startTime: int64(description='起始时间,单位毫秒', name='start_time'),
  endTime: int64(description='截止时间，单位毫秒。如果是取1个人的数据，时间范围最大到10天，如果是取多个人的数据，时间范围最大1天。', name='end_time'),
  cursor: int64(description='分页查询的游标，最开始可以传0', name='cursor'),
  size: int64(description='分页查询的每页大小，最大100', name='size'),
}

model GetOapiCheckinRecordRequest = {
  headers?: map[string]string,
  params:GetOapiCheckinRecordParams,
}

model GetOapiCheckinRecordResponseBody = {
  result?: {
    nextCursor?: int64(description='表示下次查询的游标，为null代表没有更多的数据了', name='next_cursor'),
    pageList?: [
      {
        checkinTime?: int64(description='签到时间,单位毫秒', name='checkin_time'),
        imageList?: [ string ](description='签到照片url列表', name='image_list'),
        detailPlace?: string(description='签到详细地址', name='detail_place'),
        remark?: string(description='签到备注', name='remark'),
        userid?: string(description='员工唯一标识', name='userid'),
        place?: string(description='签到地址', name='place'),
        longitude?: string(description='签到位置经度（暂未开放）', name='longitude'),
        latitude?: string(description='签到位置维度（暂未开放）', name='latitude'),
        visitUser?: string(description='签到的拜访对象，可以为外部联系人的userid或者用户自己输入的名字', name='visit_user'),
      }
    ](description='分页列表', name='page_list'),
  }(description='result', name='result'),
  errcode?: int64(description='errcode', name='errcode'),
  errmsg?: string(description='errmsg', name='errmsg'),
}

model GetOapiCheckinRecordResponse = {
  headers: map[string]string,
  body: GetOapiCheckinRecordResponseBody,
}

/**
 * Description: 查询多个用户一段时间范围内的签到记录，只给企业调用，ISV无法调用。
 */
async function getOapiCheckinRecord(request: GetOapiCheckinRecordRequest): GetOapiCheckinRecordResponse {
  var runtime = new Util.RuntimeOptions{};
  return getOapiCheckinRecordEx(request, runtime);
}

/**
 * Description: 查询多个用户一段时间范围内的签到记录，只给企业调用，ISV无法调用。
 */
async function getOapiCheckinRecordEx(request: GetOapiCheckinRecordRequest, runtime: Util.RuntimeOptions): GetOapiCheckinRecordResponse {
  Util.validateModel(request);
  var appParams = Util.stringifyMapValue(Util.toMap(request.params));
  return doRequestOApi('POST', '/topapi/checkin/record/get', request.headers, appParams, runtime);
}

model UpdateOapiExtcontactParams = {
  contact: {
    title?: string(description='职位', name='title'),
    labelIds: [ int64 ](description='标签列表', maxItems=20, name='label_ids'),
    shareDeptIds?: [ int64 ](description='共享给的部门ID', maxItems=20, name='share_dept_ids'),
    address?: string(description='地址', name='address'),
    remark?: string(description='备注', name='remark'),
    followerUserId: string(description='负责人userId', name='follower_user_id'),
    name: string(description='名称', name='name'),
    userId: string(description='该外部联系人的userId', name='user_id'),
    companyName?: string(description='企业名', name='company_name'),
    shareUserIds?: [ string ](description='共享给的员工userId列表', maxItems=20, name='share_user_ids'),
  }(description='外部联系人信息', name='contact'),
}

model UpdateOapiExtcontactRequest = {
  headers?: map[string]string,
  params:UpdateOapiExtcontactParams,
}

model UpdateOapiExtcontactResponseBody = {
  errcode?: int64(description='errcode', name='errcode'),
  errmsg?: string(description='errmsg', name='errmsg'),
}

model UpdateOapiExtcontactResponse = {
  headers: map[string]string,
  body: UpdateOapiExtcontactResponseBody,
}

/**
 * Description: 更新企业外部联系人
 */
async function updateOapiExtcontact(request: UpdateOapiExtcontactRequest): UpdateOapiExtcontactResponse {
  var runtime = new Util.RuntimeOptions{};
  return updateOapiExtcontactEx(request, runtime);
}

/**
 * Description: 更新企业外部联系人
 */
async function updateOapiExtcontactEx(request: UpdateOapiExtcontactRequest, runtime: Util.RuntimeOptions): UpdateOapiExtcontactResponse {
  Util.validateModel(request);
  var appParams = Util.stringifyMapValue(Util.toMap(request.params));
  return doRequestOApi('POST', '/topapi/extcontact/update', request.headers, appParams, runtime);
}

model DeleteOapiExtcontactParams = {
  userId: string(description='userId', name='user_id'),
}

model DeleteOapiExtcontactRequest = {
  headers?: map[string]string,
  params:DeleteOapiExtcontactParams,
}

model DeleteOapiExtcontactResponseBody = {
  errcode?: int64(description='errcode', name='errcode'),
  errmsg?: string(description='errmsg', name='errmsg'),
}

model DeleteOapiExtcontactResponse = {
  headers: map[string]string,
  body: DeleteOapiExtcontactResponseBody,
}

/**
 * Description: 删除企业外部联系人
 */
async function deleteOapiExtcontact(request: DeleteOapiExtcontactRequest): DeleteOapiExtcontactResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteOapiExtcontactEx(request, runtime);
}

/**
 * Description: 删除企业外部联系人
 */
async function deleteOapiExtcontactEx(request: DeleteOapiExtcontactRequest, runtime: Util.RuntimeOptions): DeleteOapiExtcontactResponse {
  Util.validateModel(request);
  var appParams = Util.stringifyMapValue(Util.toMap(request.params));
  return doRequestOApi('POST', '/topapi/extcontact/delete', request.headers, appParams, runtime);
}

model SyncOapiProcessParams = {
  agentId: int64(description='企业微应用标识', name='agent_id'),
  srcProcessCode: string(description='源审批流的唯一码', name='src_process_code'),
  targetProcessCode: string(description='目标审批流的唯一码', name='target_process_code'),
  bizCategoryId?: string(description='业务分类标识（建议采用JAVA包名的命名方式,如:com.alibaba）', maxLength=64, name='biz_category_id'),
  processName?: string(description='审批流名称', maxLength=64, name='process_name'),
}

model SyncOapiProcessRequest = {
  headers?: map[string]string,
  params:SyncOapiProcessParams,
}

model SyncOapiProcessResponseBody = {
  errcode?: int64(description='errcode', name='errcode'),
  errmsg?: string(description='errmsg', name='errmsg'),
}

model SyncOapiProcessResponse = {
  headers: map[string]string,
  body: SyncOapiProcessResponseBody,
}

/**
 * Description: ISV调用该接口，可以更新对应授权企业的审批单
 */
async function syncOapiProcess(request: SyncOapiProcessRequest): SyncOapiProcessResponse {
  var runtime = new Util.RuntimeOptions{};
  return syncOapiProcessEx(request, runtime);
}

/**
 * Description: ISV调用该接口，可以更新对应授权企业的审批单
 */
async function syncOapiProcessEx(request: SyncOapiProcessRequest, runtime: Util.RuntimeOptions): SyncOapiProcessResponse {
  Util.validateModel(request);
  var appParams = Util.stringifyMapValue(Util.toMap(request.params));
  return doRequestOApi('POST', '/topapi/process/sync', request.headers, appParams, runtime);
}

model ListOapiExtcontactParams = {
  size?: int64(description='分页大小, 最大100', name='size'),
  offset?: int64(description='偏移位置', name='offset'),
}

model ListOapiExtcontactRequest = {
  headers?: map[string]string,
  params?:ListOapiExtcontactParams,
}

model ListOapiExtcontactResponseBody = {
  results?: [
    {
      title?: string(description='职位', name='title'),
      shareDeptIds?: [ int64 ](description='共享部门ID列表', name='share_dept_ids'),
      labelIds?: [ int64 ](description='标签', name='label_ids'),
      remark?: string(description='备注', name='remark'),
      address?: string(description='地址', name='address'),
      name?: string(description='姓名', name='name'),
      followerUserId?: string(description='负责人UserID', name='follower_user_id'),
      stateCode?: string(description='国家码', name='state_code'),
      companyName?: string(description='公司名', name='company_name'),
      shareUserIds?: [ string ](description='共享员工UserID列表', name='share_user_ids'),
      mobile?: string(description='手机号', name='mobile'),
      userid?: string(description='外部联系人UserID', name='userid'),
      email?: string(description='邮箱', name='email'),
    }
  ](description='result', name='results'),
  errcode?: int64(description='errcode', name='errcode'),
  errmsg?: string(description='errmsg', name='errmsg'),
}

model ListOapiExtcontactResponse = {
  headers: map[string]string,
  body: ListOapiExtcontactResponseBody,
}

/**
 * Description: 获取企业外部联系人列表
 */
async function listOapiExtcontact(request: ListOapiExtcontactRequest): ListOapiExtcontactResponse {
  var runtime = new Util.RuntimeOptions{};
  return listOapiExtcontactEx(request, runtime);
}

/**
 * Description: 获取企业外部联系人列表
 */
async function listOapiExtcontactEx(request: ListOapiExtcontactRequest, runtime: Util.RuntimeOptions): ListOapiExtcontactResponse {
  Util.validateModel(request);
  var appParams = Util.stringifyMapValue(Util.toMap(request.params));
  return doRequestOApi('POST', '/topapi/extcontact/list', request.headers, appParams, runtime);
}

model ListlabelgroupsOapiExtcontactParams = {
  size?: int64(description='分页大小,最大100', maximum=100, name='size'),
  offset?: int64(description='偏移位置', name='offset'),
}

model ListlabelgroupsOapiExtcontactRequest = {
  headers?: map[string]string,
  params?:ListlabelgroupsOapiExtcontactParams,
}

model ListlabelgroupsOapiExtcontactResponseBody = {
  results?: [
    {
      name?: string(description='标签组名字', name='name'),
      color?: int64(description='标签组颜色', name='color'),
      labels?: [
        {
          name?: string(description='标签名字', name='name'),
          id?: int64(description='标签id', name='id'),
        }
      ](description='labels', name='labels'),
    }
  ](description='results', name='results'),
  errcode?: int64(description='errcode', name='errcode'),
  errmsg?: string(description='errmsg', name='errmsg'),
}

model ListlabelgroupsOapiExtcontactResponse = {
  headers: map[string]string,
  body: ListlabelgroupsOapiExtcontactResponseBody,
}

/**
 * Description: 获取企业外部联系人标签列表
 */
async function listlabelgroupsOapiExtcontact(request: ListlabelgroupsOapiExtcontactRequest): ListlabelgroupsOapiExtcontactResponse {
  var runtime = new Util.RuntimeOptions{};
  return listlabelgroupsOapiExtcontactEx(request, runtime);
}

/**
 * Description: 获取企业外部联系人标签列表
 */
async function listlabelgroupsOapiExtcontactEx(request: ListlabelgroupsOapiExtcontactRequest, runtime: Util.RuntimeOptions): ListlabelgroupsOapiExtcontactResponse {
  Util.validateModel(request);
  var appParams = Util.stringifyMapValue(Util.toMap(request.params));
  return doRequestOApi('POST', '/topapi/extcontact/listlabelgroups', request.headers, appParams, runtime);
}

model CreateOapiProcessinstanceParams = {
  agentId?: int64(description='企业微应用标识', name='agent_id'),
  processCode: string(description='审批流的唯一码', name='process_code'),
  originatorUserId: string(description='审批实例发起人的userid', name='originator_user_id'),
  deptId: int64(description='发起人所在的部门', name='dept_id'),
  approvers?: [ string ](description='审批人userid列表', maxItems=20, name='approvers'),
  ccList?: [ string ](description='抄送人userid列表', maxItems=20, name='cc_list'),
  ccPosition?: string(description='抄送时间,分为（START,FINISH,START_FINISH）', name='cc_position'),
  formComponentValues: [
    {
      name: string(description='表单每一栏的名称', name='name'),
      value: string(description='表单每一栏的值', name='value'),
      extValue?: string(description='扩展值', name='ext_value'),
    }
  ](description='审批流表单参数', maxItems=150, name='form_component_values'),
  approversV2?: [
    {
      taskActionType?: string(description='审批类型，会签：AND；或签：OR；单人：NONE', name='task_action_type'),
      userIds?: [ string ](description='审批人userid列表，会签/或签列表长度必须大于1，非会签/或签列表长度只能为1', maxItems=20, name='user_ids'),
    }
  ](description='审批人列表，支持会签/或签，优先级高于approvers变量', maxItems=20, name='approvers_v2'),
}

model CreateOapiProcessinstanceRequest = {
  headers?: map[string]string,
  params:CreateOapiProcessinstanceParams,
}

model CreateOapiProcessinstanceResponseBody = {
  errcode?: int64(description='errcode', name='errcode'),
  errmsg?: string(description='errmsg', name='errmsg'),
  processInstanceId?: string(description='审批实例id', name='process_instance_id'),
}

model CreateOapiProcessinstanceResponse = {
  headers: map[string]string,
  body: CreateOapiProcessinstanceResponseBody,
}

/**
 * Description: 企业或isv调用该api，来发起一个审批实例
 */
async function createOapiProcessinstance(request: CreateOapiProcessinstanceRequest): CreateOapiProcessinstanceResponse {
  var runtime = new Util.RuntimeOptions{};
  return createOapiProcessinstanceEx(request, runtime);
}

/**
 * Description: 企业或isv调用该api，来发起一个审批实例
 */
async function createOapiProcessinstanceEx(request: CreateOapiProcessinstanceRequest, runtime: Util.RuntimeOptions): CreateOapiProcessinstanceResponse {
  Util.validateModel(request);
  var appParams = Util.stringifyMapValue(Util.toMap(request.params));
  return doRequestOApi('POST', '/topapi/processinstance/create', request.headers, appParams, runtime);
}

model ListOapiProcessinstanceParams = {
  processCode: string(description='流程模板唯一标识，可在oa后台编辑审批表单部分查询', name='process_code'),
  startTime: int64(description='审批实例开始时间，毫秒级', name='start_time'),
  endTime?: int64(description='审批实例结束时间，毫秒级，默认取当前值', name='end_time'),
  size?: int64(description='分页参数，每页大小，最多传10', name='size'),
  cursor?: int64(description='分页查询的游标，最开始传0，后续传返回参数中的next_cursor值', name='cursor'),
  useridList?: [ string ](description='发起人用户id列表', maxItems=20, name='userid_list'),
}

model ListOapiProcessinstanceRequest = {
  headers?: map[string]string,
  params:ListOapiProcessinstanceParams,
}

model ListOapiProcessinstanceResponseBody = {
  result?: {
    list?: [
      {
        processInstanceId?: string(description='审批实例id', name='process_instance_id'),
        title?: string(description='标题', name='title'),
        createTime?: string(description='开始时间', pattern='\\\\d{4}[-]\\\\d{1,2}[-]\\\\d{1,2}[T]\\\\d{2}:\\\\d{2}:\\\\d{2}[Z]', name='create_time'),
        finishTime?: string(description='结束时间', pattern='\\\\d{4}[-]\\\\d{1,2}[-]\\\\d{1,2}[T]\\\\d{2}:\\\\d{2}:\\\\d{2}[Z]', name='finish_time'),
        originatorUserid?: string(description='发起人userid', name='originator_userid'),
        originatorDeptId?: string(description='发起人部门id', name='originator_dept_id'),
        status?: string(description='审批状态，分为NEW（刚创建）|RUNNING（运行中）|TERMINATED（被终止）|COMPLETED（完成）|CANCELED（取消）', name='status'),
        approverUseridList?: [ string ](description='审批人列表', name='approver_userid_list'),
        ccUseridList?: [ string ](description='抄送人列表', name='cc_userid_list'),
        processInstanceResult?: string(description='审批结果，分为agree和refuse', name='process_instance_result'),
        businessId?: string(description='流程实例业务编号', name='business_id'),
        formComponentValues?: [
          {
            name?: string(description='表单标签名', name='name'),
            value?: string(description='表单标签值', name='value'),
            id?: string(description='组件id', name='id'),
            extValue?: string(description='表单额外值', name='ext_value'),
            componentType?: string(description='组件类型', name='component_type'),
          }
        ](description='审批表单变量组', name='form_component_values'),
      }
    ](description='list', name='list'),
    nextCursor?: int64(description='表示下次查询的游标，当返回结果没有该字段时表示没有更多数据了', name='next_cursor'),
  }(description='result', name='result'),
  errcode?: int64(description='errcode', name='errcode'),
  errmsg?: string(description='errmsg', name='errmsg'),
}

model ListOapiProcessinstanceResponse = {
  headers: map[string]string,
  body: ListOapiProcessinstanceResponseBody,
}

/**
 * Description: 企业可以根据审批流的唯一标识，分页获取该审批流对应的审批实例。只能取到权限范围内的相关部门的审批实例
 */
async function listOapiProcessinstance(request: ListOapiProcessinstanceRequest): ListOapiProcessinstanceResponse {
  var runtime = new Util.RuntimeOptions{};
  return listOapiProcessinstanceEx(request, runtime);
}

/**
 * Description: 企业可以根据审批流的唯一标识，分页获取该审批流对应的审批实例。只能取到权限范围内的相关部门的审批实例
 */
async function listOapiProcessinstanceEx(request: ListOapiProcessinstanceRequest, runtime: Util.RuntimeOptions): ListOapiProcessinstanceResponse {
  Util.validateModel(request);
  var appParams = Util.stringifyMapValue(Util.toMap(request.params));
  return doRequestOApi('POST', '/topapi/processinstance/list', request.headers, appParams, runtime);
}

model GetOapiProcessinstanceParams = {
  processInstanceId: string(description='审批实例id', name='process_instance_id'),
}

model GetOapiProcessinstanceRequest = {
  headers?: map[string]string,
  params:GetOapiProcessinstanceParams,
}

model GetOapiProcessinstanceResponseBody = {
  errcode?: int64(description='errcode', name='errcode'),
  errmsg?: string(description='errmsg', name='errmsg'),
  processInstance?: {
    title?: string(description='审批实例标题', name='title'),
    createTime?: string(description='开始时间', pattern='\\\\d{4}[-]\\\\d{1,2}[-]\\\\d{1,2}[T]\\\\d{2}:\\\\d{2}:\\\\d{2}[Z]', name='create_time'),
    finishTime?: string(description='结束时间', pattern='\\\\d{4}[-]\\\\d{1,2}[-]\\\\d{1,2}[T]\\\\d{2}:\\\\d{2}:\\\\d{2}[Z]', name='finish_time'),
    originatorUserid?: string(description='发起人', name='originator_userid'),
    originatorDeptId?: string(description='发起部门', name='originator_dept_id'),
    status?: string(description='审批状态，分为NEW（刚创建）|RUNNING（运行中）|TERMINATED（被终止）|COMPLETED（完成）|CANCELED（取消）', name='status'),
    approverUserids?: [ string ](description='审批人', name='approver_userids'),
    ccUserids?: [ string ](description='抄送人', name='cc_userids'),
    result?: string(description='审批结果，分为agree和refuse', name='result'),
    businessId?: string(description='审批实例业务编号', name='business_id'),
    operationRecords?: [
      {
        userid?: string(description='操作人', name='userid'),
        date?: string(description='时间', pattern='\\\\d{4}[-]\\\\d{1,2}[-]\\\\d{1,2}[T]\\\\d{2}:\\\\d{2}:\\\\d{2}[Z]', name='date'),
        operationType?: string(description='操作类型，分为EXECUTE_TASK_NORMAL（正常执行任务），EXECUTE_TASK_AGENT（代理人执行任务），APPEND_TASK_BEFORE（前加签任务），APPEND_TASK_AFTER（后加签任务），REDIRECT_TASK（转交任务），START_PROCESS_INSTANCE（发起流程实例），TERMINATE_PROCESS_INSTANCE（终止(撤销)流程实例），FINISH_PROCESS_INSTANCE（结束流程实例），ADD_REMARK（添加评论）', name='operation_type'),
        operationResult?: string(description='操作结果，分为AGREE（同意），REFUSE（拒绝）', name='operation_result'),
        remark?: string(description='评论', name='remark'),
        attachments?: [
          {
            fileName?: string(description='附件名称', name='file_name'),
            fileSize?: string(description='大小', name='file_size'),
            fileId?: string(description='id', name='file_id'),
            fileType?: string(description='类型', name='file_type'),
          }
        ](description='评论附件', name='attachments'),
      }
    ](description='操作记录列表', name='operation_records'),
    tasks?: [
      {
        userid?: string(description='任务处理人', name='userid'),
        taskStatus?: string(description='任务状态，分为NEW（未启动），RUNNING（处理中），PAUSED（暂停），CANCELED（取消），COMPLETED（完成），TERMINATED（终止）', name='task_status'),
        taskResult?: string(description='结果，分为AGREE（同意），REFUSE（拒绝），REDIRECTED（转交）', name='task_result'),
        createTime?: string(description='开始时间', pattern='\\\\d{4}[-]\\\\d{1,2}[-]\\\\d{1,2}[T]\\\\d{2}:\\\\d{2}:\\\\d{2}[Z]', name='create_time'),
        finishTime?: string(description='结束时间', pattern='\\\\d{4}[-]\\\\d{1,2}[-]\\\\d{1,2}[T]\\\\d{2}:\\\\d{2}:\\\\d{2}[Z]', name='finish_time'),
        taskid?: string(description='任务节点id', name='taskid'),
        url?: string(description='任务url', name='url'),
      }
    ](description='任务列表', name='tasks'),
    originatorDeptName?: string(description='发起部门', name='originator_dept_name'),
    bizAction?: string(description='审批实例业务动作,MODIFY表示该审批实例是基于原来的实例修改而来，REVOKE表示该审批实例是由原来的实例撤销后重新发起的,NONE表示正常发起', name='biz_action'),
    attachedProcessInstanceIds?: [ string ](description='审批附属实例列表，当已经通过的审批实例被修改或撤销，会生成一个新的实例，作为原有审批实例的附属。如果想知道当前已经通过的审批实例的状态，可以依次遍历它的附属列表，查询里面每个实例的biz_action', name='attached_process_instance_ids'),
    formComponentValues?: [
      {
        name?: string(description='标签名', name='name'),
        value?: string(description='标签值', name='value'),
        extValue?: string(description='标签扩展值', name='ext_value'),
        id?: string(description='组件id', name='id'),
        componentType?: string(description='组件类型', name='component_type'),
      }
    ](description='表单详情列表', name='form_component_values'),
    mainProcessInstanceId?: string(description='主流程实例标识', name='main_process_instance_id'),
  }(description='实例详情', name='process_instance'),
}

model GetOapiProcessinstanceResponse = {
  headers: map[string]string,
  body: GetOapiProcessinstanceResponseBody,
}

/**
 * Description: 根据审批实例id，获取审批实例详情，详情包括审批表单信息、操作记录列表、操作人、抄送人、审批任务列表
 */
async function getOapiProcessinstance(request: GetOapiProcessinstanceRequest): GetOapiProcessinstanceResponse {
  var runtime = new Util.RuntimeOptions{};
  return getOapiProcessinstanceEx(request, runtime);
}

/**
 * Description: 根据审批实例id，获取审批实例详情，详情包括审批表单信息、操作记录列表、操作人、抄送人、审批任务列表
 */
async function getOapiProcessinstanceEx(request: GetOapiProcessinstanceRequest, runtime: Util.RuntimeOptions): GetOapiProcessinstanceResponse {
  Util.validateModel(request);
  var appParams = Util.stringifyMapValue(Util.toMap(request.params));
  return doRequestOApi('POST', '/topapi/processinstance/get', request.headers, appParams, runtime);
}

model ListOapiReportParams = {
  startTime: int64(description='查询的日志创建的开始时间', name='start_time'),
  endTime: int64(description='查询的日志创建的结束时间', name='end_time'),
  templateName?: string(description='要查询的模板名称', name='template_name'),
  userid?: string(description='员工的userid', name='userid'),
  cursor: int64(description='查询游标，初始传入0，后续从上一次的返回值中获取', name='cursor'),
  size: int64(description='每页数据量', name='size'),
  modifiedStartTime?: int64(description='查询的日志修改的开始时间', name='modified_start_time'),
  modifiedEndTime?: int64(description='查询的日志修改的结束时间', name='modified_end_time'),
}

model ListOapiReportRequest = {
  headers?: map[string]string,
  params:ListOapiReportParams,
}

model ListOapiReportResponseBody = {
  result?: {
    dataList?: [
      {
        contents?: [
          {
            sort?: string(description='排序', name='sort'),
            type?: string(description='类型', name='type'),
            value?: string(description='用户填写的内容', name='value'),
            key?: string(description='模板内容', name='key'),
          }
        ](description='日志内容', name='contents'),
        remark?: string(description='备注', name='remark'),
        templateName?: string(description='日志模板名', name='template_name'),
        deptName?: string(description='部门', name='dept_name'),
        creatorName?: string(description='日志创建人', name='creator_name'),
        creatorId?: string(description='日志创建人userid', name='creator_id'),
        createTime?: int64(description='日志创建时间', name='create_time'),
        reportId?: string(description='日志唯一id', name='report_id'),
        images?: [ string ](description='日志图片列表', name='images'),
        longitude?: string(description='提交日志时点击获取位置，定位到的经度（没有获取位置则为空），此字段的值默认为空，需要单独申请开通', name='longitude'),
        latitude?: string(description='提交日志时点击获取位置，定位到的纬度（没有获取位置则为空），此字段的值默认为空，需要单独申请开通', name='latitude'),
        modifiedTime?: int64(description='日志修改时间', name='modified_time'),
      }
    ](description='日志列表', name='data_list'),
    size?: int64(description='分页大小', name='size'),
    nextCursor?: int64(description='nextCursor', name='next_cursor'),
    hasMore?: boolean(description='是否还有下一页', name='has_more'),
  }(description='result', name='result'),
  errcode?: int64(description='errcode', name='errcode'),
  errmsg?: string(description='errmsg', name='errmsg'),
}

model ListOapiReportResponse = {
  headers: map[string]string,
  body: ListOapiReportResponseBody,
}

/**
 * Description: 企业可以根据员工userid或者日志模板名称，分页获取员工一段时间范围内在【日志】微应用发送和修改的日志详细信息
 */
async function listOapiReport(request: ListOapiReportRequest): ListOapiReportResponse {
  var runtime = new Util.RuntimeOptions{};
  return listOapiReportEx(request, runtime);
}

/**
 * Description: 企业可以根据员工userid或者日志模板名称，分页获取员工一段时间范围内在【日志】微应用发送和修改的日志详细信息
 */
async function listOapiReportEx(request: ListOapiReportRequest, runtime: Util.RuntimeOptions): ListOapiReportResponse {
  Util.validateModel(request);
  var appParams = Util.stringifyMapValue(Util.toMap(request.params));
  return doRequestOApi('POST', '/topapi/report/list', request.headers, appParams, runtime);
}

model ListtoptenOapiBlackboardParams = {
  userid: string(description='用户id', name='userid'),
}

model ListtoptenOapiBlackboardRequest = {
  headers?: map[string]string,
  params:ListtoptenOapiBlackboardParams,
}

model ListtoptenOapiBlackboardResponseBody = {
  errcode?: int64(description='errcode', name='errcode'),
  errmsg?: string(description='errmsg', name='errmsg'),
  blackboardList?: [
    {
      gmtCreate?: string(description='创建时间', pattern='\\\\d{4}[-]\\\\d{1,2}[-]\\\\d{1,2}[T]\\\\d{2}:\\\\d{2}:\\\\d{2}[Z]', name='gmt_create'),
      title?: string(description='标题', name='title'),
      url?: string(description='跳转URL', name='url'),
    }
  ](description='result', name='blackboard_list'),
}

model ListtoptenOapiBlackboardResponse = {
  headers: map[string]string,
  body: ListtoptenOapiBlackboardResponseBody,
}

/**
 * Description: 列出用户当前有权限看到的10条公告，可用于在企业自定义工作首页进行公告轮播展示
 */
async function listtoptenOapiBlackboard(request: ListtoptenOapiBlackboardRequest): ListtoptenOapiBlackboardResponse {
  var runtime = new Util.RuntimeOptions{};
  return listtoptenOapiBlackboardEx(request, runtime);
}

/**
 * Description: 列出用户当前有权限看到的10条公告，可用于在企业自定义工作首页进行公告轮播展示
 */
async function listtoptenOapiBlackboardEx(request: ListtoptenOapiBlackboardRequest, runtime: Util.RuntimeOptions): ListtoptenOapiBlackboardResponse {
  Util.validateModel(request);
  var appParams = Util.stringifyMapValue(Util.toMap(request.params));
  return doRequestOApi('POST', '/topapi/blackboard/listtopten', request.headers, appParams, runtime);
}

model ListOapiHealthStepinfoParams = {
  type: int64(description='0表示取用户步数，1表示取部门步数', name='type'),
  objectId: string(description='可以传入用户userid或者部门id', name='object_id'),
  statDates: [ string ](description='时间列表，注意时间格式是YYYYMMDD', maxItems=31, name='stat_dates'),
}

model ListOapiHealthStepinfoRequest = {
  headers?: map[string]string,
  params:ListOapiHealthStepinfoParams,
}

model ListOapiHealthStepinfoResponseBody = {
  errcode?: int64(description='errcode', name='errcode'),
  errmsg?: string(description='errmsg', name='errmsg'),
  stepinfoList?: [
    {
      statDate?: int64(description='统计的时间', name='stat_date'),
      stepCount?: int64(description='步数', name='step_count'),
    }
  ](description='步数列表', name='stepinfo_list'),
}

model ListOapiHealthStepinfoResponse = {
  headers: map[string]string,
  body: ListOapiHealthStepinfoResponseBody,
}

/**
 * Description: 查询企业用户或部门每天的钉钉运动步数，最多可以查询31天的数据
 */
async function listOapiHealthStepinfo(request: ListOapiHealthStepinfoRequest): ListOapiHealthStepinfoResponse {
  var runtime = new Util.RuntimeOptions{};
  return listOapiHealthStepinfoEx(request, runtime);
}

/**
 * Description: 查询企业用户或部门每天的钉钉运动步数，最多可以查询31天的数据
 */
async function listOapiHealthStepinfoEx(request: ListOapiHealthStepinfoRequest, runtime: Util.RuntimeOptions): ListOapiHealthStepinfoResponse {
  Util.validateModel(request);
  var appParams = Util.stringifyMapValue(Util.toMap(request.params));
  return doRequestOApi('POST', '/topapi/health/stepinfo/list', request.headers, appParams, runtime);
}

model ListbyuseridOapiHealthStepinfoParams = {
  userids: [ string ](description='员工userid列表，最多传50个', maxItems=50, name='userids'),
  statDate: string(description='时间，注意时间格式是YYMMDD', name='stat_date'),
}

model ListbyuseridOapiHealthStepinfoRequest = {
  headers?: map[string]string,
  params:ListbyuseridOapiHealthStepinfoParams,
}

model ListbyuseridOapiHealthStepinfoResponseBody = {
  errcode?: int64(description='errcode', name='errcode'),
  errmsg?: string(description='errmsg', name='errmsg'),
  stepinfoList?: [
    {
      statDate?: int64(description='统计的时间', name='stat_date'),
      stepCount?: int64(description='步数', name='step_count'),
      userid?: string(description='员工userid', name='userid'),
    }
  ](description='步数列表', name='stepinfo_list'),
}

model ListbyuseridOapiHealthStepinfoResponse = {
  headers: map[string]string,
  body: ListbyuseridOapiHealthStepinfoResponseBody,
}

/**
 * Description: 根据用户列表和时间列表，批量查询钉钉运动步数
 */
async function listbyuseridOapiHealthStepinfo(request: ListbyuseridOapiHealthStepinfoRequest): ListbyuseridOapiHealthStepinfoResponse {
  var runtime = new Util.RuntimeOptions{};
  return listbyuseridOapiHealthStepinfoEx(request, runtime);
}

/**
 * Description: 根据用户列表和时间列表，批量查询钉钉运动步数
 */
async function listbyuseridOapiHealthStepinfoEx(request: ListbyuseridOapiHealthStepinfoRequest, runtime: Util.RuntimeOptions): ListbyuseridOapiHealthStepinfoResponse {
  Util.validateModel(request);
  var appParams = Util.stringifyMapValue(Util.toMap(request.params));
  return doRequestOApi('POST', '/topapi/health/stepinfo/listbyuserid', request.headers, appParams, runtime);
}

model GetuserstatusOapiHealthStepinfoParams = {
  userid: string(description='用户id', name='userid'),
}

model GetuserstatusOapiHealthStepinfoRequest = {
  headers?: map[string]string,
  params:GetuserstatusOapiHealthStepinfoParams,
}

model GetuserstatusOapiHealthStepinfoResponseBody = {
  errcode?: int64(description='errcode', name='errcode'),
  errmsg?: string(description='errmsg', name='errmsg'),
  status?: boolean(description='true表示开启，false表示未开启', name='status'),
}

model GetuserstatusOapiHealthStepinfoResponse = {
  headers: map[string]string,
  body: GetuserstatusOapiHealthStepinfoResponseBody,
}

/**
 * Description: 查询用户是否开启了钉钉运动
 */
async function getuserstatusOapiHealthStepinfo(request: GetuserstatusOapiHealthStepinfoRequest): GetuserstatusOapiHealthStepinfoResponse {
  var runtime = new Util.RuntimeOptions{};
  return getuserstatusOapiHealthStepinfoEx(request, runtime);
}

/**
 * Description: 查询用户是否开启了钉钉运动
 */
async function getuserstatusOapiHealthStepinfoEx(request: GetuserstatusOapiHealthStepinfoRequest, runtime: Util.RuntimeOptions): GetuserstatusOapiHealthStepinfoResponse {
  Util.validateModel(request);
  var appParams = Util.stringifyMapValue(Util.toMap(request.params));
  return doRequestOApi('POST', '/topapi/health/stepinfo/getuserstatus', request.headers, appParams, runtime);
}

model ChangeOapiRhinoSalesOrderCustomInfoStatusParams = {
  salesOrderCustomInfoChangeReq?: {
    status: string(description='2C订单状态', name='status'),
    bizIdCustomerOrder: string(description='2C订单id', name='biz_id_customer_order'),
    tenantId: string(description='租户id', name='tenant_id'),
    userid?: string(description='用户id', name='userid'),
  }(description='请求提体', name='sales_order_custom_info_change_req'),
}

model ChangeOapiRhinoSalesOrderCustomInfoStatusRequest = {
  headers?: map[string]string,
  params?:ChangeOapiRhinoSalesOrderCustomInfoStatusParams,
}

model ChangeOapiRhinoSalesOrderCustomInfoStatusResponseBody = {
  success?: boolean(description='是否成功', name='success'),
  errcode?: int64(description='错误码', name='errcode'),
  model?: boolean(description='model', name='model'),
  errmsg?: string(description='message', name='errmsg'),
  externalMsgInfo?: string(description='额外信息', name='external_msg_info'),
}

model ChangeOapiRhinoSalesOrderCustomInfoStatusResponse = {
  headers: map[string]string,
  body: ChangeOapiRhinoSalesOrderCustomInfoStatusResponseBody,
}

/**
 * Description: 修改定制订单状态
 */
async function changeOapiRhinoSalesOrderCustomInfoStatus(request: ChangeOapiRhinoSalesOrderCustomInfoStatusRequest): ChangeOapiRhinoSalesOrderCustomInfoStatusResponse {
  var runtime = new Util.RuntimeOptions{};
  return changeOapiRhinoSalesOrderCustomInfoStatusEx(request, runtime);
}

/**
 * Description: 修改定制订单状态
 */
async function changeOapiRhinoSalesOrderCustomInfoStatusEx(request: ChangeOapiRhinoSalesOrderCustomInfoStatusRequest, runtime: Util.RuntimeOptions): ChangeOapiRhinoSalesOrderCustomInfoStatusResponse {
  Util.validateModel(request);
  var appParams = Util.stringifyMapValue(Util.toMap(request.params));
  return doRequestOApi('POST', '/topapi/rhino/sales/order/custom/info/status/change', request.headers, appParams, runtime);
}

model CopyOapiProcessParams = {
  agentId: int64(description='企业微应用标识', name='agent_id'),
  processCode: string(description='审批流的唯一码', name='process_code'),
  bizCategoryId?: string(description='业务分类标识（建议采用JAVA包名的命名方式，）', maxLength=64, name='biz_category_id'),
  processName?: string(description='审批流名称', maxLength=64, name='process_name'),
  description?: string(description='审批流描述', name='description'),
  copyType?: int64(description='复制类型，1 不包含流程信息，2 包含流程信息且审批中员工可见。默认为1', name='copy_type'),
}

model CopyOapiProcessRequest = {
  headers?: map[string]string,
  params:CopyOapiProcessParams,
}

model CopyOapiProcessResponseBody = {
  errcode?: int64(description='errcode', name='errcode'),
  errmsg?: string(description='errmsg', name='errmsg'),
  result?: {
    processCode?: string(description='processCode', name='process_code'),
    description?: string(description='description', name='description'),
    name?: string(description='name', name='name'),
    bizCategoryId?: string(description='bizCategoryId', name='biz_category_id'),
    formContent?: string(description='formContent', name='form_content'),
  }(description='result', name='result'),
}

model CopyOapiProcessResponse = {
  headers: map[string]string,
  body: CopyOapiProcessResponseBody,
}

/**
 * Description: 审批接口开放中的第一步，ISV调用此接口把它自身的审批流复制都授权企业中
 */
async function copyOapiProcess(request: CopyOapiProcessRequest): CopyOapiProcessResponse {
  var runtime = new Util.RuntimeOptions{};
  return copyOapiProcessEx(request, runtime);
}

/**
 * Description: 审批接口开放中的第一步，ISV调用此接口把它自身的审批流复制都授权企业中
 */
async function copyOapiProcessEx(request: CopyOapiProcessRequest, runtime: Util.RuntimeOptions): CopyOapiProcessResponse {
  Util.validateModel(request);
  var appParams = Util.stringifyMapValue(Util.toMap(request.params));
  return doRequestOApi('POST', '/topapi/process/copy', request.headers, appParams, runtime);
}

model AsyncsendbycodeOapiMessageCorpconversationParams = {
  msgtype: string(description='消息类型,如text、file、oa等，具体见文档', name='msgtype'),
  agentId: int64(description='微应用的id', name='agent_id'),
  userIdList?: [ string ](description='接收者的用户userid列表', maxItems=20, name='user_id_list'),
  deptIdList?: [ int64 ](description='接收者的部门id列表', maxItems=20, name='dept_id_list'),
  toAllUser?: boolean(description='是否发送给企业全部用户', name='to_all_user'),
  msgcontent: string(description='与msgtype对应的消息体，具体见文档', name='msgcontent'),
  code: string(description='用户操作产生的授权码', name='code'),
}

model AsyncsendbycodeOapiMessageCorpconversationRequest = {
  headers?: map[string]string,
  params:AsyncsendbycodeOapiMessageCorpconversationParams,
}

model AsyncsendbycodeOapiMessageCorpconversationResponseBody = {
  errcode?: int64(description='errcode', name='errcode'),
  errmsg?: string(description='errmsg', name='errmsg'),
  taskId?: int64(description='异步发送任务的id', name='task_id'),
}

model AsyncsendbycodeOapiMessageCorpconversationResponse = {
  headers: map[string]string,
  body: AsyncsendbycodeOapiMessageCorpconversationResponseBody,
}

/**
 * Description: 通过用户授权码异步向企业会话发送消息
 */
async function asyncsendbycodeOapiMessageCorpconversation(request: AsyncsendbycodeOapiMessageCorpconversationRequest): AsyncsendbycodeOapiMessageCorpconversationResponse {
  var runtime = new Util.RuntimeOptions{};
  return asyncsendbycodeOapiMessageCorpconversationEx(request, runtime);
}

/**
 * Description: 通过用户授权码异步向企业会话发送消息
 */
async function asyncsendbycodeOapiMessageCorpconversationEx(request: AsyncsendbycodeOapiMessageCorpconversationRequest, runtime: Util.RuntimeOptions): AsyncsendbycodeOapiMessageCorpconversationResponse {
  Util.validateModel(request);
  var appParams = Util.stringifyMapValue(Util.toMap(request.params));
  return doRequestOApi('POST', '/topapi/message/corpconversation/asyncsendbycode', request.headers, appParams, runtime);
}

model AsyncsendOapiMessageCorpconversationParams = {
  msgtype: string(description='消息类型,如text、file、oa等，具体见文档', name='msgtype'),
  agentId: int64(description='微应用的id', name='agent_id'),
  useridList?: [ string ](description='接收者的用户userid列表', maxItems=100, name='userid_list'),
  deptIdList?: [ int64 ](description='接收者的部门id列表', maxItems=20, name='dept_id_list'),
  toAllUser?: boolean(description='是否发送给企业全部用户', name='to_all_user'),
  msgcontent: string(description='与msgtype对应的消息体，具体见文档', name='msgcontent'),
}

model AsyncsendOapiMessageCorpconversationRequest = {
  headers?: map[string]string,
  params:AsyncsendOapiMessageCorpconversationParams,
}

model AsyncsendOapiMessageCorpconversationResponseBody = {
  errcode?: int64(description='errcode', name='errcode'),
  errmsg?: string(description='errmsg', name='errmsg'),
  taskId?: int64(description='创建的异步发送任务id', name='task_id'),
}

model AsyncsendOapiMessageCorpconversationResponse = {
  headers: map[string]string,
  body: AsyncsendOapiMessageCorpconversationResponseBody,
}

/**
 * Description: 企业会话消息异步发送接口
 */
async function asyncsendOapiMessageCorpconversation(request: AsyncsendOapiMessageCorpconversationRequest): AsyncsendOapiMessageCorpconversationResponse {
  var runtime = new Util.RuntimeOptions{};
  return asyncsendOapiMessageCorpconversationEx(request, runtime);
}

/**
 * Description: 企业会话消息异步发送接口
 */
async function asyncsendOapiMessageCorpconversationEx(request: AsyncsendOapiMessageCorpconversationRequest, runtime: Util.RuntimeOptions): AsyncsendOapiMessageCorpconversationResponse {
  Util.validateModel(request);
  var appParams = Util.stringifyMapValue(Util.toMap(request.params));
  return doRequestOApi('POST', '/topapi/message/corpconversation/asyncsend', request.headers, appParams, runtime);
}

model AddresumerecordCorpHrmEmployeeParams = {
  userid?: string(description='被操作人userid', name='userid'),
  title?: string(description='成长记录title', name='title'),
  content?: string(description='成长记录第一条内容', name='content'),
  kVContent?: string(description='厂长记录kv展示内容：json格式，顺序展示', name='k_v_content'),
  phoneUrl?: string(description='手机端url', name='phone_url'),
  pcUrl?: string(description='pc端url', name='pc_url'),
  webUrl?: string(description='webOA后台url', name='web_url'),
  recordTimeStamp?: int64(description='20180428 零点零分零秒', name='record_time_stamp'),
}

model AddresumerecordCorpHrmEmployeeRequest = {
  headers?: map[string]string,
  params?:AddresumerecordCorpHrmEmployeeParams,
}

model AddresumerecordCorpHrmEmployeeResponseBody = {
  result?: {
    result?: string(description='成长记录唯一标记', name='result'),
    dingOpenErrcode?: int64(description='dingOpenErrcode', name='ding_open_errcode'),
    errorMsg?: string(description='errorMsg', name='error_msg'),
    success?: boolean(description='success', name='success'),
  }(description='result', name='result'),
}

model AddresumerecordCorpHrmEmployeeResponse = {
  headers: map[string]string,
  body: AddresumerecordCorpHrmEmployeeResponseBody,
}

/**
 * Description: 企业员工的成长记录
 */
async function addresumerecordCorpHrmEmployee(request: AddresumerecordCorpHrmEmployeeRequest): AddresumerecordCorpHrmEmployeeResponse {
  var runtime = new Util.RuntimeOptions{};
  return addresumerecordCorpHrmEmployeeEx(request, runtime);
}

/**
 * Description: 企业员工的成长记录
 */
async function addresumerecordCorpHrmEmployeeEx(request: AddresumerecordCorpHrmEmployeeRequest, runtime: Util.RuntimeOptions): AddresumerecordCorpHrmEmployeeResponse {
  Util.validateModel(request);
  var appParams = Util.stringifyMapValue(Util.toMap(request.params));
  return doRequest('dingtalk.corp.hrm.employee.addresumerecord', 'POST', '/router/rest', request.headers, appParams, runtime);
}

model GetsendprogressOapiMessageCorpconversationParams = {
  agentId: int64(description='发送消息时使用的微应用的id', name='agent_id'),
  taskId: int64(description='发送消息时钉钉返回的任务id', name='task_id'),
}

model GetsendprogressOapiMessageCorpconversationRequest = {
  headers?: map[string]string,
  params:GetsendprogressOapiMessageCorpconversationParams,
}

model GetsendprogressOapiMessageCorpconversationResponseBody = {
  errcode?: int64(description='errcode', name='errcode'),
  errmsg?: string(description='errmsg', name='errmsg'),
  progress?: {
    progressInPercent?: int64(description='取值 0-100，表示处理的百分比', name='progress_in_percent'),
    status?: int64(description='任务执行状态,0=未开始,1=处理中,2=处理完毕', name='status'),
  }(description='result', name='progress'),
}

model GetsendprogressOapiMessageCorpconversationResponse = {
  headers: map[string]string,
  body: GetsendprogressOapiMessageCorpconversationResponseBody,
}

/**
 * Description: 获取异步发送企业会话消息的进度
 */
async function getsendprogressOapiMessageCorpconversation(request: GetsendprogressOapiMessageCorpconversationRequest): GetsendprogressOapiMessageCorpconversationResponse {
  var runtime = new Util.RuntimeOptions{};
  return getsendprogressOapiMessageCorpconversationEx(request, runtime);
}

/**
 * Description: 获取异步发送企业会话消息的进度
 */
async function getsendprogressOapiMessageCorpconversationEx(request: GetsendprogressOapiMessageCorpconversationRequest, runtime: Util.RuntimeOptions): GetsendprogressOapiMessageCorpconversationResponse {
  Util.validateModel(request);
  var appParams = Util.stringifyMapValue(Util.toMap(request.params));
  return doRequestOApi('POST', '/topapi/message/corpconversation/getsendprogress', request.headers, appParams, runtime);
}

model GetsendresultOapiMessageCorpconversationParams = {
  agentId?: int64(description='微应用的agentid', name='agent_id'),
  taskId?: int64(description='异步任务的id', name='task_id'),
}

model GetsendresultOapiMessageCorpconversationRequest = {
  headers?: map[string]string,
  params?:GetsendresultOapiMessageCorpconversationParams,
}

model GetsendresultOapiMessageCorpconversationResponseBody = {
  sendResult?: {
    invalidUserIdList?: [ string ](description='无效的用户id', name='invalid_user_id_list'),
    forbiddenUserIdList?: [ string ](description='因发送消息过于频繁或超量而被流控过滤后实际未发送的userid。未被限流的接收者仍会被成功发送。限流规则包括：1、给同一用户发相同内容消息一天仅允许一次；2、如果是ISV接入方式，给同一用户发消息一天不得超过100次；如果是企业接入方式，此上限为500。', name='forbidden_user_id_list'),
    failedUserIdList?: [ string ](description='发送失败的用户id', name='failed_user_id_list'),
    readUserIdList?: [ string ](description='已读消息的用户id', name='read_user_id_list'),
    unreadUserIdList?: [ string ](description='未读消息的用户id', name='unread_user_id_list'),
    invalidDeptIdList?: [ int64 ](description='无效的部门id', name='invalid_dept_id_list'),
    forbiddenList?: [
      {
        code?: string(description='流控code', name='code'),
        count?: int64(description='流控阀值', name='count'),
        userid?: string(description='员工userId', name='userid'),
      }
    ](description='推送被禁止的具体原因', name='forbidden_list'),
  }(description='result', name='send_result'),
  errcode?: int64(description='errcode', name='errcode'),
  errmsg?: string(description='errmsg', name='errmsg'),
}

model GetsendresultOapiMessageCorpconversationResponse = {
  headers: map[string]string,
  body: GetsendresultOapiMessageCorpconversationResponseBody,
}

/**
 * Description: 获取异步向企业会话发送消息的结果
 */
async function getsendresultOapiMessageCorpconversation(request: GetsendresultOapiMessageCorpconversationRequest): GetsendresultOapiMessageCorpconversationResponse {
  var runtime = new Util.RuntimeOptions{};
  return getsendresultOapiMessageCorpconversationEx(request, runtime);
}

/**
 * Description: 获取异步向企业会话发送消息的结果
 */
async function getsendresultOapiMessageCorpconversationEx(request: GetsendresultOapiMessageCorpconversationRequest, runtime: Util.RuntimeOptions): GetsendresultOapiMessageCorpconversationResponse {
  Util.validateModel(request);
  var appParams = Util.stringifyMapValue(Util.toMap(request.params));
  return doRequestOApi('POST', '/topapi/message/corpconversation/getsendresult', request.headers, appParams, runtime);
}

model AddOapiWorkrecordParams = {
  userid: string(description='用户id', name='userid'),
  createTime: int64(description='待办时间。Unix时间戳', name='create_time'),
  title: string(description='标题', name='title'),
  url: string(description='待办跳转url', name='url'),
  pcUrl?: string(description='pc端跳转url，不传则使用url参数', name='pcUrl'),
  formItemList: [
    {
      title: string(description='标题', name='title'),
      content: string(description='内容', name='content'),
    }
  ](description='表单列表', maxItems=20, name='formItemList'),
  originatorUserId?: string(description='发起人id', name='originator_user_id'),
  sourceName?: string(description='待办来源名称', name='source_name'),
  pcOpenType?: int64(description='待办的pc打开方式。2表示在pc端打开，4表示在浏览器打开', name='pc_open_type'),
  bizId?: string(description='外部业务id，建议带上业务方来源字段，防止与其他业务方冲突', name='biz_id'),
}

model AddOapiWorkrecordRequest = {
  headers?: map[string]string,
  params:AddOapiWorkrecordParams,
}

model AddOapiWorkrecordResponseBody = {
  errcode?: int64(description='dingOpenErrcode', name='errcode'),
  errmsg?: string(description='errorMsg', name='errmsg'),
  recordId?: string(description='待办唯一id', name='record_id'),
}

model AddOapiWorkrecordResponse = {
  headers: map[string]string,
  body: AddOapiWorkrecordResponseBody,
}

/**
 * Description: 新增待办事项
 */
async function addOapiWorkrecord(request: AddOapiWorkrecordRequest): AddOapiWorkrecordResponse {
  var runtime = new Util.RuntimeOptions{};
  return addOapiWorkrecordEx(request, runtime);
}

/**
 * Description: 新增待办事项
 */
async function addOapiWorkrecordEx(request: AddOapiWorkrecordRequest, runtime: Util.RuntimeOptions): AddOapiWorkrecordResponse {
  Util.validateModel(request);
  var appParams = Util.stringifyMapValue(Util.toMap(request.params));
  return doRequestOApi('POST', '/topapi/workrecord/add', request.headers, appParams, runtime);
}

model UpdateOapiWorkrecordParams = {
  userid: string(description='用户id', name='userid'),
  recordId: string(description='待办事项唯一id', name='record_id'),
}

model UpdateOapiWorkrecordRequest = {
  headers?: map[string]string,
  params:UpdateOapiWorkrecordParams,
}

model UpdateOapiWorkrecordResponseBody = {
  errcode?: int64(description='dingOpenErrcode', name='errcode'),
  errmsg?: string(description='结果', name='errmsg'),
  result?: boolean(description='result', name='result'),
}

model UpdateOapiWorkrecordResponse = {
  headers: map[string]string,
  body: UpdateOapiWorkrecordResponseBody,
}

/**
 * Description: 更新待办事项状态
 */
async function updateOapiWorkrecord(request: UpdateOapiWorkrecordRequest): UpdateOapiWorkrecordResponse {
  var runtime = new Util.RuntimeOptions{};
  return updateOapiWorkrecordEx(request, runtime);
}

/**
 * Description: 更新待办事项状态
 */
async function updateOapiWorkrecordEx(request: UpdateOapiWorkrecordRequest, runtime: Util.RuntimeOptions): UpdateOapiWorkrecordResponse {
  Util.validateModel(request);
  var appParams = Util.stringifyMapValue(Util.toMap(request.params));
  return doRequestOApi('POST', '/topapi/workrecord/update', request.headers, appParams, runtime);
}

model StartOapiAtsEvaluateJobmatchParams = {
  bizCode: string(description='招聘业务标识', name='biz_code'),
  outerEvaluateId: string(description='外部测评系统的具体某一次测评的id，全局唯一', name='outer_evaluate_id'),
  inviteUrl: string(description='邀请填写测评的url', name='invite_url'),
  resultUrl: string(description='测评结果的url', name='result_url'),
  candidateId: string(description='候选人id', name='candidate_id'),
  jobId: string(description='候选人id', name='job_id'),
  extData: string(description='json格式的字符串，存放请求扩展信息', name='ext_data'),
  category: string(description='职位类型码，调用时请申请职位类型码表', name='category'),
}

model StartOapiAtsEvaluateJobmatchRequest = {
  headers?: map[string]string,
  params:StartOapiAtsEvaluateJobmatchParams,
}

model StartOapiAtsEvaluateJobmatchResponseBody = {
  result?: string(description='钉钉招聘系统中的测评id', name='result'),
  errcode?: int64(description='错误码', name='errcode'),
  errmsg?: string(description='错误信息', name='errmsg'),
}

model StartOapiAtsEvaluateJobmatchResponse = {
  headers: map[string]string,
  body: StartOapiAtsEvaluateJobmatchResponseBody,
}

/**
 * Description: 开始职位模型匹配度测评
 */
async function startOapiAtsEvaluateJobmatch(request: StartOapiAtsEvaluateJobmatchRequest): StartOapiAtsEvaluateJobmatchResponse {
  var runtime = new Util.RuntimeOptions{};
  return startOapiAtsEvaluateJobmatchEx(request, runtime);
}

/**
 * Description: 开始职位模型匹配度测评
 */
async function startOapiAtsEvaluateJobmatchEx(request: StartOapiAtsEvaluateJobmatchRequest, runtime: Util.RuntimeOptions): StartOapiAtsEvaluateJobmatchResponse {
  Util.validateModel(request);
  var appParams = Util.stringifyMapValue(Util.toMap(request.params));
  return doRequestOApi('POST', '/topapi/ats/evaluate/jobmatch/start', request.headers, appParams, runtime);
}

model FinishOapiAtsEvaluateJobmatchParams = {
  bizCode: string(description='招聘业务标识', name='biz_code'),
  score: string(description='岗位匹配得分，小数点后保留2位', name='score'),
  result: string(description='json格式的测评结果', name='result'),
  reportDownloadUrl: string(description='公网可以下载，不需要鉴权的评测报告下载地址，最大长度1024', name='report_download_url'),
  extData: string(description='请求扩展字段', name='ext_data'),
  outerEvaluateId: string(description='外部测评系统测评记录id，全局唯一', name='outer_evaluate_id'),
  conclusion: string(description='测评结论', name='conclusion'),
}

model FinishOapiAtsEvaluateJobmatchRequest = {
  headers?: map[string]string,
  params:FinishOapiAtsEvaluateJobmatchParams,
}

model FinishOapiAtsEvaluateJobmatchResponseBody = {
  result?: boolean(description='操作成功', name='result'),
  errcode?: int64(description='错误码', name='errcode'),
  errmsg?: string(description='错误信息', name='errmsg'),
}

model FinishOapiAtsEvaluateJobmatchResponse = {
  headers: map[string]string,
  body: FinishOapiAtsEvaluateJobmatchResponseBody,
}

/**
 * Description: 完成职位模型匹配度测评
 */
async function finishOapiAtsEvaluateJobmatch(request: FinishOapiAtsEvaluateJobmatchRequest): FinishOapiAtsEvaluateJobmatchResponse {
  var runtime = new Util.RuntimeOptions{};
  return finishOapiAtsEvaluateJobmatchEx(request, runtime);
}

/**
 * Description: 完成职位模型匹配度测评
 */
async function finishOapiAtsEvaluateJobmatchEx(request: FinishOapiAtsEvaluateJobmatchRequest, runtime: Util.RuntimeOptions): FinishOapiAtsEvaluateJobmatchResponse {
  Util.validateModel(request);
  var appParams = Util.stringifyMapValue(Util.toMap(request.params));
  return doRequestOApi('POST', '/topapi/ats/evaluate/jobmatch/finish', request.headers, appParams, runtime);
}

model CancelOapiAtsEvaluateJobmatchParams = {
  bizCode: string(description='招聘业务标识', name='biz_code'),
  extData: string(description='请求扩展字段', name='ext_data'),
  outerEvaluateId: string(description='外部测评系统测评id，全局唯一', name='outer_evaluate_id'),
}

model CancelOapiAtsEvaluateJobmatchRequest = {
  headers?: map[string]string,
  params:CancelOapiAtsEvaluateJobmatchParams,
}

model CancelOapiAtsEvaluateJobmatchResponseBody = {
  result?: boolean(description='操作成功', name='result'),
  errcode?: int64(description='错误码', name='errcode'),
  errmsg?: string(description='错误信息', name='errmsg'),
}

model CancelOapiAtsEvaluateJobmatchResponse = {
  headers: map[string]string,
  body: CancelOapiAtsEvaluateJobmatchResponseBody,
}

/**
 * Description: 取消职位模型匹配度测评
 */
async function cancelOapiAtsEvaluateJobmatch(request: CancelOapiAtsEvaluateJobmatchRequest): CancelOapiAtsEvaluateJobmatchResponse {
  var runtime = new Util.RuntimeOptions{};
  return cancelOapiAtsEvaluateJobmatchEx(request, runtime);
}

/**
 * Description: 取消职位模型匹配度测评
 */
async function cancelOapiAtsEvaluateJobmatchEx(request: CancelOapiAtsEvaluateJobmatchRequest, runtime: Util.RuntimeOptions): CancelOapiAtsEvaluateJobmatchResponse {
  Util.validateModel(request);
  var appParams = Util.stringifyMapValue(Util.toMap(request.params));
  return doRequestOApi('POST', '/topapi/ats/evaluate/jobmatch/cancel', request.headers, appParams, runtime);
}

model GetOapiAtsCandidateParams = {
  bizCode: string(description='招聘业务标识', name='biz_code'),
  candidateId: string(description='候选人id', name='candidate_id'),
}

model GetOapiAtsCandidateRequest = {
  headers?: map[string]string,
  params:GetOapiAtsCandidateParams,
}

model GetOapiAtsCandidateResponseBody = {
  result?: {
    corpId?: string(description='企业id', name='corp_id'),
    candidateId?: string(description='候选人id', name='candidate_id'),
    gmtCreateMils?: int64(description='创建时间，unix毫秒时间戳', name='gmt_create_mils'),
    gmtModifiedMils?: int64(description='修改时间，unix毫秒时间戳', name='gmt_modified_mils'),
    name?: string(description='候选人姓名', name='name'),
  }(description='候选人信息', name='result'),
  errcode?: int64(description='错误码', name='errcode'),
  errmsg?: string(description='错误信息', name='errmsg'),
}

model GetOapiAtsCandidateResponse = {
  headers: map[string]string,
  body: GetOapiAtsCandidateResponseBody,
}

/**
 * Description: 根据candidate_id获取候选人信息
 */
async function getOapiAtsCandidate(request: GetOapiAtsCandidateRequest): GetOapiAtsCandidateResponse {
  var runtime = new Util.RuntimeOptions{};
  return getOapiAtsCandidateEx(request, runtime);
}

/**
 * Description: 根据candidate_id获取候选人信息
 */
async function getOapiAtsCandidateEx(request: GetOapiAtsCandidateRequest, runtime: Util.RuntimeOptions): GetOapiAtsCandidateResponse {
  Util.validateModel(request);
  var appParams = Util.stringifyMapValue(Util.toMap(request.params));
  return doRequestOApi('POST', '/topapi/ats/candidate/get', request.headers, appParams, runtime);
}

model SearchOapiAttendanceGroupParams = {
  opUserId: string(description='操作者userId', name='op_user_id'),
  groupName: string(description='考勤组名称', name='group_name'),
}

model SearchOapiAttendanceGroupRequest = {
  headers?: map[string]string,
  params:SearchOapiAttendanceGroupParams,
}

model SearchOapiAttendanceGroupResponseBody = {
  result?: [
    {
      name?: string(description='名称', name='name'),
      id?: int64(description='id', name='id'),
    }
  ](description='demo', name='result'),
  success?: boolean(description='成功标记', name='success'),
  errcode?: int64(description='错误码', name='errcode'),
  errmsg?: string(description='错误信息', name='errmsg'),
}

model SearchOapiAttendanceGroupResponse = {
  headers: map[string]string,
  body: SearchOapiAttendanceGroupResponseBody,
}

/**
 * Description: 按名称搜索考勤组
 */
async function searchOapiAttendanceGroup(request: SearchOapiAttendanceGroupRequest): SearchOapiAttendanceGroupResponse {
  var runtime = new Util.RuntimeOptions{};
  return searchOapiAttendanceGroupEx(request, runtime);
}

/**
 * Description: 按名称搜索考勤组
 */
async function searchOapiAttendanceGroupEx(request: SearchOapiAttendanceGroupRequest, runtime: Util.RuntimeOptions): SearchOapiAttendanceGroupResponse {
  Util.validateModel(request);
  var appParams = Util.stringifyMapValue(Util.toMap(request.params));
  return doRequestOApi('POST', '/topapi/attendance/group/search', request.headers, appParams, runtime);
}

model GetOapiOrgUnionTrunkRequest = {
  headers?: map[string]string,
}

model GetOapiOrgUnionTrunkResponseBody = {
  result?: [
    {
      orgName?: string(description='主干组织的名称', name='org_name'),
      corpid?: string(description='主干组织的corpid', name='corpid'),
    }
  ](description='OpenOrgUnion', name='result'),
  success?: boolean(description='是否成功', name='success'),
  errcode?: int64(description='错误code', name='errcode'),
  errmsg?: string(description='错误msg', name='errmsg'),
}

model GetOapiOrgUnionTrunkResponse = {
  headers: map[string]string,
  body: GetOapiOrgUnionTrunkResponseBody,
}

/**
 * Description: 获取主干组织列表
 */
async function getOapiOrgUnionTrunk(request: GetOapiOrgUnionTrunkRequest): GetOapiOrgUnionTrunkResponse {
  var runtime = new Util.RuntimeOptions{};
  return getOapiOrgUnionTrunkEx(request, runtime);
}

/**
 * Description: 获取主干组织列表
 */
async function getOapiOrgUnionTrunkEx(request: GetOapiOrgUnionTrunkRequest, runtime: Util.RuntimeOptions): GetOapiOrgUnionTrunkResponse {
  Util.validateModel(request);
  var appParams : map[string]string = {};
  return doRequestOApi('POST', '/topapi/org/union/trunk/get', request.headers, appParams, runtime);
}

model GetOapiOrgUnionBranchRequest = {
  headers?: map[string]string,
}

model GetOapiOrgUnionBranchResponseBody = {
  result?: [
    {
      unionOrgName?: string(description='分支组织名称', name='union_org_name'),
      unionCorpid?: string(description='分支组织corpid', name='union_corpid'),
    }
  ](description='OpenOrgUnion', name='result'),
  success?: boolean(description='是否成功', name='success'),
  errcode?: int64(description='错误code', name='errcode'),
  errmsg?: string(description='错误msg', name='errmsg'),
}

model GetOapiOrgUnionBranchResponse = {
  headers: map[string]string,
  body: GetOapiOrgUnionBranchResponseBody,
}

/**
 * Description: 获取分支组织列表
 */
async function getOapiOrgUnionBranch(request: GetOapiOrgUnionBranchRequest): GetOapiOrgUnionBranchResponse {
  var runtime = new Util.RuntimeOptions{};
  return getOapiOrgUnionBranchEx(request, runtime);
}

/**
 * Description: 获取分支组织列表
 */
async function getOapiOrgUnionBranchEx(request: GetOapiOrgUnionBranchRequest, runtime: Util.RuntimeOptions): GetOapiOrgUnionBranchResponse {
  Util.validateModel(request);
  var appParams : map[string]string = {};
  return doRequestOApi('POST', '/topapi/org/union/branch/get', request.headers, appParams, runtime);
}

model BatchupdateOapiChatNickParams = {
  chatid: string(description='会话id', name='chatid'),
  userNickModel: [
    {
      nick: string(description='昵称', name='nick'),
      userid: string(description='userId', name='userid'),
    }
  ](description='userId和nick的模型', maxItems=500, name='user_nick_model'),
}

model BatchupdateOapiChatNickRequest = {
  headers?: map[string]string,
  params:BatchupdateOapiChatNickParams,
}

model BatchupdateOapiChatNickResponseBody = {
  success?: boolean(description='成功', name='success'),
  errcode?: int64(description='成功', name='errcode'),
  errmsg?: string(description='成功', name='errmsg'),
}

model BatchupdateOapiChatNickResponse = {
  headers: map[string]string,
  body: BatchupdateOapiChatNickResponseBody,
}

/**
 * Description: 批量更新群成员昵称功能
 */
async function batchupdateOapiChatNick(request: BatchupdateOapiChatNickRequest): BatchupdateOapiChatNickResponse {
  var runtime = new Util.RuntimeOptions{};
  return batchupdateOapiChatNickEx(request, runtime);
}

/**
 * Description: 批量更新群成员昵称功能
 */
async function batchupdateOapiChatNickEx(request: BatchupdateOapiChatNickRequest, runtime: Util.RuntimeOptions): BatchupdateOapiChatNickResponse {
  Util.validateModel(request);
  var appParams = Util.stringifyMapValue(Util.toMap(request.params));
  return doRequestOApi('POST', '/topapi/chat/nick/batchupdate', request.headers, appParams, runtime);
}

model ListOapiEnterpriseFamilydrParams = {
  statDate: string(description='查询时间', name='stat_date'),
  corpId: string(description='企业ID', name='corp_id'),
  returnFields: [ string ](description='dept_name_lv3三级部门名称；	 live_launch_succ_user_cnt_1d	最近1天成功发起直播人数；live_launch_succ_user_cnt_1w	最近7天成功发起直播人数；live_play_user_cnt_1d 最近1天观看直播人数； live_play_user_cnt_1w 最近7天观看直播人数； dept_name_lv2 二级部门名称；', maxItems=20, name='return_fields'),
  orderBy?: {
    field?: string(description='排查的key', name='field'),
    order?: string(description='升序或者降序', name='order'),
  }(description='排序', name='order_by'),
  pageStart: int64(description='分页起始点', name='page_start'),
  pageSize: int64(description='分页查询条数，最多30条', name='page_size'),
}

model ListOapiEnterpriseFamilydrRequest = {
  headers?: map[string]string,
  params:ListOapiEnterpriseFamilydrParams,
}

model ListOapiEnterpriseFamilydrResponseBody = {
  result?: [
    {
      livePlayUserCnt1w?: string(description='最近7天观看直播人数', name='live_play_user_cnt_1w'),
      livePlayUserCnt1d?: string(description='最近1天观看直播人数', name='live_play_user_cnt_1d'),
      liveLaunchSuccUserCnt1w?: string(description='最近7天成功发起直播人数', name='live_launch_succ_user_cnt_1w'),
      liveLaunchSuccUserCnt1d?: string(description='最近1天成功发起直播人数', name='live_launch_succ_user_cnt_1d'),
      deptNameLv3?: string(description='三级部门名称', name='dept_name_lv3'),
      deptNameLv2?: string(description='二级部门名称', name='dept_name_lv2'),
      statDate?: string(description='查询时间', name='stat_date'),
      corpId?: string(description='企业ID', name='corp_id'),
    }
  ](description='系统自动生成', name='result'),
  success?: boolean(description='是否成功', name='success'),
  errcode?: int64(description='错误码', name='errcode'),
  errmsg?: string(description='错误信息', name='errmsg'),
}

model ListOapiEnterpriseFamilydrResponse = {
  headers: map[string]string,
  body: ListOapiEnterpriseFamilydrResponseBody,
}

/**
 * Description: 根据stat_date和corp_id查询家医数据
 */
async function listOapiEnterpriseFamilydr(request: ListOapiEnterpriseFamilydrRequest): ListOapiEnterpriseFamilydrResponse {
  var runtime = new Util.RuntimeOptions{};
  return listOapiEnterpriseFamilydrEx(request, runtime);
}

/**
 * Description: 根据stat_date和corp_id查询家医数据
 */
async function listOapiEnterpriseFamilydrEx(request: ListOapiEnterpriseFamilydrRequest, runtime: Util.RuntimeOptions): ListOapiEnterpriseFamilydrResponse {
  Util.validateModel(request);
  var appParams = Util.stringifyMapValue(Util.toMap(request.params));
  return doRequestOApi('POST', '/topapi/enterprise/familydr/list', request.headers, appParams, runtime);
}

model ListbydayOapiAttendanceScheduleParams = {
  opUserId: string(description='操作者userId', name='op_user_id'),
  userId: string(description='用户userId', name='user_id'),
  dateTime: int64(description='查询那天的数据', name='date_time'),
}

model ListbydayOapiAttendanceScheduleRequest = {
  headers?: map[string]string,
  params:ListbydayOapiAttendanceScheduleParams,
}

model ListbydayOapiAttendanceScheduleResponseBody = {
  result?: [
    {
      checkType?: string(description='考勤类型，上班/下班', name='check_type'),
      approveType?: string(description='审批类型', name='approve_type'),
      gmtModified?: string(description='更新时间', pattern='\\\\d{4}[-]\\\\d{1,2}[-]\\\\d{1,2}[T]\\\\d{2}:\\\\d{2}:\\\\d{2}[Z]', name='gmt_modified'),
      planCheckTime?: string(description='计划打卡时间', pattern='\\\\d{4}[-]\\\\d{1,2}[-]\\\\d{1,2}[T]\\\\d{2}:\\\\d{2}:\\\\d{2}[Z]', name='plan_check_time'),
      corpId?: string(description='公司id', name='corp_id'),
      checkDateTime?: string(description='打卡时间', pattern='\\\\d{4}[-]\\\\d{1,2}[-]\\\\d{1,2}[T]\\\\d{2}:\\\\d{2}:\\\\d{2}[Z]', name='check_date_time'),
      baseCheckTime?: string(description='迟到早退线', pattern='\\\\d{4}[-]\\\\d{1,2}[-]\\\\d{1,2}[T]\\\\d{2}:\\\\d{2}:\\\\d{2}[Z]', name='base_check_time'),
      groupId?: int64(description='考勤组id', name='group_id'),
      className?: string(description='班次名称', name='class_name'),
      gmtCreate?: string(description='创建时间', pattern='\\\\d{4}[-]\\\\d{1,2}[-]\\\\d{1,2}[T]\\\\d{2}:\\\\d{2}:\\\\d{2}[Z]', name='gmt_create'),
      userId?: string(description='用户userId', name='user_id'),
      approveBizType?: int64(description='审批类型', name='approve_biz_type'),
      approveId?: int64(description='审批单id', name='approve_id'),
      classSettingId?: int64(description='班次version', name='class_setting_id'),
      approveTagName?: string(description='审批单标签名', name='approve_tag_name'),
      features?: string(description='扩展字段', name='features'),
      classId?: int64(description='班次id', name='class_id'),
      checkStatus?: string(description='打卡状态', name='check_status'),
      workDate?: string(description='工作天', pattern='\\\\d{4}[-]\\\\d{1,2}[-]\\\\d{1,2}[T]\\\\d{2}:\\\\d{2}:\\\\d{2}[Z]', name='work_date'),
      checkEndTime?: string(description='结束打卡时间', pattern='\\\\d{4}[-]\\\\d{1,2}[-]\\\\d{1,2}[T]\\\\d{2}:\\\\d{2}:\\\\d{2}[Z]', name='check_end_time'),
      isRest?: string(description='是否休息', name='is_rest'),
      checkBeginTime?: string(description='开始打卡时间', pattern='\\\\d{4}[-]\\\\d{1,2}[-]\\\\d{1,2}[T]\\\\d{2}:\\\\d{2}:\\\\d{2}[Z]', name='check_begin_time'),
      id?: int64(description='id', name='id'),
      realPlanTime?: string(description='根据弹性、打卡结果等综合计算的卡点，与个人月历页保持一致', pattern='\\\\d{4}[-]\\\\d{1,2}[-]\\\\d{1,2}[T]\\\\d{2}:\\\\d{2}:\\\\d{2}[Z]', name='real_plan_time'),
    }
  ](description='demo', name='result'),
  success?: boolean(description='成功标记', name='success'),
  errcode?: int64(description='错误码', name='errcode'),
  errmsg?: string(description='错误信息', name='errmsg'),
}

model ListbydayOapiAttendanceScheduleResponse = {
  headers: map[string]string,
  body: ListbydayOapiAttendanceScheduleResponseBody,
}

/**
 * Description: 查询某人一天的排班
 */
async function listbydayOapiAttendanceSchedule(request: ListbydayOapiAttendanceScheduleRequest): ListbydayOapiAttendanceScheduleResponse {
  var runtime = new Util.RuntimeOptions{};
  return listbydayOapiAttendanceScheduleEx(request, runtime);
}

/**
 * Description: 查询某人一天的排班
 */
async function listbydayOapiAttendanceScheduleEx(request: ListbydayOapiAttendanceScheduleRequest, runtime: Util.RuntimeOptions): ListbydayOapiAttendanceScheduleResponse {
  Util.validateModel(request);
  var appParams = Util.stringifyMapValue(Util.toMap(request.params));
  return doRequestOApi('POST', '/topapi/attendance/schedule/listbyday', request.headers, appParams, runtime);
}

model ListOapiCorpConversationMemberParams = {
  chatId: string(description='会话ID', name='chat_id'),
  offset: int64(description='偏移位置，从0开始，后续传offset+size的值。member_list返回为空表示结束了。', name='offset'),
  size: int64(description='请求数量', maximum=200, name='size'),
}

model ListOapiCorpConversationMemberRequest = {
  headers?: map[string]string,
  params:ListOapiCorpConversationMemberParams,
}

model ListOapiCorpConversationMemberResponseBody = {
  result?: {
    result?: {
      memberList?: [
        {
          userid?: string(description='员工ID', name='userid'),
        }
      ](description='成员信息', name='member_list'),
    }(description='成员列表', name='result'),
    errcode?: int64(description='错误码', name='errcode'),
    errmsg?: string(description='系统错误', name='errmsg'),
    success?: boolean(description='是否成功', name='success'),
  }(description='服务出参', name='result'),
}

model ListOapiCorpConversationMemberResponse = {
  headers: map[string]string,
  body: ListOapiCorpConversationMemberResponseBody,
}

/**
 * Description: 分页获取群成员
 */
async function listOapiCorpConversationMember(request: ListOapiCorpConversationMemberRequest): ListOapiCorpConversationMemberResponse {
  var runtime = new Util.RuntimeOptions{};
  return listOapiCorpConversationMemberEx(request, runtime);
}

/**
 * Description: 分页获取群成员
 */
async function listOapiCorpConversationMemberEx(request: ListOapiCorpConversationMemberRequest, runtime: Util.RuntimeOptions): ListOapiCorpConversationMemberResponse {
  Util.validateModel(request);
  var appParams = Util.stringifyMapValue(Util.toMap(request.params));
  return doRequestOApi('POST', '/topapi/corp/conversation/member/list', request.headers, appParams, runtime);
}

model ListOapiAttendanceShiftParams = {
  opUserId: string(description='操作人userId', name='op_user_id'),
  cursor?: int64(description='游标id', name='cursor'),
}

model ListOapiAttendanceShiftRequest = {
  headers?: map[string]string,
  params:ListOapiAttendanceShiftParams,
}

model ListOapiAttendanceShiftResponseBody = {
  result?: {
    hasMore?: boolean(description='是否还有', name='has_more'),
    cursor?: int64(description='下一次访问游标', name='cursor'),
    result?: [
      {
        name?: string(description='班次名称', name='name'),
        id?: int64(description='班次id', name='id'),
      }
    ](description='业务具体值', name='result'),
  }(description='业务值结果', name='result'),
  success?: boolean(description='请求成功', name='success'),
  errcode?: int64(description='请求错误码', name='errcode'),
  errmsg?: string(description='请求错误信息', name='errmsg'),
}

model ListOapiAttendanceShiftResponse = {
  headers: map[string]string,
  body: ListOapiAttendanceShiftResponseBody,
}

/**
 * Description: 根据企业corpId查询班次信息
 */
async function listOapiAttendanceShift(request: ListOapiAttendanceShiftRequest): ListOapiAttendanceShiftResponse {
  var runtime = new Util.RuntimeOptions{};
  return listOapiAttendanceShiftEx(request, runtime);
}

/**
 * Description: 根据企业corpId查询班次信息
 */
async function listOapiAttendanceShiftEx(request: ListOapiAttendanceShiftRequest, runtime: Util.RuntimeOptions): ListOapiAttendanceShiftResponse {
  Util.validateModel(request);
  var appParams = Util.stringifyMapValue(Util.toMap(request.params));
  return doRequestOApi('POST', '/topapi/attendance/shift/list', request.headers, appParams, runtime);
}

model GetSmartworkBpmsProcessinstanceParams = {
  processInstanceId: string(description='审批实例id', name='process_instance_id'),
}

model GetSmartworkBpmsProcessinstanceRequest = {
  headers?: map[string]string,
  params:GetSmartworkBpmsProcessinstanceParams,
}

model GetSmartworkBpmsProcessinstanceResponseBody = {
  result?: {
    dingOpenErrcode?: int64(description='dingOpenErrcode', name='ding_open_errcode'),
    errorMsg?: string(description='errorMsg', name='error_msg'),
    success?: boolean(description='success', name='success'),
    processInstance?: {
      title?: string(description='审批实例标题', name='title'),
      createTime?: string(description='开始时间', pattern='\\\\d{4}[-]\\\\d{1,2}[-]\\\\d{1,2}[T]\\\\d{2}:\\\\d{2}:\\\\d{2}[Z]', name='create_time'),
      finishTime?: string(description='结束时间', pattern='\\\\d{4}[-]\\\\d{1,2}[-]\\\\d{1,2}[T]\\\\d{2}:\\\\d{2}:\\\\d{2}[Z]', name='finish_time'),
      originatorUserid?: string(description='发起人', name='originator_userid'),
      originatorDeptId?: string(description='发起部门', name='originator_dept_id'),
      status?: string(description='审批状态，分为NEW（刚创建）|RUNNING（运行中）|TERMINATED（被终止）|COMPLETED（完成）|CANCELED（取消）', name='status'),
      approverUserids?: [ string ](description='审批人', name='approver_userids'),
      ccUserids?: [ string ](description='抄送人', name='cc_userids'),
      result?: string(description='审批结果，分为agree和refuse', name='result'),
      businessId?: string(description='审批实例业务编号', name='business_id'),
      operationRecords?: [
        {
          userid?: string(description='操作人', name='userid'),
          date?: string(description='时间', pattern='\\\\d{4}[-]\\\\d{1,2}[-]\\\\d{1,2}[T]\\\\d{2}:\\\\d{2}:\\\\d{2}[Z]', name='date'),
          operationType?: string(description='操作类型，分为EXECUTE_TASK_NORMAL（正常执行任务），EXECUTE_TASK_AGENT（代理人执行任务），APPEND_TASK_BEFORE（前加签任务），APPEND_TASK_AFTER（后加签任务），REDIRECT_TASK（转交任务），START_PROCESS_INSTANCE（发起流程实例），TERMINATE_PROCESS_INSTANCE（终止(撤销)流程实例），FINISH_PROCESS_INSTANCE（结束流程实例），ADD_REMARK（添加评论）', name='operation_type'),
          operationResult?: string(description='操作结果，分为AGREE（同意），REFUSE（拒绝）', name='operation_result'),
          remark?: string(description='评论', name='remark'),
        }
      ](description='操作记录列表', name='operation_records'),
      tasks?: [
        {
          userid?: string(description='任务处理人', name='userid'),
          taskStatus?: string(description='任务状态，分为NEW（未启动），RUNNING（处理中），PAUSED（暂停），CANCELED（取消），COMPLETED（完成），TERMINATED（终止）', name='task_status'),
          taskResult?: string(description='结果，分为AGREE（同意），REFUSE（拒绝），REDIRECTED（转交）', name='task_result'),
          createTime?: string(description='开始时间', pattern='\\\\d{4}[-]\\\\d{1,2}[-]\\\\d{1,2}[T]\\\\d{2}:\\\\d{2}:\\\\d{2}[Z]', name='create_time'),
          finishTime?: string(description='结束时间', pattern='\\\\d{4}[-]\\\\d{1,2}[-]\\\\d{1,2}[T]\\\\d{2}:\\\\d{2}:\\\\d{2}[Z]', name='finish_time'),
          taskid?: string(description='任务节点id', name='taskid'),
        }
      ](description='任务列表', name='tasks'),
      originatorDeptName?: string(description='发起部门', name='originator_dept_name'),
      bizAction?: string(description='审批实例业务动作,MODIFY表示该审批实例是基于原来的实例修改而来，REVOKE表示该审批实例是由原来的实例撤销后重新发起的,NONE表示正常发起', name='biz_action'),
      attachedProcessInstanceIds?: [ string ](description='审批附属实例列表，当已经通过的审批实例被修改或撤销，会生成一个新的实例，作为原有审批实例的附属。如果想知道当前已经通过的审批实例的状态，可以依次遍历它的附属列表，查询里面每个实例的biz_action', name='attached_process_instance_ids'),
      formComponentValues?: [
        {
          name?: string(description='标签名', name='name'),
          value?: string(description='标签值', name='value'),
          extValue?: string(description='标签扩展值', name='ext_value'),
          componentType?: string(description='组件类型', name='component_type'),
          id?: string(description='组件id', name='id'),
        }
      ](description='表单详情列表', name='form_component_values'),
    }(description='实例详情', name='process_instance'),
  }(description='result', name='result'),
}

model GetSmartworkBpmsProcessinstanceResponse = {
  headers: map[string]string,
  body: GetSmartworkBpmsProcessinstanceResponseBody,
}

/**
 * Description: 根据审批实例id，获取审批实例详情，详情包括审批表单信息、操作记录列表、操作人、抄送人、审批任务列表
 */
async function getSmartworkBpmsProcessinstance(request: GetSmartworkBpmsProcessinstanceRequest): GetSmartworkBpmsProcessinstanceResponse {
  var runtime = new Util.RuntimeOptions{};
  return getSmartworkBpmsProcessinstanceEx(request, runtime);
}

/**
 * Description: 根据审批实例id，获取审批实例详情，详情包括审批表单信息、操作记录列表、操作人、抄送人、审批任务列表
 */
async function getSmartworkBpmsProcessinstanceEx(request: GetSmartworkBpmsProcessinstanceRequest, runtime: Util.RuntimeOptions): GetSmartworkBpmsProcessinstanceResponse {
  Util.validateModel(request);
  var appParams = Util.stringifyMapValue(Util.toMap(request.params));
  return doRequest('dingtalk.smartwork.bpms.processinstance.get', 'POST', '/router/rest', request.headers, appParams, runtime);
}

model ListOapiAttendanceGroupMemberusersParams = {
  cursor?: int64(description='游标', name='cursor'),
  opUserId?: string(description='操作人userId', name='op_user_id'),
  groupId?: int64(description='考勤组id', name='group_id'),
}

model ListOapiAttendanceGroupMemberusersRequest = {
  headers?: map[string]string,
  params?:ListOapiAttendanceGroupMemberusersParams,
}

model ListOapiAttendanceGroupMemberusersResponseBody = {
  errmsg?: string(description='错误信息', name='errmsg'),
  errcode?: int64(description='错误码', name='errcode'),
  success?: boolean(description='成功标记', name='success'),
  result?: {
    hasMore?: boolean(description='是否还有', name='has_more'),
    cursor?: int64(description='游标', name='cursor'),
    result?: [ string ](description='人员userId列表', name='result'),
  }(description='人员列表', name='result'),
}

model ListOapiAttendanceGroupMemberusersResponse = {
  headers: map[string]string,
  body: ListOapiAttendanceGroupMemberusersResponseBody,
}

/**
 * Description: 分批次获取考勤组人员信息，针对考勤部门设置，获取的是其具体部门人员信息
 */
async function listOapiAttendanceGroupMemberusers(request: ListOapiAttendanceGroupMemberusersRequest): ListOapiAttendanceGroupMemberusersResponse {
  var runtime = new Util.RuntimeOptions{};
  return listOapiAttendanceGroupMemberusersEx(request, runtime);
}

/**
 * Description: 分批次获取考勤组人员信息，针对考勤部门设置，获取的是其具体部门人员信息
 */
async function listOapiAttendanceGroupMemberusersEx(request: ListOapiAttendanceGroupMemberusersRequest, runtime: Util.RuntimeOptions): ListOapiAttendanceGroupMemberusersResponse {
  Util.validateModel(request);
  var appParams = Util.stringifyMapValue(Util.toMap(request.params));
  return doRequestOApi('POST', '/topapi/attendance/group/memberusers/list', request.headers, appParams, runtime);
}

model ListOapiAttendanceGroupMinimalismParams = {
  opUserId: string(description='操作者userId', name='op_user_id'),
  cursor?: int64(description='游标', name='cursor'),
}

model ListOapiAttendanceGroupMinimalismRequest = {
  headers?: map[string]string,
  params:ListOapiAttendanceGroupMinimalismParams,
}

model ListOapiAttendanceGroupMinimalismResponseBody = {
  result?: {
    hasMore?: boolean(description='更多标记', name='has_more'),
    cursor?: int64(description='游标位置', name='cursor'),
    result?: [
      {
        name?: string(description='考勤组名称', name='name'),
        id?: int64(description='考勤组id', name='id'),
      }
    ](description='demo', name='result'),
  }(description='demo', name='result'),
  success?: boolean(description='成功标记', name='success'),
  errcode?: int64(description='错误码', name='errcode'),
  errmsg?: string(description='错误信息', name='errmsg'),
}

model ListOapiAttendanceGroupMinimalismResponse = {
  headers: map[string]string,
  body: ListOapiAttendanceGroupMinimalismResponseBody,
}

/**
 * Description: 分批次获取考勤组极简信息
 */
async function listOapiAttendanceGroupMinimalism(request: ListOapiAttendanceGroupMinimalismRequest): ListOapiAttendanceGroupMinimalismResponse {
  var runtime = new Util.RuntimeOptions{};
  return listOapiAttendanceGroupMinimalismEx(request, runtime);
}

/**
 * Description: 分批次获取考勤组极简信息
 */
async function listOapiAttendanceGroupMinimalismEx(request: ListOapiAttendanceGroupMinimalismRequest, runtime: Util.RuntimeOptions): ListOapiAttendanceGroupMinimalismResponse {
  Util.validateModel(request);
  var appParams = Util.stringifyMapValue(Util.toMap(request.params));
  return doRequestOApi('POST', '/topapi/attendance/group/minimalism/list', request.headers, appParams, runtime);
}

model ListbyidsOapiAttendanceScheduleResultParams = {
  opUserId: string(description='操作者userId', name='op_user_id'),
  scheduleIds: [ int64 ](description='排班ids', maxItems=100, name='schedule_ids'),
}

model ListbyidsOapiAttendanceScheduleResultRequest = {
  headers?: map[string]string,
  params:ListbyidsOapiAttendanceScheduleResultParams,
}

model ListbyidsOapiAttendanceScheduleResultResponseBody = {
  result?: [
    {
      checkType?: string(description='考勤类型，上班/下班', name='check_type'),
      gmtModified?: string(description='更新时间', pattern='\\\\d{4}[-]\\\\d{1,2}[-]\\\\d{1,2}[T]\\\\d{2}:\\\\d{2}:\\\\d{2}[Z]', name='gmt_modified'),
      planCheckTime?: string(description='计划打卡时间', pattern='\\\\d{4}[-]\\\\d{1,2}[-]\\\\d{1,2}[T]\\\\d{2}:\\\\d{2}:\\\\d{2}[Z]', name='plan_check_time'),
      corpId?: string(description='公司id', name='corp_id'),
      baseCheckTime?: string(description='迟到早退线', pattern='\\\\d{4}[-]\\\\d{1,2}[-]\\\\d{1,2}[T]\\\\d{2}:\\\\d{2}:\\\\d{2}[Z]', name='base_check_time'),
      groupId?: int64(description='考勤组id', name='group_id'),
      gmtCreate?: string(description='创建时间', pattern='\\\\d{4}[-]\\\\d{1,2}[-]\\\\d{1,2}[T]\\\\d{2}:\\\\d{2}:\\\\d{2}[Z]', name='gmt_create'),
      userId?: string(description='用户userId', name='user_id'),
      workDate?: string(description='工作天', pattern='\\\\d{4}[-]\\\\d{1,2}[-]\\\\d{1,2}[T]\\\\d{2}:\\\\d{2}:\\\\d{2}[Z]', name='work_date'),
      id?: int64(description='id', name='id'),
      locationResult?: string(description='位置结果', name='location_result'),
      isLegal?: string(description='是否合法', name='is_legal'),
      timeResult?: string(description='时间结果', name='time_result'),
      recordId?: int64(description='打卡记录', name='record_id'),
      userCheckTime?: string(description='打卡时间', pattern='\\\\d{4}[-]\\\\d{1,2}[-]\\\\d{1,2}[T]\\\\d{2}:\\\\d{2}:\\\\d{2}[Z]', name='user_check_time'),
      scheduleId?: int64(description='排班id', name='schedule_id'),
    }
  ](description='demo', name='result'),
  success?: boolean(description='成功标记', name='success'),
  errcode?: int64(description='错误码', name='errcode'),
  errmsg?: string(description='错误信息', name='errmsg'),
}

model ListbyidsOapiAttendanceScheduleResultResponse = {
  headers: map[string]string,
  body: ListbyidsOapiAttendanceScheduleResultResponseBody,
}

/**
 * Description: 查询一批排班的结果
 */
async function listbyidsOapiAttendanceScheduleResult(request: ListbyidsOapiAttendanceScheduleResultRequest): ListbyidsOapiAttendanceScheduleResultResponse {
  var runtime = new Util.RuntimeOptions{};
  return listbyidsOapiAttendanceScheduleResultEx(request, runtime);
}

/**
 * Description: 查询一批排班的结果
 */
async function listbyidsOapiAttendanceScheduleResultEx(request: ListbyidsOapiAttendanceScheduleResultRequest, runtime: Util.RuntimeOptions): ListbyidsOapiAttendanceScheduleResultResponse {
  Util.validateModel(request);
  var appParams = Util.stringifyMapValue(Util.toMap(request.params));
  return doRequestOApi('POST', '/topapi/attendance/schedule/result/listbyids', request.headers, appParams, runtime);
}

model QueryOapiAttendanceShiftHistoryParams = {
  opUserId: string(description='操作者userId', name='op_user_id'),
  shiftId: int64(description='班次id', name='shift_id'),
  version: int64(description='班次版本', name='version'),
}

model QueryOapiAttendanceShiftHistoryRequest = {
  headers?: map[string]string,
  params:QueryOapiAttendanceShiftHistoryParams,
}

model QueryOapiAttendanceShiftHistoryResponseBody = {
  result?: {
    shiftGroupName?: string(description='班次组名称', name='shift_group_name'),
    corpId?: string(description='企业id', name='corp_id'),
    shiftSetting?: {
      shiftId?: int64(description='班次id', name='shift_id'),
      gmtModified?: string(description='班次变更时间', pattern='\\\\d{4}[-]\\\\d{1,2}[-]\\\\d{1,2}[T]\\\\d{2}:\\\\d{2}:\\\\d{2}[Z]', name='gmt_modified'),
      corpId?: string(description='企业id', name='corp_id'),
      isDeleted?: string(description='删除标记', name='is_deleted'),
      workTimeMinutes?: int64(description='工作时长，单位分钟，-1表示关闭该功能', name='work_time_minutes'),
      id?: int64(description='id', name='id'),
      attendDays?: string(description='该班次对应的出勤天数', name='attend_days'),
      gmtCreate?: string(description='创建时间', pattern='\\\\d{4}[-]\\\\d{1,2}[-]\\\\d{1,2}[T]\\\\d{2}:\\\\d{2}:\\\\d{2}[Z]', name='gmt_create'),
    }(description='班次设置', name='shift_setting'),
    name?: string(description='名称', name='name'),
    id?: int64(description='id', name='id'),
    sections?: [
      {
        punches?: [
          {
            checkType?: string(description='打卡类型', name='check_type'),
            endMin?: int64(description='允许的最晚延后打卡时间，分钟为单位', name='end_min'),
            across?: int64(description='是否跨天', name='across'),
            checkTime?: string(description='打卡时间', pattern='\\\\d{4}[-]\\\\d{1,2}[-]\\\\d{1,2}[T]\\\\d{2}:\\\\d{2}:\\\\d{2}[Z]', name='check_time'),
            permitMinutes?: int64(description='允许早退/迟到的时长', name='permit_minutes'),
            freeCheck?: boolean(description='是否免打卡', name='free_check'),
            id?: int64(description='id', name='id'),
            beginMin?: int64(description='允许的最早提前打卡时间，分钟为单位', name='begin_min'),
          }
        ](description='卡点', name='punches'),
        workTimeMinutes?: int64(description='工作时长，单位分钟', name='work_time_minutes'),
        rests?: [
          {
            checkType?: string(description='休息类型', name='check_type'),
            across?: int64(description='是否跨天', name='across'),
            checkTime?: string(description='休息时间', pattern='\\\\d{4}[-]\\\\d{1,2}[-]\\\\d{1,2}[T]\\\\d{2}:\\\\d{2}:\\\\d{2}[Z]', name='check_time'),
            id?: int64(description='id', name='id'),
          }
        ](description='休息段', name='rests'),
        id?: int64(description='id', name='id'),
      }
    ](description='卡段', name='sections'),
    shiftGroupId?: int64(description='班组id', name='shift_group_id'),
  }(description='班次', name='result'),
  success?: boolean(description='成功标记', name='success'),
  errcode?: int64(description='错误码', name='errcode'),
  errmsg?: string(description='错误信息', name='errmsg'),
}

model QueryOapiAttendanceShiftHistoryResponse = {
  headers: map[string]string,
  body: QueryOapiAttendanceShiftHistoryResponseBody,
}

/**
 * Description: 根据班次id和version查询历史班次信息
 */
async function queryOapiAttendanceShiftHistory(request: QueryOapiAttendanceShiftHistoryRequest): QueryOapiAttendanceShiftHistoryResponse {
  var runtime = new Util.RuntimeOptions{};
  return queryOapiAttendanceShiftHistoryEx(request, runtime);
}

/**
 * Description: 根据班次id和version查询历史班次信息
 */
async function queryOapiAttendanceShiftHistoryEx(request: QueryOapiAttendanceShiftHistoryRequest, runtime: Util.RuntimeOptions): QueryOapiAttendanceShiftHistoryResponse {
  Util.validateModel(request);
  var appParams = Util.stringifyMapValue(Util.toMap(request.params));
  return doRequestOApi('POST', '/topapi/attendance/shift/history/query', request.headers, appParams, runtime);
}

model SearchOapiAttendanceShiftParams = {
  opUserId: string(description='操作者userId', name='op_user_id'),
  shiftName: string(description='班次名称', name='shift_name'),
}

model SearchOapiAttendanceShiftRequest = {
  headers?: map[string]string,
  params:SearchOapiAttendanceShiftParams,
}

model SearchOapiAttendanceShiftResponseBody = {
  result?: [
    {
      name?: string(description='名称', name='name'),
      id?: int64(description='id', name='id'),
    }
  ](description='demo', name='result'),
  success?: boolean(description='成功标记', name='success'),
  errcode?: int64(description='错误码', name='errcode'),
  errmsg?: string(description='错误信息', name='errmsg'),
}

model SearchOapiAttendanceShiftResponse = {
  headers: map[string]string,
  body: SearchOapiAttendanceShiftResponseBody,
}

/**
 * Description: 按名称搜索班次
 */
async function searchOapiAttendanceShift(request: SearchOapiAttendanceShiftRequest): SearchOapiAttendanceShiftResponse {
  var runtime = new Util.RuntimeOptions{};
  return searchOapiAttendanceShiftEx(request, runtime);
}

/**
 * Description: 按名称搜索班次
 */
async function searchOapiAttendanceShiftEx(request: SearchOapiAttendanceShiftRequest, runtime: Util.RuntimeOptions): SearchOapiAttendanceShiftResponse {
  Util.validateModel(request);
  var appParams = Util.stringifyMapValue(Util.toMap(request.params));
  return doRequestOApi('POST', '/topapi/attendance/shift/search', request.headers, appParams, runtime);
}

model QueryOapiAttendanceShiftParams = {
  opUserId?: string(description='操作者userId', name='op_user_id'),
  shiftId?: int64(description='班次id', name='shift_id'),
}

model QueryOapiAttendanceShiftRequest = {
  headers?: map[string]string,
  params?:QueryOapiAttendanceShiftParams,
}

model QueryOapiAttendanceShiftResponseBody = {
  result?: {
    shiftGroupName?: string(description='班次组名称', name='shift_group_name'),
    corpId?: string(description='企业id', name='corp_id'),
    shiftSetting?: {
      shiftId?: int64(description='班次id', name='shift_id'),
      gmtModified?: string(description='班次变更时间', pattern='\\\\d{4}[-]\\\\d{1,2}[-]\\\\d{1,2}[T]\\\\d{2}:\\\\d{2}:\\\\d{2}[Z]', name='gmt_modified'),
      corpId?: string(description='企业id', name='corp_id'),
      isDeleted?: string(description='删除标记', name='is_deleted'),
      workTimeMinutes?: int64(description='工作时长，单位分钟，-1表示关闭该功能', name='work_time_minutes'),
      id?: int64(description='id', name='id'),
      attendDays?: string(description='该班次对应的出勤天数', name='attend_days'),
      gmtCreate?: string(description='创建时间', pattern='\\\\d{4}[-]\\\\d{1,2}[-]\\\\d{1,2}[T]\\\\d{2}:\\\\d{2}:\\\\d{2}[Z]', name='gmt_create'),
    }(description='班次设置', name='shift_setting'),
    name?: string(description='名称', name='name'),
    id?: int64(description='id', name='id'),
    sections?: [
      {
        punches?: [
          {
            checkType?: string(description='打卡类型', name='check_type'),
            endMin?: int64(description='允许的最晚延后打卡时间，分钟为单位', name='end_min'),
            across?: int64(description='是否跨天', name='across'),
            checkTime?: string(description='打卡时间', pattern='\\\\d{4}[-]\\\\d{1,2}[-]\\\\d{1,2}[T]\\\\d{2}:\\\\d{2}:\\\\d{2}[Z]', name='check_time'),
            permitMinutes?: int64(description='允许早退/迟到的时长', name='permit_minutes'),
            freeCheck?: boolean(description='是否免打卡', name='free_check'),
            id?: int64(description='id', name='id'),
            beginMin?: int64(description='允许的最早提前打卡时间，分钟为单位', name='begin_min'),
          }
        ](description='卡点', name='punches'),
        workTimeMinutes?: int64(description='工作时长，单位分钟', name='work_time_minutes'),
        rests?: [
          {
            checkType?: string(description='休息类型', name='check_type'),
            across?: int64(description='是否跨天', name='across'),
            checkTime?: string(description='休息时间', pattern='\\\\d{4}[-]\\\\d{1,2}[-]\\\\d{1,2}[T]\\\\d{2}:\\\\d{2}:\\\\d{2}[Z]', name='check_time'),
            id?: int64(description='id', name='id'),
          }
        ](description='休息段', name='rests'),
        id?: int64(description='id', name='id'),
      }
    ](description='卡段', name='sections'),
    shiftGroupId?: int64(description='班组id', name='shift_group_id'),
  }(description='班次', name='result'),
  success?: boolean(description='成功标记', name='success'),
  errcode?: int64(description='错误码', name='errcode'),
  errmsg?: string(description='错误信息', name='errmsg'),
}

model QueryOapiAttendanceShiftResponse = {
  headers: map[string]string,
  body: QueryOapiAttendanceShiftResponseBody,
}

/**
 * Description: 根据班次id查询班次信息
 */
async function queryOapiAttendanceShift(request: QueryOapiAttendanceShiftRequest): QueryOapiAttendanceShiftResponse {
  var runtime = new Util.RuntimeOptions{};
  return queryOapiAttendanceShiftEx(request, runtime);
}

/**
 * Description: 根据班次id查询班次信息
 */
async function queryOapiAttendanceShiftEx(request: QueryOapiAttendanceShiftRequest, runtime: Util.RuntimeOptions): QueryOapiAttendanceShiftResponse {
  Util.validateModel(request);
  var appParams = Util.stringifyMapValue(Util.toMap(request.params));
  return doRequestOApi('POST', '/topapi/attendance/shift/query', request.headers, appParams, runtime);
}

model Send_to_single_conversationOapiMessageParams = {
  senderUserid: string(description='发送者userId', name='sender_userid'),
  receiverUserid: string(description='接收者userId', name='receiver_userid'),
  msg: {
    msgtype: string(description='消息内容类型,目前只支持markdown', name='msgtype'),
    markdown: {
      text: string(description='markdown消息内容', name='text'),
    }(description='markdown消息内容', name='markdown'),
  }(description='推送消息内容', name='msg'),
}

model Send_to_single_conversationOapiMessageRequest = {
  headers?: map[string]string,
  params:Send_to_single_conversationOapiMessageParams,
}

model Send_to_single_conversationOapiMessageResponseBody = {
  msgId?: string(description='推送消息标识', name='msg_id'),
  errcode?: int64(description='错误码 0 表示成功', name='errcode'),
  errmsg?: string(description='错误描述', name='errmsg'),
}

model Send_to_single_conversationOapiMessageResponse = {
  headers: map[string]string,
  body: Send_to_single_conversationOapiMessageResponseBody,
}

/**
 * Description: 企业内个人之间发送单聊消息接口
 */
async function send_to_single_conversationOapiMessage(request: Send_to_single_conversationOapiMessageRequest): Send_to_single_conversationOapiMessageResponse {
  var runtime = new Util.RuntimeOptions{};
  return send_to_single_conversationOapiMessageEx(request, runtime);
}

/**
 * Description: 企业内个人之间发送单聊消息接口
 */
async function send_to_single_conversationOapiMessageEx(request: Send_to_single_conversationOapiMessageRequest, runtime: Util.RuntimeOptions): Send_to_single_conversationOapiMessageResponse {
  Util.validateModel(request);
  var appParams = Util.stringifyMapValue(Util.toMap(request.params));
  return doRequestOApi('POST', '/topapi/message/send_to_single_conversation', request.headers, appParams, runtime);
}

model GetuserinfoOapiUserParams = {
  code?: string(description='requestAuthCode接口中获取的CODE', name='code'),
}

model GetuserinfoOapiUserRequest = {
  headers?: map[string]string,
  params?:GetuserinfoOapiUserParams,
}

model GetuserinfoOapiUserResponseBody = {
  errcode?: int64(description='errcode', name='errcode'),
  errmsg?: string(description='errmsg', name='errmsg'),
  userid?: string(description='userid', name='userid'),
  deviceId?: string(description='deviceId', name='deviceId'),
  isSys?: boolean(description='is_sys', name='is_sys'),
  sysLevel?: string(description='sys_level', name='sys_level'),
}

model GetuserinfoOapiUserResponse = {
  headers: map[string]string,
  body: GetuserinfoOapiUserResponseBody,
}

/**
 * Description: 通过免登码获取用户userid
 */
async function getuserinfoOapiUser(request: GetuserinfoOapiUserRequest): GetuserinfoOapiUserResponse {
  var runtime = new Util.RuntimeOptions{};
  return getuserinfoOapiUserEx(request, runtime);
}

/**
 * Description: 通过免登码获取用户userid
 */
async function getuserinfoOapiUserEx(request: GetuserinfoOapiUserRequest, runtime: Util.RuntimeOptions): GetuserinfoOapiUserResponse {
  Util.validateModel(request);
  var appParams = Util.stringifyMapValue(Util.toMap(request.params));
  return doRequestOApi('GET', '/user/getuserinfo', request.headers, appParams, runtime);
}

model ListOapiAttendanceParams = {
  workDateFrom?: string(description='查询考勤打卡记录的起始工作日', name='workDateFrom'),
  workDateTo?: string(description='查询考勤打卡记录的结束工作日', name='workDateTo'),
  userIdList?: [ string ](description='员工在企业内的UserID列表，企业用来唯一标识用户的字段', name='userIdList'),
  offset?: int64(description='表示获取考勤数据的起始点，第一次传0，如果还有多余数据，下次获取传的offset值为之前的offset+limit', name='offset'),
  limit?: int64(description='表示获取考勤数据的条数，最大不能超过50条', name='limit'),
  isI18n?: boolean(description='是否国际化', name='isI18n'),
}

model ListOapiAttendanceRequest = {
  headers?: map[string]string,
  params?:ListOapiAttendanceParams,
}

model ListOapiAttendanceResponseBody = {
  recordresult?: [
    {
      sourceType?: string(description='sourceType', name='sourceType'),
      baseCheckTime?: string(description='baseCheckTime', pattern='\\\\d{4}[-]\\\\d{1,2}[-]\\\\d{1,2}[T]\\\\d{2}:\\\\d{2}:\\\\d{2}[Z]', name='baseCheckTime'),
      userCheckTime?: string(description='userCheckTime', pattern='\\\\d{4}[-]\\\\d{1,2}[-]\\\\d{1,2}[T]\\\\d{2}:\\\\d{2}:\\\\d{2}[Z]', name='userCheckTime'),
      procInstId?: string(description='procInstId', name='procInstId'),
      approveId?: int64(description='approveId', name='approveId'),
      locationResult?: string(description='locationResult', name='locationResult'),
      timeResult?: string(description='timeResult', name='timeResult'),
      checkType?: string(description='checkType', name='checkType'),
      userId?: string(description='userId', name='userId'),
      workDate?: string(description='workDate', pattern='\\\\d{4}[-]\\\\d{1,2}[-]\\\\d{1,2}[T]\\\\d{2}:\\\\d{2}:\\\\d{2}[Z]', name='workDate'),
      recordId?: int64(description='recordId', name='recordId'),
      planId?: int64(description='planId', name='planId'),
      groupId?: int64(description='groupId', name='groupId'),
      id?: int64(description='id', name='id'),
    }
  ](description='recordresult', name='recordresult'),
  hasMore?: boolean(description='hasMore', name='hasMore'),
  errmsg?: string(description='errmsg', name='errmsg'),
  errcode?: int64(description='errcode', name='errcode'),
}

model ListOapiAttendanceResponse = {
  headers: map[string]string,
  body: ListOapiAttendanceResponseBody,
}

/**
 * Description: 该接口仅限企业接入使用，用于返回企业内员工的实际打卡结果。比如，企业给一个员工设定的排班是上午9点和下午6点各打一次卡，即使员工在这期间打了多次，该接口也只会返回两条记录，包括上午的打卡结果和下午的打卡结果
 */
async function listOapiAttendance(request: ListOapiAttendanceRequest): ListOapiAttendanceResponse {
  var runtime = new Util.RuntimeOptions{};
  return listOapiAttendanceEx(request, runtime);
}

/**
 * Description: 该接口仅限企业接入使用，用于返回企业内员工的实际打卡结果。比如，企业给一个员工设定的排班是上午9点和下午6点各打一次卡，即使员工在这期间打了多次，该接口也只会返回两条记录，包括上午的打卡结果和下午的打卡结果
 */
async function listOapiAttendanceEx(request: ListOapiAttendanceRequest, runtime: Util.RuntimeOptions): ListOapiAttendanceResponse {
  Util.validateModel(request);
  var appParams = Util.stringifyMapValue(Util.toMap(request.params));
  return doRequestOApi('POST', '/attendance/list', request.headers, appParams, runtime);
}

model ListRecordOapiAttendanceParams = {
  userIds: [ string ](description='企业内的员工id列表，最多不能超过50个', name='userIds'),
  checkDateFrom: string(description='查询考勤打卡记录的结束工作日。注意，起始与结束工作日最多相隔7天', name='checkDateFrom'),
  checkDateTo: string(description='查询考勤打卡记录的结束工作日。注意，起始与结束工作日最多相隔7天', name='checkDateTo'),
  isI18n?: boolean(description='是否国际化', name='isI18n'),
}

model ListRecordOapiAttendanceRequest = {
  headers?: map[string]string,
  params:ListRecordOapiAttendanceParams,
}

model ListRecordOapiAttendanceResponseBody = {
  recordresult?: [
    {
      userAccuracy?: string(description='userAccuracy', name='userAccuracy'),
      userLatitude?: string(description='userLatitude', name='userLatitude'),
      userLongitude?: string(description='userLongitude', name='userLongitude'),
      userAddress?: string(description='userAddress', name='userAddress'),
      deviceId?: string(description='deviceId', name='deviceId'),
      locationMethod?: string(description='locationMethod', name='locationMethod'),
      isLegal?: string(description='isLegal', name='isLegal'),
      userCheckTime?: string(description='userCheckTime', pattern='\\\\d{4}[-]\\\\d{1,2}[-]\\\\d{1,2}[T]\\\\d{2}:\\\\d{2}:\\\\d{2}[Z]', name='userCheckTime'),
      procInstId?: string(description='procInstId', name='procInstId'),
      baseCheckTime?: string(description='baseCheckTime', pattern='\\\\d{4}[-]\\\\d{1,2}[-]\\\\d{1,2}[T]\\\\d{2}:\\\\d{2}:\\\\d{2}[Z]', name='baseCheckTime'),
      approveId?: int64(description='approveId', name='approveId'),
      timeResult?: string(description='timeResult', name='timeResult'),
      locationResult?: string(description='locationResult', name='locationResult'),
      checkType?: string(description='checkType', name='checkType'),
      sourceType?: string(description='sourceType', name='sourceType'),
      userId?: string(description='userId', name='userId'),
      workDate?: string(description='workDate', pattern='\\\\d{4}[-]\\\\d{1,2}[-]\\\\d{1,2}[T]\\\\d{2}:\\\\d{2}:\\\\d{2}[Z]', name='workDate'),
      planId?: int64(description='planId', name='planId'),
      groupId?: int64(description='groupId', name='groupId'),
      id?: int64(description='id', name='id'),
      userSsid?: string(description='userSsid', name='userSsid'),
      userMacAddr?: string(description='userMacAddr', name='userMacAddr'),
      planCheckTime?: string(description='planCheckTime', pattern='\\\\d{4}[-]\\\\d{1,2}[-]\\\\d{1,2}[T]\\\\d{2}:\\\\d{2}:\\\\d{2}[Z]', name='planCheckTime'),
      baseAddress?: string(description='baseAddress', name='baseAddress'),
      baseLongitude?: string(description='baseLongitude', name='baseLongitude'),
      baseLatitude?: string(description='baseLatitude', name='baseLatitude'),
      baseAccuracy?: string(description='baseAccuracy', name='baseAccuracy'),
      baseSsid?: string(description='baseSsid', name='baseSsid'),
      baseMacAddr?: string(description='baseMacAddr', name='baseMacAddr'),
      gmtCreate?: string(description='gmtCreate', pattern='\\\\d{4}[-]\\\\d{1,2}[-]\\\\d{1,2}[T]\\\\d{2}:\\\\d{2}:\\\\d{2}[Z]', name='gmtCreate'),
      gmtModified?: string(description='gmtModified', pattern='\\\\d{4}[-]\\\\d{1,2}[-]\\\\d{1,2}[T]\\\\d{2}:\\\\d{2}:\\\\d{2}[Z]', name='gmtModified'),
      outsideRemark?: string(description='outsideRemark', name='outsideRemark'),
      classId?: int64(description='classId', name='classId'),
      invalidRecordType?: string(description='invalidRecordType', name='invalidRecordType'),
      invalidRecordMsg?: string(description='invalidRecordMsg', name='invalidRecordMsg'),
      deviceSN?: string(description='deviceSN', name='deviceSN'),
      bizId?: string(description='bizId', name='bizId'),
    }
  ](description='recordresult', name='recordresult'),
  errmsg?: string(description='errmsg', name='errmsg'),
  errcode?: int64(description='errcode', name='errcode'),
}

model ListRecordOapiAttendanceResponse = {
  headers: map[string]string,
  body: ListRecordOapiAttendanceResponseBody,
}

/**
 * Description: 该接口仅限企业接入使用，用于返回企业内员工的实际打卡记录。比如，企业给一个员工设定的排班是上午9点和下午6点各打一次卡，但是员工在这期间打了多次，该接口会把所有的打卡记录都返回。
 */
async function listRecordOapiAttendance(request: ListRecordOapiAttendanceRequest): ListRecordOapiAttendanceResponse {
  var runtime = new Util.RuntimeOptions{};
  return listRecordOapiAttendanceEx(request, runtime);
}

/**
 * Description: 该接口仅限企业接入使用，用于返回企业内员工的实际打卡记录。比如，企业给一个员工设定的排班是上午9点和下午6点各打一次卡，但是员工在这期间打了多次，该接口会把所有的打卡记录都返回。
 */
async function listRecordOapiAttendanceEx(request: ListRecordOapiAttendanceRequest, runtime: Util.RuntimeOptions): ListRecordOapiAttendanceResponse {
  Util.validateModel(request);
  var appParams = Util.stringifyMapValue(Util.toMap(request.params));
  return doRequestOApi('POST', '/attendance/listRecord', request.headers, appParams, runtime);
}

model Set_corp_ipwhitelistOapiServiceParams = {
  authCorpid?: string(description='授权方corpid', name='auth_corpid'),
  ipWhitelist?: [ string ](description='要为其设置的IP白名单,格式支持IP段,用星号表示,如【5.6.*.*】,代表从【5.6.0.*】到【5.6.255.*】的任意IP,在第三段设为星号时,将忽略第四段的值,注意:仅支持后两段设置为星号', maxItems=20, name='ip_whitelist'),
}

model Set_corp_ipwhitelistOapiServiceRequest = {
  headers?: map[string]string,
  params?:Set_corp_ipwhitelistOapiServiceParams,
}

model Set_corp_ipwhitelistOapiServiceResponseBody = {
  errmsg?: string(description='errmsg', name='errmsg'),
  errcode?: int64(description='errcode', name='errcode'),
}

model Set_corp_ipwhitelistOapiServiceResponse = {
  headers: map[string]string,
  body: Set_corp_ipwhitelistOapiServiceResponseBody,
}

/**
 * Description: ISV为授权方的企业单独设置IP白名单
 */
async function set_corp_ipwhitelistOapiService(request: Set_corp_ipwhitelistOapiServiceRequest): Set_corp_ipwhitelistOapiServiceResponse {
  var runtime = new Util.RuntimeOptions{};
  return set_corp_ipwhitelistOapiServiceEx(request, runtime);
}

/**
 * Description: ISV为授权方的企业单独设置IP白名单
 */
async function set_corp_ipwhitelistOapiServiceEx(request: Set_corp_ipwhitelistOapiServiceRequest, runtime: Util.RuntimeOptions): Set_corp_ipwhitelistOapiServiceResponse {
  Util.validateModel(request);
  var appParams = Util.stringifyMapValue(Util.toMap(request.params));
  return doRequestOApi('POST', '/service/set_corp_ipwhitelist', request.headers, appParams, runtime);
}

model Reauth_corpOapiServiceParams = {
  appId?: string(description='套件下的微应用ID', name='app_id'),
  corpidList?: [ string ](description='未激活的corpid列表', maxItems=20, name='corpid_list'),
}

model Reauth_corpOapiServiceRequest = {
  headers?: map[string]string,
  params?:Reauth_corpOapiServiceParams,
}

model Reauth_corpOapiServiceResponseBody = {
  errmsg?: string(description='errmsg', name='errmsg'),
  errcode?: int64(description='errcode', name='errcode'),
}

model Reauth_corpOapiServiceResponse = {
  headers: map[string]string,
  body: Reauth_corpOapiServiceResponseBody,
}

/**
 * Description: 重新授权未激活应用的企业
 */
async function reauth_corpOapiService(request: Reauth_corpOapiServiceRequest): Reauth_corpOapiServiceResponse {
  var runtime = new Util.RuntimeOptions{};
  return reauth_corpOapiServiceEx(request, runtime);
}

/**
 * Description: 重新授权未激活应用的企业
 */
async function reauth_corpOapiServiceEx(request: Reauth_corpOapiServiceRequest, runtime: Util.RuntimeOptions): Reauth_corpOapiServiceResponse {
  Util.validateModel(request);
  var appParams = Util.stringifyMapValue(Util.toMap(request.params));
  return doRequestOApi('POST', '/service/reauth_corp', request.headers, appParams, runtime);
}

model StatOapiEnterpriseSuborgTotaldataParams = {
  statDate: string(description='查询时间', name='stat_date'),
  corpId: string(description='企业ID', name='corp_id'),
  returnFields: [ string ](description='act_ratio_1d_001	最近1天活跃率； act_ratio_1w_001	最近7天活跃率； act_usr_cnt_1d_001	活跃用户数最近1天； act_usr_cnt_1w_001	最近7天活跃用户数； active_mbr_cnt_std_001	历史截至当日激活会员数； active_ratio	激活率； ding_index_1d	最近1天钉钉指数； ding_index_1w	最近7天钉钉指数； mbr_cnt_std_063	历史截至当日企业会员数	； micro_app_use_ratio_1d	最近1天使用钉钉微应用用户比率；micro_app_use_ratio_1w	最近7天使用钉钉微应用用户比率；micro_app_user_cnt_1d	最近1天使用钉钉微应用用户数；micro_app_user_cnt_1w	最近7天使用钉钉微应用用户数；pm_form_cnt_001	审批模板数； pm_form_cnt_002	自定义模板数； pm_form_self_def_ratio	自定义模板比率； process_user_cnt_1d	最近1天使用审批用户数； process_user_cnt_1w	最近7天使用审批用户数；process_user_ratio_1d	最近1天使用审批的用户比率；process_user_ratio_1w	最近7天使用审批的用户比率；send_message_user_cnt_1d	最近1天沟通用户数；send_message_user_cnt_1w	最近7天沟通用户数；send_message_user_ratio_1d	最近1天沟通率； send_message_user_ratio_1w	最近7天沟通率； sub_org_area_lat	所辖组织的地理纬度	； sub_org_area_lng	所辖组织的地理经度	； sub_org_name	所辖组织名称；', maxItems=50, name='return_fields'),
  orderBy?: {
    field?: string(description='排查的key', name='field'),
    order?: string(description='升序或者降序', name='order'),
  }(description='排序', name='order_by'),
  pageStart: int64(description='分页起始点', name='page_start'),
  pageSize: int64(description='分页查询条数，最多30条', name='page_size'),
}

model StatOapiEnterpriseSuborgTotaldataRequest = {
  headers?: map[string]string,
  params:StatOapiEnterpriseSuborgTotaldataParams,
}

model StatOapiEnterpriseSuborgTotaldataResponseBody = {
  result?: [
    {
      statDate?: string(description='查询时间', name='stat_date'),
      corpId?: string(description='企业ID', name='corp_id'),
      actRatio1d?: string(description='最近1天活跃率', name='act_ratio_1d'),
      actRatio1w?: string(description='最近7天活跃率', name='act_ratio_1w'),
      actUsrCnt1d?: string(description='活跃用户数最近1天', name='act_usr_cnt_1d'),
      actUsrCnt1w?: string(description='最近7天活跃用户数', name='act_usr_cnt_1w'),
      activeMbrCntStd?: string(description='历史截至当日激活会员数', name='active_mbr_cnt_std'),
      activeRatio?: string(description='激活率', name='active_ratio'),
      dingIndex1d?: string(description='最近1天钉钉指数', name='ding_index_1d'),
      dingIndex1w?: string(description='最近7天钉钉指数', name='ding_index_1w'),
      mbrCntStd?: string(description='历史截至当日企业会员数', name='mbr_cnt_std'),
      microAppUseRatio1d?: string(description='最近1天使用钉钉微应用用户比率', name='micro_app_use_ratio_1d'),
      microAppUseRatio1w?: string(description='最近7天使用钉钉微应用用户比率', name='micro_app_use_ratio_1w'),
      microAppUserCnt1d?: string(description='最近1天使用钉钉微应用用户数', name='micro_app_user_cnt_1d'),
      microAppUserCnt1w?: string(description='最近7天使用钉钉微应用用户数', name='micro_app_user_cnt_1w'),
      pmFormCnt001?: string(description='审批模板数', name='pm_form_cnt_001'),
      pmFormCnt002?: string(description='自定义模板数', name='pm_form_cnt_002'),
      pmFormSelfDefRatio?: string(description='自定义模板比率', name='pm_form_self_def_ratio'),
      processUserCnt1d?: string(description='最近1天使用审批用户数', name='process_user_cnt_1d'),
      processUserCnt1w?: string(description='最近7天使用审批用户数', name='process_user_cnt_1w'),
      processUserRatio1d?: string(description='最近1天使用审批的用户比率', name='process_user_ratio_1d'),
      processUserRatio1w?: string(description='最近7天使用审批的用户比率', name='process_user_ratio_1w'),
      sendMessageUserCnt1d?: string(description='最近1天沟通用户数', name='send_message_user_cnt_1d'),
      sendMessageUserCnt1w?: string(description='最近7天沟通用户数', name='send_message_user_cnt_1w'),
      sendMessageUserRatio1d?: string(description='最近1天沟通率', name='send_message_user_ratio_1d'),
      sendMessageUserRatio1w?: string(description='最近7天沟通率', name='send_message_user_ratio_1w'),
      subOrgAreaLat?: string(description='所辖组织的地理纬度', name='sub_org_area_lat'),
      subOrgAreaLng?: string(description='所辖组织的地理经度', name='sub_org_area_lng'),
      subOrgName?: string(description='所辖组织名称', name='sub_org_name'),
    }
  ](description='系统自动生成', name='result'),
  success?: boolean(description='是否成功', name='success'),
  errcode?: int64(description='错误码', name='errcode'),
  errmsg?: string(description='错误信息', name='errmsg'),
}

model StatOapiEnterpriseSuborgTotaldataResponse = {
  headers: map[string]string,
  body: StatOapiEnterpriseSuborgTotaldataResponseBody,
}

/**
 * Description: 根据stat_date和corp_id查询所辖组织统计接口数据
 */
async function statOapiEnterpriseSuborgTotaldata(request: StatOapiEnterpriseSuborgTotaldataRequest): StatOapiEnterpriseSuborgTotaldataResponse {
  var runtime = new Util.RuntimeOptions{};
  return statOapiEnterpriseSuborgTotaldataEx(request, runtime);
}

/**
 * Description: 根据stat_date和corp_id查询所辖组织统计接口数据
 */
async function statOapiEnterpriseSuborgTotaldataEx(request: StatOapiEnterpriseSuborgTotaldataRequest, runtime: Util.RuntimeOptions): StatOapiEnterpriseSuborgTotaldataResponse {
  Util.validateModel(request);
  var appParams = Util.stringifyMapValue(Util.toMap(request.params));
  return doRequestOApi('POST', '/topapi/enterprise/suborg/totaldata/stat', request.headers, appParams, runtime);
}

model SendOapiChatParams = {
  chatid?: string(description='群会话id', name='chatid'),
  actionCard?: {
    title?: string(description='透出到会话列表和通知的文案', name='title'),
    markdown?: string(description='消息内容', name='markdown'),
    singleTitle?: string(description='使用整体跳转ActionCard样式时的标题，必须与single_url同时设置', name='single_title'),
    singleUrl?: string(description='使用整体跳转ActionCard样式时的链接url，必须与single_title同时设置', name='single_url'),
    btnOrientation?: string(description='使用独立跳转ActionCard样式时的按钮排列方式，竖直排列(0)，横向排列(1)；必须与btn_json_list同时设置', name='btn_orientation'),
    btnJsonList?: [
      {
        title?: string(description='使用独立跳转ActionCard样式时的按钮的标题', name='title'),
        actionUrl?: string(description='使用独立跳转ActionCard样式时的按钮的链接url', name='action_url'),
      }
    ](description='使用独立跳转ActionCard样式时的按钮列表；必须与btn_orientation同时设置', maxItems=20, name='btn_json_list'),
    agentid?: string(description='可选，微应用agentid。默认在角标处显示企业的名称和图标，如果传入agentid则在角标处显示微应用的名称和图标', name='agentid'),
    hideAvatar?: boolean(description='是否隐藏发送者头像', name='hide_avatar'),
  }(description='actionCard消息', name='action_card'),
  oa?: {
    messageUrl?: string(description='消息链接', name='message_url'),
    pcMessageUrl?: string(description='pc端消息链接', name='pc_message_url'),
    head?: {
      text?: string(description='消息头部标题', name='text'),
      bgcolor?: string(description='消息头部背景颜色', name='bgcolor'),
    }(description='消息头部', name='head'),
    body?: {
      title?: string(description='消息体的标题', name='title'),
      content?: string(description='消息体的内容，最多显示3行', name='content'),
      image?: string(description='消息体中的图片media_id', name='image'),
      fileCount?: string(description='自定义的附件数目。此数字仅供显示，钉钉不作验证', name='file_count'),
      author?: string(description='自定义的作者名字', name='author'),
      rich?: {
        num?: string(description='单行富文本信息的单位', name='num'),
        unit?: string(description='单行富文本信息的数目', name='unit'),
      }(description='单行富文本信息', name='rich'),
      form?: [
        {
          key?: string(description='消息体的关键字', name='key'),
          value?: string(description='消息体的关键字对应的值', name='value'),
        }
      ](description='消息体的表单，最多显示6个，超过会被隐藏', maxItems=20, name='form'),
    }(description='消息体', name='body'),
  }(description='OA消息', name='oa'),
  voice?: {
    mediaId?: string(description='语音mediaId', name='media_id'),
    duration?: int64(description='语音正整数，小于60，表示音频时长长', name='duration'),
  }(description='语音消息', name='voice'),
  file?: {
    mediaId?: string(description='文件mediaId', name='media_id'),
  }(description='文件消息', name='file'),
  image?: {
    mediaId?: string(description='图片mediaId', name='media_id'),
  }(description='图片消息', name='image'),
  link?: {
    title?: string(description='消息标题', name='title'),
    text?: string(description='消息文本', name='text'),
    picUrl?: string(description='图片地址', name='picUrl'),
    messageUrl?: string(description='消息点击链接地址', name='messageUrl'),
  }(description='链接消息', name='link'),
  text?: {
    content?: string(description='文本消息内容', name='content'),
  }(description='文本消息', name='text'),
  msgtype?: string(description='消息类型', name='msgtype'),
  markdown?: {
    title?: string(description='首屏会话透出的展示内容', name='title'),
    text?: string(description='markdown格式的消息', name='text'),
  }(description='markdown消息', name='markdown'),
  msg?: {
    text?: {
      content?: string(description='消息内容，建议500字符以内', name='content'),
    }(description='文本消息', name='text'),
    msgtype?: string(description='消息类型', name='msgtype'),
    link?: {
      messageUrl?: string(description='消息点击链接地址', name='messageUrl'),
      picUrl?: string(description='图片地址', name='picUrl'),
      text?: string(description='消息文本', name='text'),
      title?: string(description='消息标题', name='title'),
    }(description='link消息', name='link'),
    image?: {
      mediaId?: string(description='图片mediaId', name='media_id'),
    }(description='图片消息', name='image'),
    file?: {
      mediaId?: string(description='@mediaId', name='media_id'),
    }(description='文件消息', name='file'),
    voice?: {
      mediaId?: string(description='媒体文件id。2MB，播放长度不超过60s，AMR格式', name='media_id'),
      duration?: int64(description='正整数，小于60，表示音频时长', name='duration'),
    }(description='语音消息', name='voice'),
    oa?: {
      head?: {
        bgcolor?: string(description='消息头部的背景颜色。长度限制为8个英文字符，其中前2为表示透明度，后6位表示颜色值。不要添加0x', name='bgcolor'),
        text?: string(description='消息的头部标题 (向普通会话发送时有效，向企业会话发送时会被替换为微应用的名字)，长度限制为最多10个字符', name='text'),
      }(description='消息头部内容', name='head'),
      messageUrl?: string(description='消息点击链接地址，当发送消息为小程序时支持小程序跳转链接', name='message_url'),
      pcMessageUrl?: string(description='PC端点击消息时跳转到的地址', name='pc_message_url'),
      body?: {
        form?: [
          {
            value?: string(description='消息体的关键字对应的值', name='value'),
            key?: string(description='消息体的关键字', name='key'),
          }
        ](description='消息体的表单，最多显示6个，超过会被隐藏', maxItems=20, name='form'),
        rich?: {
          unit?: string(description='单行富文本信息的数目', name='unit'),
          num?: string(description='单行富文本信息的数目', name='num'),
        }(description='单行富文本信息', name='rich'),
        author?: string(description='自定义的作者名字', name='author'),
        fileCount?: string(description='自定义的附件数目。此数字仅供显示，钉钉不作验证', name='file_count'),
        image?: string(description='消息体中的图片，支持图片资源@mediaId', name='image'),
        content?: string(description='消息体的内容，最多显示3行', name='content'),
        title?: string(description='消息体的标题，建议50个字符以内', name='title'),
      }(description='消息体', name='body'),
    }(description='oa消息', name='oa'),
    actionCard?: {
      agentid?: string(description='agentid', name='agentid'),
      btnJsonList?: [
        {
          actionUrl?: string(description='使用独立跳转ActionCard样式时的按钮的标题，最长20个字符', name='action_url'),
          title?: string(description='使用独立跳转ActionCard样式时的按钮的标题，最长20个字符', name='title'),
        }
      ](description='使用独立跳转ActionCard样式时的按钮列表；必须与btn_orientation同时设置', maxItems=20, name='btn_json_list'),
      btnOrientation?: string(description='使用独立跳转ActionCard样式时的按钮排列方式，竖直排列(0)，横向排列(1)；必须与btn_json_list同时设置', name='btn_orientation'),
      singleUrl?: string(description='消息点击链接地址，当发送消息为小程序时支持小程序跳转链接，最长500个字符', name='single_url'),
      singleTitle?: string(description='使用整体跳转ActionCard样式时的标题，必须与single_url同时设置，最长20个字符', name='single_title'),
      markdown?: string(description='消息内容，支持markdown，语法参考标准markdown语法。建议1000个字符以内', name='markdown'),
      title?: string(description='透出到会话列表和通知的文案，最长64个字符', name='title'),
      hideAvatar?: boolean(description='是否隐藏发送者头像', name='hide_avatar'),
    }(description='action_card卡片消息', name='action_card'),
    markdown?: {
      text?: string(description='markdown格式的消息', name='text'),
      title?: string(description='首屏会话透出的展示内容', name='title'),
    }(description='markdown消息', name='markdown'),
  }(description='消息格式', name='msg'),
}

model SendOapiChatRequest = {
  headers?: map[string]string,
  params?:SendOapiChatParams,
}

model SendOapiChatResponseBody = {
  errcode?: int64(description='errcode', name='errcode'),
  errmsg?: string(description='errmsg', name='errmsg'),
  messageId?: string(description='messageId', name='messageId'),
}

model SendOapiChatResponse = {
  headers: map[string]string,
  body: SendOapiChatResponseBody,
}

/**
 * Description: 发送群消息
 */
async function sendOapiChat(request: SendOapiChatRequest): SendOapiChatResponse {
  var runtime = new Util.RuntimeOptions{};
  return sendOapiChatEx(request, runtime);
}

/**
 * Description: 发送群消息
 */
async function sendOapiChatEx(request: SendOapiChatRequest, runtime: Util.RuntimeOptions): SendOapiChatResponse {
  Util.validateModel(request);
  var appParams = Util.stringifyMapValue(Util.toMap(request.params));
  return doRequestOApi('POST', '/chat/send', request.headers, appParams, runtime);
}

model StatOapiEnterpriseMicroappUsedataParams = {
  statDate: string(description='查询时间', name='stat_date'),
  corpId: string(description='企业ID', name='corp_id'),
  returnFields: [ string ](description='agent_name	组织微应用名称; open_micro_user_cnt_1d	最近1天打开微应用用户数; open_micro_user_cnt_1w	最近7天打开微应用用户数;', maxItems=20, name='return_fields'),
  orderBy?: {
    field?: string(description='排查的key', name='field'),
    order?: string(description='升序或者降序', name='order'),
  }(description='排序', name='order_by'),
  pageStart: int64(description='分页起始点', name='page_start'),
  pageSize: int64(description='分页查询条数，最多30条', name='page_size'),
}

model StatOapiEnterpriseMicroappUsedataRequest = {
  headers?: map[string]string,
  params:StatOapiEnterpriseMicroappUsedataParams,
}

model StatOapiEnterpriseMicroappUsedataResponseBody = {
  result?: [
    {
      statDate?: string(description='查询时间', name='stat_date'),
      corpId?: string(description='企业ID', name='corp_id'),
      agentName?: string(description='组织微应用名称', name='agent_name'),
      openMicroUserCnt1d?: string(description='最近1天打开微应用用户数', name='open_micro_user_cnt_1d'),
      openMicroUserCnt1w?: string(description='最近7天打开微应用用户数', name='open_micro_user_cnt_1w'),
    }
  ](description='系统自动生成', name='result'),
  success?: boolean(description='是否成功', name='success'),
  errcode?: int64(description='错误码', name='errcode'),
  errmsg?: string(description='错误信息', name='errmsg'),
}

model StatOapiEnterpriseMicroappUsedataResponse = {
  headers: map[string]string,
  body: StatOapiEnterpriseMicroappUsedataResponseBody,
}

/**
 * Description: 根据stat_date和corp_id查询微应用使用数据
 */
async function statOapiEnterpriseMicroappUsedata(request: StatOapiEnterpriseMicroappUsedataRequest): StatOapiEnterpriseMicroappUsedataResponse {
  var runtime = new Util.RuntimeOptions{};
  return statOapiEnterpriseMicroappUsedataEx(request, runtime);
}

/**
 * Description: 根据stat_date和corp_id查询微应用使用数据
 */
async function statOapiEnterpriseMicroappUsedataEx(request: StatOapiEnterpriseMicroappUsedataRequest, runtime: Util.RuntimeOptions): StatOapiEnterpriseMicroappUsedataResponse {
  Util.validateModel(request);
  var appParams = Util.stringifyMapValue(Util.toMap(request.params));
  return doRequestOApi('POST', '/topapi/enterprise/microapp/usedata/stat', request.headers, appParams, runtime);
}

model GetReadListOapiChatParams = {
  messageId?: string(description='发送群消息接口返回的加密消息id', name='messageId'),
  cursor?: int64(description='分页查询的游标，第一次可以传0，后续传返回结果中的next_cursor的值。当返回结果中，没有next_cursor时，表示没有后续的数据了，可以结束调用', name='cursor'),
  size?: int64(description='分页查询的大小，最大可以传100', name='size'),
}

model GetReadListOapiChatRequest = {
  headers?: map[string]string,
  params?:GetReadListOapiChatParams,
}

model GetReadListOapiChatResponseBody = {
  nextCursor?: int64(description='next_cursor', name='next_cursor'),
  readUserIdList?: [ string ](description='readUserIdList', name='readUserIdList'),
  errmsg?: string(description='errmsg', name='errmsg'),
  errcode?: int64(description='errcode', name='errcode'),
}

model GetReadListOapiChatResponse = {
  headers: map[string]string,
  body: GetReadListOapiChatResponseBody,
}

/**
 * Description: 查询群消息已读人员列表
 */
async function getReadListOapiChat(request: GetReadListOapiChatRequest): GetReadListOapiChatResponse {
  var runtime = new Util.RuntimeOptions{};
  return getReadListOapiChatEx(request, runtime);
}

/**
 * Description: 查询群消息已读人员列表
 */
async function getReadListOapiChatEx(request: GetReadListOapiChatRequest, runtime: Util.RuntimeOptions): GetReadListOapiChatResponse {
  Util.validateModel(request);
  var appParams = Util.stringifyMapValue(Util.toMap(request.params));
  return doRequestOApi('GET', '/chat/getReadList', request.headers, appParams, runtime);
}

model StatOapiEnterpriseMainorgTotaldataParams = {
  statDate: string(description='查询时间', name='stat_date'),
  corpId: string(description='企业ID', name='corp_id'),
  returnFields: [ string ](description='active_mbr_cnt_std	在线组织激活用户数	； all_group_cnt	全员群数量； carbon_amount_1d	最近1天降低碳排量G； carbon_amount_1w	最近7天降低碳排量G； corp_id	企业ID； dept_group_cnt	部门群数量； ding_save_hour_1d	最近1天钉办节约小时； ding_save_hour_1w	最近7天钉办节约小时； inner_group_cnt	内部群数量； live_launch_succ_cnt_1d	最近1天成功发起直播次数；live_launch_succ_cnt_1w	最近7天成功发起直播次数； mbr_cnt_std	在线组织通讯录人数（注册人数）；online_conference_cnt_1d	最近1天在线会议次数；online_conference_cnt_7d	最近7天在线会议次数； online_org_cnt	在线组织数； org_online_ratio	组织覆盖率； real_org_cnt	实际组织数； receive_ding_user_cnt_1d	最近1天接收DING的用户数；receive_ding_user_cnt_1w	最近7天接收DING的用户数； rel_org_cnt	关联组织数 send_message_user_cnt_1d	最近1天发送消息人数；send_message_user_cnt_1w	最近7天发送消息人数； stat_date	统计日期', maxItems=50, name='return_fields'),
  orderBy?: {
    field?: string(description='排查的key', name='field'),
    order?: string(description='升序或者降序', name='order'),
  }(description='排序', name='order_by'),
  pageStart: int64(description='分页起始点', name='page_start'),
  pageSize: int64(description='分页查询条数，最多30条', name='page_size'),
}

model StatOapiEnterpriseMainorgTotaldataRequest = {
  headers?: map[string]string,
  params:StatOapiEnterpriseMainorgTotaldataParams,
}

model StatOapiEnterpriseMainorgTotaldataResponseBody = {
  result?: [
    {
      activeMbrCntStd?: string(description='在线组织激活用户数', name='active_mbr_cnt_std'),
      allGroupCnt?: string(description='全员群数量', name='all_group_cnt'),
      carbonAmount1d?: string(description='最近1天降低碳排量G', name='carbon_amount_1d'),
      carbonAmount1w?: string(description='最近7天降低碳排量G', name='carbon_amount_1w'),
      corpId?: string(description='企业ID', name='corp_id'),
      deptGroupCnt?: string(description='部门群数量', name='dept_group_cnt'),
      dingSaveHour1d?: string(description='最近1天钉办节约小时', name='ding_save_hour_1d'),
      dingSaveHour1w?: string(description='最近7天钉办节约小时', name='ding_save_hour_1w'),
      innerGroupCnt?: string(description='内部群数量', name='innerGroupCnt'),
      liveLaunchSuccCnt1d?: string(description='最近1天成功发起直播次数', name='liveLaunchSuccCnt1d'),
      liveLaunchSuccCnt1w?: string(description='最近7天成功发起直播次数', name='liveLaunchSuccCnt1w'),
      mbrCntStd?: string(description='在线组织通讯录人数', name='mbr_cnt_std'),
      onlineConferenceCnt1d?: string(description='最近1天在线会议次数', name='online_conference_cnt_1d'),
      onlineConferenceCnt7d?: string(description='最近7天在线会议次数', name='online_conference_cnt_7d'),
      onlineOrgNt?: string(description='在线组织数', name='online_org_nt'),
      orgOnlineRatio?: string(description='组织覆盖率', name='org_online_ratio'),
      realOrgCnt?: string(description='实际组织数', name='real_org_cnt'),
      receiveDingUserCnt1d?: string(description='最近1天接收DING的用户数', name='receive_ding_user_cnt_1d'),
      receiveDingUserCnt1w?: string(description='最近7天接收DING的用户数', name='receive_ding_user_cnt_1w'),
      relOrgNt?: string(description='关联组织数', name='rel_org_nt'),
      sendMessageUserCnt1d?: string(description='最近1天发送消息人数', name='send_message_user_cnt_1d'),
      endMessageUserCnt1w?: string(description='最近7天发送消息人数', name='end_message_user_cnt_1w'),
      statDate?: string(description='统计日期', name='stat_date'),
    }
  ](description='系统自动生成', name='result'),
  success?: boolean(description='是否成功', name='success'),
  errcode?: int64(description='错误码', name='errcode'),
  errmsg?: string(description='错误信息', name='errmsg'),
}

model StatOapiEnterpriseMainorgTotaldataResponse = {
  headers: map[string]string,
  body: StatOapiEnterpriseMainorgTotaldataResponseBody,
}

/**
 * Description: 根据stat_date和corp_id查询组织整体统计指标
 */
async function statOapiEnterpriseMainorgTotaldata(request: StatOapiEnterpriseMainorgTotaldataRequest): StatOapiEnterpriseMainorgTotaldataResponse {
  var runtime = new Util.RuntimeOptions{};
  return statOapiEnterpriseMainorgTotaldataEx(request, runtime);
}

/**
 * Description: 根据stat_date和corp_id查询组织整体统计指标
 */
async function statOapiEnterpriseMainorgTotaldataEx(request: StatOapiEnterpriseMainorgTotaldataRequest, runtime: Util.RuntimeOptions): StatOapiEnterpriseMainorgTotaldataResponse {
  Util.validateModel(request);
  var appParams = Util.stringifyMapValue(Util.toMap(request.params));
  return doRequestOApi('POST', '/topapi/enterprise/mainorg/totaldata/stat', request.headers, appParams, runtime);
}

model UpdateOapiChatParams = {
  chatid?: string(description='群会话id', name='chatid'),
  name?: string(description='群名称', name='name'),
  owner?: string(description='群主的userId', name='owner'),
  ownerType?: string(description='群主类型，emp：企业员工，ext：外部联系人', name='ownerType'),
  addUseridlist?: [ string ](description='添加成员列表', maxItems=20, name='add_useridlist'),
  delUseridlist?: [ string ](description='删除成员列表', maxItems=20, name='del_useridlist'),
  addExtidlist?: [ string ](description='添加外部联系人成员列表', maxItems=20, name='add_extidlist'),
  delExtidlist?: [ string ](description='删除外部联系人成员列表', maxItems=20, name='del_extidlist'),
  icon?: string(description='群头像mediaId', name='icon'),
  isBan?: boolean(description='是否禁言', name='isBan'),
  searchable?: int64(description='群可搜索，0-默认，不可搜索，1-可搜索', name='searchable'),
  validationType?: int64(description='入群验证，0：不入群验证（默认） 1：入群验证', name='validationType'),
  mentionAllAuthority?: int64(description='@all 权限，0-默认，所有人，1-仅群主可@all', name='mentionAllAuthority'),
  managementType?: int64(description='管理类型，0-默认，所有人可管理，1-仅群主可管理', name='managementType'),
  chatBannedType?: int64(description='群禁言，0-默认，不禁言，1-全员禁言', name='chatBannedType'),
  showHistoryType?: int64(description='新成员可查看聊天历史 0否 1是', name='showHistoryType'),
}

model UpdateOapiChatRequest = {
  headers?: map[string]string,
  params?:UpdateOapiChatParams,
}

model UpdateOapiChatResponseBody = {
  errmsg?: string(description='errmsg', name='errmsg'),
  errcode?: int64(description='errcode', name='errcode'),
}

model UpdateOapiChatResponse = {
  headers: map[string]string,
  body: UpdateOapiChatResponseBody,
}

/**
 * Description: 修改群会话
 */
async function updateOapiChat(request: UpdateOapiChatRequest): UpdateOapiChatResponse {
  var runtime = new Util.RuntimeOptions{};
  return updateOapiChatEx(request, runtime);
}

/**
 * Description: 修改群会话
 */
async function updateOapiChatEx(request: UpdateOapiChatRequest, runtime: Util.RuntimeOptions): UpdateOapiChatResponse {
  Util.validateModel(request);
  var appParams = Util.stringifyMapValue(Util.toMap(request.params));
  return doRequestOApi('POST', '/chat/update', request.headers, appParams, runtime);
}

model List_parent_deptsOapiDepartmentParams = {
  userId?: string(description='用户userId', name='userId'),
}

model List_parent_deptsOapiDepartmentRequest = {
  headers?: map[string]string,
  params?:List_parent_deptsOapiDepartmentParams,
}

model List_parent_deptsOapiDepartmentResponseBody = {
  department?: string(description='department', name='department'),
  errmsg?: string(description='errmsg', name='errmsg'),
  errcode?: int64(description='errcode', name='errcode'),
}

model List_parent_deptsOapiDepartmentResponse = {
  headers: map[string]string,
  body: List_parent_deptsOapiDepartmentResponseBody,
}

/**
 * Description: 查询指定用户的所有上级父部门路径
 */
async function list_parent_deptsOapiDepartment(request: List_parent_deptsOapiDepartmentRequest): List_parent_deptsOapiDepartmentResponse {
  var runtime = new Util.RuntimeOptions{};
  return list_parent_deptsOapiDepartmentEx(request, runtime);
}

/**
 * Description: 查询指定用户的所有上级父部门路径
 */
async function list_parent_deptsOapiDepartmentEx(request: List_parent_deptsOapiDepartmentRequest, runtime: Util.RuntimeOptions): List_parent_deptsOapiDepartmentResponse {
  Util.validateModel(request);
  var appParams = Util.stringifyMapValue(Util.toMap(request.params));
  return doRequestOApi('GET', '/department/list_parent_depts', request.headers, appParams, runtime);
}

model List_parent_depts_by_deptOapiDepartmentParams = {
  id?: string(description='部门id', name='id'),
}

model List_parent_depts_by_deptOapiDepartmentRequest = {
  headers?: map[string]string,
  params?:List_parent_depts_by_deptOapiDepartmentParams,
}

model List_parent_depts_by_deptOapiDepartmentResponseBody = {
  parentIds?: [ int64 ](description='parentIds', name='parentIds'),
  errmsg?: string(description='errmsg', name='errmsg'),
  errcode?: int64(description='errcode', name='errcode'),
}

model List_parent_depts_by_deptOapiDepartmentResponse = {
  headers: map[string]string,
  body: List_parent_depts_by_deptOapiDepartmentResponseBody,
}

/**
 * Description: 查询部门的所有上级父部门路径
 */
async function list_parent_depts_by_deptOapiDepartment(request: List_parent_depts_by_deptOapiDepartmentRequest): List_parent_depts_by_deptOapiDepartmentResponse {
  var runtime = new Util.RuntimeOptions{};
  return list_parent_depts_by_deptOapiDepartmentEx(request, runtime);
}

/**
 * Description: 查询部门的所有上级父部门路径
 */
async function list_parent_depts_by_deptOapiDepartmentEx(request: List_parent_depts_by_deptOapiDepartmentRequest, runtime: Util.RuntimeOptions): List_parent_depts_by_deptOapiDepartmentResponse {
  Util.validateModel(request);
  var appParams = Util.stringifyMapValue(Util.toMap(request.params));
  return doRequestOApi('GET', '/department/list_parent_depts_by_dept', request.headers, appParams, runtime);
}

model InstallCorpChatbotParams = {
  chatbotVo: {
    icon: string(description='机器人头像mediaId', name='icon'),
    nameModify: int64(description='向群添加机器人时是否可改名字：0-不可必，1-可改', name='name_modify'),
    chatbotId: string(description='机器人id(钉钉分配)', name='chatbot_id'),
    breif: string(description='机器人简介', name='breif'),
    function: int64(description='INCOMING = 1,OUTGOING  = 2,INOUT     = 3', name='function'),
    outgoingUrl: string(description='机器人回调URL', name='outgoing_url'),
    authority: int64(description='0-正常，1-只服务端可管理', name='authority'),
    previewMediaId: string(description='机器人预览图', name='preview_media_id'),
    botType: int64(description='2-企业对内机器人，3-企业对外机器人', name='bot_type'),
    mobileSwitch: int64(description='手机端是否能添加机器人：0-移动端不能加，1-移动端能添加', name='mobile_switch'),
    description: string(description='机器详细介绍', name='description'),
    name: string(description='机器人的名字', name='name'),
    iconMdify: int64(description='向群添加机器人时是否可改头像：0-不可必，1-可改', name='icon_mdify'),
    outgoingToken: string(description='机器人消息回调时在header中添加的token,用于对钉钉鉴权', name='outgoing_token'),
    otoSupport?: int64(description='是否支持单聊：0-不要单聊，1需要单聊', name='oto_support'),
  }(description='安装的机器人信息', name='chatbot_vo'),
}

model InstallCorpChatbotRequest = {
  headers?: map[string]string,
  params:InstallCorpChatbotParams,
}

model InstallCorpChatbotResponseBody = {
  result?: {
    result?: string(description='result', name='result'),
    dingOpenErrcode?: int64(description='dingOpenErrcode', name='ding_open_errcode'),
    errorMsg?: string(description='errorMsg', name='error_msg'),
    success?: boolean(description='success', name='success'),
  }(description='result', name='result'),
}

model InstallCorpChatbotResponse = {
  headers: map[string]string,
  body: InstallCorpChatbotResponseBody,
}

/**
 * Description: 企业安装微应用后，ISV可通过本接口给企业上架一个企业机器人。目前灰度几个ISV，机器人应用会白名单处理
 */
async function installCorpChatbot(request: InstallCorpChatbotRequest): InstallCorpChatbotResponse {
  var runtime = new Util.RuntimeOptions{};
  return installCorpChatbotEx(request, runtime);
}

/**
 * Description: 企业安装微应用后，ISV可通过本接口给企业上架一个企业机器人。目前灰度几个ISV，机器人应用会白名单处理
 */
async function installCorpChatbotEx(request: InstallCorpChatbotRequest, runtime: Util.RuntimeOptions): InstallCorpChatbotResponse {
  Util.validateModel(request);
  var appParams = Util.stringifyMapValue(Util.toMap(request.params));
  return doRequest('dingtalk.corp.chatbot.install', 'POST', '/router/rest', request.headers, appParams, runtime);
}

model CreateOapiChatParams = {
  name?: string(description='群名称', name='name'),
  owner?: string(description='群主的userId', name='owner'),
  useridlist?: [ string ](description='群成员userId列表', maxItems=20, name='useridlist'),
  ownerType?: string(description='群主类型，emp：企业员工，ext：外部联系人', name='ownerType'),
  conversationTag?: int64(description='群类型，2：企业群，0：普通群', name='conversationTag'),
  showHistoryType?: int64(description='新成员可查看100条聊天历史消息的类型，1：可查看，默认或0：不可查看', name='showHistoryType'),
  extidlist?: [ string ](description='外部联系人成员列表', maxItems=20, name='extidlist'),
  searchable?: int64(description='群可搜索，0-默认，不可搜索，1-可搜索', name='searchable'),
  validationType?: int64(description='入群验证，0：不入群验证（默认） 1：入群验证', name='validationType'),
  mentionAllAuthority?: int64(description='@all 权限，0-默认，所有人，1-仅群主可@all', name='mentionAllAuthority'),
  managementType?: int64(description='管理类型，0-默认，所有人可管理，1-仅群主可管理', name='managementType'),
  chatBannedType?: int64(description='群禁言，0-默认，不禁言，1-全员禁言', name='chatBannedType'),
  icon?: string(description='群头像资源id', name='icon'),
}

model CreateOapiChatRequest = {
  headers?: map[string]string,
  params?:CreateOapiChatParams,
}

model CreateOapiChatResponseBody = {
  conversationTag?: int64(description='conversationTag', name='conversationTag'),
  openConversationId?: string(description='openConversationId', name='openConversationId'),
  chatid?: string(description='chatid', name='chatid'),
  errmsg?: string(description='errmsg', name='errmsg'),
  errcode?: int64(description='errcode', name='errcode'),
}

model CreateOapiChatResponse = {
  headers: map[string]string,
  body: CreateOapiChatResponseBody,
}

/**
 * Description: 创建群会话
 */
async function createOapiChat(request: CreateOapiChatRequest): CreateOapiChatResponse {
  var runtime = new Util.RuntimeOptions{};
  return createOapiChatEx(request, runtime);
}

/**
 * Description: 创建群会话
 */
async function createOapiChatEx(request: CreateOapiChatRequest, runtime: Util.RuntimeOptions): CreateOapiChatResponse {
  Util.validateModel(request);
  var appParams = Util.stringifyMapValue(Util.toMap(request.params));
  return doRequestOApi('POST', '/chat/create', request.headers, appParams, runtime);
}

model UpdatebychatbotidCorpChatbotParams = {
  icon?: string(description='机器人头像', name='icon'),
  name?: string(description='机器人名字', name='name'),
  chatbotId?: string(description='机器人id(钉钉分配)', name='chatbot_id'),
  previewMediaId?: string(description='机器人预览图', name='preview_media_id'),
  description?: string(description='机器人详细描述', name='description'),
  updateType: int64(description='更新名字或头像时是否更新群里已添加机器人的名字或头像。         * 0-不更新群里机器人名字或头像         * 1-更新群里机器人名字或头像', name='update_type'),
  breif?: string(description='机器人简单描述', name='breif'),
}

model UpdatebychatbotidCorpChatbotRequest = {
  headers?: map[string]string,
  params:UpdatebychatbotidCorpChatbotParams,
}

model UpdatebychatbotidCorpChatbotResponseBody = {
  result?: {
    result?: string(description='result', name='result'),
    dingOpenErrcode?: int64(description='dingOpenErrcode', name='ding_open_errcode'),
    errorMsg?: string(description='errorMsg', name='error_msg'),
    success?: boolean(description='success', name='success'),
  }(description='result', name='result'),
}

model UpdatebychatbotidCorpChatbotResponse = {
  headers: map[string]string,
  body: UpdatebychatbotidCorpChatbotResponseBody,
}

/**
 * Description: ISV变更企业已安装机器人的名字或头像
 */
async function updatebychatbotidCorpChatbot(request: UpdatebychatbotidCorpChatbotRequest): UpdatebychatbotidCorpChatbotResponse {
  var runtime = new Util.RuntimeOptions{};
  return updatebychatbotidCorpChatbotEx(request, runtime);
}

/**
 * Description: ISV变更企业已安装机器人的名字或头像
 */
async function updatebychatbotidCorpChatbotEx(request: UpdatebychatbotidCorpChatbotRequest, runtime: Util.RuntimeOptions): UpdatebychatbotidCorpChatbotResponse {
  Util.validateModel(request);
  var appParams = Util.stringifyMapValue(Util.toMap(request.params));
  return doRequest('dingtalk.corp.chatbot.updatebychatbotid', 'POST', '/router/rest', request.headers, appParams, runtime);
}

model UpdateOapiDepartmentParams = {
  id?: int64(description='部门id', name='id'),
  orgDeptOwner?: string(description='企业群群主', name='orgDeptOwner'),
  outerPermitUsers?: string(description='本部门的员工仅可见员工自己为true时，可以配置额外可见人员，值为userid组成的的字符串，使用|符号进行分割。总数不能超过200。', name='outerPermitUsers'),
  outerPermitDepts?: string(description='本部门的员工仅可见员工自己为true时，可以配置额外可见部门，值为部门id组成的的字符串，使用|符号进行分割。总数不能超过200。', name='outerPermitDepts'),
  outerDept?: boolean(description='是否本部门的员工仅可见员工自己, 为true时，本部门员工默认只能看到员工自己', name='outerDept'),
  userPerimits?: string(description='可以查看指定隐藏部门的其他人员列表，如果部门隐藏，则此值生效，取值为其他的人员userid组成的的字符串，使用| 符号进行分割。总数不能超过200。', name='userPerimits'),
  deptPerimits?: string(description='可以查看指定隐藏部门的其他部门列表，如果部门隐藏，则此值生效，取值为其他的部门id组成的的字符串，使用 | 符号进行分割。总数不能超过200。', name='deptPerimits'),
  deptHiding?: boolean(description='是否隐藏部门, true表示隐藏, false表示显示', name='deptHiding'),
  deptManagerUseridList?: string(description='部门的主管列表,取值为由主管的userid组成的字符串，不同的userid使用’| 符号进行分割', name='deptManagerUseridList'),
  autoAddUser?: boolean(description='如果有新人加入部门是否会自动加入部门群', name='autoAddUser'),
  createDeptGroup?: boolean(description='是否创建一个关联此部门的企业群', name='createDeptGroup'),
  order?: string(description='在父部门中的次序值。order值小的排序靠前', name='order'),
  parentid?: string(description='父部门id。根部门id为1', name='parentid'),
  lang?: string(description='通讯录语言(默认zh_CN另外支持en_US)', name='lang'),
  name?: string(description='部门名称。长度限制为1~64个字符。不允许包含字符‘-’‘，’以及‘,’。', name='name'),
  sourceIdentifier?: string(description='部门标识字段，开发者可用该字段来唯一标识一个部门，并与钉钉外部通讯录里的部门做映射', name='sourceIdentifier'),
  userPermits?: string(description='可以查看指定隐藏部门的其他人员列表，如果部门隐藏，则此值生效，取值为其他的人员userid组成的的字符串，使用| 符号进行分割。总数不能超过200。', name='userPermits'),
  deptPermits?: string(description='可以查看指定隐藏部门的其他部门列表，如果部门隐藏，则此值生效，取值为其他的部门id组成的的字符串，使用 | 符号进行分割。总数不能超过200。', name='deptPermits'),
  outerDeptOnlySelf?: boolean(description='是否只能看到所在部门及下级部门通讯录', name='outerDeptOnlySelf'),
  groupContainSubDept?: boolean(description='本门群是否包含子部门', name='groupContainSubDept'),
  groupContainOuterDept?: boolean(description='部门群是否包含外包部门', name='groupContainOuterDept'),
  groupContainHiddenDept?: boolean(description='部门群是否包含隐藏部门', name='groupContainHiddenDept'),
}

model UpdateOapiDepartmentRequest = {
  headers?: map[string]string,
  params?:UpdateOapiDepartmentParams,
}

model UpdateOapiDepartmentResponseBody = {
  errcode?: int64(description='errcode', name='errcode'),
  errmsg?: string(description='errmsg', name='errmsg'),
  id?: int64(description='id', name='id'),
}

model UpdateOapiDepartmentResponse = {
  headers: map[string]string,
  body: UpdateOapiDepartmentResponseBody,
}

/**
 * Description: 更新部门
 */
async function updateOapiDepartment(request: UpdateOapiDepartmentRequest): UpdateOapiDepartmentResponse {
  var runtime = new Util.RuntimeOptions{};
  return updateOapiDepartmentEx(request, runtime);
}

/**
 * Description: 更新部门
 */
async function updateOapiDepartmentEx(request: UpdateOapiDepartmentRequest, runtime: Util.RuntimeOptions): UpdateOapiDepartmentResponse {
  Util.validateModel(request);
  var appParams = Util.stringifyMapValue(Util.toMap(request.params));
  return doRequestOApi('POST', '/department/update', request.headers, appParams, runtime);
}

model AsyncsendCorpMessageCorpconversationParams = {
  msgtype: string(description='消息类型,如text、file、oa等，具体见文档', name='msgtype'),
  agentId: int64(description='微应用的id', name='agent_id'),
  useridList?: [ string ](description='接收者的用户userid列表', maxItems=100, name='userid_list'),
  deptIdList?: [ int64 ](description='接收者的部门id列表', maxItems=20, name='dept_id_list'),
  toAllUser?: boolean(description='是否发送给企业全部用户', name='to_all_user'),
  msgcontent: string(description='与msgtype对应的消息体，具体见文档', name='msgcontent'),
}

model AsyncsendCorpMessageCorpconversationRequest = {
  headers?: map[string]string,
  params:AsyncsendCorpMessageCorpconversationParams,
}

model AsyncsendCorpMessageCorpconversationResponseBody = {
  result?: {
    dingOpenErrcode?: int64(description='dingOpenErrcode', name='ding_open_errcode'),
    errorMsg?: string(description='errorMsg', name='error_msg'),
    success?: boolean(description='success', name='success'),
    taskId?: int64(description='创建的异步发送任务id', name='task_id'),
  }(description='result', name='result'),
}

model AsyncsendCorpMessageCorpconversationResponse = {
  headers: map[string]string,
  body: AsyncsendCorpMessageCorpconversationResponseBody,
}

/**
 * Description: 企业会话消息异步发送接口
 */
async function asyncsendCorpMessageCorpconversation(request: AsyncsendCorpMessageCorpconversationRequest): AsyncsendCorpMessageCorpconversationResponse {
  var runtime = new Util.RuntimeOptions{};
  return asyncsendCorpMessageCorpconversationEx(request, runtime);
}

/**
 * Description: 企业会话消息异步发送接口
 */
async function asyncsendCorpMessageCorpconversationEx(request: AsyncsendCorpMessageCorpconversationRequest, runtime: Util.RuntimeOptions): AsyncsendCorpMessageCorpconversationResponse {
  Util.validateModel(request);
  var appParams = Util.stringifyMapValue(Util.toMap(request.params));
  return doRequest('dingtalk.corp.message.corpconversation.asyncsend', 'POST', '/router/rest', request.headers, appParams, runtime);
}

model ListbychatbotidsCorpChatbotParams = {
  chatbotIds: [ string ](description='chatbotId列表', maxItems=20, name='chatbot_ids'),
}

model ListbychatbotidsCorpChatbotRequest = {
  headers?: map[string]string,
  params:ListbychatbotidsCorpChatbotParams,
}

model ListbychatbotidsCorpChatbotResponseBody = {
  result?: {
    resultList?: [
      {
        botType?: int64(description='2-企业对内机器人，3-企业对外机器人', name='bot_type'),
        chatbotId?: string(description='机器人chatbotId', name='chatbot_id'),
        name?: string(description='机器人名字', name='name'),
        icon?: string(description='机器人头像', name='icon'),
        breif?: string(description='机器人简介', name='breif'),
        description?: string(description='机器人详细介绍', name='description'),
        outgoingUrl?: string(description='机器人回调地址', name='outgoing_url'),
        outgoingToken?: string(description='机器人消息回调时在header中添加的token,用于对钉钉鉴权', name='outgoing_token'),
        previewMediaId?: string(description='机器人预览图', name='preview_media_id'),
        mobileSwitch?: int64(description='手机端是否能添加机器人：0-移动端不能加，1-移动端能添加', name='mobile_switch'),
        function?: int64(description='INCOMING = 1,OUTGOING = 2,INOUT = 3', name='function'),
        nameModify?: int64(description='向群添加机器人时是否可改名字：0-不可必，1-可改', name='name_modify'),
        iconMdify?: int64(description='向群添加机器人时是否可改头像：0-不可必，1-可改', name='icon_mdify'),
        otoSupport?: int64(description='是否支持单聊：0-不要单聊，1需要单聊', name='oto_support'),
        authority?: int64(description='0-正常，1-只服务端可管理', name='authority'),
      }
    ](description='result', name='result_list'),
    dingOpenErrcode?: int64(description='dingOpenErrcode', name='ding_open_errcode'),
    errorMsg?: string(description='errorMsg', name='error_msg'),
    success?: boolean(description='success', name='success'),
  }(description='result', name='result'),
}

model ListbychatbotidsCorpChatbotResponse = {
  headers: map[string]string,
  body: ListbychatbotidsCorpChatbotResponseBody,
}

/**
 * Description: ISV根据chatbotId查询给企业已安装的机器人信息
 */
async function listbychatbotidsCorpChatbot(request: ListbychatbotidsCorpChatbotRequest): ListbychatbotidsCorpChatbotResponse {
  var runtime = new Util.RuntimeOptions{};
  return listbychatbotidsCorpChatbotEx(request, runtime);
}

/**
 * Description: ISV根据chatbotId查询给企业已安装的机器人信息
 */
async function listbychatbotidsCorpChatbotEx(request: ListbychatbotidsCorpChatbotRequest, runtime: Util.RuntimeOptions): ListbychatbotidsCorpChatbotResponse {
  Util.validateModel(request);
  var appParams = Util.stringifyMapValue(Util.toMap(request.params));
  return doRequest('dingtalk.corp.chatbot.listbychatbotids', 'POST', '/router/rest', request.headers, appParams, runtime);
}

model ListOapiDepartmentParams = {
  lang?: string(description='通讯录语言(默认zh_CN，未来会支持en_US)', name='lang'),
  fetchChild?: boolean(description='是否递归部门的全部子部门，ISV微应用固定传递false。', name='fetch_child'),
  id?: string(description='父部门id(如果不传，默认部门为根部门，根部门ID为1)', name='id'),
}

model ListOapiDepartmentRequest = {
  headers?: map[string]string,
  params?:ListOapiDepartmentParams,
}

model ListOapiDepartmentResponseBody = {
  errcode?: int64(description='errcode', name='errcode'),
  errmsg?: string(description='errmsg', name='errmsg'),
  department?: [
    {
      id?: int64(description='id', name='id'),
      name?: string(description='name', name='name'),
      parentid?: int64(description='parentid', name='parentid'),
      sourceIdentifier?: string(description='sourceIdentifier', name='sourceIdentifier'),
      createDeptGroup?: boolean(description='createDeptGroup', name='createDeptGroup'),
      autoAddUser?: boolean(description='autoAddUser', name='autoAddUser'),
      isFromUnionOrg?: boolean(description='isFromUnionOrg', name='isFromUnionOrg'),
    }
  ](description='department', name='department'),
}

model ListOapiDepartmentResponse = {
  headers: map[string]string,
  body: ListOapiDepartmentResponseBody,
}

/**
 * Description: 获取部门列表
 */
async function listOapiDepartment(request: ListOapiDepartmentRequest): ListOapiDepartmentResponse {
  var runtime = new Util.RuntimeOptions{};
  return listOapiDepartmentEx(request, runtime);
}

/**
 * Description: 获取部门列表
 */
async function listOapiDepartmentEx(request: ListOapiDepartmentRequest, runtime: Util.RuntimeOptions): ListOapiDepartmentResponse {
  Util.validateModel(request);
  var appParams = Util.stringifyMapValue(Util.toMap(request.params));
  return doRequestOApi('GET', '/department/list', request.headers, appParams, runtime);
}

model GetUseridByUnionidOapiUserParams = {
  unionid?: string(description='用户在当前钉钉开放平台账号范围内的唯一标识，同一个钉钉开放平台账号可以包含多个开放应用，同时也包含ISV的套件应用及企业应用', name='unionid'),
}

model GetUseridByUnionidOapiUserRequest = {
  headers?: map[string]string,
  params?:GetUseridByUnionidOapiUserParams,
}

model GetUseridByUnionidOapiUserResponseBody = {
  errmsg?: string(description='errmsg', name='errmsg'),
  errcode?: int64(description='errcode', name='errcode'),
  contactType?: int64(description='contactType', name='contactType'),
  userid?: string(description='userid', name='userid'),
}

model GetUseridByUnionidOapiUserResponse = {
  headers: map[string]string,
  body: GetUseridByUnionidOapiUserResponseBody,
}

/**
 * Description: 根据unionid获取成员的userid
 */
async function getUseridByUnionidOapiUser(request: GetUseridByUnionidOapiUserRequest): GetUseridByUnionidOapiUserResponse {
  var runtime = new Util.RuntimeOptions{};
  return getUseridByUnionidOapiUserEx(request, runtime);
}

/**
 * Description: 根据unionid获取成员的userid
 */
async function getUseridByUnionidOapiUserEx(request: GetUseridByUnionidOapiUserRequest, runtime: Util.RuntimeOptions): GetUseridByUnionidOapiUserResponse {
  Util.validateModel(request);
  var appParams = Util.stringifyMapValue(Util.toMap(request.params));
  return doRequestOApi('GET', '/user/getUseridByUnionid', request.headers, appParams, runtime);
}

model GetsendprogressCorpMessageCorpconversationParams = {
  agentId: int64(description='发送消息时使用的微应用的id', name='agent_id'),
  taskId: int64(description='发送消息时钉钉返回的任务id', name='task_id'),
}

model GetsendprogressCorpMessageCorpconversationRequest = {
  headers?: map[string]string,
  params:GetsendprogressCorpMessageCorpconversationParams,
}

model GetsendprogressCorpMessageCorpconversationResponseBody = {
  result?: {
    dingOpenErrcode?: int64(description='dingOpenErrcode', name='ding_open_errcode'),
    errorMsg?: string(description='errorMsg', name='error_msg'),
    success?: boolean(description='success', name='success'),
    progress?: {
      progressInPercent?: int64(description='取值 0-100，表示处理的百分比', name='progress_in_percent'),
      status?: int64(description='任务执行状态,0=未开始,1=处理中,2=处理完毕', name='status'),
    }(description='result', name='progress'),
  }(description='result', name='result'),
}

model GetsendprogressCorpMessageCorpconversationResponse = {
  headers: map[string]string,
  body: GetsendprogressCorpMessageCorpconversationResponseBody,
}

/**
 * Description: 获取异步发送企业会话消息的进度
 */
async function getsendprogressCorpMessageCorpconversation(request: GetsendprogressCorpMessageCorpconversationRequest): GetsendprogressCorpMessageCorpconversationResponse {
  var runtime = new Util.RuntimeOptions{};
  return getsendprogressCorpMessageCorpconversationEx(request, runtime);
}

/**
 * Description: 获取异步发送企业会话消息的进度
 */
async function getsendprogressCorpMessageCorpconversationEx(request: GetsendprogressCorpMessageCorpconversationRequest, runtime: Util.RuntimeOptions): GetsendprogressCorpMessageCorpconversationResponse {
  Util.validateModel(request);
  var appParams = Util.stringifyMapValue(Util.toMap(request.params));
  return doRequest('dingtalk.corp.message.corpconversation.getsendprogress', 'POST', '/router/rest', request.headers, appParams, runtime);
}

model Can_access_microappOapiUserParams = {
  appId?: int64(description='微应用id', name='appId'),
  userId?: string(description='员工唯一标识ID', name='userId'),
}

model Can_access_microappOapiUserRequest = {
  headers?: map[string]string,
  params?:Can_access_microappOapiUserParams,
}

model Can_access_microappOapiUserResponseBody = {
  errcode?: int64(description='errcode', name='errcode'),
  errmsg?: string(description='errmsg', name='errmsg'),
  canAccess?: boolean(description='canAccess', name='canAccess'),
}

model Can_access_microappOapiUserResponse = {
  headers: map[string]string,
  body: Can_access_microappOapiUserResponseBody,
}

/**
 * Description: 获取管理员的微应用管理权限
 */
async function can_access_microappOapiUser(request: Can_access_microappOapiUserRequest): Can_access_microappOapiUserResponse {
  var runtime = new Util.RuntimeOptions{};
  return can_access_microappOapiUserEx(request, runtime);
}

/**
 * Description: 获取管理员的微应用管理权限
 */
async function can_access_microappOapiUserEx(request: Can_access_microappOapiUserRequest, runtime: Util.RuntimeOptions): Can_access_microappOapiUserResponse {
  Util.validateModel(request);
  var appParams = Util.stringifyMapValue(Util.toMap(request.params));
  return doRequestOApi('GET', '/user/can_access_microapp', request.headers, appParams, runtime);
}

model GetsendresultCorpMessageCorpconversationParams = {
  agentId?: int64(description='微应用的agentid', name='agent_id'),
  taskId?: int64(description='异步任务的id', name='task_id'),
}

model GetsendresultCorpMessageCorpconversationRequest = {
  headers?: map[string]string,
  params?:GetsendresultCorpMessageCorpconversationParams,
}

model GetsendresultCorpMessageCorpconversationResponseBody = {
  result?: {
    sendResult?: {
      invalidUserIdList?: [ string ](description='无效的用户id', name='invalid_user_id_list'),
      forbiddenUserIdList?: [ string ](description='因发送消息过于频繁或超量而被流控过滤后实际未发送的userid。未被限流的接收者仍会被成功发送。限流规则包括：1、给同一用户发相同内容消息一天仅允许一次；2、如果是ISV接入方式，给同一用户发消息一天不得超过100次；如果是企业接入方式，此上限为500。', name='forbidden_user_id_list'),
      failedUserIdList?: [ string ](description='发送失败的用户id', name='failed_user_id_list'),
      readUserIdList?: [ string ](description='已读消息的用户id', name='read_user_id_list'),
      unreadUserIdList?: [ string ](description='未读消息的用户id', name='unread_user_id_list'),
      invalidDeptIdList?: [ int64 ](description='无效的部门id', name='invalid_dept_id_list'),
    }(description='result', name='send_result'),
    dingOpenErrcode?: int64(description='dingOpenErrcode', name='ding_open_errcode'),
    errorMsg?: string(description='errorMsg', name='error_msg'),
    success?: boolean(description='success', name='success'),
  }(description='result', name='result'),
}

model GetsendresultCorpMessageCorpconversationResponse = {
  headers: map[string]string,
  body: GetsendresultCorpMessageCorpconversationResponseBody,
}

/**
 * Description: 获取异步向企业会话发送消息的结果
 */
async function getsendresultCorpMessageCorpconversation(request: GetsendresultCorpMessageCorpconversationRequest): GetsendresultCorpMessageCorpconversationResponse {
  var runtime = new Util.RuntimeOptions{};
  return getsendresultCorpMessageCorpconversationEx(request, runtime);
}

/**
 * Description: 获取异步向企业会话发送消息的结果
 */
async function getsendresultCorpMessageCorpconversationEx(request: GetsendresultCorpMessageCorpconversationRequest, runtime: Util.RuntimeOptions): GetsendresultCorpMessageCorpconversationResponse {
  Util.validateModel(request);
  var appParams = Util.stringifyMapValue(Util.toMap(request.params));
  return doRequest('dingtalk.corp.message.corpconversation.getsendresult', 'POST', '/router/rest', request.headers, appParams, runtime);
}

model Get_adminOapiUserRequest = {
  headers?: map[string]string,
}

model Get_adminOapiUserResponseBody = {
  errmsg?: string(description='errmsg', name='errmsg'),
  errcode?: int64(description='errcode', name='errcode'),
  adminList?: [
    {
      sysLevel?: int64(description='sys_level', name='sys_level'),
      userid?: string(description='userid', name='userid'),
      adminMobile?: string(description='admin_mobile', name='admin_mobile'),
    }
  ](description='admin_list', name='admin_list'),
}

model Get_adminOapiUserResponse = {
  headers: map[string]string,
  body: Get_adminOapiUserResponseBody,
}

/**
 * Description: 获取管理员列表
 */
async function get_adminOapiUser(request: Get_adminOapiUserRequest): Get_adminOapiUserResponse {
  var runtime = new Util.RuntimeOptions{};
  return get_adminOapiUserEx(request, runtime);
}

/**
 * Description: 获取管理员列表
 */
async function get_adminOapiUserEx(request: Get_adminOapiUserRequest, runtime: Util.RuntimeOptions): Get_adminOapiUserResponse {
  Util.validateModel(request);
  var appParams : map[string]string = {};
  return doRequestOApi('GET', '/user/get_admin', request.headers, appParams, runtime);
}

model AsyncsendbycodeCorpMessageCorpconversationParams = {
  msgtype: string(description='消息类型,如text、file、oa等，具体见文档', name='msgtype'),
  agentId: int64(description='微应用的id', name='agent_id'),
  userIdList?: [ string ](description='接收者的用户userid列表', maxItems=20, name='user_id_list'),
  deptIdList?: [ int64 ](description='接收者的部门id列表', maxItems=20, name='dept_id_list'),
  toAllUser?: boolean(description='是否发送给企业全部用户', name='to_all_user'),
  msgcontent: string(description='与msgtype对应的消息体，具体见文档', name='msgcontent'),
  code: string(description='用户操作产生的授权码', name='code'),
}

model AsyncsendbycodeCorpMessageCorpconversationRequest = {
  headers?: map[string]string,
  params:AsyncsendbycodeCorpMessageCorpconversationParams,
}

model AsyncsendbycodeCorpMessageCorpconversationResponseBody = {
  result?: {
    dingOpenErrcode?: int64(description='dingOpenErrcode', name='ding_open_errcode'),
    errorMsg?: string(description='errorMsg', name='error_msg'),
    success?: boolean(description='success', name='success'),
    taskId?: int64(description='异步发送任务的id', name='task_id'),
  }(description='result', name='result'),
}

model AsyncsendbycodeCorpMessageCorpconversationResponse = {
  headers: map[string]string,
  body: AsyncsendbycodeCorpMessageCorpconversationResponseBody,
}

/**
 * Description: 通过用户授权码异步向企业会话发送消息
 */
async function asyncsendbycodeCorpMessageCorpconversation(request: AsyncsendbycodeCorpMessageCorpconversationRequest): AsyncsendbycodeCorpMessageCorpconversationResponse {
  var runtime = new Util.RuntimeOptions{};
  return asyncsendbycodeCorpMessageCorpconversationEx(request, runtime);
}

/**
 * Description: 通过用户授权码异步向企业会话发送消息
 */
async function asyncsendbycodeCorpMessageCorpconversationEx(request: AsyncsendbycodeCorpMessageCorpconversationRequest, runtime: Util.RuntimeOptions): AsyncsendbycodeCorpMessageCorpconversationResponse {
  Util.validateModel(request);
  var appParams = Util.stringifyMapValue(Util.toMap(request.params));
  return doRequest('dingtalk.corp.message.corpconversation.asyncsendbycode', 'POST', '/router/rest', request.headers, appParams, runtime);
}

model ListOapiUserParams = {
  lang?: string(description='通讯录语言(默认zh_CN另外支持en_US)', name='lang'),
  departmentId?: int64(description='获取的部门id', name='department_id'),
  offset?: int64(description='支持分页查询，与size参数同时设置时才生效，此参数代表偏移量', name='offset'),
  size?: int64(description='支持分页查询，与offset参数同时设置时才生效，此参数代表分页大小，最大100', name='size'),
  order?: string(description='支持分页查询，部门成员的排序规则，默认不传是按自定义排序；entry_asc代表按照进入部门的时间升序，entry_desc代表按照进入部门的时间降序，modify_asc代表按照部门信息修改时间升序，modify_desc代表按照部门信息修改时间降序，custom代表用户定义(未定义时按照拼音)排序', name='order'),
}

model ListOapiUserRequest = {
  headers?: map[string]string,
  params?:ListOapiUserParams,
}

model ListOapiUserResponseBody = {
  errcode?: int64(description='errcode', name='errcode'),
  errmsg?: string(description='errmsg', name='errmsg'),
  hasMore?: boolean(description='hasMore', name='hasMore'),
  userlist?: [
    {
      userid?: string(description='userid', name='userid'),
      order?: int64(description='order', name='order'),
      dingId?: string(description='dingId', name='dingId'),
      unionid?: string(description='unionid', name='unionid'),
      mobile?: string(description='mobile', name='mobile'),
      tel?: string(description='tel', name='tel'),
      workPlace?: string(description='workPlace', name='workPlace'),
      remark?: string(description='remark', name='remark'),
      isAdmin?: boolean(description='isAdmin', name='isAdmin'),
      isBoss?: boolean(description='isBoss', name='isBoss'),
      isHide?: boolean(description='isHide', name='isHide'),
      isLeader?: boolean(description='isLeader', name='isLeader'),
      name?: string(description='name', name='name'),
      active?: boolean(description='active', name='active'),
      department?: string(description='department', name='department'),
      position?: string(description='position', name='position'),
      email?: string(description='email', name='email'),
      orgEmail?: string(description='orgEmail', name='orgEmail'),
      avatar?: string(description='avatar', name='avatar'),
      jobnumber?: string(description='jobnumber', name='jobnumber'),
      hiredDate?: string(description='hiredDate', pattern='\\\\d{4}[-]\\\\d{1,2}[-]\\\\d{1,2}[T]\\\\d{2}:\\\\d{2}:\\\\d{2}[Z]', name='hiredDate'),
      extattr?: string(description='extattr', name='extattr'),
    }
  ](description='userlist', name='userlist'),
}

model ListOapiUserResponse = {
  headers: map[string]string,
  body: ListOapiUserResponseBody,
}

/**
 * Description: 获取部门成员（详情）
 */
async function listOapiUser(request: ListOapiUserRequest): ListOapiUserResponse {
  var runtime = new Util.RuntimeOptions{};
  return listOapiUserEx(request, runtime);
}

/**
 * Description: 获取部门成员（详情）
 */
async function listOapiUserEx(request: ListOapiUserRequest, runtime: Util.RuntimeOptions): ListOapiUserResponse {
  Util.validateModel(request);
  var appParams = Util.stringifyMapValue(Util.toMap(request.params));
  return doRequestOApi('GET', '/user/list', request.headers, appParams, runtime);
}

model AddOapiGroupSetFriendsParams = {
  chatid: string(description='会话Id', name='chatid'),
  isProhibit: boolean(description='true表示开启禁止开关，false表示关闭', name='is_prohibit'),
}

model AddOapiGroupSetFriendsRequest = {
  headers?: map[string]string,
  params:AddOapiGroupSetFriendsParams,
}

model AddOapiGroupSetFriendsResponseBody = {
  errmsg?: string(description='错误消息', name='errmsg'),
  errcode?: int64(description='错误码', name='errcode'),
  success?: boolean(description='是否成功', name='success'),
}

model AddOapiGroupSetFriendsResponse = {
  headers: map[string]string,
  body: AddOapiGroupSetFriendsResponseBody,
}

/**
 * Description: 设置群成员之间是否可以添加好友和私聊的开关
 */
async function addOapiGroupSetFriends(request: AddOapiGroupSetFriendsRequest): AddOapiGroupSetFriendsResponse {
  var runtime = new Util.RuntimeOptions{};
  return addOapiGroupSetFriendsEx(request, runtime);
}

/**
 * Description: 设置群成员之间是否可以添加好友和私聊的开关
 */
async function addOapiGroupSetFriendsEx(request: AddOapiGroupSetFriendsRequest, runtime: Util.RuntimeOptions): AddOapiGroupSetFriendsResponse {
  Util.validateModel(request);
  var appParams = Util.stringifyMapValue(Util.toMap(request.params));
  return doRequestOApi('POST', '/topapi/group/set/friends/add', request.headers, appParams, runtime);
}

model StatOapiEnterpriseSubareaTotaldataParams = {
  statDate: string(description='查询时间', name='stat_date'),
  corpId: string(description='企业ID', name='corp_id'),
  returnFields: [ string ](description='act_ratio_1d_001	所辖区域活跃率; act_usr_cnt_1d_001	活跃用户数最近1天; active_mbr_cnt_std_001	历史截至当日激活会员数; active_mbr_ratio	所辖区域用户的激活率; city_lat	所属城市维度; city_lng	所属城市经度; county_lat	区/县纬度; county_lng	区/县经度; mbr_cnt_std_063	历史截至当日企业会员数; online_org_cnt	所辖区域在线组织数	; org_online_ratio	所辖区域组织覆盖率	; real_org_cnt	所辖区域实际组织数	; send_message_cnt_1d	发送消息数量; send_message_user_cnt_1d	发送消息人数;', maxItems=50, name='return_fields'),
  orderBy?: {
    field?: string(description='排查的key', name='field'),
    order?: string(description='升序或者降序', name='order'),
  }(description='排序', name='order_by'),
  pageStart: int64(description='分页起始点', name='page_start'),
  pageSize: int64(description='分页查询条数，最多30条', name='page_size'),
}

model StatOapiEnterpriseSubareaTotaldataRequest = {
  headers?: map[string]string,
  params:StatOapiEnterpriseSubareaTotaldataParams,
}

model StatOapiEnterpriseSubareaTotaldataResponseBody = {
  result?: [
    {
      statDate?: string(description='查询时间', name='stat_date'),
      corpId?: string(description='企业ID', name='corp_id'),
      actRatio1d?: string(description='所辖区域活跃率', name='act_ratio_1d'),
      actUsrCn1d?: string(description='活跃用户数最近1天', name='act_usr_cn_1d'),
      activeMbrCntStd?: string(description='历史截至当日激活会员数', name='active_mbr_cnt_std'),
      activeMbrRatio?: string(description='所辖区域用户的激活率', name='active_mbr_ratio'),
      cityLat?: string(description='所属城市维度', name='city_lat'),
      cityLng?: string(description='所属城市经度', name='city_lng'),
      countyLat?: string(description='区/县纬度', name='county_lat'),
      countyLng?: string(description='区/县经度', name='county_lng'),
      mbrCntStd?: string(description='历史截至当日企业会员数', name='mbr_cnt_std'),
      onlineOrgCnt?: string(description='所辖区域在线组织数', name='online_org_cnt'),
      orgOnlineRatio?: string(description='所辖区域组织覆盖率', name='org_online_ratio'),
      realOrgCnt?: string(description='所辖区域实际组织数', name='real_org_cnt'),
      sendMessageCnt1d?: string(description='发送消息数量', name='send_message_cnt_1d'),
      sendMessageUserCnt1d?: string(description='发送消息人数', name='send_message_user_cnt_1d'),
      cityName?: string(description='城市名称', name='city_name'),
      countyName?: string(description='城市所在区域', name='county_name'),
    }
  ](description='系统自动生成', name='result'),
  success?: boolean(description='是否成功', name='success'),
  errcode?: int64(description='错误码', name='errcode'),
  errmsg?: string(description='错误信息', name='errmsg'),
}

model StatOapiEnterpriseSubareaTotaldataResponse = {
  headers: map[string]string,
  body: StatOapiEnterpriseSubareaTotaldataResponseBody,
}

/**
 * Description: 根据stat_date和corp_id查询所辖区域统计数据
 */
async function statOapiEnterpriseSubareaTotaldata(request: StatOapiEnterpriseSubareaTotaldataRequest): StatOapiEnterpriseSubareaTotaldataResponse {
  var runtime = new Util.RuntimeOptions{};
  return statOapiEnterpriseSubareaTotaldataEx(request, runtime);
}

/**
 * Description: 根据stat_date和corp_id查询所辖区域统计数据
 */
async function statOapiEnterpriseSubareaTotaldataEx(request: StatOapiEnterpriseSubareaTotaldataRequest, runtime: Util.RuntimeOptions): StatOapiEnterpriseSubareaTotaldataResponse {
  Util.validateModel(request);
  var appParams = Util.stringifyMapValue(Util.toMap(request.params));
  return doRequestOApi('POST', '/topapi/enterprise/subarea/totaldata/stat', request.headers, appParams, runtime);
}

model SimplelistOapiUserParams = {
  lang?: string(description='通讯录语言(默认zh_CN另外支持en_US)', name='lang'),
  departmentId?: int64(description='获取的部门id', name='department_id'),
  offset?: int64(description='支持分页查询，与size参数同时设置时才生效，此参数代表偏移量', name='offset'),
  size?: int64(description='支持分页查询，与offset参数同时设置时才生效，此参数代表分页大小，最大100', name='size'),
  order?: string(description='支持分页查询，部门成员的排序规则，默认不传是按自定义排序；entry_asc代表按照进入部门的时间升序，entry_desc代表按照进入部门的时间降序，modify_asc代表按照部门信息修改时间升序，modify_desc代表按照部门信息修改时间降序，custom代表用户定义(未定义时按照拼音)排序', name='order'),
}

model SimplelistOapiUserRequest = {
  headers?: map[string]string,
  params?:SimplelistOapiUserParams,
}

model SimplelistOapiUserResponseBody = {
  userlist?: [
    {
      userid?: string(description='userid', name='userid'),
      name?: string(description='name', name='name'),
    }
  ](description='userlist', name='userlist'),
  errcode?: int64(description='errcode', name='errcode'),
  errmsg?: string(description='errmsg', name='errmsg'),
  hasMore?: boolean(description='hasMore', name='hasMore'),
}

model SimplelistOapiUserResponse = {
  headers: map[string]string,
  body: SimplelistOapiUserResponseBody,
}

/**
 * Description: 获取部门成员
 */
async function simplelistOapiUser(request: SimplelistOapiUserRequest): SimplelistOapiUserResponse {
  var runtime = new Util.RuntimeOptions{};
  return simplelistOapiUserEx(request, runtime);
}

/**
 * Description: 获取部门成员
 */
async function simplelistOapiUserEx(request: SimplelistOapiUserRequest, runtime: Util.RuntimeOptions): SimplelistOapiUserResponse {
  Util.validateModel(request);
  var appParams = Util.stringifyMapValue(Util.toMap(request.params));
  return doRequestOApi('GET', '/user/simplelist', request.headers, appParams, runtime);
}

model BatchdeleteOapiUserParams = {
  useridlist?: [ string ](description='员工UserID列表。列表长度在1到20之间', maxItems=20, name='useridlist'),
}

model BatchdeleteOapiUserRequest = {
  headers?: map[string]string,
  params?:BatchdeleteOapiUserParams,
}

model BatchdeleteOapiUserResponseBody = {
  errcode?: int64(description='errcode', name='errcode'),
  errmsg?: string(description='errmsg', name='errmsg'),
}

model BatchdeleteOapiUserResponse = {
  headers: map[string]string,
  body: BatchdeleteOapiUserResponseBody,
}

/**
 * Description: 批量删除成员
 */
async function batchdeleteOapiUser(request: BatchdeleteOapiUserRequest): BatchdeleteOapiUserResponse {
  var runtime = new Util.RuntimeOptions{};
  return batchdeleteOapiUserEx(request, runtime);
}

/**
 * Description: 批量删除成员
 */
async function batchdeleteOapiUserEx(request: BatchdeleteOapiUserRequest, runtime: Util.RuntimeOptions): BatchdeleteOapiUserResponse {
  Util.validateModel(request);
  var appParams = Util.stringifyMapValue(Util.toMap(request.params));
  return doRequestOApi('POST', '/user/batchdelete', request.headers, appParams, runtime);
}

model HidebyprojectOapiTdpTasklistParams = {
  microappAgentId?: int64(description='微应用agentId', name='microapp_agent_id'),
  operatorUserid: string(description='操作者id', name='operator_userid'),
  projectId: string(description='任务所属项目(虚拟企业），基于项目空间的项目', name='project_id'),
  userid: string(description='用户id', name='userid'),
}

model HidebyprojectOapiTdpTasklistRequest = {
  headers?: map[string]string,
  params:HidebyprojectOapiTdpTasklistParams,
}

model HidebyprojectOapiTdpTasklistResponseBody = {
  errcode?: int64(description='错误码', name='errcode'),
  errmsg?: string(description='错误描述', name='errmsg'),
}

model HidebyprojectOapiTdpTasklistResponse = {
  headers: map[string]string,
  body: HidebyprojectOapiTdpTasklistResponseBody,
}

/**
 * Description: 批量将某项目下用户参与的所有任务从用户的任务列表移除（推荐使用场景：用户离开项目时调用）
 */
async function hidebyprojectOapiTdpTasklist(request: HidebyprojectOapiTdpTasklistRequest): HidebyprojectOapiTdpTasklistResponse {
  var runtime = new Util.RuntimeOptions{};
  return hidebyprojectOapiTdpTasklistEx(request, runtime);
}

/**
 * Description: 批量将某项目下用户参与的所有任务从用户的任务列表移除（推荐使用场景：用户离开项目时调用）
 */
async function hidebyprojectOapiTdpTasklistEx(request: HidebyprojectOapiTdpTasklistRequest, runtime: Util.RuntimeOptions): HidebyprojectOapiTdpTasklistResponse {
  Util.validateModel(request);
  var appParams = Util.stringifyMapValue(Util.toMap(request.params));
  return doRequestOApi('POST', '/topapi/tdp/tasklist/hidebyproject', request.headers, appParams, runtime);
}

model DeleteOapiUserParams = {
  userid?: string(description='员工唯一标识ID（不可修改）', name='userid'),
}

model DeleteOapiUserRequest = {
  headers?: map[string]string,
  params?:DeleteOapiUserParams,
}

model DeleteOapiUserResponseBody = {
  errcode?: int64(description='errcode', name='errcode'),
  errmsg?: string(description='errmsg', name='errmsg'),
}

model DeleteOapiUserResponse = {
  headers: map[string]string,
  body: DeleteOapiUserResponseBody,
}

/**
 * Description: 删除成员
 */
async function deleteOapiUser(request: DeleteOapiUserRequest): DeleteOapiUserResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteOapiUserEx(request, runtime);
}

/**
 * Description: 删除成员
 */
async function deleteOapiUserEx(request: DeleteOapiUserRequest, runtime: Util.RuntimeOptions): DeleteOapiUserResponse {
  Util.validateModel(request);
  var appParams = Util.stringifyMapValue(Util.toMap(request.params));
  return doRequestOApi('GET', '/user/delete', request.headers, appParams, runtime);
}

model HidebyprojectOapiWorkspaceTasklistParams = {
  microappAgentId?: int64(description='微应用agentId', name='microapp_agent_id'),
  operatorUserid: string(description='操作者id', name='operator_userid'),
  projectId: string(description='任务所属项目(虚拟企业），基于项目空间的项目', name='project_id'),
  userid: string(description='用户id', name='userid'),
}

model HidebyprojectOapiWorkspaceTasklistRequest = {
  headers?: map[string]string,
  params:HidebyprojectOapiWorkspaceTasklistParams,
}

model HidebyprojectOapiWorkspaceTasklistResponseBody = {
  errcode?: int64(description='错误码', name='errcode'),
  errmsg?: string(description='错误描述', name='errmsg'),
}

model HidebyprojectOapiWorkspaceTasklistResponse = {
  headers: map[string]string,
  body: HidebyprojectOapiWorkspaceTasklistResponseBody,
}

/**
 * Description: 批量将某项目下用户参与的所有任务从用户的任务列表移除（推荐使用场景：用户离开项目时调用）
 */
async function hidebyprojectOapiWorkspaceTasklist(request: HidebyprojectOapiWorkspaceTasklistRequest): HidebyprojectOapiWorkspaceTasklistResponse {
  var runtime = new Util.RuntimeOptions{};
  return hidebyprojectOapiWorkspaceTasklistEx(request, runtime);
}

/**
 * Description: 批量将某项目下用户参与的所有任务从用户的任务列表移除（推荐使用场景：用户离开项目时调用）
 */
async function hidebyprojectOapiWorkspaceTasklistEx(request: HidebyprojectOapiWorkspaceTasklistRequest, runtime: Util.RuntimeOptions): HidebyprojectOapiWorkspaceTasklistResponse {
  Util.validateModel(request);
  var appParams = Util.stringifyMapValue(Util.toMap(request.params));
  return doRequestOApi('POST', '/topapi/workspace/tasklist/hidebyproject', request.headers, appParams, runtime);
}

model CreateOapiUserParams = {
  userid?: string(description='员工唯一标识ID（不可修改），企业内必须唯一。长度为1~64个字符，如果不传，服务器将自动生成一个userid', name='userid'),
  isSenior?: boolean(description='是否高管模式，true表示是，false表示不是。开启后，手机号码对所有员工隐藏。普通员工无法对其发DING、发起钉钉免费商务电话。高管之间不受影响。', name='isSenior'),
  isHide?: boolean(description='是否号码隐藏, true表示隐藏, false表示不隐藏。隐藏手机号后，手机号在个人资料页隐藏，但仍可对其发DING、发起钉钉免费商务电话。', name='isHide'),
  jobnumber?: string(description='员工工号。对应显示到OA后台和客户端个人资料的工号栏目。长度为0~64个字符', name='jobnumber'),
  email?: string(description='邮箱。长度为0~64个字符。企业内必须唯一，不可重复', name='email'),
  remark?: string(description='备注，长度为0~1000个字符', name='remark'),
  workPlace?: string(description='办公地点，长度为0~50个字符', name='workPlace'),
  tel?: string(description='分机号，长度为0~50个字符，企业内必须唯一，不可重复', name='tel'),
  mobile?: string(description='手机号码，企业内必须唯一，不可重复', name='mobile'),
  position?: string(description='职位信息。长度为0~64个字符', name='position'),
  department?: string(description='数组类型，数组里面值为整型，成员所属部门id列表', name='department'),
  name?: string(description='成员名称。长度为1~64个字符', name='name'),
  extattr?: string(description='扩展属性，可以设置多种属性(但手机上最多只能显示10个扩展属性，具体显示哪些属性，请到OA管理后台->设置->通讯录信息设置和OA管理后台->设置->手机端显示信息设置)', name='extattr'),
  orgEmail?: string(description='员工的企业邮箱，员工的企业邮箱已开通，才能增加此字段， 否则会报错', name='orgEmail'),
  orderInDepts?: string(description='在对应的部门中的排序, Map结构的json字符串, key是部门的Id, value是人员在这个部门的排序值', name='orderInDepts'),
  hiredDate?: int64(description='入职时间', name='hiredDate'),
}

model CreateOapiUserRequest = {
  headers?: map[string]string,
  params?:CreateOapiUserParams,
}

model CreateOapiUserResponseBody = {
  errcode?: int64(description='errcode', name='errcode'),
  errmsg?: string(description='errmsg', name='errmsg'),
  userid?: string(description='userid', name='userid'),
}

model CreateOapiUserResponse = {
  headers: map[string]string,
  body: CreateOapiUserResponseBody,
}

/**
 * Description: 创建成员
 */
async function createOapiUser(request: CreateOapiUserRequest): CreateOapiUserResponse {
  var runtime = new Util.RuntimeOptions{};
  return createOapiUserEx(request, runtime);
}

/**
 * Description: 创建成员
 */
async function createOapiUserEx(request: CreateOapiUserRequest, runtime: Util.RuntimeOptions): CreateOapiUserResponse {
  Util.validateModel(request);
  var appParams = Util.stringifyMapValue(Util.toMap(request.params));
  return doRequestOApi('POST', '/user/create', request.headers, appParams, runtime);
}

model HidebyorgOapiWorkspaceTasklistParams = {
  microappAgentId?: int64(description='微应用agentId', name='microapp_agent_id'),
  operatorUserid: string(description='操作者id', name='operator_userid'),
  userid: string(description='用户id', name='userid'),
}

model HidebyorgOapiWorkspaceTasklistRequest = {
  headers?: map[string]string,
  params:HidebyorgOapiWorkspaceTasklistParams,
}

model HidebyorgOapiWorkspaceTasklistResponseBody = {
  errcode?: int64(description='错误码', name='errcode'),
  errmsg?: string(description='错误描述', name='errmsg'),
}

model HidebyorgOapiWorkspaceTasklistResponse = {
  headers: map[string]string,
  body: HidebyorgOapiWorkspaceTasklistResponseBody,
}

/**
 * Description: 批量将企业下某用户参与的所有任务移出用户的待办列表
 */
async function hidebyorgOapiWorkspaceTasklist(request: HidebyorgOapiWorkspaceTasklistRequest): HidebyorgOapiWorkspaceTasklistResponse {
  var runtime = new Util.RuntimeOptions{};
  return hidebyorgOapiWorkspaceTasklistEx(request, runtime);
}

/**
 * Description: 批量将企业下某用户参与的所有任务移出用户的待办列表
 */
async function hidebyorgOapiWorkspaceTasklistEx(request: HidebyorgOapiWorkspaceTasklistRequest, runtime: Util.RuntimeOptions): HidebyorgOapiWorkspaceTasklistResponse {
  Util.validateModel(request);
  var appParams = Util.stringifyMapValue(Util.toMap(request.params));
  return doRequestOApi('POST', '/topapi/workspace/tasklist/hidebyorg', request.headers, appParams, runtime);
}

model List_idsOapiDepartmentParams = {
  id?: string(description='部门id', name='id'),
}

model List_idsOapiDepartmentRequest = {
  headers?: map[string]string,
  params?:List_idsOapiDepartmentParams,
}

model List_idsOapiDepartmentResponseBody = {
  subDeptIdList?: [ int64 ](description='sub_dept_id_list', name='sub_dept_id_list'),
  errmsg?: string(description='errmsg', name='errmsg'),
  errcode?: int64(description='errcode', name='errcode'),
}

model List_idsOapiDepartmentResponse = {
  headers: map[string]string,
  body: List_idsOapiDepartmentResponseBody,
}

/**
 * Description: 获取子部门ID列表
 */
async function list_idsOapiDepartment(request: List_idsOapiDepartmentRequest): List_idsOapiDepartmentResponse {
  var runtime = new Util.RuntimeOptions{};
  return list_idsOapiDepartmentEx(request, runtime);
}

/**
 * Description: 获取子部门ID列表
 */
async function list_idsOapiDepartmentEx(request: List_idsOapiDepartmentRequest, runtime: Util.RuntimeOptions): List_idsOapiDepartmentResponse {
  Util.validateModel(request);
  var appParams = Util.stringifyMapValue(Util.toMap(request.params));
  return doRequestOApi('GET', '/department/list_ids', request.headers, appParams, runtime);
}

model AddbyprojectOapiTdpTasklistParams = {
  microappAgentId?: int64(description='微应用agentId', name='microapp_agent_id'),
  operatorUserid: string(description='操作者id', name='operator_userid'),
  projectId: string(description='任务所属项目id', name='project_id'),
  userid: string(description='用户id', name='userid'),
}

model AddbyprojectOapiTdpTasklistRequest = {
  headers?: map[string]string,
  params:AddbyprojectOapiTdpTasklistParams,
}

model AddbyprojectOapiTdpTasklistResponseBody = {
  errcode?: int64(description='错误码', name='errcode'),
  errmsg?: string(description='错误描述', name='errmsg'),
}

model AddbyprojectOapiTdpTasklistResponse = {
  headers: map[string]string,
  body: AddbyprojectOapiTdpTasklistResponseBody,
}

/**
 * Description: 批量将某项目下用户参与的所有任务加入用户任务列表（推荐使用场景：用户加入项目时调用）
 */
async function addbyprojectOapiTdpTasklist(request: AddbyprojectOapiTdpTasklistRequest): AddbyprojectOapiTdpTasklistResponse {
  var runtime = new Util.RuntimeOptions{};
  return addbyprojectOapiTdpTasklistEx(request, runtime);
}

/**
 * Description: 批量将某项目下用户参与的所有任务加入用户任务列表（推荐使用场景：用户加入项目时调用）
 */
async function addbyprojectOapiTdpTasklistEx(request: AddbyprojectOapiTdpTasklistRequest, runtime: Util.RuntimeOptions): AddbyprojectOapiTdpTasklistResponse {
  Util.validateModel(request);
  var appParams = Util.stringifyMapValue(Util.toMap(request.params));
  return doRequestOApi('POST', '/topapi/tdp/tasklist/addbyproject', request.headers, appParams, runtime);
}

model UpdateOapiUserParams = {
  userid?: string(description='用户id', name='userid'),
  name?: string(description='名字', name='name'),
  workPlace?: string(description='工作地点', name='workPlace'),
  remark?: string(description='备注', name='remark'),
  isSenior?: boolean(description='是否高管模式', name='isSenior'),
  orgEmail?: string(description='公司邮箱', name='orgEmail'),
  managerUserid?: string(description='主管', name='managerUserid'),
  tel?: string(description='分机号，长度为0~50个字符', name='tel'),
  orderInDepts?: string(description='实际是Map的序列化字符串', name='orderInDepts'),
  mobile?: string(description='手机号', name='mobile'),
  department?: [ int64 ](description='部门列表', maxItems=20, name='department'),
  email?: string(description='邮箱', name='email'),
  position?: string(description='职位', name='position'),
  extattr?: string(description='扩展属性', name='extattr'),
  jobnumber?: string(description='工号', name='jobnumber'),
  isHide?: boolean(description='是否号码隐藏', name='isHide'),
  lang?: string(description='通讯录语言(默认zh_CN另外支持en_US)', name='lang'),
  hiredDate?: int64(description='入职时间', name='hiredDate'),
}

model UpdateOapiUserRequest = {
  headers?: map[string]string,
  params?:UpdateOapiUserParams,
}

model UpdateOapiUserResponseBody = {
  errcode?: int64(description='errcode', name='errcode'),
  errmsg?: string(description='errmsg', name='errmsg'),
}

model UpdateOapiUserResponse = {
  headers: map[string]string,
  body: UpdateOapiUserResponseBody,
}

/**
 * Description: 更新用户详情
 */
async function updateOapiUser(request: UpdateOapiUserRequest): UpdateOapiUserResponse {
  var runtime = new Util.RuntimeOptions{};
  return updateOapiUserEx(request, runtime);
}

/**
 * Description: 更新用户详情
 */
async function updateOapiUserEx(request: UpdateOapiUserRequest, runtime: Util.RuntimeOptions): UpdateOapiUserResponse {
  Util.validateModel(request);
  var appParams = Util.stringifyMapValue(Util.toMap(request.params));
  return doRequestOApi('POST', '/user/update', request.headers, appParams, runtime);
}

model AddbyprojectOapiWorkspaceTasklistParams = {
  microappAgentId?: int64(description='微应用agentId', name='microapp_agent_id'),
  operatorUserid: string(description='操作者id', name='operator_userid'),
  projectId: string(description='任务所属项目(虚拟企业），基于项目空间的项目', name='project_id'),
  userid: string(description='用户id', name='userid'),
}

model AddbyprojectOapiWorkspaceTasklistRequest = {
  headers?: map[string]string,
  params:AddbyprojectOapiWorkspaceTasklistParams,
}

model AddbyprojectOapiWorkspaceTasklistResponseBody = {
  errcode?: int64(description='错误码', name='errcode'),
  errmsg?: string(description='错误描述', name='errmsg'),
}

model AddbyprojectOapiWorkspaceTasklistResponse = {
  headers: map[string]string,
  body: AddbyprojectOapiWorkspaceTasklistResponseBody,
}

/**
 * Description: 批量将某项目下用户参与的所有任务加入用户任务列表（推荐使用场景：用户加入项目时调用）
 */
async function addbyprojectOapiWorkspaceTasklist(request: AddbyprojectOapiWorkspaceTasklistRequest): AddbyprojectOapiWorkspaceTasklistResponse {
  var runtime = new Util.RuntimeOptions{};
  return addbyprojectOapiWorkspaceTasklistEx(request, runtime);
}

/**
 * Description: 批量将某项目下用户参与的所有任务加入用户任务列表（推荐使用场景：用户加入项目时调用）
 */
async function addbyprojectOapiWorkspaceTasklistEx(request: AddbyprojectOapiWorkspaceTasklistRequest, runtime: Util.RuntimeOptions): AddbyprojectOapiWorkspaceTasklistResponse {
  Util.validateModel(request);
  var appParams = Util.stringifyMapValue(Util.toMap(request.params));
  return doRequestOApi('POST', '/topapi/workspace/tasklist/addbyproject', request.headers, appParams, runtime);
}

model GetOapiUserParams = {
  userid: string(description='用户id', name='userid'),
}

model GetOapiUserRequest = {
  headers?: map[string]string,
  params:GetOapiUserParams,
}

model GetOapiUserResponseBody = {
  errcode?: int64(description='errcode', name='errcode'),
  errmsg?: string(description='errmsg', name='errmsg'),
  userid?: string(description='userid', name='userid'),
  unionid?: string(description='unionid', name='unionid'),
  managerUserId?: string(description='managerUserId', name='managerUserId'),
  hiredDate?: string(description='hiredDate', pattern='\\\\d{4}[-]\\\\d{1,2}[-]\\\\d{1,2}[T]\\\\d{2}:\\\\d{2}:\\\\d{2}[Z]', name='hiredDate'),
  tel?: string(description='tel', name='tel'),
  remark?: string(description='remark', name='remark'),
  workPlace?: string(description='workPlace', name='workPlace'),
  name?: string(description='name', name='name'),
  position?: string(description='position', name='position'),
  mobile?: string(description='mobile', name='mobile'),
  stateCode?: string(description='stateCode', name='stateCode'),
  mobileHash?: string(description='mobileHash', name='mobileHash'),
  email?: string(description='email', name='email'),
  orgEmail?: string(description='orgEmail', name='orgEmail'),
  isSenior?: boolean(description='isSenior', name='isSenior'),
  isLimited?: boolean(description='isLimited', name='isLimited'),
  openId?: string(description='openId', name='openId'),
  jobnumber?: string(description='jobnumber', name='jobnumber'),
  active?: boolean(description='active', name='active'),
  nickname?: string(description='nickname', name='nickname'),
  avatar?: string(description='avatar', name='avatar'),
  extattr?: string(description='extattr', name='extattr'),
  inviteMobile?: string(description='inviteMobile', name='inviteMobile'),
  roles?: [
    {
      id?: int64(description='id', name='id'),
      name?: string(description='name', name='name'),
      groupName?: string(description='groupName', name='groupName'),
      type?: int64(description='type', name='type'),
    }
  ](description='roles', name='roles'),
  department?: [ int64 ](description='department', name='department'),
  orderInDepts?: string(description='orderInDepts', name='orderInDepts'),
  isAdmin?: boolean(description='isAdmin', name='isAdmin'),
  dingId?: string(description='dingId', name='dingId'),
  isLeaderInDepts?: string(description='isLeaderInDepts', name='isLeaderInDepts'),
  isHide?: boolean(description='isHide', name='isHide'),
  isBoss?: boolean(description='isBoss', name='isBoss'),
  isCustomizedPortal?: boolean(description='isCustomizedPortal', name='isCustomizedPortal'),
  memberView?: boolean(description='memberView', name='memberView'),
  associatedUnionId?: string(description='associatedUnionId', name='associatedUnionId'),
  realAuthed?: boolean(description='realAuthed', name='realAuthed'),
}

model GetOapiUserResponse = {
  headers: map[string]string,
  body: GetOapiUserResponseBody,
}

/**
 * Description: 获取用户详情
 */
async function getOapiUser(request: GetOapiUserRequest): GetOapiUserResponse {
  var runtime = new Util.RuntimeOptions{};
  return getOapiUserEx(request, runtime);
}

/**
 * Description: 获取用户详情
 */
async function getOapiUserEx(request: GetOapiUserRequest, runtime: Util.RuntimeOptions): GetOapiUserResponse {
  Util.validateModel(request);
  var appParams = Util.stringifyMapValue(Util.toMap(request.params));
  return doRequestOApi('GET', '/user/get', request.headers, appParams, runtime);
}

model HidebyorgOapiTdpTasklistParams = {
  microappAgentId?: int64(description='微应用agentId', name='microapp_agent_id'),
  operatorUserid: string(description='操作者id', name='operator_userid'),
  userid: string(description='用户id', name='userid'),
}

model HidebyorgOapiTdpTasklistRequest = {
  headers?: map[string]string,
  params:HidebyorgOapiTdpTasklistParams,
}

model HidebyorgOapiTdpTasklistResponseBody = {
  errcode?: int64(description='错误码', name='errcode'),
  errmsg?: string(description='错误描述', name='errmsg'),
}

model HidebyorgOapiTdpTasklistResponse = {
  headers: map[string]string,
  body: HidebyorgOapiTdpTasklistResponseBody,
}

/**
 * Description: 批量将企业下某用户参与的所有任务移出用户的任务列表 （推荐使用场景：用户离开企业时调用）
 */
async function hidebyorgOapiTdpTasklist(request: HidebyorgOapiTdpTasklistRequest): HidebyorgOapiTdpTasklistResponse {
  var runtime = new Util.RuntimeOptions{};
  return hidebyorgOapiTdpTasklistEx(request, runtime);
}

/**
 * Description: 批量将企业下某用户参与的所有任务移出用户的任务列表 （推荐使用场景：用户离开企业时调用）
 */
async function hidebyorgOapiTdpTasklistEx(request: HidebyorgOapiTdpTasklistRequest, runtime: Util.RuntimeOptions): HidebyorgOapiTdpTasklistResponse {
  Util.validateModel(request);
  var appParams = Util.stringifyMapValue(Util.toMap(request.params));
  return doRequestOApi('POST', '/topapi/tdp/tasklist/hidebyorg', request.headers, appParams, runtime);
}

model GetuserinfoOapiSsoParams = {
  code?: string(description='再次强调，此token不同于一般的accesstoken，需要调用获取微应用管理员免登需要的AccessToken', name='code'),
  accessToken?: string(description='通过Oauth认证给URL带上的CODE', name='access_token'),
}

model GetuserinfoOapiSsoRequest = {
  headers?: map[string]string,
  params?:GetuserinfoOapiSsoParams,
}

model GetuserinfoOapiSsoResponseBody = {
  userInfo?: {
    avatar?: string(description='avatar', name='avatar'),
    email?: string(description='email', name='email'),
    name?: string(description='name', name='name'),
    userid?: string(description='员工在企业内的UserID', name='userid'),
  }(description='user_info', name='user_info'),
  corpInfo?: {
    corpName?: string(description='公司名字', name='corp_name'),
    corpid?: string(description='公司corpid', name='corpid'),
  }(description='corp_info', name='corp_info'),
  isSys?: boolean(description='is_sys', name='is_sys'),
  errcode?: int64(description='errcode', name='errcode'),
  errmsg?: string(description='errmsg', name='errmsg'),
}

model GetuserinfoOapiSsoResponse = {
  headers: map[string]string,
  body: GetuserinfoOapiSsoResponseBody,
}

/**
 * Description: 通过CODE换取微应用管理员的身份信息
 */
async function getuserinfoOapiSso(request: GetuserinfoOapiSsoRequest): GetuserinfoOapiSsoResponse {
  var runtime = new Util.RuntimeOptions{};
  return getuserinfoOapiSsoEx(request, runtime);
}

/**
 * Description: 通过CODE换取微应用管理员的身份信息
 */
async function getuserinfoOapiSsoEx(request: GetuserinfoOapiSsoRequest, runtime: Util.RuntimeOptions): GetuserinfoOapiSsoResponse {
  Util.validateModel(request);
  var appParams = Util.stringifyMapValue(Util.toMap(request.params));
  return doRequestOApi('GET', '/sso/getuserinfo', request.headers, appParams, runtime);
}

model DeleteOapiWorkbenchShortcutParams = {
  appId: string(description='应用ID', name='app_id'),
  bizNo: string(description='系统交互唯一流水号(ISV维度下不可重复)', name='biz_no'),
}

model DeleteOapiWorkbenchShortcutRequest = {
  headers?: map[string]string,
  params:DeleteOapiWorkbenchShortcutParams,
}

model DeleteOapiWorkbenchShortcutResponseBody = {
  result?: {
    bizNo?: string(description='系统交互唯一流水号(ISV维度下不可重复)', name='biz_no'),
  }(description='result', name='result'),
  errcode?: int64(description='dingOpenErrcode', name='errcode'),
  errmsg?: string(description='errorMsg', name='errmsg'),
}

model DeleteOapiWorkbenchShortcutResponse = {
  headers: map[string]string,
  body: DeleteOapiWorkbenchShortcutResponseBody,
}

/**
 * Description: 提供给ISV使用的用于删除已经添加到企业的应用快捷方式
 */
async function deleteOapiWorkbenchShortcut(request: DeleteOapiWorkbenchShortcutRequest): DeleteOapiWorkbenchShortcutResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteOapiWorkbenchShortcutEx(request, runtime);
}

/**
 * Description: 提供给ISV使用的用于删除已经添加到企业的应用快捷方式
 */
async function deleteOapiWorkbenchShortcutEx(request: DeleteOapiWorkbenchShortcutRequest, runtime: Util.RuntimeOptions): DeleteOapiWorkbenchShortcutResponse {
  Util.validateModel(request);
  var appParams = Util.stringifyMapValue(Util.toMap(request.params));
  return doRequestOApi('POST', '/topapi/workbench/shortcut/delete', request.headers, appParams, runtime);
}

model GetguideuriOapiWorkbenchShortcutParams = {
  appId: string(description='ISV微应用ID', name='app_id'),
}

model GetguideuriOapiWorkbenchShortcutRequest = {
  headers?: map[string]string,
  params:GetguideuriOapiWorkbenchShortcutParams,
}

model GetguideuriOapiWorkbenchShortcutResponseBody = {
  guideUri?: string(description='快捷方式添加到工作台引导页地址', name='guide_uri'),
  errcode?: int64(description='服务返回码', name='errcode'),
  errmsg?: string(description='服务返回信息', name='errmsg'),
}

model GetguideuriOapiWorkbenchShortcutResponse = {
  headers: map[string]string,
  body: GetguideuriOapiWorkbenchShortcutResponseBody,
}

/**
 * Description: ISV将应用快捷方式添加到企业后会引导用户将该快捷方式添加到工作台,需要获取到工作台快捷方式引导页地址
 */
async function getguideuriOapiWorkbenchShortcut(request: GetguideuriOapiWorkbenchShortcutRequest): GetguideuriOapiWorkbenchShortcutResponse {
  var runtime = new Util.RuntimeOptions{};
  return getguideuriOapiWorkbenchShortcutEx(request, runtime);
}

/**
 * Description: ISV将应用快捷方式添加到企业后会引导用户将该快捷方式添加到工作台,需要获取到工作台快捷方式引导页地址
 */
async function getguideuriOapiWorkbenchShortcutEx(request: GetguideuriOapiWorkbenchShortcutRequest, runtime: Util.RuntimeOptions): GetguideuriOapiWorkbenchShortcutResponse {
  Util.validateModel(request);
  var appParams = Util.stringifyMapValue(Util.toMap(request.params));
  return doRequestOApi('POST', '/topapi/workbench/shortcut/getguideuri', request.headers, appParams, runtime);
}

model ListOapiWorkbenchShortcutParams = {
  appId: string(description='ISV微应用id', name='app_id'),
  pageSize?: int64(description='每页记录数', name='page_size'),
  pageIndex?: int64(description='当前页码', name='page_index'),
}

model ListOapiWorkbenchShortcutRequest = {
  headers?: map[string]string,
  params:ListOapiWorkbenchShortcutParams,
}

model ListOapiWorkbenchShortcutResponseBody = {
  result?: {
    shortcutList?: [
      {
        shortcutUri?: string(description='移动端快捷方式地址(默认地址)', name='shortcut_uri'),
        icon?: string(description='快捷方式图标', name='icon'),
        name?: string(description='快捷方式名称', name='name'),
        bizNo?: string(description='业务单号,系统间交互唯一流水号', name='biz_no'),
        pcShortcutUri?: string(description='PC端快捷方式地址', name='pc_shortcut_uri'),
      }
    ](description='企业下指定应用已添加快捷方式列表', name='shortcut_list'),
  }(description='返回结果', name='result'),
  errcode?: int64(description='服务结果码', name='errcode'),
  errmsg?: string(description='服务结果描述', name='errmsg'),
}

model ListOapiWorkbenchShortcutResponse = {
  headers: map[string]string,
  body: ListOapiWorkbenchShortcutResponseBody,
}

/**
 * Description: 根据企业 + 应用信息等(分页)获取企业下对应该应用已经开通的快捷方式列表
 */
async function listOapiWorkbenchShortcut(request: ListOapiWorkbenchShortcutRequest): ListOapiWorkbenchShortcutResponse {
  var runtime = new Util.RuntimeOptions{};
  return listOapiWorkbenchShortcutEx(request, runtime);
}

/**
 * Description: 根据企业 + 应用信息等(分页)获取企业下对应该应用已经开通的快捷方式列表
 */
async function listOapiWorkbenchShortcutEx(request: ListOapiWorkbenchShortcutRequest, runtime: Util.RuntimeOptions): ListOapiWorkbenchShortcutResponse {
  Util.validateModel(request);
  var appParams = Util.stringifyMapValue(Util.toMap(request.params));
  return doRequestOApi('POST', '/topapi/workbench/shortcut/list', request.headers, appParams, runtime);
}

model AddOapiWorkbenchShortcutParams = {
  shortcutUri: string(description='移动端快捷方式跳转地址(默认地址)', name='shortcut_uri'),
  icon: string(description='图标Url', name='icon'),
  appId: string(description='微应用ID', name='app_id'),
  name: string(description='快捷方式名称', name='name'),
  bizNo: string(description='系统交互唯一业务号,ISV企业下唯一', name='biz_no'),
  pcShortcutUri?: string(description='PC端快捷方式跳转地址', name='pc_shortcut_uri'),
}

model AddOapiWorkbenchShortcutRequest = {
  headers?: map[string]string,
  params:AddOapiWorkbenchShortcutParams,
}

model AddOapiWorkbenchShortcutResponseBody = {
  result?: {
    bizNo?: string(description='唯一流水号-系统交互唯一识别码', name='biz_no'),
  }(description='系统自动生成', name='result'),
  errcode?: int64(description='服务返回码', name='errcode'),
  errmsg?: string(description='服务返回信息', name='errmsg'),
}

model AddOapiWorkbenchShortcutResponse = {
  headers: map[string]string,
  body: AddOapiWorkbenchShortcutResponseBody,
}

/**
 * Description: ISV给开通其应用的企业添加快捷方式
 */
async function addOapiWorkbenchShortcut(request: AddOapiWorkbenchShortcutRequest): AddOapiWorkbenchShortcutResponse {
  var runtime = new Util.RuntimeOptions{};
  return addOapiWorkbenchShortcutEx(request, runtime);
}

/**
 * Description: ISV给开通其应用的企业添加快捷方式
 */
async function addOapiWorkbenchShortcutEx(request: AddOapiWorkbenchShortcutRequest, runtime: Util.RuntimeOptions): AddOapiWorkbenchShortcutResponse {
  Util.validateModel(request);
  var appParams = Util.stringifyMapValue(Util.toMap(request.params));
  return doRequestOApi('POST', '/topapi/workbench/shortcut/add', request.headers, appParams, runtime);
}

model UpdateOapiWorkbenchShortcutParams = {
  shortcutUri?: string(description='快捷方式跳转地址(移动端地址-默认地址)', name='shortcut_uri'),
  icon?: string(description='图标Url', name='icon'),
  appId: string(description='应用ID', name='app_id'),
  name?: string(description='快捷方式名称', name='name'),
  bizNo: string(description='系统交互唯一业务单号', name='biz_no'),
  pcShortcutUri?: string(description='PC端快捷方式跳转地址', name='pc_shortcut_uri'),
}

model UpdateOapiWorkbenchShortcutRequest = {
  headers?: map[string]string,
  params:UpdateOapiWorkbenchShortcutParams,
}

model UpdateOapiWorkbenchShortcutResponseBody = {
  result?: {
    bizNo?: string(description='系统交互唯一流水号', name='biz_no'),
  }(description='返回结果', name='result'),
  errcode?: int64(description='服务结果码', name='errcode'),
  errmsg?: string(description='服务结果信息', name='errmsg'),
}

model UpdateOapiWorkbenchShortcutResponse = {
  headers: map[string]string,
  body: UpdateOapiWorkbenchShortcutResponseBody,
}

/**
 * Description: ISV对已经添加其应用快捷方式的企业做快捷方式做更新
 */
async function updateOapiWorkbenchShortcut(request: UpdateOapiWorkbenchShortcutRequest): UpdateOapiWorkbenchShortcutResponse {
  var runtime = new Util.RuntimeOptions{};
  return updateOapiWorkbenchShortcutEx(request, runtime);
}

/**
 * Description: ISV对已经添加其应用快捷方式的企业做快捷方式做更新
 */
async function updateOapiWorkbenchShortcutEx(request: UpdateOapiWorkbenchShortcutRequest, runtime: Util.RuntimeOptions): UpdateOapiWorkbenchShortcutResponse {
  Util.validateModel(request);
  var appParams = Util.stringifyMapValue(Util.toMap(request.params));
  return doRequestOApi('POST', '/topapi/workbench/shortcut/update', request.headers, appParams, runtime);
}

model RemindOapiAppstoreInternalParams = {
  processInstanceId?: string(description='试用审批单id', name='process_instance_id'),
  goodsCode?: string(description='商品码', name='goods_code'),
}

model RemindOapiAppstoreInternalRequest = {
  headers?: map[string]string,
  params?:RemindOapiAppstoreInternalParams,
}

model RemindOapiAppstoreInternalResponseBody = {
  result?: boolean(description='发送结果', name='result'),
  errmsg?: string(description='错误信息', name='errmsg'),
  errcode?: int64(description='错误码', name='errcode'),
}

model RemindOapiAppstoreInternalResponse = {
  headers: map[string]string,
  body: RemindOapiAppstoreInternalResponseBody,
}

/**
 * Description: 1. 根据审批单获取发起人，goodCode获取服务商企业信息和服务人员信息。
2. 创建或者拉人进群
3. 发送消息
 */
async function remindOapiAppstoreInternal(request: RemindOapiAppstoreInternalRequest): RemindOapiAppstoreInternalResponse {
  var runtime = new Util.RuntimeOptions{};
  return remindOapiAppstoreInternalEx(request, runtime);
}

/**
 * Description: 1. 根据审批单获取发起人，goodCode获取服务商企业信息和服务人员信息。
2. 创建或者拉人进群
3. 发送消息
 */
async function remindOapiAppstoreInternalEx(request: RemindOapiAppstoreInternalRequest, runtime: Util.RuntimeOptions): RemindOapiAppstoreInternalResponse {
  Util.validateModel(request);
  var appParams = Util.stringifyMapValue(Util.toMap(request.params));
  return doRequestOApi('POST', '/topapi/appstore/internal/remind', request.headers, appParams, runtime);
}

model GetOapiChatParams = {
  chatid?: string(description='群会话的id', name='chatid'),
}

model GetOapiChatRequest = {
  headers?: map[string]string,
  params?:GetOapiChatParams,
}

model GetOapiChatResponseBody = {
  errcode?: int64(description='errcode', name='errcode'),
  errmsg?: string(description='errmsg', name='errmsg'),
  chatInfo?: {
    name?: string(description='name', name='name'),
    owner?: string(description='owner', name='owner'),
    useridlist?: [ string ](description='useridlist', name='useridlist'),
    extidlist?: [ string ](description='extidlist', name='extidlist'),
    agentidlist?: [ string ](description='agentidlist', name='agentidlist'),
    conversationTag?: int64(description='conversationTag', name='conversationTag'),
    chatBannedType?: int64(description='是否全员禁用 0 不禁言 1 全员禁言', name='chatBannedType'),
    searchable?: int64(description='是否可以搜索群名 0 不可以 1可以搜索', name='searchable'),
    validationType?: int64(description='入群需群主或群管理员同意 0不需要 1需要', name='validationType'),
    mentionAllAuthority?: int64(description='尽群主和管理员可@所有人 0 否 1 是', name='mentionAllAuthority'),
    managementType?: int64(description='仅群主和群管理员可管理 0否 1 是', name='managementType'),
    showHistoryType?: int64(description='新成员可查看聊天历史 0否 1是', name='showHistoryType'),
    icon?: string(description='群头像mediaId', name='icon'),
  }(description='chat_info', name='chat_info'),
}

model GetOapiChatResponse = {
  headers: map[string]string,
  body: GetOapiChatResponseBody,
}

/**
 * Description: 获取群会话
 */
async function getOapiChat(request: GetOapiChatRequest): GetOapiChatResponse {
  var runtime = new Util.RuntimeOptions{};
  return getOapiChatEx(request, runtime);
}

/**
 * Description: 获取群会话
 */
async function getOapiChatEx(request: GetOapiChatRequest, runtime: Util.RuntimeOptions): GetOapiChatResponse {
  Util.validateModel(request);
  var appParams = Util.stringifyMapValue(Util.toMap(request.params));
  return doRequestOApi('GET', '/chat/get', request.headers, appParams, runtime);
}

model GetOapiDepartmentParams = {
  id?: string(description='部门id', name='id'),
  lang?: string(description='通讯录语言(默认zh_CN，未来会支持en_US)', name='lang'),
}

model GetOapiDepartmentRequest = {
  headers?: map[string]string,
  params?:GetOapiDepartmentParams,
}

model GetOapiDepartmentResponseBody = {
  errcode?: int64(description='errcode', name='errcode'),
  errmsg?: string(description='errmsg', name='errmsg'),
  id?: int64(description='部门id', name='id'),
  name?: string(description='部门名称', name='name'),
  order?: int64(description='在父部门中的次序值', name='order'),
  parentid?: int64(description='父部门id，根部门为1', name='parentid'),
  sourceIdentifier?: string(description='部门标识字段，开发者可用该字段来唯一标识一个部门，并与钉钉外部通讯录里的部门做映射', name='sourceIdentifier'),
  createDeptGroup?: boolean(description='是否同步创建一个关联此部门的企业群, true表示是, false表示不是', name='createDeptGroup'),
  autoAddUser?: boolean(description='当群已经创建后，是否有新人加入部门会自动加入该群, true表示是, false表示不是', name='autoAddUser'),
  groupContainSubDept?: boolean(description='部门群是否包含子部门', name='groupContainSubDept'),
  orgDeptOwner?: string(description='企业群群主', name='orgDeptOwner'),
  deptManagerUseridList?: string(description='部门的主管列表,取值为由主管的userid组成的字符串，不同的userid使用|符号进行分割', name='deptManagerUseridList'),
  outerPermitUsers?: string(description='本部门的员工仅可见员工自己为true时，可以配置额外可见人员，值为userid组成的的字符串，使用| 符号进行分割', name='outerPermitUsers'),
  outerPermitDepts?: string(description='本部门的员工仅可见员工自己为true时，可以配置额外可见部门，值为部门id组成的的字符串，使用|符号进行分割', name='outerPermitDepts'),
  outerDept?: boolean(description='是否本部门的员工仅可见员工自己, 为true时，本部门员工默认只能看到员工自己', name='outerDept'),
  userPerimits?: string(description='可以查看指定隐藏部门的其他人员列表，如果部门隐藏，则此值生效，取值为其他的人员userid组成的的字符串，使用|符号进行分割', name='userPerimits'),
  deptPerimits?: string(description='可以查看指定隐藏部门的其他部门列表，如果部门隐藏，则此值生效，取值为其他的部门id组成的的字符串，使用|符号进行分割', name='deptPerimits'),
  deptHiding?: boolean(description='是否隐藏部门, true表示隐藏, false表示显示', name='deptHiding'),
  deptPermits?: string(description='可以查看指定隐藏部门的其他人员列表，如果部门隐藏，则此值生效，取值为其他的人员userid组成的的字符串，使用|符号进行分割', name='deptPermits'),
  userPermits?: string(description='可以查看指定隐藏部门的其他部门列表，如果部门隐藏，则此值生效，取值为其他的部门id组成的的字符串，使用|符号进行分割', name='userPermits'),
  isFromUnionOrg?: boolean(description='部门是否来自关联组织', name='isFromUnionOrg'),
}

model GetOapiDepartmentResponse = {
  headers: map[string]string,
  body: GetOapiDepartmentResponseBody,
}

/**
 * Description: 获取部门详情
 */
async function getOapiDepartment(request: GetOapiDepartmentRequest): GetOapiDepartmentResponse {
  var runtime = new Util.RuntimeOptions{};
  return getOapiDepartmentEx(request, runtime);
}

/**
 * Description: 获取部门详情
 */
async function getOapiDepartmentEx(request: GetOapiDepartmentRequest, runtime: Util.RuntimeOptions): GetOapiDepartmentResponse {
  Util.validateModel(request);
  var appParams = Util.stringifyMapValue(Util.toMap(request.params));
  return doRequestOApi('GET', '/department/get', request.headers, appParams, runtime);
}

model DeleteOapiDepartmentParams = {
  id?: string(description='部门id', name='id'),
}

model DeleteOapiDepartmentRequest = {
  headers?: map[string]string,
  params?:DeleteOapiDepartmentParams,
}

model DeleteOapiDepartmentResponseBody = {
  errcode?: int64(description='errcode', name='errcode'),
  errmsg?: string(description='errmsg', name='errmsg'),
}

model DeleteOapiDepartmentResponse = {
  headers: map[string]string,
  body: DeleteOapiDepartmentResponseBody,
}

/**
 * Description: 删除部门
 */
async function deleteOapiDepartment(request: DeleteOapiDepartmentRequest): DeleteOapiDepartmentResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteOapiDepartmentEx(request, runtime);
}

/**
 * Description: 删除部门
 */
async function deleteOapiDepartmentEx(request: DeleteOapiDepartmentRequest, runtime: Util.RuntimeOptions): DeleteOapiDepartmentResponse {
  Util.validateModel(request);
  var appParams = Util.stringifyMapValue(Util.toMap(request.params));
  return doRequestOApi('GET', '/department/delete', request.headers, appParams, runtime);
}

model CreateOapiDepartmentParams = {
  parentid?: string(description='父部门id。根部门id为1', name='parentid'),
  parentBalanceFirst?: boolean(description='是否优先使用父部门的预算', name='parentBalanceFirst'),
  shareBalance?: boolean(description='是否共享预算', name='shareBalance'),
  outerPermitUsers?: string(description='本部门的员工仅可见员工自己为true时，可以配置额外可见人员，值为userid组成的的字符串，使用|符号进行分割。总数不能超过200。', name='outerPermitUsers'),
  outerPermitDepts?: string(description='本部门的员工仅可见员工自己为true时，可以配置额外可见部门，值为部门id组成的的字符串，使用|符号进行分割。总数不能超过200。', name='outerPermitDepts'),
  outerDept?: boolean(description='是否本部门的员工仅可见员工自己, 为true时，本部门员工默认只能看到员工自己', name='outerDept'),
  userPerimits?: string(description='已废弃', name='userPerimits'),
  deptPerimits?: string(description='已废弃', name='deptPerimits'),
  deptHiding?: boolean(description='是否隐藏部门, true表示隐藏, false表示显示', name='deptHiding'),
  createDeptGroup?: boolean(description='是否创建一个关联此部门的企业群，默认为false', name='createDeptGroup'),
  order?: string(description='在父部门中的次序值。order值小的排序靠前', name='order'),
  name?: string(description='部门名称。长度限制为1~64个字符。不允许包含字符‘-’‘，’以及‘,’', name='name'),
  sourceIdentifier?: string(description='部门标识字段，开发者可用该字段来唯一标识一个部门，并与钉钉外部通讯录里的部门做映射', name='sourceIdentifier'),
  deptPermits?: string(description='可以查看指定隐藏部门的其他部门列表，如果部门隐藏，则此值生效，取值为其他的部门id组成的的字符串，使用 | 符号进行分割。总数不能超过200。', name='deptPermits'),
  userPermits?: string(description='可以查看指定隐藏部门的其他人员列表，如果部门隐藏，则此值生效，取值为其他的人员userid组成的的字符串，使用| 符号进行分割。总数不能超过200。', name='userPermits'),
  outerDeptOnlySelf?: boolean(description='是否只能看到所在部门及下级部门通讯录', name='outerDeptOnlySelf'),
}

model CreateOapiDepartmentRequest = {
  headers?: map[string]string,
  params?:CreateOapiDepartmentParams,
}

model CreateOapiDepartmentResponseBody = {
  errcode?: int64(description='errcode', name='errcode'),
  errmsg?: string(description='errmsg', name='errmsg'),
  id?: int64(description='id', name='id'),
}

model CreateOapiDepartmentResponse = {
  headers: map[string]string,
  body: CreateOapiDepartmentResponseBody,
}

/**
 * Description: 创建部门
 */
async function createOapiDepartment(request: CreateOapiDepartmentRequest): CreateOapiDepartmentResponse {
  var runtime = new Util.RuntimeOptions{};
  return createOapiDepartmentEx(request, runtime);
}

/**
 * Description: 创建部门
 */
async function createOapiDepartmentEx(request: CreateOapiDepartmentRequest, runtime: Util.RuntimeOptions): CreateOapiDepartmentResponse {
  Util.validateModel(request);
  var appParams = Util.stringifyMapValue(Util.toMap(request.params));
  return doRequestOApi('POST', '/department/create', request.headers, appParams, runtime);
}

model GettokenOapiParams = {
  corpid?: string(description='企业的corpid', name='corpid'),
  corpsecret?: string(description='企业的密钥', name='corpsecret'),
  appkey?: string(description='应用的唯一标识key', name='appkey'),
  appsecret?: string(description='应用的密钥', name='appsecret'),
}

model GettokenOapiRequest = {
  headers?: map[string]string,
  params?:GettokenOapiParams,
}

model GettokenOapiResponseBody = {
  accessToken?: string(description='access_token', name='access_token'),
  expiresIn?: int64(description='expires_in', name='expires_in'),
  errmsg?: string(description='errmsg', name='errmsg'),
  errcode?: int64(description='errcode', name='errcode'),
}

model GettokenOapiResponse = {
  headers: map[string]string,
  body: GettokenOapiResponseBody,
}

/**
 * Description: 获取企业token
 */
async function gettokenOapi(request: GettokenOapiRequest): GettokenOapiResponse {
  var runtime = new Util.RuntimeOptions{};
  return gettokenOapiEx(request, runtime);
}

/**
 * Description: 获取企业token
 */
async function gettokenOapiEx(request: GettokenOapiRequest, runtime: Util.RuntimeOptions): GettokenOapiResponse {
  Util.validateModel(request);
  var appParams = Util.stringifyMapValue(Util.toMap(request.params));
  return doRequestOApi('GET', '/gettoken', request.headers, appParams, runtime);
}

model Delete_call_backOapiCall_backRequest = {
  headers?: map[string]string,
}

model Delete_call_backOapiCall_backResponseBody = {
  errmsg?: string(description='errmsg', name='errmsg'),
  errcode?: int64(description='errcode', name='errcode'),
}

model Delete_call_backOapiCall_backResponse = {
  headers: map[string]string,
  body: Delete_call_backOapiCall_backResponseBody,
}

/**
 * Description: 删除事件回调接口
 */
async function delete_call_backOapiCall_back(request: Delete_call_backOapiCall_backRequest): Delete_call_backOapiCall_backResponse {
  var runtime = new Util.RuntimeOptions{};
  return delete_call_backOapiCall_backEx(request, runtime);
}

/**
 * Description: 删除事件回调接口
 */
async function delete_call_backOapiCall_backEx(request: Delete_call_backOapiCall_backRequest, runtime: Util.RuntimeOptions): Delete_call_backOapiCall_backResponse {
  Util.validateModel(request);
  var appParams : map[string]string = {};
  return doRequestOApi('GET', '/call_back/delete_call_back', request.headers, appParams, runtime);
}

model Update_call_backOapiCall_backParams = {
  callBackTag?: [ string ](description='需要监听的事件类型，有20种，“user_add_org”, “user_modify_org”, “user_leave_org”,“org_admin_add”, “org_admin_remove”, “org_dept_create”, “org_dept_modify”, “org_dept_remove”, “org_remove”, “chat_add_member”, “chat_remove_member”, “chat_quit”, “chat_update_owner”, “chat_update_title”, “chat_disband”, “chat_disband_microapp”, “check_in”,“bpms_task_change”,“bpms_instance_change”,,“label_user_change”,“label_conf_add”, “label_conf_modify”,“label_conf_del”,', maxItems=20, name='call_back_tag'),
  aesKey?: string(description='数据加密密钥。用于回调数据的加密，长度固定为43个字符，从a-z, A-Z, 0-9共62个字符中选取,您可以随机生成，ISV(服务提供商)推荐使用注册套件时填写的EncodingAESKey', name='aes_key'),
  token?: string(description='加解密需要用到的token，ISV(服务提供商)推荐使用注册套件时填写的token，普通企业可以随机填写', name='token'),
  url?: string(description='更新事件回调接口', name='url'),
}

model Update_call_backOapiCall_backRequest = {
  headers?: map[string]string,
  params?:Update_call_backOapiCall_backParams,
}

model Update_call_backOapiCall_backResponseBody = {
  errmsg?: string(description='对返回码的文本描述内容', name='errmsg'),
  errcode?: int64(description='返回码', name='errcode'),
}

model Update_call_backOapiCall_backResponse = {
  headers: map[string]string,
  body: Update_call_backOapiCall_backResponseBody,
}

/**
 * Description: 更新事件回调接口
 */
async function update_call_backOapiCall_back(request: Update_call_backOapiCall_backRequest): Update_call_backOapiCall_backResponse {
  var runtime = new Util.RuntimeOptions{};
  return update_call_backOapiCall_backEx(request, runtime);
}

/**
 * Description: 更新事件回调接口
 */
async function update_call_backOapiCall_backEx(request: Update_call_backOapiCall_backRequest, runtime: Util.RuntimeOptions): Update_call_backOapiCall_backResponse {
  Util.validateModel(request);
  var appParams = Util.stringifyMapValue(Util.toMap(request.params));
  return doRequestOApi('POST', '/call_back/update_call_back', request.headers, appParams, runtime);
}

model Get_call_backOapiCall_backRequest = {
  headers?: map[string]string,
}

model Get_call_backOapiCall_backResponseBody = {
  url?: string(description='接收事件回调的url', name='url'),
  aesKey?: string(description='数据加密密钥。用于回调数据的加密，长度固定为43个字符，从a-z, A-Z, 0-9共62个字符中选取,您可以随机生成，ISV(服务提供商)推荐使用注册套件时填写的EncodingAESKey', name='aes_key'),
  token?: string(description='加解密需要用到的token，ISV(服务提供商)推荐使用注册套件时填写的token，普通企业可以随机填写', name='token'),
  callBackTag?: [ string ](description='需要监听的事件类型，有20种，“user_add_org”, “user_modify_org”, “user_leave_org”,“org_admin_add”, “org_admin_remove”, “org_dept_create”, “org_dept_modify”, “org_dept_remove”, “org_remove”, “chat_add_member”, “chat_remove_member”, “chat_quit”, “chat_update_owner”, “chat_update_title”, “chat_disband”, “chat_disband_microapp”, “check_in”,“bpms_task_change”,“bpms_instance_change”,,“label_user_change”,“label_conf_add”, “label_conf_modify”,“label_conf_del”,', name='call_back_tag'),
  errmsg?: string(description='errmsg', name='errmsg'),
  errcode?: int64(description='errcode', name='errcode'),
}

model Get_call_backOapiCall_backResponse = {
  headers: map[string]string,
  body: Get_call_backOapiCall_backResponseBody,
}

/**
 * Description: 查询事件回调接口
 */
async function get_call_backOapiCall_back(request: Get_call_backOapiCall_backRequest): Get_call_backOapiCall_backResponse {
  var runtime = new Util.RuntimeOptions{};
  return get_call_backOapiCall_backEx(request, runtime);
}

/**
 * Description: 查询事件回调接口
 */
async function get_call_backOapiCall_backEx(request: Get_call_backOapiCall_backRequest, runtime: Util.RuntimeOptions): Get_call_backOapiCall_backResponse {
  Util.validateModel(request);
  var appParams : map[string]string = {};
  return doRequestOApi('GET', '/call_back/get_call_back', request.headers, appParams, runtime);
}

model Get_sns_tokenOapiSnsParams = {
  persistentCode?: string(description='用户授权给钉钉开放应用的持久授权码', name='persistent_code'),
  openid?: string(description='用户的openid', name='openid'),
}

model Get_sns_tokenOapiSnsRequest = {
  headers?: map[string]string,
  params?:Get_sns_tokenOapiSnsParams,
}

model Get_sns_tokenOapiSnsResponseBody = {
  errcode?: int64(description='errcode', name='errcode'),
  errmsg?: string(description='errmsg', name='errmsg'),
  expiresIn?: int64(description='sns_token的过期时间', name='expires_in'),
  snsToken?: string(description='用户授权的token', name='sns_token'),
}

model Get_sns_tokenOapiSnsResponse = {
  headers: map[string]string,
  body: Get_sns_tokenOapiSnsResponseBody,
}

/**
 * Description: 获取用户授权的SNS_TOKEN
 */
async function get_sns_tokenOapiSns(request: Get_sns_tokenOapiSnsRequest): Get_sns_tokenOapiSnsResponse {
  var runtime = new Util.RuntimeOptions{};
  return get_sns_tokenOapiSnsEx(request, runtime);
}

/**
 * Description: 获取用户授权的SNS_TOKEN
 */
async function get_sns_tokenOapiSnsEx(request: Get_sns_tokenOapiSnsRequest, runtime: Util.RuntimeOptions): Get_sns_tokenOapiSnsResponse {
  Util.validateModel(request);
  var appParams = Util.stringifyMapValue(Util.toMap(request.params));
  return doRequestOApi('POST', '/sns/get_sns_token', request.headers, appParams, runtime);
}

model Get_unactive_corpOapiServiceParams = {
  appId?: int64(description='套件下的微应用ID', name='app_id'),
}

model Get_unactive_corpOapiServiceRequest = {
  headers?: map[string]string,
  params?:Get_unactive_corpOapiServiceParams,
}

model Get_unactive_corpOapiServiceResponseBody = {
  appId?: int64(description='app_id', name='app_id'),
  corpList?: [ string ](description='corp_list', name='corp_list'),
  hasMore?: boolean(description='has_more', name='has_more'),
  errmsg?: string(description='errmsg', name='errmsg'),
  errcode?: int64(description='errcode', name='errcode'),
}

model Get_unactive_corpOapiServiceResponse = {
  headers: map[string]string,
  body: Get_unactive_corpOapiServiceResponseBody,
}

/**
 * Description: 获取应用未激活的企业列表
 */
async function get_unactive_corpOapiService(request: Get_unactive_corpOapiServiceRequest): Get_unactive_corpOapiServiceResponse {
  var runtime = new Util.RuntimeOptions{};
  return get_unactive_corpOapiServiceEx(request, runtime);
}

/**
 * Description: 获取应用未激活的企业列表
 */
async function get_unactive_corpOapiServiceEx(request: Get_unactive_corpOapiServiceRequest, runtime: Util.RuntimeOptions): Get_unactive_corpOapiServiceResponse {
  Util.validateModel(request);
  var appParams = Util.stringifyMapValue(Util.toMap(request.params));
  return doRequestOApi('POST', '/service/get_unactive_corp', request.headers, appParams, runtime);
}

model PushOapiCateringPersonalorderParams = {
  orderDetails: string(description='订单详情', name='order_details'),
  feeOriginal?: int64(description='原始费用(分)', name='fee_original'),
  feeAfterDiscount?: int64(description='折后费用(分)', name='fee_after_discount'),
  orderId: string(description='订单id', name='order_id'),
  shopName?: string(description='店铺名称', name='shop_name'),
  shopId: string(description='店铺id', name='shop_id'),
  feeActuallyPay?: int64(description='实收总额(分)', name='fee_actually_pay'),
  paymentTime?: string(description='订单支付时间', pattern='\\\\d{4}[-]\\\\d{1,2}[-]\\\\d{1,2}[T]\\\\d{2}:\\\\d{2}:\\\\d{2}[Z]', name='payment_time'),
  feeShouldPay?: int64(description='应付总额(分)', name='fee_should_pay'),
}

model PushOapiCateringPersonalorderRequest = {
  headers?: map[string]string,
  params:PushOapiCateringPersonalorderParams,
}

model PushOapiCateringPersonalorderResponseBody = {
  result?: boolean(description='是否成功', name='result'),
  errcode?: int64(description='errcode', name='errcode'),
  errmsg?: string(description='errmsg', name='errmsg'),
}

model PushOapiCateringPersonalorderResponse = {
  headers: map[string]string,
  body: PushOapiCateringPersonalorderResponseBody,
}

/**
 * Description: 钉钉第三方个人应用推送团餐订单信息
 */
async function pushOapiCateringPersonalorder(request: PushOapiCateringPersonalorderRequest): PushOapiCateringPersonalorderResponse {
  var runtime = new Util.RuntimeOptions{};
  return pushOapiCateringPersonalorderEx(request, runtime);
}

/**
 * Description: 钉钉第三方个人应用推送团餐订单信息
 */
async function pushOapiCateringPersonalorderEx(request: PushOapiCateringPersonalorderRequest, runtime: Util.RuntimeOptions): PushOapiCateringPersonalorderResponse {
  Util.validateModel(request);
  var appParams = Util.stringifyMapValue(Util.toMap(request.params));
  return doRequestOApi('POST', '/topapi/catering/personalorder/push', request.headers, appParams, runtime);
}

model Get_agentOapiServiceParams = {
  agentid?: string(description='授权企业方应用id', name='agentid'),
  permanentCode?: string(description='永久授权码', name='permanent_code'),
  authCorpid?: string(description='授权企业方corpid', name='auth_corpid'),
  suiteKey?: string(description='应用套件key', name='suite_key'),
}

model Get_agentOapiServiceRequest = {
  headers?: map[string]string,
  params?:Get_agentOapiServiceParams,
}

model Get_agentOapiServiceResponseBody = {
  agentid?: int64(description='agentid', name='agentid'),
  name?: string(description='name', name='name'),
  logoUrl?: string(description='logo_url', name='logo_url'),
  description?: string(description='description', name='description'),
  close?: int64(description='close', name='close'),
  errmsg?: string(description='errmsg', name='errmsg'),
  errcode?: int64(description='errcode', name='errcode'),
}

model Get_agentOapiServiceResponse = {
  headers: map[string]string,
  body: Get_agentOapiServiceResponseBody,
}

/**
 * Description: 获取企业的应用信息
 */
async function get_agentOapiService(request: Get_agentOapiServiceRequest): Get_agentOapiServiceResponse {
  var runtime = new Util.RuntimeOptions{};
  return get_agentOapiServiceEx(request, runtime);
}

/**
 * Description: 获取企业的应用信息
 */
async function get_agentOapiServiceEx(request: Get_agentOapiServiceRequest, runtime: Util.RuntimeOptions): Get_agentOapiServiceResponse {
  Util.validateModel(request);
  var appParams = Util.stringifyMapValue(Util.toMap(request.params));
  return doRequestOApi('POST', '/service/get_agent', request.headers, appParams, runtime);
}

model Get_auth_infoOapiServiceParams = {
  suiteKey?: string(description='套件key', name='suite_key'),
  authCorpid?: string(description='授权方corpid', name='auth_corpid'),
}

model Get_auth_infoOapiServiceRequest = {
  headers?: map[string]string,
  params?:Get_auth_infoOapiServiceParams,
}

model Get_auth_infoOapiServiceResponseBody = {
  authInfo?: {
    agent?: [
      {
        agentid?: int64(description='agentid', name='agentid'),
        logoUrl?: string(description='logo_url', name='logo_url'),
        appid?: int64(description='appid', name='appid'),
        adminList?: [ string ](description='admin_list', name='admin_list'),
        agentName?: string(description='agent_name', name='agent_name'),
      }
    ](description='agent', name='agent'),
  }(description='auth_info', name='auth_info'),
  authUserInfo?: {
    userId?: string(description='userId', name='userId'),
  }(description='auth_user_info', name='auth_user_info'),
  authCorpInfo?: {
    corpid?: string(description='corpid', name='corpid'),
    inviteCode?: string(description='invite_code', name='invite_code'),
    industry?: string(description='industry', name='industry'),
    corpName?: string(description='corp_name', name='corp_name'),
    licenseCode?: string(description='license_code', name='license_code'),
    authChannel?: string(description='auth_channel', name='auth_channel'),
    authChannelType?: string(description='auth_channel_type', name='auth_channel_type'),
    isAuthenticated?: boolean(description='is_authenticated', name='is_authenticated'),
    authLevel?: int64(description='auth_level', name='auth_level'),
    inviteUrl?: string(description='invite_url', name='invite_url'),
    corpLogoUrl?: string(description='corp_logo_url', name='corp_logo_url'),
    belongCorpId?: string(description='belong_corp_id', name='belong_corp_id'),
    unifiedSocialCredit?: string(description='unifiedSocialCredit', name='unifiedSocialCredit'),
  }(description='auth_corp_info', name='auth_corp_info'),
  errmsg?: string(description='errmsg', name='errmsg'),
  errcode?: int64(description='errcode', name='errcode'),
  channelAuthInfo?: {
    channelAgent?: [
      {
        agentName?: string(description='agent_name', name='agent_name'),
        agentid?: int64(description='agentid', name='agentid'),
        logoUrl?: string(description='logo_url', name='logo_url'),
        appid?: int64(description='appid', name='appid'),
      }
    ](description='channelAgent', name='channelAgent'),
  }(description='channel_auth_info', name='channel_auth_info'),
}

model Get_auth_infoOapiServiceResponse = {
  headers: map[string]string,
  body: Get_auth_infoOapiServiceResponseBody,
}

/**
 * Description: 获取企业基本信息
 */
async function get_auth_infoOapiService(request: Get_auth_infoOapiServiceRequest): Get_auth_infoOapiServiceResponse {
  var runtime = new Util.RuntimeOptions{};
  return get_auth_infoOapiServiceEx(request, runtime);
}

/**
 * Description: 获取企业基本信息
 */
async function get_auth_infoOapiServiceEx(request: Get_auth_infoOapiServiceRequest, runtime: Util.RuntimeOptions): Get_auth_infoOapiServiceResponse {
  Util.validateModel(request);
  var appParams = Util.stringifyMapValue(Util.toMap(request.params));
  return doRequestOApi('POST', '/service/get_auth_info', request.headers, appParams, runtime);
}

model Get_corp_tokenOapiServiceParams = {
  authCorpid?: string(description='授权方corpid', name='auth_corpid'),
  permanentCode?: string(description='永久授权码，通过get_permanent_code获取', name='permanent_code'),
}

model Get_corp_tokenOapiServiceRequest = {
  headers?: map[string]string,
  params?:Get_corp_tokenOapiServiceParams,
}

model Get_corp_tokenOapiServiceResponseBody = {
  expiresIn?: int64(description='授权方（企业）corp_access_token超时时间', name='expires_in'),
  accessToken?: string(description='授权方（企业）corp_access_token', name='access_token'),
  errmsg?: string(description='errmsg', name='errmsg'),
  errcode?: int64(description='errcode', name='errcode'),
}

model Get_corp_tokenOapiServiceResponse = {
  headers: map[string]string,
  body: Get_corp_tokenOapiServiceResponseBody,
}

/**
 * Description: 获取企业授权的凭证
 */
async function get_corp_tokenOapiService(request: Get_corp_tokenOapiServiceRequest): Get_corp_tokenOapiServiceResponse {
  var runtime = new Util.RuntimeOptions{};
  return get_corp_tokenOapiServiceEx(request, runtime);
}

/**
 * Description: 获取企业授权的凭证
 */
async function get_corp_tokenOapiServiceEx(request: Get_corp_tokenOapiServiceRequest, runtime: Util.RuntimeOptions): Get_corp_tokenOapiServiceResponse {
  Util.validateModel(request);
  var appParams = Util.stringifyMapValue(Util.toMap(request.params));
  return doRequestOApi('POST', '/service/get_corp_token', request.headers, appParams, runtime);
}

model Activate_suiteOapiServiceParams = {
  suiteKey?: string(description='套件key', name='suite_key'),
  authCorpid?: string(description='授权方corpid', name='auth_corpid'),
  permanentCode?: string(description='永久授权码，从get_permanent_code接口中获取', name='permanent_code'),
}

model Activate_suiteOapiServiceRequest = {
  headers?: map[string]string,
  params?:Activate_suiteOapiServiceParams,
}

model Activate_suiteOapiServiceResponseBody = {
  errmsg?: string(description='errmsg', name='errmsg'),
  errcode?: int64(description='errcode', name='errcode'),
}

model Activate_suiteOapiServiceResponse = {
  headers: map[string]string,
  body: Activate_suiteOapiServiceResponseBody,
}

/**
 * Description: 激活套件
 */
async function activate_suiteOapiService(request: Activate_suiteOapiServiceRequest): Activate_suiteOapiServiceResponse {
  var runtime = new Util.RuntimeOptions{};
  return activate_suiteOapiServiceEx(request, runtime);
}

/**
 * Description: 激活套件
 */
async function activate_suiteOapiServiceEx(request: Activate_suiteOapiServiceRequest, runtime: Util.RuntimeOptions): Activate_suiteOapiServiceResponse {
  Util.validateModel(request);
  var appParams = Util.stringifyMapValue(Util.toMap(request.params));
  return doRequestOApi('POST', '/service/activate_suite', request.headers, appParams, runtime);
}

model Get_permanent_codeOapiServiceParams = {
  tmpAuthCode?: string(description='回调接口（tmp_auth_code）获取的临时授权码', name='tmp_auth_code'),
}

model Get_permanent_codeOapiServiceRequest = {
  headers?: map[string]string,
  params?:Get_permanent_codeOapiServiceParams,
}

model Get_permanent_codeOapiServiceResponseBody = {
  authCorpInfo?: {
    corpid?: string(description='授权方企业id', name='corpid'),
    corpName?: string(description='corp_name', name='corp_name'),
  }(description='授权方企业信息', name='auth_corp_info'),
  chPermanentCode?: string(description='企业服务窗永久授权码，如果该套件下存在服务窗应用，会返回', name='ch_permanent_code'),
  permanentCode?: string(description='永久授权码', name='permanent_code'),
  errmsg?: string(description='errmsg', name='errmsg'),
  errcode?: int64(description='errcode', name='errcode'),
}

model Get_permanent_codeOapiServiceResponse = {
  headers: map[string]string,
  body: Get_permanent_codeOapiServiceResponseBody,
}

/**
 * Description: 获取企业授权的永久授权码
 */
async function get_permanent_codeOapiService(request: Get_permanent_codeOapiServiceRequest): Get_permanent_codeOapiServiceResponse {
  var runtime = new Util.RuntimeOptions{};
  return get_permanent_codeOapiServiceEx(request, runtime);
}

/**
 * Description: 获取企业授权的永久授权码
 */
async function get_permanent_codeOapiServiceEx(request: Get_permanent_codeOapiServiceRequest, runtime: Util.RuntimeOptions): Get_permanent_codeOapiServiceResponse {
  Util.validateModel(request);
  var appParams = Util.stringifyMapValue(Util.toMap(request.params));
  return doRequestOApi('POST', '/service/get_permanent_code', request.headers, appParams, runtime);
}

model Get_suite_tokenOapiServiceParams = {
  suiteKey?: string(description='套件key，开发者后台创建套件后获取', name='suite_key'),
  suiteSecret?: string(description='套件secret，开发者后台创建套件后获取', name='suite_secret'),
  suiteTicket?: string(description='钉钉推送的ticket', name='suite_ticket'),
}

model Get_suite_tokenOapiServiceRequest = {
  headers?: map[string]string,
  params?:Get_suite_tokenOapiServiceParams,
}

model Get_suite_tokenOapiServiceResponseBody = {
  errmsg?: string(description='errmsg', name='errmsg'),
  errcode?: int64(description='errcode', name='errcode'),
  suiteAccessToken?: string(description='应用套件access_token', name='suite_access_token'),
  expiresIn?: int64(description='有效期7200秒，过期之前要主动更新（建议ISV服务端做定时器主动更新，而不是依赖钉钉的定时推送）', name='expires_in'),
}

model Get_suite_tokenOapiServiceResponse = {
  headers: map[string]string,
  body: Get_suite_tokenOapiServiceResponseBody,
}

/**
 * Description: 获取应用套件令牌Token
 */
async function get_suite_tokenOapiService(request: Get_suite_tokenOapiServiceRequest): Get_suite_tokenOapiServiceResponse {
  var runtime = new Util.RuntimeOptions{};
  return get_suite_tokenOapiServiceEx(request, runtime);
}

/**
 * Description: 获取应用套件令牌Token
 */
async function get_suite_tokenOapiServiceEx(request: Get_suite_tokenOapiServiceRequest, runtime: Util.RuntimeOptions): Get_suite_tokenOapiServiceResponse {
  Util.validateModel(request);
  var appParams = Util.stringifyMapValue(Util.toMap(request.params));
  return doRequestOApi('POST', '/service/get_suite_token', request.headers, appParams, runtime);
}

model CreateorgbotCorpChatbotParams = {
  createChatBotModel: {
    icon: string(description='机器人头像', name='icon'),
    outgoingUrl: string(description='机器人回调URL', name='outgoing_url'),
    botType: int64(description='2-企业对内机器人，3-企业对外机器人', name='bot_type'),
    description: string(description='机器人功能详细描述', name='description'),
    name: string(description='机器人名字', name='name'),
    type: string(description='机器人类型(钉钉分配)', name='type'),
    outgoingToken: string(description='机器人安全秘钥', name='outgoing_token'),
    microappAgentId: int64(description='微应用id', name='microapp_agent_id'),
    breif: string(description='机器人简介', name='breif'),
    corpId: string(description='开通机器人企业id', name='corp_id'),
  }(description='创建机器人modle', name='create_chat_bot_model'),
}

model CreateorgbotCorpChatbotRequest = {
  headers?: map[string]string,
  params:CreateorgbotCorpChatbotParams,
}

model CreateorgbotCorpChatbotResponseBody = {
  result?: {
    result?: int64(description='result', name='result'),
    dingOpenErrcode?: int64(description='dingOpenErrcode', name='ding_open_errcode'),
    errorMsg?: string(description='errorMsg', name='error_msg'),
    success?: boolean(description='success', name='success'),
  }(description='result', name='result'),
}

model CreateorgbotCorpChatbotResponse = {
  headers: map[string]string,
  body: CreateorgbotCorpChatbotResponseBody,
}

/**
 * Description: 给ISV提供为企业创建机器人的接口
 */
async function createorgbotCorpChatbot(request: CreateorgbotCorpChatbotRequest): CreateorgbotCorpChatbotResponse {
  var runtime = new Util.RuntimeOptions{};
  return createorgbotCorpChatbotEx(request, runtime);
}

/**
 * Description: 给ISV提供为企业创建机器人的接口
 */
async function createorgbotCorpChatbotEx(request: CreateorgbotCorpChatbotRequest, runtime: Util.RuntimeOptions): CreateorgbotCorpChatbotResponse {
  Util.validateModel(request);
  var appParams = Util.stringifyMapValue(Util.toMap(request.params));
  return doRequest('dingtalk.corp.chatbot.createorgbot', 'POST', '/router/rest', request.headers, appParams, runtime);
}

model Get_call_back_failed_resultOapiCall_backRequest = {
  headers?: map[string]string,
}

model Get_call_back_failed_resultOapiCall_backResponseBody = {
  failedList?: [
    {
      callBackTag?: string(description='事件类型，有20种，“user_add_org”, “user_modify_org”, “user_leave_org”,“org_admin_add”, “org_admin_remove”, “org_dept_create”, “org_dept_modify”, “org_dept_remove”, “org_remove”, “chat_add_member”, “chat_remove_member”, “chat_quit”, “chat_update_owner”, “chat_update_title”, “chat_disband”,“chat_disband_microapp”, “check_in”,“bpms_task_change”,“bpms_instance_change”,“label_user_change”, “label_conf_add”, “label_conf_modify”,“label_conf_del”', name='call_back_tag'),
      eventTime?: int64(description='event_time', name='event_time'),
      userModifyOrg?: string(description='user_modify_org', name='user_modify_org'),
      userAddOrg?: string(description='user_add_org', name='user_add_org'),
      userLeaveOrg?: string(description='user_leave_org', name='user_leave_org'),
      orgDeptCreate?: string(description='org_dept_create', name='org_dept_create'),
      orgDeptModify?: string(description='org_dept_modify', name='org_dept_modify'),
      orgDeptRemove?: string(description='org_dept_remove', name='org_dept_remove'),
      orgChange?: string(description='org_change', name='org_change'),
      bpmsInstanceChange?: string(description='bpms_instance_change', name='bpms_instance_change'),
      bpmsTaskChange?: string(description='bpms_task_change', name='bpms_task_change'),
      checkIn?: string(description='check_in', name='check_in'),
      orgAdminAdd?: string(description='org_admin_add', name='org_admin_add'),
      orgAdminRemove?: string(description='org_admin_remove', name='org_admin_remove'),
      data?: string(description='data', name='data'),
    }
  ](description='事件列表，一次最多200个', name='failed_list'),
  errmsg?: string(description='errmsg', name='errmsg'),
  errcode?: int64(description='errcode', name='errcode'),
  hasMore?: boolean(description='has_more', name='has_more'),
}

model Get_call_back_failed_resultOapiCall_backResponse = {
  headers: map[string]string,
  body: Get_call_back_failed_resultOapiCall_backResponseBody,
}

/**
 * Description: 获取回调失败的结果
 */
async function get_call_back_failed_resultOapiCall_back(request: Get_call_back_failed_resultOapiCall_backRequest): Get_call_back_failed_resultOapiCall_backResponse {
  var runtime = new Util.RuntimeOptions{};
  return get_call_back_failed_resultOapiCall_backEx(request, runtime);
}

/**
 * Description: 获取回调失败的结果
 */
async function get_call_back_failed_resultOapiCall_backEx(request: Get_call_back_failed_resultOapiCall_backRequest, runtime: Util.RuntimeOptions): Get_call_back_failed_resultOapiCall_backResponse {
  Util.validateModel(request);
  var appParams : map[string]string = {};
  return doRequestOApi('GET', '/call_back/get_call_back_failed_result', request.headers, appParams, runtime);
}

model Register_call_backOapiCall_backParams = {
  callBackTag?: [ string ](description='需要监听的事件类型，有20种，“user_add_org”, “user_modify_org”, “user_leave_org”,“org_admin_add”, “org_admin_remove”, “org_dept_create”, “org_dept_modify”, “org_dept_remove”, “org_remove”,“label_user_change”, “label_conf_add”, “label_conf_modify”,“label_conf_del”,“org_change”, “chat_add_member”, “chat_remove_member”, “chat_quit”, “chat_update_owner”, “chat_update_title”, “chat_disband”, “chat_disband_microapp”,“check_in”,“bpms_task_change”,“bpms_instance_change”', maxItems=20, name='call_back_tag'),
  token?: string(description='加解密需要用到的token，ISV(服务提供商)推荐使用注册套件时填写的token，普通企业可以随机填写', name='token'),
  aesKey?: string(description='数据加密密钥。用于回调数据的加密，长度固定为43个字符，从a-z, A-Z, 0-9共62个字符中选取,您可以随机生成，ISV(服务提供商)推荐使用注册套件时填写的EncodingAESKey', name='aes_key'),
  url?: string(description='接收事件回调的url', name='url'),
}

model Register_call_backOapiCall_backRequest = {
  headers?: map[string]string,
  params?:Register_call_backOapiCall_backParams,
}

model Register_call_backOapiCall_backResponseBody = {
  errmsg?: string(description='对返回码的文本描述内容', name='errmsg'),
  errcode?: int64(description='返回码', name='errcode'),
}

model Register_call_backOapiCall_backResponse = {
  headers: map[string]string,
  body: Register_call_backOapiCall_backResponseBody,
}

/**
 * Description: 注册事件回调接口
 */
async function register_call_backOapiCall_back(request: Register_call_backOapiCall_backRequest): Register_call_backOapiCall_backResponse {
  var runtime = new Util.RuntimeOptions{};
  return register_call_backOapiCall_backEx(request, runtime);
}

/**
 * Description: 注册事件回调接口
 */
async function register_call_backOapiCall_backEx(request: Register_call_backOapiCall_backRequest, runtime: Util.RuntimeOptions): Register_call_backOapiCall_backResponse {
  Util.validateModel(request);
  var appParams = Util.stringifyMapValue(Util.toMap(request.params));
  return doRequestOApi('POST', '/call_back/register_call_back', request.headers, appParams, runtime);
}

model UpdateOapiWorkspaceProjectMemberRoleParams = {
  role: {
    tags: [
      {
        code?: string(description='角色code', name='code'),
        name: string(description='角色名', name='name'),
      }
    ](description='角色，不允许空，list内的元素不允许null。最多20个', maxItems=20, name='tags'),
    userid: string(description='成员id', name='userid'),
  }(description='成员设置角色', name='role'),
}

model UpdateOapiWorkspaceProjectMemberRoleRequest = {
  headers?: map[string]string,
  params:UpdateOapiWorkspaceProjectMemberRoleParams,
}

model UpdateOapiWorkspaceProjectMemberRoleResponseBody = {
  success?: boolean(description='请求成功', name='success'),
  errcode?: int64(description='错误码', name='errcode'),
  errmsg?: string(description='错误信息', name='errmsg'),
  result?: string(description='无返回值', name='result'),
}

model UpdateOapiWorkspaceProjectMemberRoleResponse = {
  headers: map[string]string,
  body: UpdateOapiWorkspaceProjectMemberRoleResponseBody,
}

/**
 * Description: 设置项目成员角色（强制覆盖已有角色，调用后原本从原本角色中移出，加入参数传入的角色)
 */
async function updateOapiWorkspaceProjectMemberRole(request: UpdateOapiWorkspaceProjectMemberRoleRequest): UpdateOapiWorkspaceProjectMemberRoleResponse {
  var runtime = new Util.RuntimeOptions{};
  return updateOapiWorkspaceProjectMemberRoleEx(request, runtime);
}

/**
 * Description: 设置项目成员角色（强制覆盖已有角色，调用后原本从原本角色中移出，加入参数传入的角色)
 */
async function updateOapiWorkspaceProjectMemberRoleEx(request: UpdateOapiWorkspaceProjectMemberRoleRequest, runtime: Util.RuntimeOptions): UpdateOapiWorkspaceProjectMemberRoleResponse {
  Util.validateModel(request);
  var appParams = Util.stringifyMapValue(Util.toMap(request.params));
  return doRequestOApi('POST', '/topapi/workspace/project/member/role/update', request.headers, appParams, runtime);
}

model Get_org_user_countOapiUserParams = {
  onlyActive?: int64(description='0：包含未激活钉钉的人员数量 1：不包含未激活钉钉的人员数量', name='onlyActive'),
}

model Get_org_user_countOapiUserRequest = {
  headers?: map[string]string,
  params?:Get_org_user_countOapiUserParams,
}

model Get_org_user_countOapiUserResponseBody = {
  count?: int64(description='企业员工数量', name='count'),
  errmsg?: string(description='errmsg', name='errmsg'),
  errcode?: int64(description='errcode', name='errcode'),
}

model Get_org_user_countOapiUserResponse = {
  headers: map[string]string,
  body: Get_org_user_countOapiUserResponseBody,
}

/**
 * Description: 获取企业员工人数
 */
async function get_org_user_countOapiUser(request: Get_org_user_countOapiUserRequest): Get_org_user_countOapiUserResponse {
  var runtime = new Util.RuntimeOptions{};
  return get_org_user_countOapiUserEx(request, runtime);
}

/**
 * Description: 获取企业员工人数
 */
async function get_org_user_countOapiUserEx(request: Get_org_user_countOapiUserRequest, runtime: Util.RuntimeOptions): Get_org_user_countOapiUserResponse {
  Util.validateModel(request);
  var appParams = Util.stringifyMapValue(Util.toMap(request.params));
  return doRequestOApi('GET', '/user/get_org_user_count', request.headers, appParams, runtime);
}

model QueryOapiWorkspaceProjectMemberParams = {
  members: [
    {
      userid: string(description='成员id', name='userid'),
    }
  ](description='查询项目成员参数 最多20个', maxItems=20, name='members'),
}

model QueryOapiWorkspaceProjectMemberRequest = {
  headers?: map[string]string,
  params:QueryOapiWorkspaceProjectMemberParams,
}

model QueryOapiWorkspaceProjectMemberResponseBody = {
  result?: [
    {
      name?: string(description='成员名称', name='name'),
      tags?: [
        {
          code?: string(description='角色code', name='code'),
          name?: string(description='角色名', name='name'),
        }
      ](description='角色', name='tags'),
      corpId?: string(description='组织id', name='corp_id'),
      userid?: string(description='成员id', name='userid'),
    }
  ](description='项目成员', name='result'),
  success?: boolean(description='请求成功', name='success'),
  errcode?: int64(description='错误码', name='errcode'),
  errmsg?: string(description='错误文案', name='errmsg'),
}

model QueryOapiWorkspaceProjectMemberResponse = {
  headers: map[string]string,
  body: QueryOapiWorkspaceProjectMemberResponseBody,
}

/**
 * Description: 查询成员信息
 */
async function queryOapiWorkspaceProjectMember(request: QueryOapiWorkspaceProjectMemberRequest): QueryOapiWorkspaceProjectMemberResponse {
  var runtime = new Util.RuntimeOptions{};
  return queryOapiWorkspaceProjectMemberEx(request, runtime);
}

/**
 * Description: 查询成员信息
 */
async function queryOapiWorkspaceProjectMemberEx(request: QueryOapiWorkspaceProjectMemberRequest, runtime: Util.RuntimeOptions): QueryOapiWorkspaceProjectMemberResponse {
  Util.validateModel(request);
  var appParams = Util.stringifyMapValue(Util.toMap(request.params));
  return doRequestOApi('POST', '/topapi/workspace/project/member/query', request.headers, appParams, runtime);
}

model Send_to_conversationOapiMessageParams = {
  sender?: string(description='消息发送者员工ID', name='sender'),
  markdown?: {
    text?: string(description='markdown格式的消息', name='text'),
    title?: string(description='首屏会话透出的展示内容', name='title'),
  }(description='markdown消息', name='markdown'),
  oa?: {
    messageUrl?: string(description='客户端点击消息时跳转到的H5地址', name='message_url'),
    pcMessageUrl?: string(description='PC端点击消息时跳转到的地址', name='pc_message_url'),
    body?: {
      title?: string(description='消息体的标题，建议50个字符以内', name='title'),
      form?: [
        {
          value?: string(description='消息体的关键字', name='value'),
          key?: string(description='消息体的关键字对应的值', name='key'),
        }
      ](description='消息体的表单，最多显示6个，超过会被隐藏', maxItems=20, name='form'),
      rich?: {
        num?: string(description='单行富文本信息的数目', name='num'),
        unit?: string(description='单行富文本信息的单位', name='unit'),
      }(description='单行富文本信息', name='rich'),
      content?: string(description='消息体的内容，最多显示3行', name='content'),
      image?: string(description='消息体中的图片，支持图片资源@mediaId', name='image'),
      fileCount?: string(description='自定义的附件数目。此数字仅供显示，钉钉不作验证', name='file_count'),
      author?: string(description='自定义的作者名字', name='author'),
    }(description='消息体', name='body'),
    head?: {
      bgcolor?: string(description='消息头部的背景颜色。长度限制为8个英文字符，其中前2为表示透明度，后6位表示颜色值。不要添加0x', name='bgcolor'),
      text?: string(description='消息的头部标题 (向普通会话发送时有效，向企业会话发送时会被替换为微应用的名字)，长度限制为最多10个字符', name='text'),
    }(description='消息头部内容', name='head'),
  }(description='OA消息', name='oa'),
  voice?: {
    duration?: int64(description='语音时长', name='duration'),
    mediaId?: string(description='语音媒体文件id，可以调用上传媒体文件接口获取。2MB，播放长度不超过60s，AMR格式', name='media_id'),
  }(description='voice消息', name='voice'),
  file?: {
    mediaId?: string(description='媒体文件id，可以调用上传媒体文件接口获取。10MB', name='media_id'),
  }(description='file消息', name='file'),
  link?: {
    messageUrl?: string(description='消息点击链接地址', name='messageUrl'),
    text?: string(description='消息描述', name='text'),
    title?: string(description='消息标题', name='title'),
    picUrl?: string(description='图片媒体文件id，可以调用上传媒体文件接口获取', name='picUrl'),
  }(description='link消息', name='link'),
  image?: {
    mediaId?: string(description='图片媒体文件id，可以调用上传媒体文件接口获取。建议宽600像素 x 400像素，宽高比3：2', name='media_id'),
  }(description='image消息', name='image'),
  text?: {
    content?: string(description='消息内容', name='content'),
  }(description='text消息', name='text'),
  msgtype?: string(description='消息类型', name='msgtype'),
  cid?: string(description='群消息或者个人聊天会话Id，(通过JSAPI之pickConversation接口唤起联系人界面选择之后即可拿到会话ID，之后您可以使用获取到的cid调用此接口）', name='cid'),
  actionCard?: {
    markdown?: string(description='消息内容，支持markdown，语法参考标准markdown语法。图片举例：![alt text](mediaId)', name='markdown'),
    title?: string(description='透出到会话列表和通知的文案', name='title'),
    singleTitle?: string(description='使用整体跳转ActionCard样式时的标题，必须与single_url同时设置', name='single_title'),
    singleUrl?: string(description='使用整体跳转ActionCard样式时的链接url，必须与single_title同时设置', name='single_url'),
    btnOrientation?: string(description='使用独立跳转ActionCard样式时的按钮排列方式，竖直排列(0)，横向排列(1)；必须与btn_json_list同时设置', name='btn_orientation'),
    btnJsonList?: [
      {
        actionUrl?: string(description='使用独立跳转ActionCard样式时的按钮的链接url', name='action_url'),
        title?: string(description='使用独立跳转ActionCard样式时的按钮的标题', name='title'),
      }
    ](description='使用独立跳转ActionCard样式时的按钮列表；必须与btn_orientation同时设置', maxItems=20, name='btn_json_list'),
  }(description='ActionCard消息', name='action_card'),
  msg?: {
    actionCard?: {
      btnJsonList?: [
        {
          title?: string(description='使用独立跳转ActionCard样式时的按钮的链接url', name='title'),
          actionUrl?: string(description='使用独立跳转ActionCard样式时的按钮的标题', name='action_url'),
        }
      ](description='使用独立跳转ActionCard样式时的按钮的链接url', maxItems=20, name='btn_json_list'),
      btnOrientation?: string(description='使用独立跳转ActionCard样式时的按钮排列方式，竖直排列(0)，横向排列(1)；必须与btn_json_list同时设置', name='btn_orientation'),
      singleUrl?: string(description='使用整体跳转ActionCard样式时的链接url，必须与single_title同时设置', name='single_url'),
      singleTitle?: string(description='使用整体跳转ActionCard样式时的标题，必须与single_url同时设置', name='single_title'),
      title?: string(description='透出到会话列表和通知的文案', name='title'),
      markdown?: string(description='消息内容，支持markdown，语法参考标准markdown语法。图片举例：![alt text](mediaId)', name='markdown'),
    }(description='消息内容，支持markdown，语法参考标准markdown语法。图片举例：![alt text](mediaId)', name='action_card'),
    markdown?: {
      title?: string(description='markdown格式的消息', name='title'),
      text?: string(description='首屏会话透出的展示内容', name='text'),
    }(description='markdown消息', name='markdown'),
    oa?: {
      messageUrl?: string(description='消息点击链接地址，当发送消息为小程序时支持小程序跳转链接', name='message_url'),
      pcMessageUrl?: string(description='PC端点击消息时跳转到的地址', name='pc_message_url'),
      body?: {
        author?: string(description='自定义的作者名字', name='author'),
        image?: string(description='消息体中的图片，支持图片资源@mediaId', name='image'),
        fileCount?: string(description='自定义的附件数目。此数字仅供显示，钉钉不作验证', name='file_count'),
        content?: string(description='消息体的内容，最多显示3行', name='content'),
        rich?: {
          num?: string(description='单行富文本信息的数目', name='num'),
          unit?: string(description='单行富文本信息的单位', name='unit'),
        }(description='单行富文本信息', name='rich'),
        form?: [
          {
            value?: string(description='消息体的关键字对应的值', name='value'),
            key?: string(description='消息体的关键字', name='key'),
          }
        ](description='消息体的表单，最多显示6个，超过会被隐藏', maxItems=20, name='form'),
        title?: string(description='消息体的标题，建议50个字符以内', name='title'),
      }(description='消息体', name='body'),
      head?: {
        bgcolor?: string(description='消息头部的背景颜色。长度限制为8个英文字符，其中前2为表示透明度，后6位表示颜色值。不要添加0x', name='bgcolor'),
        text?: string(description='消息的头部标题 (向普通会话发送时有效，向企业会话发送时会被替换为微应用的名字)，长度限制为最多10个字符', name='text'),
      }(description='消息头部内容', name='head'),
    }(description='oa消息', name='oa'),
    voice?: {
      duration?: string(description='正整数，小于60，表示音频时长', name='duration'),
      mediaId?: string(description='媒体文件id。2MB，播放长度不超过60s，AMR格式', name='media_id'),
    }(description='语音消息', name='voice'),
    file?: {
      mediaId?: string(description='媒体文件id。引用的媒体文件最大10MB', name='media_id'),
    }(description='文件消息', name='file'),
    link?: {
      messageUrl?: string(description='消息点击链接地址，当发送消息为小程序时支持小程序跳转链接', name='messageUrl'),
      picUrl?: string(description='图片地址', name='picUrl'),
      text?: string(description='消息标题，建议100字符以内', name='text'),
      title?: string(description='消息描述，建议500字符以内', name='title'),
    }(description='链接消息', name='link'),
    image?: {
      mediaId?: string(description='媒体文件id，可以通过媒体文件接口上传图片获取。建议宽600像素 x 400像素，宽高比3 : 2', name='media_id'),
    }(description='图片消息', name='image'),
    text?: {
      content?: string(description='消息内容，建议500字符以内', name='content'),
    }(description='文本消息', name='text'),
    msgtype?: string(description='消息类型', name='msgtype'),
  }(description='消息内容', name='msg'),
}

model Send_to_conversationOapiMessageRequest = {
  headers?: map[string]string,
  params?:Send_to_conversationOapiMessageParams,
}

model Send_to_conversationOapiMessageResponseBody = {
  receiver?: string(description='如果是群，返回跟发送者同一家企业的一组工号；如果是个人聊天，只返回发送者同一家企业的一个工号；不在同一家企业，发送失败', name='receiver'),
  errmsg?: string(description='errmsg', name='errmsg'),
  errcode?: int64(description='errcode', name='errcode'),
}

model Send_to_conversationOapiMessageResponse = {
  headers: map[string]string,
  body: Send_to_conversationOapiMessageResponseBody,
}

/**
 * Description: 发送普通消息
 */
async function send_to_conversationOapiMessage(request: Send_to_conversationOapiMessageRequest): Send_to_conversationOapiMessageResponse {
  var runtime = new Util.RuntimeOptions{};
  return send_to_conversationOapiMessageEx(request, runtime);
}

/**
 * Description: 发送普通消息
 */
async function send_to_conversationOapiMessageEx(request: Send_to_conversationOapiMessageRequest, runtime: Util.RuntimeOptions): Send_to_conversationOapiMessageResponse {
  Util.validateModel(request);
  var appParams = Util.stringifyMapValue(Util.toMap(request.params));
  return doRequestOApi('POST', '/message/send_to_conversation', request.headers, appParams, runtime);
}

model AddOapiWorkspaceProjectMemberParams = {
  members: [
    {
      userid?: string(description='添加到新组织后，允许指定1个userId，但是有可能由于该userId与已新组织内已存在的员工userId重复报错。非必填。长度4-32位之间，仅允许（字母 数字 _ -）', name='userid'),
      fromCorpId: string(description='从哪个组织选人', name='from_corp_id'),
      fromUserid: string(description='配合fromCorpId，在那个组织内的userid', name='from_userid'),
    }
  ](description='添加成员 最多20个', maxItems=20, name='members'),
}

model AddOapiWorkspaceProjectMemberRequest = {
  headers?: map[string]string,
  params:AddOapiWorkspaceProjectMemberParams,
}

model AddOapiWorkspaceProjectMemberResponseBody = {
  result?: [
    {
      tags?: [
        {
          code?: string(description='角色的code', name='code'),
          name?: string(description='角色的名称', name='name'),
        }
      ](description='角色', name='tags'),
      corpId?: string(description='组织id', name='corp_id'),
      userid?: string(description='成员id', name='userid'),
      fromUserId?: string(description='配合fromCorpId，在那个组织内的userid', name='from_user_id'),
      fromCorpId?: string(description='从哪个组织选人', name='from_corp_id'),
    }
  ](description='项目成员', name='result'),
  success?: boolean(description='请求成功', name='success'),
  errcode?: int64(description='错误码', name='errcode'),
  errmsg?: string(description='错误文案', name='errmsg'),
}

model AddOapiWorkspaceProjectMemberResponse = {
  headers: map[string]string,
  body: AddOapiWorkspaceProjectMemberResponseBody,
}

/**
 * Description: 从一个组织中选一批人，加入项目/圈子。如果目的组织是项目，要去源组织是项目的归属组织。如果知道用户手机号码，直接走开放平台已有的通讯录用户相关接口即可
 */
async function addOapiWorkspaceProjectMember(request: AddOapiWorkspaceProjectMemberRequest): AddOapiWorkspaceProjectMemberResponse {
  var runtime = new Util.RuntimeOptions{};
  return addOapiWorkspaceProjectMemberEx(request, runtime);
}

/**
 * Description: 从一个组织中选一批人，加入项目/圈子。如果目的组织是项目，要去源组织是项目的归属组织。如果知道用户手机号码，直接走开放平台已有的通讯录用户相关接口即可
 */
async function addOapiWorkspaceProjectMemberEx(request: AddOapiWorkspaceProjectMemberRequest, runtime: Util.RuntimeOptions): AddOapiWorkspaceProjectMemberResponse {
  Util.validateModel(request);
  var appParams = Util.stringifyMapValue(Util.toMap(request.params));
  return doRequestOApi('POST', '/topapi/workspace/project/member/add', request.headers, appParams, runtime);
}

model GetuserinfoOapiSnsParams = {
  snsToken?: string(description='用户授权给开放应用的token', name='sns_token'),
}

model GetuserinfoOapiSnsRequest = {
  headers?: map[string]string,
  params?:GetuserinfoOapiSnsParams,
}

model GetuserinfoOapiSnsResponseBody = {
  userInfo?: {
    maskedMobile?: string(description='maskedMobile', name='maskedMobile'),
    nick?: string(description='用户在钉钉上面的昵称', name='nick'),
    unionid?: string(description='用户在当前开放应用所属的钉钉开放平台账号内的唯一标识', name='unionid'),
    openid?: string(description='用户在当前开放应用内的唯一标识', name='openid'),
    dingId?: string(description='钉钉Id', name='dingId'),
  }(description='user_info', name='user_info'),
  errmsg?: string(description='errmsg', name='errmsg'),
  errcode?: int64(description='errcode', name='errcode'),
}

model GetuserinfoOapiSnsResponse = {
  headers: map[string]string,
  body: GetuserinfoOapiSnsResponseBody,
}

/**
 * Description: 获取用户授权的个人信息
 */
async function getuserinfoOapiSns(request: GetuserinfoOapiSnsRequest): GetuserinfoOapiSnsResponse {
  var runtime = new Util.RuntimeOptions{};
  return getuserinfoOapiSnsEx(request, runtime);
}

/**
 * Description: 获取用户授权的个人信息
 */
async function getuserinfoOapiSnsEx(request: GetuserinfoOapiSnsRequest, runtime: Util.RuntimeOptions): GetuserinfoOapiSnsResponse {
  Util.validateModel(request);
  var appParams = Util.stringifyMapValue(Util.toMap(request.params));
  return doRequestOApi('GET', '/sns/getuserinfo', request.headers, appParams, runtime);
}

model CreateOapiWorkspaceProjectRoleParams = {
  tags: [
    {
      name: string(description='角色名', name='name'),
    }
  ](description='创建角色参数', maxItems=20, name='tags'),
}

model CreateOapiWorkspaceProjectRoleRequest = {
  headers?: map[string]string,
  params:CreateOapiWorkspaceProjectRoleParams,
}

model CreateOapiWorkspaceProjectRoleResponseBody = {
  result?: [
    {
      code?: string(description='角色的code', name='code'),
      name?: string(description='角色的名称', name='name'),
    }
  ](description='角色列表', name='result'),
  success?: boolean(description='请求成功', name='success'),
  errcode?: int64(description='错误码', name='errcode'),
  errmsg?: string(description='错误文案', name='errmsg'),
}

model CreateOapiWorkspaceProjectRoleResponse = {
  headers: map[string]string,
  body: CreateOapiWorkspaceProjectRoleResponseBody,
}

/**
 * Description: 批量添加角色，如果角色已经在项目内存在，不重复创建
 */
async function createOapiWorkspaceProjectRole(request: CreateOapiWorkspaceProjectRoleRequest): CreateOapiWorkspaceProjectRoleResponse {
  var runtime = new Util.RuntimeOptions{};
  return createOapiWorkspaceProjectRoleEx(request, runtime);
}

/**
 * Description: 批量添加角色，如果角色已经在项目内存在，不重复创建
 */
async function createOapiWorkspaceProjectRoleEx(request: CreateOapiWorkspaceProjectRoleRequest, runtime: Util.RuntimeOptions): CreateOapiWorkspaceProjectRoleResponse {
  Util.validateModel(request);
  var appParams = Util.stringifyMapValue(Util.toMap(request.params));
  return doRequestOApi('POST', '/topapi/workspace/project/role/create', request.headers, appParams, runtime);
}

model SyncOapiRetailSellerParams = {
  userid?: string(description='staffId', name='userid'),
  sellerParam?: {
    nick?: string(description='昵称', name='nick'),
    actionType?: string(description='操作类型', name='action_type'),
    sellerId?: int64(description='卖家ID', name='seller_id'),
    mobile?: string(description='手机号', name='mobile'),
    srcMobile?: string(description='原始手机号', name='src_mobile'),
    source?: string(description='开店来源', name='source'),
    name?: string(description='商家名称', name='name'),
  }(description='卖家信息', name='seller_param'),
}

model SyncOapiRetailSellerRequest = {
  headers?: map[string]string,
  params?:SyncOapiRetailSellerParams,
}

model SyncOapiRetailSellerResponseBody = {
  result?: boolean(description='是否操作成功', name='result'),
  success?: boolean(description='调用是否成功', name='success'),
  errcode?: int64(description='错误代码', name='errcode'),
  errmsg?: string(description='错误信息', name='errmsg'),
}

model SyncOapiRetailSellerResponse = {
  headers: map[string]string,
  body: SyncOapiRetailSellerResponseBody,
}

/**
 * Description: 同步淘宝的新商家和钉钉用户关系
 */
async function syncOapiRetailSeller(request: SyncOapiRetailSellerRequest): SyncOapiRetailSellerResponse {
  var runtime = new Util.RuntimeOptions{};
  return syncOapiRetailSellerEx(request, runtime);
}

/**
 * Description: 同步淘宝的新商家和钉钉用户关系
 */
async function syncOapiRetailSellerEx(request: SyncOapiRetailSellerRequest, runtime: Util.RuntimeOptions): SyncOapiRetailSellerResponse {
  Util.validateModel(request);
  var appParams = Util.stringifyMapValue(Util.toMap(request.params));
  return doRequestOApi('POST', '/topapi/retail/seller/sync', request.headers, appParams, runtime);
}

model Get_persistent_codeOapiSnsParams = {
  tmpAuthCode?: string(description='用户授权给钉钉开放应用的临时授权码', name='tmp_auth_code'),
}

model Get_persistent_codeOapiSnsRequest = {
  headers?: map[string]string,
  params?:Get_persistent_codeOapiSnsParams,
}

model Get_persistent_codeOapiSnsResponseBody = {
  errcode?: int64(description='errcode', name='errcode'),
  errmsg?: string(description='errmsg', name='errmsg'),
  persistentCode?: string(description='用户给开放应用授权的持久授权码，此码目前无过期时间', name='persistent_code'),
  openid?: string(description='用户在当前开放应用内的唯一标识', name='openid'),
  unionid?: string(description='用户在当前钉钉开放平台账号范围内的唯一标识，同一个钉钉开放平台账号可以包含多个开放应用，同时也包含ISV的套件应用及企业应用', name='unionid'),
}

model Get_persistent_codeOapiSnsResponse = {
  headers: map[string]string,
  body: Get_persistent_codeOapiSnsResponseBody,
}

/**
 * Description: 获取用户授权的持久授权码
 */
async function get_persistent_codeOapiSns(request: Get_persistent_codeOapiSnsRequest): Get_persistent_codeOapiSnsResponse {
  var runtime = new Util.RuntimeOptions{};
  return get_persistent_codeOapiSnsEx(request, runtime);
}

/**
 * Description: 获取用户授权的持久授权码
 */
async function get_persistent_codeOapiSnsEx(request: Get_persistent_codeOapiSnsRequest, runtime: Util.RuntimeOptions): Get_persistent_codeOapiSnsResponse {
  Util.validateModel(request);
  var appParams = Util.stringifyMapValue(Util.toMap(request.params));
  return doRequestOApi('POST', '/sns/get_persistent_code', request.headers, appParams, runtime);
}

model QueryOapiWorkspaceProjectRequest = {
  headers?: map[string]string,
}

model QueryOapiWorkspaceProjectResponseBody = {
  result?: {
    owner?: {
      name?: string(description='成员名称', name='name'),
      tags?: [
        {
          name?: string(description='角色的名称', name='name'),
          code?: string(description='角色的code', name='code'),
        }
      ](description='角色', name='tags'),
      corpId?: string(description='组织id', name='corp_id'),
      userid?: string(description='成员id', name='userid'),
    }(description='项目负责人，刚创建时负责人就是创建人', name='owner'),
    creator?: {
      name?: string(description='成员名称', name='name'),
      tags?: [
        {
          name?: string(description='角色的名称', name='name'),
          code?: string(description='角色的code', name='code'),
        }
      ](description='角色', name='tags'),
      corpId?: string(description='组织id', name='corp_id'),
      userid?: string(description='成员id', name='userid'),
    }(description='项目创建人', name='creator'),
    createTime?: int64(description='项目创建时间', name='create_time'),
    corpId?: string(description='组织id', name='corp_id'),
    corpSecret?: string(description='只在创建组织时返回', name='corp_secret'),
    desc?: string(description='组织描述', name='desc'),
    name?: string(description='组织名称', name='name'),
    type?: int64(description='1项目 2圈子', name='type'),
    outerId?: string(description='支持传入外部业务id做系统关联', name='outer_id'),
    logo?: string(description='图标', name='logo'),
  }(description='项目参数返回值', name='result'),
  errcode?: int64(description='dingOpenErrcode', name='errcode'),
  errmsg?: string(description='errorMsg', name='errmsg'),
  success?: boolean(description='请求是否成功', name='success'),
}

model QueryOapiWorkspaceProjectResponse = {
  headers: map[string]string,
  body: QueryOapiWorkspaceProjectResponseBody,
}

/**
 * Description: 查询项目/圈子信息
 */
async function queryOapiWorkspaceProject(request: QueryOapiWorkspaceProjectRequest): QueryOapiWorkspaceProjectResponse {
  var runtime = new Util.RuntimeOptions{};
  return queryOapiWorkspaceProjectEx(request, runtime);
}

/**
 * Description: 查询项目/圈子信息
 */
async function queryOapiWorkspaceProjectEx(request: QueryOapiWorkspaceProjectRequest, runtime: Util.RuntimeOptions): QueryOapiWorkspaceProjectResponse {
  Util.validateModel(request);
  var appParams : map[string]string = {};
  return doRequestOApi('POST', '/topapi/workspace/project/query', request.headers, appParams, runtime);
}

model CreateOapiMicroappParams = {
  appIcon?: string(description='微应用的图标。需要调用上传接口将图标上传到钉钉服务器后获取到的mediaId', name='appIcon'),
  appDesc?: string(description='钉钉测试微应用', name='appDesc'),
  homepageUrl?: string(description='微应用的移动端主页，必须以http开头或https开头', name='homepageUrl'),
  pcHomepageUrl?: string(description='微应用的PC端主页，必须以http开头或https开头，如果不为空则必须与homepageUrl的域名一致', name='pcHomepageUrl'),
  ompLink?: string(description='微应用的OA后台管理主页，必须以http开头或https开头。微应用后台管理员免登 开发', name='ompLink'),
  appName?: string(description='微应用的名称。长度限制为1~10个字符', name='appName'),
}

model CreateOapiMicroappRequest = {
  headers?: map[string]string,
  params?:CreateOapiMicroappParams,
}

model CreateOapiMicroappResponseBody = {
  errcode?: int64(description='errcode', name='errcode'),
  errmsg?: string(description='errmsg', name='errmsg'),
  agentid?: int64(description='agentid', name='agentid'),
}

model CreateOapiMicroappResponse = {
  headers: map[string]string,
  body: CreateOapiMicroappResponseBody,
}

/**
 * Description: 企业开发者通过接口创建微应用
 */
async function createOapiMicroapp(request: CreateOapiMicroappRequest): CreateOapiMicroappResponse {
  var runtime = new Util.RuntimeOptions{};
  return createOapiMicroappEx(request, runtime);
}

/**
 * Description: 企业开发者通过接口创建微应用
 */
async function createOapiMicroappEx(request: CreateOapiMicroappRequest, runtime: Util.RuntimeOptions): CreateOapiMicroappResponse {
  Util.validateModel(request);
  var appParams = Util.stringifyMapValue(Util.toMap(request.params));
  return doRequestOApi('POST', '/microapp/create', request.headers, appParams, runtime);
}

model CreateOapiWorkspaceProjectParams = {
  name: string(description='组织名，长度3-50个字符以内，不允许中划线、下划线、逗号、空格', name='name'),
  belongCorpUserid: string(description='创建人（主管理员）在归属组织内的userId', name='belong_corp_userid'),
  type: int64(description='1项目组织  2圈子组织', name='type'),
  userid?: string(description='可以指定创建人在项目/圈子组织内的userId，如果不填系统随机生成', name='userid'),
  openConversationId?: string(description='开放的cid，如果有值会把该群作为组织的默认群，否则会新创建1个默认群', name='open_conversation_id'),
  desc?: string(description='描述，长度256字符以内', name='desc'),
  createGroup?: boolean(description='是否建圈自动建群', name='create_group'),
  templateId?: int64(description='模板id', name='template_id'),
  outerId?: string(description='允许调用者传入外部id用于做系统关联', name='outer_id'),
}

model CreateOapiWorkspaceProjectRequest = {
  headers?: map[string]string,
  params:CreateOapiWorkspaceProjectParams,
}

model CreateOapiWorkspaceProjectResponseBody = {
  errmsg?: string(description='errorMsg', name='errmsg'),
  errcode?: int64(description='dingOpenErrcode', name='errcode'),
  result?: {
    owner?: {
      name?: string(description='成员名称', name='name'),
      tags?: [
        {
          code?: string(description='角色code', name='code'),
          name?: string(description='角色名称', name='name'),
        }
      ](description='角色', name='tags'),
      corpId?: string(description='开放组织id', name='corp_id'),
      userid?: string(description='成员id', name='userid'),
    }(description='负责人，刚创建时负责人就是创建人', name='owner'),
    creator?: {
      name?: string(description='成员名称', name='name'),
      tags?: [
        {
          code?: string(description='角色code', name='code'),
          name?: string(description='角色名称', name='name'),
        }
      ](description='角色', name='tags'),
      corpId?: string(description='开放组织id', name='corp_id'),
      userid?: string(description='成员id', name='userid'),
    }(description='创建人', name='creator'),
    createTime?: int64(description='创建时间', name='create_time'),
    corpId?: string(description='开放组织id', name='corp_id'),
    name?: string(description='名称', name='name'),
    corpSecret?: string(description='创建组织时返回，用corpId+corpSecret可以换取token', name='corp_secret'),
    desc?: string(description='描述', name='desc'),
    outerId?: string(description='允许调用者传入外部id用于做系统关联', name='outer_id'),
    type?: int64(description='1项目 2圈子', name='type'),
  }(description='返回值', name='result'),
  success?: boolean(description='是否成功', name='success'),
}

model CreateOapiWorkspaceProjectResponse = {
  headers: map[string]string,
  body: CreateOapiWorkspaceProjectResponseBody,
}

/**
 * Description: 创建项目/圈子组织
 */
async function createOapiWorkspaceProject(request: CreateOapiWorkspaceProjectRequest): CreateOapiWorkspaceProjectResponse {
  var runtime = new Util.RuntimeOptions{};
  return createOapiWorkspaceProjectEx(request, runtime);
}

/**
 * Description: 创建项目/圈子组织
 */
async function createOapiWorkspaceProjectEx(request: CreateOapiWorkspaceProjectRequest, runtime: Util.RuntimeOptions): CreateOapiWorkspaceProjectResponse {
  Util.validateModel(request);
  var appParams = Util.stringifyMapValue(Util.toMap(request.params));
  return doRequestOApi('POST', '/topapi/workspace/project/create', request.headers, appParams, runtime);
}

model UpdateOapiMicroappParams = {
  appName?: string(description='微应用的名称。长度限制为1~10个字符', name='appName'),
  appIcon?: string(description='微应用的图标。需要调用上传接口将图标上传到钉钉服务器后获取到的mediaId', name='appIcon'),
  appDesc?: string(description='微应用的描述。长度限制为1~20个字符', name='appDesc'),
  homepageUrl?: string(description='微应用的移动端主页，必须以http开头或https开头', name='homepageUrl'),
  pcHomepageUrl?: string(description='微应用的PC端主页，必须以http开头或https开头，如果不为空则必须与homepageUrl的域名一致', name='pcHomepageUrl'),
  ompLink?: string(description='微应用的OA后台管理主页，必须以http开头或https开头', name='ompLink'),
  agentId?: int64(description='微应用实例化id', name='agentId'),
}

model UpdateOapiMicroappRequest = {
  headers?: map[string]string,
  params?:UpdateOapiMicroappParams,
}

model UpdateOapiMicroappResponseBody = {
  errmsg?: string(description='对返回码的文本描述内容', name='errmsg'),
  errcode?: int64(description='返回码', name='errcode'),
  agentid?: int64(description='微应用实例化id，企业只能删除自建微应用', name='agentid'),
}

model UpdateOapiMicroappResponse = {
  headers: map[string]string,
  body: UpdateOapiMicroappResponseBody,
}

/**
 * Description: 更新微应用
 */
async function updateOapiMicroapp(request: UpdateOapiMicroappRequest): UpdateOapiMicroappResponse {
  var runtime = new Util.RuntimeOptions{};
  return updateOapiMicroappEx(request, runtime);
}

/**
 * Description: 更新微应用
 */
async function updateOapiMicroappEx(request: UpdateOapiMicroappRequest, runtime: Util.RuntimeOptions): UpdateOapiMicroappResponse {
  Util.validateModel(request);
  var appParams = Util.stringifyMapValue(Util.toMap(request.params));
  return doRequestOApi('POST', '/microapp/update', request.headers, appParams, runtime);
}

model ListOapiMicroappRequest = {
  headers?: map[string]string,
}

model ListOapiMicroappResponseBody = {
  appList?: [
    {
      name?: string(description='微应用名称', name='name'),
      agentId?: int64(description='微应用实例化id', name='agentId'),
      appIcon?: string(description='微应用图标', name='appIcon'),
      appDesc?: string(description='微应用描述', name='appDesc'),
      isSelf?: boolean(description='表示是否是自建微应用', name='isSelf'),
      appStatus?: int64(description='微应用状态，1表示启用，0表示停用', name='appStatus'),
      ompLink?: string(description='微应用的OA后台管理主页', name='ompLink'),
      homepageLink?: string(description='微应用的移动端主页', name='homepageLink'),
      pcHomepageLink?: string(description='微应用的pc端主页', name='pcHomepageLink'),
    }
  ](description='appList', name='appList'),
  errmsg?: string(description='对返回码的文本描述内容', name='errmsg'),
  errcode?: int64(description='返回码', name='errcode'),
}

model ListOapiMicroappResponse = {
  headers: map[string]string,
  body: ListOapiMicroappResponseBody,
}

/**
 * Description: 列出微应用
 */
async function listOapiMicroapp(request: ListOapiMicroappRequest): ListOapiMicroappResponse {
  var runtime = new Util.RuntimeOptions{};
  return listOapiMicroappEx(request, runtime);
}

/**
 * Description: 列出微应用
 */
async function listOapiMicroappEx(request: ListOapiMicroappRequest, runtime: Util.RuntimeOptions): ListOapiMicroappResponse {
  Util.validateModel(request);
  var appParams : map[string]string = {};
  return doRequestOApi('POST', '/microapp/list', request.headers, appParams, runtime);
}

model RecordOapiCheckinParams = {
  departmentId?: string(description='部门id（1 表示根部门）', name='department_id'),
  endTime?: int64(description='开始时间，精确到毫秒，注意字段的位数 例：1520956800000', name='end_time'),
  startTime?: int64(description='结束时间，精确到毫秒，注意字段的位数 例：1520956800000（默认为当前时间）', name='start_time'),
  offset?: int64(description='支持分页查询，与size 参数同时设置时才生效，此参数代表偏移量，从0 开始', name='offset'),
  size?: int64(description='支持分页查询，与offset 参数同时设置时才生效，此参数代表分页大小，最大100', name='size'),
  order?: string(description='排序，asc 为正序，desc 为倒序', name='order'),
}

model RecordOapiCheckinRequest = {
  headers?: map[string]string,
  params?:RecordOapiCheckinParams,
}

model RecordOapiCheckinResponseBody = {
  data?: [
    {
      name?: string(description='成员名称', name='name'),
      userId?: string(description='员工唯一标识ID（不可修改）', name='userId'),
      avatar?: string(description='头像url', name='avatar'),
      timestamp?: int64(description='签到时间', name='timestamp'),
      place?: string(description='签到地址', name='place'),
      detailPlace?: string(description='签到详细地址', name='detailPlace'),
      remark?: string(description='签到备注', name='remark'),
      imageList?: [ string ](description='签到照片url列表', name='imageList'),
      latitude?: string(description='纬度', name='latitude'),
      longitude?: string(description='经度', name='longitude'),
    }
  ](description='data', name='data'),
  errmsg?: string(description='对返回码的文本描述内容', name='errmsg'),
  errcode?: int64(description='返回码', name='errcode'),
}

model RecordOapiCheckinResponse = {
  headers: map[string]string,
  body: RecordOapiCheckinResponseBody,
}

/**
 * Description: 获得签到数据
 */
async function recordOapiCheckin(request: RecordOapiCheckinRequest): RecordOapiCheckinResponse {
  var runtime = new Util.RuntimeOptions{};
  return recordOapiCheckinEx(request, runtime);
}

/**
 * Description: 获得签到数据
 */
async function recordOapiCheckinEx(request: RecordOapiCheckinRequest, runtime: Util.RuntimeOptions): RecordOapiCheckinResponse {
  Util.validateModel(request);
  var appParams = Util.stringifyMapValue(Util.toMap(request.params));
  return doRequestOApi('GET', '/checkin/record', request.headers, appParams, runtime);
}

model ListbypagingOapiWorkbenchShortcutParams = {
  pageSize?: int64(description='每页记录数', name='page_size'),
  pageIndex?: int64(description='当前页码', name='page_index'),
}

model ListbypagingOapiWorkbenchShortcutRequest = {
  headers?: map[string]string,
  params?:ListbypagingOapiWorkbenchShortcutParams,
}

model ListbypagingOapiWorkbenchShortcutResponseBody = {
  result?: {
    shortcutList?: [
      {
        shortcutUri?: string(description='移动端快捷方式地址(默认地址)', name='shortcut_uri'),
        icon?: string(description='快捷方式图标', name='icon'),
        name?: string(description='快捷方式名称', name='name'),
        bizNo?: string(description='业务单号,系统间交互唯一流水号', name='biz_no'),
        pcShortcutUri?: string(description='PC端快捷方式地址', name='pc_shortcut_uri'),
      }
    ](description='企业下指定应用已添加快捷方式列表', name='shortcut_list'),
  }(description='返回结果', name='result'),
  errcode?: int64(description='服务结果码', name='errcode'),
  errmsg?: string(description='服务结果描述', name='errmsg'),
}

model ListbypagingOapiWorkbenchShortcutResponse = {
  headers: map[string]string,
  body: ListbypagingOapiWorkbenchShortcutResponseBody,
}

/**
 * Description: 分页查询企业下已添加且有效的快捷方式列表
 */
async function listbypagingOapiWorkbenchShortcut(request: ListbypagingOapiWorkbenchShortcutRequest): ListbypagingOapiWorkbenchShortcutResponse {
  var runtime = new Util.RuntimeOptions{};
  return listbypagingOapiWorkbenchShortcutEx(request, runtime);
}

/**
 * Description: 分页查询企业下已添加且有效的快捷方式列表
 */
async function listbypagingOapiWorkbenchShortcutEx(request: ListbypagingOapiWorkbenchShortcutRequest, runtime: Util.RuntimeOptions): ListbypagingOapiWorkbenchShortcutResponse {
  Util.validateModel(request);
  var appParams = Util.stringifyMapValue(Util.toMap(request.params));
  return doRequestOApi('POST', '/topapi/workbench/shortcut/listbypaging', request.headers, appParams, runtime);
}

model DeleteOapiMicroappParams = {
  agentId?: int64(description='微应用实例化id，企业只能删除自建微应用', name='agentId'),
}

model DeleteOapiMicroappRequest = {
  headers?: map[string]string,
  params?:DeleteOapiMicroappParams,
}

model DeleteOapiMicroappResponseBody = {
  errmsg?: string(description='errmsg', name='errmsg'),
  errcode?: int64(description='errcode', name='errcode'),
}

model DeleteOapiMicroappResponse = {
  headers: map[string]string,
  body: DeleteOapiMicroappResponseBody,
}

/**
 * Description: 删除微应用
 */
async function deleteOapiMicroapp(request: DeleteOapiMicroappRequest): DeleteOapiMicroappResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteOapiMicroappEx(request, runtime);
}

/**
 * Description: 删除微应用
 */
async function deleteOapiMicroappEx(request: DeleteOapiMicroappRequest, runtime: Util.RuntimeOptions): DeleteOapiMicroappResponse {
  Util.validateModel(request);
  var appParams = Util.stringifyMapValue(Util.toMap(request.params));
  return doRequestOApi('POST', '/microapp/delete', request.headers, appParams, runtime);
}

model ListbydaysOapiAttendanceScheduleShiftParams = {
  opUserId: string(description='操作者userId', name='op_user_id'),
  userids: [ string ](description='人员userIds', maxItems=20, name='userids'),
  fromDateTime: int64(description='开始日期', name='from_date_time'),
  toDateTime: int64(description='结束日期', name='to_date_time'),
}

model ListbydaysOapiAttendanceScheduleShiftRequest = {
  headers?: map[string]string,
  params:ListbydaysOapiAttendanceScheduleShiftParams,
}

model ListbydaysOapiAttendanceScheduleShiftResponseBody = {
  result?: [
    {
      workDate?: string(description='工作日', pattern='\\\\d{4}[-]\\\\d{1,2}[-]\\\\d{1,2}[T]\\\\d{2}:\\\\d{2}:\\\\d{2}[Z]', name='work_date'),
      shiftNames?: [ string ](description='班次名称', name='shift_names'),
      userid?: string(description='人员userId', name='userid'),
      shiftVersions?: [ int64 ](description='班次版本id', name='shift_versions'),
      shiftIds?: [ int64 ](description='班次id', name='shift_ids'),
      groupId?: int64(description='考勤组id', name='group_id'),
      corpId?: string(description='企业id', name='corp_id'),
    }
  ](description='返回结果', name='result'),
  success?: boolean(description='成功标记', name='success'),
  errcode?: int64(description='错误码', name='errcode'),
  errmsg?: string(description='错误信息', name='errmsg'),
}

model ListbydaysOapiAttendanceScheduleShiftResponse = {
  headers: map[string]string,
  body: ListbydaysOapiAttendanceScheduleShiftResponseBody,
}

/**
 * Description: 查询排班概要信息
 */
async function listbydaysOapiAttendanceScheduleShift(request: ListbydaysOapiAttendanceScheduleShiftRequest): ListbydaysOapiAttendanceScheduleShiftResponse {
  var runtime = new Util.RuntimeOptions{};
  return listbydaysOapiAttendanceScheduleShiftEx(request, runtime);
}

/**
 * Description: 查询排班概要信息
 */
async function listbydaysOapiAttendanceScheduleShiftEx(request: ListbydaysOapiAttendanceScheduleShiftRequest, runtime: Util.RuntimeOptions): ListbydaysOapiAttendanceScheduleShiftResponse {
  Util.validateModel(request);
  var appParams = Util.stringifyMapValue(Util.toMap(request.params));
  return doRequestOApi('POST', '/topapi/attendance/schedule/shift/listbydays', request.headers, appParams, runtime);
}

model List_by_useridOapiMicroappParams = {
  userid?: string(description='员工userid', name='userid'),
}

model List_by_useridOapiMicroappRequest = {
  headers?: map[string]string,
  params?:List_by_useridOapiMicroappParams,
}

model List_by_useridOapiMicroappResponseBody = {
  errcode?: int64(description='返回码', name='errcode'),
  errmsg?: string(description='对返回码的文本描述内容', name='errmsg'),
  appList?: [
    {
      agentId?: int64(description='微应用实例化id', name='agentId'),
      name?: string(description='微应用图标', name='name'),
      appIcon?: string(description='微应用图标', name='appIcon'),
      appDesc?: string(description='微应用描述', name='appDesc'),
      isSelf?: boolean(description='表示是否是自建微应用', name='isSelf'),
      appStatus?: int64(description='微应用状态，1表示启用，0表示停用', name='appStatus'),
      homepageLink?: string(description='微应用的移动端主页', name='homepageLink'),
      pcHomepageLink?: string(description='微应用的pc端主页', name='pcHomepageLink'),
      ompLink?: string(description='微应用的OA后台管理主页', name='ompLink'),
    }
  ](description='appList', name='appList'),
}

model List_by_useridOapiMicroappResponse = {
  headers: map[string]string,
  body: List_by_useridOapiMicroappResponseBody,
}

/**
 * Description: 列出员工可见的微应用
 */
async function list_by_useridOapiMicroapp(request: List_by_useridOapiMicroappRequest): List_by_useridOapiMicroappResponse {
  var runtime = new Util.RuntimeOptions{};
  return list_by_useridOapiMicroappEx(request, runtime);
}

/**
 * Description: 列出员工可见的微应用
 */
async function list_by_useridOapiMicroappEx(request: List_by_useridOapiMicroappRequest, runtime: Util.RuntimeOptions): List_by_useridOapiMicroappResponse {
  Util.validateModel(request);
  var appParams = Util.stringifyMapValue(Util.toMap(request.params));
  return doRequestOApi('GET', '/microapp/list_by_userid', request.headers, appParams, runtime);
}

model AsyncOapiAttendanceGroupScheduleParams = {
  opUserId: string(description='操作者userId', name='op_user_id'),
  groupId: int64(description='考勤组id', name='group_id'),
  schedules?: [
    {
      shiftId: int64(description='班次id（休息班传1）', name='shift_id'),
      workDate: int64(description='排班日期', name='work_date'),
      isRest?: boolean(description='是否休息（true表示休息，shift_id传1）', name='is_rest'),
      userid: string(description='人员userId', name='userid'),
    }
  ](description='系统自动生成', maxItems=20, name='schedules'),
}

model AsyncOapiAttendanceGroupScheduleRequest = {
  headers?: map[string]string,
  params:AsyncOapiAttendanceGroupScheduleParams,
}

model AsyncOapiAttendanceGroupScheduleResponseBody = {
  success?: boolean(description='成功标记', name='success'),
  errcode?: int64(description='错误码', name='errcode'),
  errmsg?: string(description='错误信息', name='errmsg'),
}

model AsyncOapiAttendanceGroupScheduleResponse = {
  headers: map[string]string,
  body: AsyncOapiAttendanceGroupScheduleResponseBody,
}

/**
 * Description: 排班制考勤组排班能力
 */
async function asyncOapiAttendanceGroupSchedule(request: AsyncOapiAttendanceGroupScheduleRequest): AsyncOapiAttendanceGroupScheduleResponse {
  var runtime = new Util.RuntimeOptions{};
  return asyncOapiAttendanceGroupScheduleEx(request, runtime);
}

/**
 * Description: 排班制考勤组排班能力
 */
async function asyncOapiAttendanceGroupScheduleEx(request: AsyncOapiAttendanceGroupScheduleRequest, runtime: Util.RuntimeOptions): AsyncOapiAttendanceGroupScheduleResponse {
  Util.validateModel(request);
  var appParams = Util.stringifyMapValue(Util.toMap(request.params));
  return doRequestOApi('POST', '/topapi/attendance/group/schedule/async', request.headers, appParams, runtime);
}

model Visible_scopesOapiMicroappParams = {
  agentId?: int64(description='微应用实例化id', name='agentId'),
}

model Visible_scopesOapiMicroappRequest = {
  headers?: map[string]string,
  params?:Visible_scopesOapiMicroappParams,
}

model Visible_scopesOapiMicroappResponseBody = {
  userVisibleScopes?: [ string ](description='微应用的可见用户id列表，格式为JSON数组', name='userVisibleScopes'),
  deptVisibleScopes?: [ int64 ](description='微应用的可见部门id列表，格式为JSON数组', name='deptVisibleScopes'),
  isHidden?: boolean(description='是否仅限管理员可见', name='isHidden'),
  errmsg?: string(description='对返回码的文本描述内容', name='errmsg'),
  errcode?: int64(description='返回码', name='errcode'),
}

model Visible_scopesOapiMicroappResponse = {
  headers: map[string]string,
  body: Visible_scopesOapiMicroappResponseBody,
}

/**
 * Description: 获取企业设置的微应用可见范围
 */
async function visible_scopesOapiMicroapp(request: Visible_scopesOapiMicroappRequest): Visible_scopesOapiMicroappResponse {
  var runtime = new Util.RuntimeOptions{};
  return visible_scopesOapiMicroappEx(request, runtime);
}

/**
 * Description: 获取企业设置的微应用可见范围
 */
async function visible_scopesOapiMicroappEx(request: Visible_scopesOapiMicroappRequest, runtime: Util.RuntimeOptions): Visible_scopesOapiMicroappResponse {
  Util.validateModel(request);
  var appParams = Util.stringifyMapValue(Util.toMap(request.params));
  return doRequestOApi('POST', '/microapp/visible_scopes', request.headers, appParams, runtime);
}

model Set_visible_scopesOapiMicroappParams = {
  userVisibleScopes?: [ string ](description='设置可见的员工id列表，格式为JSON数组', name='userVisibleScopes'),
  deptVisibleScopes?: [ int64 ](description='设置可见的部门id列表，格式为JSON数组', name='deptVisibleScopes'),
  isHidden?: boolean(description='是否仅限管理员可见，true代表仅限管理员可见', name='isHidden'),
  agentId?: int64(description='微应用实例化id', name='agentId'),
}

model Set_visible_scopesOapiMicroappRequest = {
  headers?: map[string]string,
  params?:Set_visible_scopesOapiMicroappParams,
}

model Set_visible_scopesOapiMicroappResponseBody = {
  errmsg?: string(description='返回码', name='errmsg'),
  errcode?: int64(description='对返回码的文本描述内容', name='errcode'),
}

model Set_visible_scopesOapiMicroappResponse = {
  headers: map[string]string,
  body: Set_visible_scopesOapiMicroappResponseBody,
}

/**
 * Description: 设置微应用的可见范围
 */
async function set_visible_scopesOapiMicroapp(request: Set_visible_scopesOapiMicroappRequest): Set_visible_scopesOapiMicroappResponse {
  var runtime = new Util.RuntimeOptions{};
  return set_visible_scopesOapiMicroappEx(request, runtime);
}

/**
 * Description: 设置微应用的可见范围
 */
async function set_visible_scopesOapiMicroappEx(request: Set_visible_scopesOapiMicroappRequest, runtime: Util.RuntimeOptions): Set_visible_scopesOapiMicroappResponse {
  Util.validateModel(request);
  var appParams = Util.stringifyMapValue(Util.toMap(request.params));
  return doRequestOApi('POST', '/microapp/set_visible_scopes', request.headers, appParams, runtime);
}

model Get_rule_listOapiMicroappRuleParams = {
  userid?: string(description='用户在企业内的唯一标识', name='userid'),
  agentId?: int64(description='微应用在企业内的id', name='agentId'),
}

model Get_rule_listOapiMicroappRuleRequest = {
  headers?: map[string]string,
  params?:Get_rule_listOapiMicroappRuleParams,
}

model Get_rule_listOapiMicroappRuleResponseBody = {
  ruleIdList?: [ int64 ](description='用户绑定的规则id列表', name='ruleIdList'),
  errmsg?: string(description='对返回码的文本描述内容', name='errmsg'),
  errcode?: int64(description='返回码', name='errcode'),
}

model Get_rule_listOapiMicroappRuleResponse = {
  headers: map[string]string,
  body: Get_rule_listOapiMicroappRuleResponseBody,
}

/**
 * Description: 微应用规则绑定服务
 */
async function get_rule_listOapiMicroappRule(request: Get_rule_listOapiMicroappRuleRequest): Get_rule_listOapiMicroappRuleResponse {
  var runtime = new Util.RuntimeOptions{};
  return get_rule_listOapiMicroappRuleEx(request, runtime);
}

/**
 * Description: 微应用规则绑定服务
 */
async function get_rule_listOapiMicroappRuleEx(request: Get_rule_listOapiMicroappRuleRequest, runtime: Util.RuntimeOptions): Get_rule_listOapiMicroappRuleResponse {
  Util.validateModel(request);
  var appParams = Util.stringifyMapValue(Util.toMap(request.params));
  return doRequestOApi('POST', '/microapp/rule/get_rule_list', request.headers, appParams, runtime);
}

model Get_user_totalOapiMicroappRuleParams = {
  agentId?: int64(description='规则所属的微应用agentId', name='agentId'),
  ruleIdList?: [ int64 ](description='需要查询的规则id集合', name='ruleIdList'),
}

model Get_user_totalOapiMicroappRuleRequest = {
  headers?: map[string]string,
  params?:Get_user_totalOapiMicroappRuleParams,
}

model Get_user_totalOapiMicroappRuleResponseBody = {
  result?: [
    {
      userTotal?: int64(description='userTotal', name='userTotal'),
      ruleId?: int64(description='ruleId', name='ruleId'),
    }
  ](description='返回入参中各个规则id对应的用户数', name='result'),
  errmsg?: string(description='对返回码的文本描述内容', name='errmsg'),
  errcode?: int64(description='返回码', name='errcode'),
}

model Get_user_totalOapiMicroappRuleResponse = {
  headers: map[string]string,
  body: Get_user_totalOapiMicroappRuleResponseBody,
}

/**
 * Description: 获取规则绑定的用户数
 */
async function get_user_totalOapiMicroappRule(request: Get_user_totalOapiMicroappRuleRequest): Get_user_totalOapiMicroappRuleResponse {
  var runtime = new Util.RuntimeOptions{};
  return get_user_totalOapiMicroappRuleEx(request, runtime);
}

/**
 * Description: 获取规则绑定的用户数
 */
async function get_user_totalOapiMicroappRuleEx(request: Get_user_totalOapiMicroappRuleRequest, runtime: Util.RuntimeOptions): Get_user_totalOapiMicroappRuleResponse {
  Util.validateModel(request);
  var appParams = Util.stringifyMapValue(Util.toMap(request.params));
  return doRequestOApi('POST', '/microapp/rule/get_user_total', request.headers, appParams, runtime);
}

model GettokenOapiSsoParams = {
  corpid?: string(description='企业Id', name='corpid'),
  corpsecret?: string(description='这里必须填写专属的SSOSecret', name='corpsecret'),
}

model GettokenOapiSsoRequest = {
  headers?: map[string]string,
  params?:GettokenOapiSsoParams,
}

model GettokenOapiSsoResponseBody = {
  accessToken?: string(description='获取到的凭证', name='access_token'),
  errmsg?: string(description='错误信息', name='errmsg'),
  errcode?: int64(description='错误码', name='errcode'),
}

model GettokenOapiSsoResponse = {
  headers: map[string]string,
  body: GettokenOapiSsoResponseBody,
}

/**
 * Description: 获取微应用后台免登的SsoToken
 */
async function gettokenOapiSso(request: GettokenOapiSsoRequest): GettokenOapiSsoResponse {
  var runtime = new Util.RuntimeOptions{};
  return gettokenOapiSsoEx(request, runtime);
}

/**
 * Description: 获取微应用后台免登的SsoToken
 */
async function gettokenOapiSsoEx(request: GettokenOapiSsoRequest, runtime: Util.RuntimeOptions): GettokenOapiSsoResponse {
  Util.validateModel(request);
  var appParams = Util.stringifyMapValue(Util.toMap(request.params));
  return doRequestOApi('GET', '/sso/gettoken', request.headers, appParams, runtime);
}

model Get_jsapi_ticketOapiRequest = {
  headers?: map[string]string,
}

model Get_jsapi_ticketOapiResponseBody = {
  expiresIn?: int64(description='票据过期时间', name='expires_in'),
  ticket?: string(description='用于JS API的临时票据', name='ticket'),
  errmsg?: string(description='errmsg', name='errmsg'),
  errcode?: int64(description='errcode', name='errcode'),
}

model Get_jsapi_ticketOapiResponse = {
  headers: map[string]string,
  body: Get_jsapi_ticketOapiResponseBody,
}

/**
 * Description: 获取jsapi_ticket
 */
async function get_jsapi_ticketOapi(request: Get_jsapi_ticketOapiRequest): Get_jsapi_ticketOapiResponse {
  var runtime = new Util.RuntimeOptions{};
  return get_jsapi_ticketOapiEx(request, runtime);
}

/**
 * Description: 获取jsapi_ticket
 */
async function get_jsapi_ticketOapiEx(request: Get_jsapi_ticketOapiRequest, runtime: Util.RuntimeOptions): Get_jsapi_ticketOapiResponse {
  Util.validateModel(request);
  var appParams : map[string]string = {};
  return doRequestOApi('GET', '/get_jsapi_ticket', request.headers, appParams, runtime);
}

model DeleteOapiMicroappRuleParams = {
  agentId?: int64(description='规则所属的微应用agentId', name='agentId'),
  ruleId?: int64(description='被删除的规则id', name='ruleId'),
}

model DeleteOapiMicroappRuleRequest = {
  headers?: map[string]string,
  params?:DeleteOapiMicroappRuleParams,
}

model DeleteOapiMicroappRuleResponseBody = {
  errmsg?: string(description='errmsg', name='errmsg'),
  errcode?: int64(description='errcode', name='errcode'),
}

model DeleteOapiMicroappRuleResponse = {
  headers: map[string]string,
  body: DeleteOapiMicroappRuleResponseBody,
}

/**
 * Description: 删除规则
 */
async function deleteOapiMicroappRule(request: DeleteOapiMicroappRuleRequest): DeleteOapiMicroappRuleResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteOapiMicroappRuleEx(request, runtime);
}

/**
 * Description: 删除规则
 */
async function deleteOapiMicroappRuleEx(request: DeleteOapiMicroappRuleRequest, runtime: Util.RuntimeOptions): DeleteOapiMicroappRuleResponse {
  Util.validateModel(request);
  var appParams = Util.stringifyMapValue(Util.toMap(request.params));
  return doRequestOApi('POST', '/microapp/rule/delete', request.headers, appParams, runtime);
}

model GetOapiFaceauthParams = {
  tmpAuthCode: string(description='人脸扫描的授权码', name='tmp_auth_code'),
  appBizId: string(description='业务方定义的id', name='app_biz_id'),
}

model GetOapiFaceauthRequest = {
  headers?: map[string]string,
  params:GetOapiFaceauthParams,
}

model GetOapiFaceauthResponseBody = {
  result?: {
    idcardNo?: string(description='身份证号码,只有在用户输入的情况下才返回', name='idcard_no'),
    name?: string(description='用户输入的姓名', name='name'),
  }(description='实名认证的结果', name='result'),
  errmsg?: string(description='错误码描述', name='errmsg'),
  errcode?: int64(description='错误码 0表示验证成功', name='errcode'),
}

model GetOapiFaceauthResponse = {
  headers: map[string]string,
  body: GetOapiFaceauthResponseBody,
}

/**
 * Description: 实名认证中的人脸扫描结果查询开放
 */
async function getOapiFaceauth(request: GetOapiFaceauthRequest): GetOapiFaceauthResponse {
  var runtime = new Util.RuntimeOptions{};
  return getOapiFaceauthEx(request, runtime);
}

/**
 * Description: 实名认证中的人脸扫描结果查询开放
 */
async function getOapiFaceauthEx(request: GetOapiFaceauthRequest, runtime: Util.RuntimeOptions): GetOapiFaceauthResponse {
  Util.validateModel(request);
  var appParams = Util.stringifyMapValue(Util.toMap(request.params));
  return doRequestOApi('POST', '/topapi/faceauth/get', request.headers, appParams, runtime);
}

model GettokenOapiSnsParams = {
  appid?: string(description='由钉钉开放平台提供给开放应用的唯一标识', name='appid'),
  appsecret?: string(description='由钉钉开放平台提供的密钥', name='appsecret'),
}

model GettokenOapiSnsRequest = {
  headers?: map[string]string,
  params?:GettokenOapiSnsParams,
}

model GettokenOapiSnsResponseBody = {
  errmsg?: string(description='errmsg', name='errmsg'),
  errcode?: int64(description='errcode', name='errcode'),
  accessToken?: string(description='token的值', name='access_token'),
}

model GettokenOapiSnsResponse = {
  headers: map[string]string,
  body: GettokenOapiSnsResponseBody,
}

/**
 * Description: 获取钉钉开放应用的ACCESS_TOKEN
 */
async function gettokenOapiSns(request: GettokenOapiSnsRequest): GettokenOapiSnsResponse {
  var runtime = new Util.RuntimeOptions{};
  return gettokenOapiSnsEx(request, runtime);
}

/**
 * Description: 获取钉钉开放应用的ACCESS_TOKEN
 */
async function gettokenOapiSnsEx(request: GettokenOapiSnsRequest, runtime: Util.RuntimeOptions): GettokenOapiSnsResponse {
  Util.validateModel(request);
  var appParams = Util.stringifyMapValue(Util.toMap(request.params));
  return doRequestOApi('GET', '/sns/gettoken', request.headers, appParams, runtime);
}

model ScopesOapiAuthRequest = {
  headers?: map[string]string,
}

model ScopesOapiAuthResponseBody = {
  conditionField?: [ string ](description='ISV可以直接使用企业的功能字段', name='condition_field'),
  authOrgScopes?: {
    authedUser?: [ string ](description='企业授权的员工userid列表', name='authed_user'),
    authedDept?: [ int64 ](description='企业授权的部门id列表', name='authed_dept'),
  }(description='auth_org_scopes', name='auth_org_scopes'),
  authUserField?: [ string ](description='可以得到的企业用户字段', name='auth_user_field'),
  errmsg?: string(description='对返回码的文本描述内容', name='errmsg'),
  errcode?: int64(description='返回码', name='errcode'),
}

model ScopesOapiAuthResponse = {
  headers: map[string]string,
  body: ScopesOapiAuthResponseBody,
}

/**
 * Description: 获取CorpSecret授权范围
 */
async function scopesOapiAuth(request: ScopesOapiAuthRequest): ScopesOapiAuthResponse {
  var runtime = new Util.RuntimeOptions{};
  return scopesOapiAuthEx(request, runtime);
}

/**
 * Description: 获取CorpSecret授权范围
 */
async function scopesOapiAuthEx(request: ScopesOapiAuthRequest, runtime: Util.RuntimeOptions): ScopesOapiAuthResponse {
  Util.validateModel(request);
  var appParams : map[string]string = {};
  return doRequestOApi('GET', '/auth/scopes', request.headers, appParams, runtime);
}

model GettodonumOapiProcessParams = {
  userid: string(description='用户id', name='userid'),
}

model GettodonumOapiProcessRequest = {
  headers?: map[string]string,
  params:GettodonumOapiProcessParams,
}

model GettodonumOapiProcessResponseBody = {
  count?: int64(description='result', name='count'),
  errcode?: int64(description='dingOpenErrcode', name='errcode'),
  errmsg?: string(description='errorMsg', name='errmsg'),
}

model GettodonumOapiProcessResponse = {
  headers: map[string]string,
  body: GettodonumOapiProcessResponseBody,
}

/**
 * Description: 获取用户待审批数量
 */
async function gettodonumOapiProcess(request: GettodonumOapiProcessRequest): GettodonumOapiProcessResponse {
  var runtime = new Util.RuntimeOptions{};
  return gettodonumOapiProcessEx(request, runtime);
}

/**
 * Description: 获取用户待审批数量
 */
async function gettodonumOapiProcessEx(request: GettodonumOapiProcessRequest, runtime: Util.RuntimeOptions): GettodonumOapiProcessResponse {
  Util.validateModel(request);
  var appParams = Util.stringifyMapValue(Util.toMap(request.params));
  return doRequestOApi('POST', '/topapi/process/gettodonum', request.headers, appParams, runtime);
}

model GetunreadcountOapiReportParams = {
  userid?: string(description='员工id', name='userid'),
}

model GetunreadcountOapiReportRequest = {
  headers?: map[string]string,
  params?:GetunreadcountOapiReportParams,
}

model GetunreadcountOapiReportResponseBody = {
  count?: int64(description='员工日志未读数', name='count'),
  errmsg?: string(description='errorMsg', name='errmsg'),
  errcode?: int64(description='错误码', name='errcode'),
}

model GetunreadcountOapiReportResponse = {
  headers: map[string]string,
  body: GetunreadcountOapiReportResponseBody,
}

/**
 * Description: 查询企业员工的日志未读数
 */
async function getunreadcountOapiReport(request: GetunreadcountOapiReportRequest): GetunreadcountOapiReportResponse {
  var runtime = new Util.RuntimeOptions{};
  return getunreadcountOapiReportEx(request, runtime);
}

/**
 * Description: 查询企业员工的日志未读数
 */
async function getunreadcountOapiReportEx(request: GetunreadcountOapiReportRequest, runtime: Util.RuntimeOptions): GetunreadcountOapiReportResponse {
  Util.validateModel(request);
  var appParams = Util.stringifyMapValue(Util.toMap(request.params));
  return doRequestOApi('POST', '/topapi/report/getunreadcount', request.headers, appParams, runtime);
}

model SaveOapiSmartworkHrmMasterParams = {
  tenantId: int64(description='业务方id，接入前系统分配', name='tenant_id'),
  bizData: [
    {
      userid: string(description='员工id', name='userid'),
      bizUk: string(description='数据流水唯一标识，如流水号，用以唯一确认一条写入数据', name='biz_uk'),
      bizTime: int64(description='数据变更时间戳，用以保证更新操作的顺序性', name='biz_time'),
      scope: {
        scopeCode: string(description='业务域code，如PERFORMANCE，系统分配，枚举见文档', name='scope_code'),
        version?: int64(description='业务域版本，接入时系统分配，默认传0', name='version'),
      }(description='业务域描述，系统分配，枚举见文档', name='scope'),
      fields: [
        {
          name: string(description='字段名', name='name'),
          value: string(description='字段string值，映射规则见文档', name='value'),
        }
      ](description='数据字段列表', maxItems=20, name='fields'),
    }
  ](description='业务数据列表', maxItems=50, name='biz_data'),
}

model SaveOapiSmartworkHrmMasterRequest = {
  headers?: map[string]string,
  params:SaveOapiSmartworkHrmMasterParams,
}

model SaveOapiSmartworkHrmMasterResponseBody = {
  result?: {
    failResult?: [
      {
        errorMsg?: string(description='保存错误信息', name='error_msg'),
        errorCode?: string(description='保存错误码', name='error_code'),
        success?: boolean(description='是否成功', name='success'),
        bizUk?: string(description='业务流水唯一标识，和入参一致', name='biz_uk'),
      }
    ](description='保存失败的结果，全部保存成功时为空', name='fail_result'),
    allSuccess?: boolean(description='是否全部保存成功', name='all_success'),
  }(description='保存结果', name='result'),
  errmsg?: string(description='错误信息', name='errmsg'),
  errcode?: int64(description='错误码', name='errcode'),
}

model SaveOapiSmartworkHrmMasterResponse = {
  headers: map[string]string,
  body: SaveOapiSmartworkHrmMasterResponseBody,
}

/**
 * Description: 提供给isv将外部数据批量写入到钉钉的服务
 */
async function saveOapiSmartworkHrmMaster(request: SaveOapiSmartworkHrmMasterRequest): SaveOapiSmartworkHrmMasterResponse {
  var runtime = new Util.RuntimeOptions{};
  return saveOapiSmartworkHrmMasterEx(request, runtime);
}

/**
 * Description: 提供给isv将外部数据批量写入到钉钉的服务
 */
async function saveOapiSmartworkHrmMasterEx(request: SaveOapiSmartworkHrmMasterRequest, runtime: Util.RuntimeOptions): SaveOapiSmartworkHrmMasterResponse {
  Util.validateModel(request);
  var appParams = Util.stringifyMapValue(Util.toMap(request.params));
  return doRequestOApi('POST', '/topapi/smartwork/hrm/master/save', request.headers, appParams, runtime);
}

model GetuserlistIsvCallParams = {
  start?: int64(description='游标开始值', name='start'),
  offset?: int64(description='批量值', name='offset'),
}

model GetuserlistIsvCallRequest = {
  headers?: map[string]string,
  params?:GetuserlistIsvCallParams,
}

model GetuserlistIsvCallResponseBody = {
  result?: {
    result?: {
      hasMore?: boolean(description='hasMore', name='has_more'),
      staffIdList?: [ string ](description='staffIdList', name='staff_id_list'),
    }(description='result', name='result'),
    dingOpenErrcode?: int64(description='dingOpenErrcode', name='ding_open_errcode'),
    errorMsg?: string(description='errorMsg', name='error_msg'),
    success?: boolean(description='success', name='success'),
  }(description='返回结果', name='result'),
}

model GetuserlistIsvCallResponse = {
  headers: map[string]string,
  body: GetuserlistIsvCallResponseBody,
}

/**
 * Description: 删除ISV套件对应的企业下的可以主动调用接口发起免费电话的员工
 */
async function getuserlistIsvCall(request: GetuserlistIsvCallRequest): GetuserlistIsvCallResponse {
  var runtime = new Util.RuntimeOptions{};
  return getuserlistIsvCallEx(request, runtime);
}

/**
 * Description: 删除ISV套件对应的企业下的可以主动调用接口发起免费电话的员工
 */
async function getuserlistIsvCallEx(request: GetuserlistIsvCallRequest, runtime: Util.RuntimeOptions): GetuserlistIsvCallResponse {
  Util.validateModel(request);
  var appParams = Util.stringifyMapValue(Util.toMap(request.params));
  return doRequest('dingtalk.isv.call.getuserlist', 'POST', '/router/rest', request.headers, appParams, runtime);
}

model CalluserIsvCallParams = {
  staffId: string(description='isv套件所属企业下的员工userid', name='staff_id'),
  authedCorpId: string(description='授权isv套件企业的corpid', name='authed_corp_id'),
  authedStaffId: string(description='授权isv套件企业的员工userid', name='authed_staff_id'),
}

model CalluserIsvCallRequest = {
  headers?: map[string]string,
  params:CalluserIsvCallParams,
}

model CalluserIsvCallResponseBody = {
  result?: {
    dingOpenErrcode?: int64(description='dingOpenErrcode', name='ding_open_errcode'),
    errorMsg?: string(description='errorMsg', name='error_msg'),
    success?: boolean(description='success', name='success'),
  }(description='result', name='result'),
}

model CalluserIsvCallResponse = {
  headers: map[string]string,
  body: CalluserIsvCallResponseBody,
}

/**
 * Description: 主叫方发起免费电话给授权企业下的授权范围内的人员
 */
async function calluserIsvCall(request: CalluserIsvCallRequest): CalluserIsvCallResponse {
  var runtime = new Util.RuntimeOptions{};
  return calluserIsvCallEx(request, runtime);
}

/**
 * Description: 主叫方发起免费电话给授权企业下的授权范围内的人员
 */
async function calluserIsvCallEx(request: CalluserIsvCallRequest, runtime: Util.RuntimeOptions): CalluserIsvCallResponse {
  Util.validateModel(request);
  var appParams = Util.stringifyMapValue(Util.toMap(request.params));
  return doRequest('dingtalk.isv.call.calluser', 'POST', '/router/rest', request.headers, appParams, runtime);
}

model SetuserlistIsvCallParams = {
  staffIdList: [ string ](description='套件所所属企业免费电话主叫人员工号列表', maxItems=20, name='staff_id_list'),
}

model SetuserlistIsvCallRequest = {
  headers?: map[string]string,
  params:SetuserlistIsvCallParams,
}

model SetuserlistIsvCallResponseBody = {
  result?: {
    dingOpenErrcode?: int64(description='dingOpenErrcode', name='ding_open_errcode'),
    errorMsg?: string(description='errorMsg', name='error_msg'),
    success?: boolean(description='success', name='success'),
  }(description='接口返回值', name='result'),
}

model SetuserlistIsvCallResponse = {
  headers: map[string]string,
  body: SetuserlistIsvCallResponseBody,
}

/**
 * Description: 设置isv发起免费电话的主叫白名单
 */
async function setuserlistIsvCall(request: SetuserlistIsvCallRequest): SetuserlistIsvCallResponse {
  var runtime = new Util.RuntimeOptions{};
  return setuserlistIsvCallEx(request, runtime);
}

/**
 * Description: 设置isv发起免费电话的主叫白名单
 */
async function setuserlistIsvCallEx(request: SetuserlistIsvCallRequest, runtime: Util.RuntimeOptions): SetuserlistIsvCallResponse {
  Util.validateModel(request);
  var appParams = Util.stringifyMapValue(Util.toMap(request.params));
  return doRequest('dingtalk.isv.call.setuserlist', 'POST', '/router/rest', request.headers, appParams, runtime);
}

model RemoveuserlistIsvCallParams = {
  staffIdList: [ string ](description='要删除的员工userid列表', maxItems=20, name='staff_id_list'),
}

model RemoveuserlistIsvCallRequest = {
  headers?: map[string]string,
  params:RemoveuserlistIsvCallParams,
}

model RemoveuserlistIsvCallResponseBody = {
  result?: {
    dingOpenErrcode?: int64(description='dingOpenErrcode', name='ding_open_errcode'),
    errorMsg?: string(description='errorMsg', name='error_msg'),
    success?: boolean(description='success', name='success'),
  }(description='result', name='result'),
}

model RemoveuserlistIsvCallResponse = {
  headers: map[string]string,
  body: RemoveuserlistIsvCallResponseBody,
}

/**
 * Description: 删除isv免费电话员工名单
 */
async function removeuserlistIsvCall(request: RemoveuserlistIsvCallRequest): RemoveuserlistIsvCallResponse {
  var runtime = new Util.RuntimeOptions{};
  return removeuserlistIsvCallEx(request, runtime);
}

/**
 * Description: 删除isv免费电话员工名单
 */
async function removeuserlistIsvCallEx(request: RemoveuserlistIsvCallRequest, runtime: Util.RuntimeOptions): RemoveuserlistIsvCallResponse {
  Util.validateModel(request);
  var appParams = Util.stringifyMapValue(Util.toMap(request.params));
  return doRequest('dingtalk.isv.call.removeuserlist', 'POST', '/router/rest', request.headers, appParams, runtime);
}

model TranslateOapiPlatformParams = {
  query: string(description='翻译源文字符串', name='query'),
  sourceLanguage: string(description='翻译源语言类型', name='source_language'),
  targetLanguage: string(description='翻译目标语言类型', name='target_language'),
}

model TranslateOapiPlatformRequest = {
  headers?: map[string]string,
  params:TranslateOapiPlatformParams,
}

model TranslateOapiPlatformResponseBody = {
  result?: string(description='翻译结果字符串', name='result'),
  errcode?: int64(description='成功为0', name='errcode'),
  errmsg?: string(description='成功', name='errmsg'),
}

model TranslateOapiPlatformResponse = {
  headers: map[string]string,
  body: TranslateOapiPlatformResponseBody,
}

/**
 * Description: 输入一段文本，得到翻译指定语言后的译文，支持多种语言的互译
 */
async function translateOapiPlatform(request: TranslateOapiPlatformRequest): TranslateOapiPlatformResponse {
  var runtime = new Util.RuntimeOptions{};
  return translateOapiPlatformEx(request, runtime);
}

/**
 * Description: 输入一段文本，得到翻译指定语言后的译文，支持多种语言的互译
 */
async function translateOapiPlatformEx(request: TranslateOapiPlatformRequest, runtime: Util.RuntimeOptions): TranslateOapiPlatformResponse {
  Util.validateModel(request);
  var appParams = Util.stringifyMapValue(Util.toMap(request.params));
  return doRequestOApi('POST', '/topapi/platform/translate', request.headers, appParams, runtime);
}

model SyncOapiSmartdeviceDevicememberParams = {
  deviceId: int64(description='设备id', name='device_id'),
  addUserids?: [ string ](description='需新增的userIds（与del_userids必填其一）', maxItems=200, name='add_userids'),
  delUserids?: [ string ](description='需移除的userIds（与add_userids必填其一）', maxItems=200, name='del_userids'),
}

model SyncOapiSmartdeviceDevicememberRequest = {
  headers?: map[string]string,
  params:SyncOapiSmartdeviceDevicememberParams,
}

model SyncOapiSmartdeviceDevicememberResponseBody = {
  errcode?: int64(description='错误码', name='errcode'),
  errmsg?: string(description='错误提示', name='errmsg'),
  result?: [ string ](description='无效的userId列表', name='result'),
}

model SyncOapiSmartdeviceDevicememberResponse = {
  headers: map[string]string,
  body: SyncOapiSmartdeviceDevicememberResponseBody,
}

/**
 * Description: 将设备的成员userIds同步给钉钉
 */
async function syncOapiSmartdeviceDevicemember(request: SyncOapiSmartdeviceDevicememberRequest): SyncOapiSmartdeviceDevicememberResponse {
  var runtime = new Util.RuntimeOptions{};
  return syncOapiSmartdeviceDevicememberEx(request, runtime);
}

/**
 * Description: 将设备的成员userIds同步给钉钉
 */
async function syncOapiSmartdeviceDevicememberEx(request: SyncOapiSmartdeviceDevicememberRequest, runtime: Util.RuntimeOptions): SyncOapiSmartdeviceDevicememberResponse {
  Util.validateModel(request);
  var appParams = Util.stringifyMapValue(Util.toMap(request.params));
  return doRequestOApi('POST', '/topapi/smartdevice/devicemember/sync', request.headers, appParams, runtime);
}

model ListOapiSmartdeviceDevicememberParams = {
  deviceId: int64(description='设备id', name='device_id'),
  cursor: int64(description='查询游标，起始传0，后续传返回值中的cursor字段', name='cursor'),
  size: int64(description='分页大小', maximum=500, minimum=1, name='size'),
}

model ListOapiSmartdeviceDevicememberRequest = {
  headers?: map[string]string,
  params:ListOapiSmartdeviceDevicememberParams,
}

model ListOapiSmartdeviceDevicememberResponseBody = {
  errcode?: int64(description='错误码', name='errcode'),
  errmsg?: string(description='错误提示', name='errmsg'),
  result?: {
    items?: [ string ](description='当前页所对应的userIds', name='items'),
    cursor?: int64(description='当 has_more 为true时，下次查询需要传入的游标', name='cursor'),
    hasMore?: boolean(description='是否还有数据', name='has_more'),
  }(description='查询结果', name='result'),
}

model ListOapiSmartdeviceDevicememberResponse = {
  headers: map[string]string,
  body: ListOapiSmartdeviceDevicememberResponseBody,
}

/**
 * Description: 查询通过 dingtalk.oapi.smartdevice.devicemember.sync 接口同步的成员列表
 */
async function listOapiSmartdeviceDevicemember(request: ListOapiSmartdeviceDevicememberRequest): ListOapiSmartdeviceDevicememberResponse {
  var runtime = new Util.RuntimeOptions{};
  return listOapiSmartdeviceDevicememberEx(request, runtime);
}

/**
 * Description: 查询通过 dingtalk.oapi.smartdevice.devicemember.sync 接口同步的成员列表
 */
async function listOapiSmartdeviceDevicememberEx(request: ListOapiSmartdeviceDevicememberRequest, runtime: Util.RuntimeOptions): ListOapiSmartdeviceDevicememberResponse {
  Util.validateModel(request);
  var appParams = Util.stringifyMapValue(Util.toMap(request.params));
  return doRequestOApi('POST', '/topapi/smartdevice/devicemember/list', request.headers, appParams, runtime);
}

model RemoveallOapiSmartdeviceDevicememberParams = {
  deviceId: int64(description='设备id', name='device_id'),
}

model RemoveallOapiSmartdeviceDevicememberRequest = {
  headers?: map[string]string,
  params:RemoveallOapiSmartdeviceDevicememberParams,
}

model RemoveallOapiSmartdeviceDevicememberResponseBody = {
  errcode?: int64(description='错误码', name='errcode'),
  errmsg?: string(description='错误提示', name='errmsg'),
  result?: boolean(description='本次操作结果', name='result'),
}

model RemoveallOapiSmartdeviceDevicememberResponse = {
  headers: map[string]string,
  body: RemoveallOapiSmartdeviceDevicememberResponseBody,
}

/**
 * Description: 移除通过 dingtalk.oapi.smartdevice.devicemember.sync 接口同步的所有数据。
 */
async function removeallOapiSmartdeviceDevicemember(request: RemoveallOapiSmartdeviceDevicememberRequest): RemoveallOapiSmartdeviceDevicememberResponse {
  var runtime = new Util.RuntimeOptions{};
  return removeallOapiSmartdeviceDevicememberEx(request, runtime);
}

/**
 * Description: 移除通过 dingtalk.oapi.smartdevice.devicemember.sync 接口同步的所有数据。
 */
async function removeallOapiSmartdeviceDevicememberEx(request: RemoveallOapiSmartdeviceDevicememberRequest, runtime: Util.RuntimeOptions): RemoveallOapiSmartdeviceDevicememberResponse {
  Util.validateModel(request);
  var appParams = Util.stringifyMapValue(Util.toMap(request.params));
  return doRequestOApi('POST', '/topapi/smartdevice/devicemember/removeall', request.headers, appParams, runtime);
}

model AddvisitorOapiSmartdeviceVisitorParams = {
  visitorVo: {
    appointedEndtime: int64(description='预约开始时间', name='appointed_endtime'),
    appointedStarttime: int64(description='预约结束时间', name='appointed_starttime'),
    extraInfo?: string(description='扩展信息', name='extra_info'),
    mediaId?: string(description='可识别照片ID', name='media_id'),
    mobile?: string(description='访客手机号', name='mobile'),
    notifyUserList: [ string ](description='通知用户员工ID列表', maxItems=20, name='notify_user_list'),
    recognizeEndtime?: int64(description='识别开始时间', name='recognize_endtime'),
    recognizeStarttime?: int64(description='识别结束时间', name='recognize_starttime'),
    userName: string(description='访客姓名', name='user_name'),
    userid?: string(description='访客外部联系人userid', name='userid'),
    userType: string(description='来访目的', name='user_type'),
  }(description='访客预约模型', name='visitor_vo'),
}

model AddvisitorOapiSmartdeviceVisitorRequest = {
  headers?: map[string]string,
  params:AddvisitorOapiSmartdeviceVisitorParams,
}

model AddvisitorOapiSmartdeviceVisitorResponseBody = {
  errcode?: int64(description='dingOpenErrcode', name='errcode'),
  errmsg?: string(description='errorMsg', name='errmsg'),
  result?: string(description='预约编号', name='result'),
}

model AddvisitorOapiSmartdeviceVisitorResponse = {
  headers: map[string]string,
  body: AddvisitorOapiSmartdeviceVisitorResponseBody,
}

/**
 * Description: ISV向钉钉智能硬件添加授权企业的访客邀约记录，以实现与智能识别设备的打通流程
 */
async function addvisitorOapiSmartdeviceVisitor(request: AddvisitorOapiSmartdeviceVisitorRequest): AddvisitorOapiSmartdeviceVisitorResponse {
  var runtime = new Util.RuntimeOptions{};
  return addvisitorOapiSmartdeviceVisitorEx(request, runtime);
}

/**
 * Description: ISV向钉钉智能硬件添加授权企业的访客邀约记录，以实现与智能识别设备的打通流程
 */
async function addvisitorOapiSmartdeviceVisitorEx(request: AddvisitorOapiSmartdeviceVisitorRequest, runtime: Util.RuntimeOptions): AddvisitorOapiSmartdeviceVisitorResponse {
  Util.validateModel(request);
  var appParams = Util.stringifyMapValue(Util.toMap(request.params));
  return doRequestOApi('POST', '/topapi/smartdevice/visitor/addvisitor', request.headers, appParams, runtime);
}

model EditvisitorOapiSmartdeviceVisitorParams = {
  reservationId: string(description='预约编号', name='reservation_id'),
  visitorVo: {
    appointedEndtime: int64(description='预约开始时间', name='appointed_endtime'),
    appointedStarttime: int64(description='预约结束时间', name='appointed_starttime'),
    extraInfo?: string(description='扩展信息', name='extra_info'),
    mediaId?: string(description='可识别照片', name='media_id'),
    mobile?: string(description='访客手机号', name='mobile'),
    notifyUserList: [ string ](description='通知用户ID', maxItems=20, name='notify_user_list'),
    recognizeEndtime?: int64(description='识别开始时间', name='recognize_endtime'),
    recognizeStarttime?: int64(description='识别结束时间', name='recognize_starttime'),
    userName: string(description='访客姓名', name='user_name'),
    userid?: string(description='访客外部联系人ID', name='userid'),
    userType: string(description='来访目的', name='user_type'),
  }(description='预约数据', name='visitor_vo'),
}

model EditvisitorOapiSmartdeviceVisitorRequest = {
  headers?: map[string]string,
  params:EditvisitorOapiSmartdeviceVisitorParams,
}

model EditvisitorOapiSmartdeviceVisitorResponseBody = {
  errcode?: int64(description='dingOpenErrcode', name='errcode'),
  errmsg?: string(description='errorMsg', name='errmsg'),
  result?: boolean(description='result', name='result'),
}

model EditvisitorOapiSmartdeviceVisitorResponse = {
  headers: map[string]string,
  body: EditvisitorOapiSmartdeviceVisitorResponseBody,
}

/**
 * Description: ISV向钉钉智能硬件同步授权企业的访问预约记录
 */
async function editvisitorOapiSmartdeviceVisitor(request: EditvisitorOapiSmartdeviceVisitorRequest): EditvisitorOapiSmartdeviceVisitorResponse {
  var runtime = new Util.RuntimeOptions{};
  return editvisitorOapiSmartdeviceVisitorEx(request, runtime);
}

/**
 * Description: ISV向钉钉智能硬件同步授权企业的访问预约记录
 */
async function editvisitorOapiSmartdeviceVisitorEx(request: EditvisitorOapiSmartdeviceVisitorRequest, runtime: Util.RuntimeOptions): EditvisitorOapiSmartdeviceVisitorResponse {
  Util.validateModel(request);
  var appParams = Util.stringifyMapValue(Util.toMap(request.params));
  return doRequestOApi('POST', '/topapi/smartdevice/visitor/editvisitor', request.headers, appParams, runtime);
}

model GetleavetimebynamesOapiAttendanceParams = {
  userid?: string(description='用户的userId', name='userid'),
  leaveNames?: [ string ](description='假期名称', maxItems=20, name='leave_names'),
  fromDate?: string(description='开始时间', pattern='\\\\d{4}[-]\\\\d{1,2}[-]\\\\d{1,2}[T]\\\\d{2}:\\\\d{2}:\\\\d{2}[Z]', name='from_date'),
  toDate?: string(description='结束时间', pattern='\\\\d{4}[-]\\\\d{1,2}[-]\\\\d{1,2}[T]\\\\d{2}:\\\\d{2}:\\\\d{2}[Z]', name='to_date'),
}

model GetleavetimebynamesOapiAttendanceRequest = {
  headers?: map[string]string,
  params?:GetleavetimebynamesOapiAttendanceParams,
}

model GetleavetimebynamesOapiAttendanceResponseBody = {
  result?: {
    columns?: [
      {
        columnvo?: {
          name?: string(description='name', name='name'),
          subType?: int64(description='子类型', name='sub_type'),
          extension?: string(description='扩展字段', name='extension'),
          status?: int64(description='列状态', name='status'),
          expressionId?: int64(description='表达式id', name='expression_id'),
          alias?: string(description='别名', name='alias'),
          type?: int64(description='列类型', name='type'),
          id?: int64(description='列id', name='id'),
        }(description='列信息', name='columnvo'),
        columnvals?: [
          {
            value?: string(description='列值', name='value'),
            date?: string(description='时间', pattern='\\\\d{4}[-]\\\\d{1,2}[-]\\\\d{1,2}[T]\\\\d{2}:\\\\d{2}:\\\\d{2}[Z]', name='date'),
          }
        ](description='列值数据', name='columnvals'),
      }
    ](description='列信息与列值数据', name='columns'),
  }(description='result', name='result'),
  errcode?: int64(description='dingOpenErrcode', name='errcode'),
  errmsg?: string(description='errorMsg', name='errmsg'),
}

model GetleavetimebynamesOapiAttendanceResponse = {
  headers: map[string]string,
  body: GetleavetimebynamesOapiAttendanceResponseBody,
}

/**
 * Description: 该接口用于根据字段名和用户id获取钉钉智能考勤报表的假期数据，其中包含了一定时间段内报表假期列的所有数据，由于假期列是一个动态列，因此需要根据假期名称获取数据，可以供指定的ISV进行使用
 */
async function getleavetimebynamesOapiAttendance(request: GetleavetimebynamesOapiAttendanceRequest): GetleavetimebynamesOapiAttendanceResponse {
  var runtime = new Util.RuntimeOptions{};
  return getleavetimebynamesOapiAttendanceEx(request, runtime);
}

/**
 * Description: 该接口用于根据字段名和用户id获取钉钉智能考勤报表的假期数据，其中包含了一定时间段内报表假期列的所有数据，由于假期列是一个动态列，因此需要根据假期名称获取数据，可以供指定的ISV进行使用
 */
async function getleavetimebynamesOapiAttendanceEx(request: GetleavetimebynamesOapiAttendanceRequest, runtime: Util.RuntimeOptions): GetleavetimebynamesOapiAttendanceResponse {
  Util.validateModel(request);
  var appParams = Util.stringifyMapValue(Util.toMap(request.params));
  return doRequestOApi('POST', '/topapi/attendance/getleavetimebynames', request.headers, appParams, runtime);
}

model GetOapiIndustryOrganizationRequest = {
  headers?: map[string]string,
}

model GetOapiIndustryOrganizationResponseBody = {
  result?: {
    regionLocation?: string(description='区域信息', name='region_location'),
    regionId?: string(description='区域id信息', name='region_id'),
    regionType?: string(description='区域类型，区/镇/村', name='region_type'),
  }(description='result', name='result'),
  success?: boolean(description='成功', name='success'),
  errcode?: int64(description='dingOpenErrcode', name='errcode'),
  errmsg?: string(description='errorMsg', name='errmsg'),
}

model GetOapiIndustryOrganizationResponse = {
  headers: map[string]string,
  body: GetOapiIndustryOrganizationResponseBody,
}

/**
 * Description: 获取行业通讯录的企业信息
 */
async function getOapiIndustryOrganization(request: GetOapiIndustryOrganizationRequest): GetOapiIndustryOrganizationResponse {
  var runtime = new Util.RuntimeOptions{};
  return getOapiIndustryOrganizationEx(request, runtime);
}

/**
 * Description: 获取行业通讯录的企业信息
 */
async function getOapiIndustryOrganizationEx(request: GetOapiIndustryOrganizationRequest, runtime: Util.RuntimeOptions): GetOapiIndustryOrganizationResponse {
  Util.validateModel(request);
  var appParams : map[string]string = {};
  return doRequestOApi('POST', '/topapi/industry/organization/get', request.headers, appParams, runtime);
}

model GetOapiChatQrcodeParams = {
  chatid: string(description='会话id', name='chatid'),
  userid: string(description='分享二维码用户id', name='userid'),
}

model GetOapiChatQrcodeRequest = {
  headers?: map[string]string,
  params:GetOapiChatQrcodeParams,
}

model GetOapiChatQrcodeResponseBody = {
  result?: string(description='返回入群的链接', name='result'),
  success?: boolean(description='是否调用成功', name='success'),
  errcode?: int64(description='错误码', name='errcode'),
  errmsg?: string(description='错误信息', name='errmsg'),
}

model GetOapiChatQrcodeResponse = {
  headers: map[string]string,
  body: GetOapiChatQrcodeResponseBody,
}

/**
 * Description: 获取群入群二维码邀请链接
 */
async function getOapiChatQrcode(request: GetOapiChatQrcodeRequest): GetOapiChatQrcodeResponse {
  var runtime = new Util.RuntimeOptions{};
  return getOapiChatQrcodeEx(request, runtime);
}

/**
 * Description: 获取群入群二维码邀请链接
 */
async function getOapiChatQrcodeEx(request: GetOapiChatQrcodeRequest, runtime: Util.RuntimeOptions): GetOapiChatQrcodeResponse {
  Util.validateModel(request);
  var appParams = Util.stringifyMapValue(Util.toMap(request.params));
  return doRequestOApi('POST', '/topapi/chat/qrcode/get', request.headers, appParams, runtime);
}

model GrouprobotOapiBipaasNotifyParams = {
  robotNotify?: {
    messageBody?: string(description='对应消息格式内容', name='message_body'),
    antcloudTenantId?: string(description='金融云租户 ID', name='antcloud_tenant_id'),
    robotUrl?: string(description='钉钉群机器人地址', name='robot_url'),
    messageType?: string(description='消息格式', name='message_type'),
    antcloudOperatorIds?: [ string ](description='需要@到的金融云租户下操作员列表', maxItems=20, name='antcloud_operator_ids'),
  }(description='群机器人通知请求', name='robot_notify'),
}

model GrouprobotOapiBipaasNotifyRequest = {
  headers?: map[string]string,
  params?:GrouprobotOapiBipaasNotifyParams,
}

model GrouprobotOapiBipaasNotifyResponseBody = {
  result?: boolean(description='通知是否成功', name='result'),
  errcode?: int64(description='错误码', name='errcode'),
  errmsg?: string(description='错误提示', name='errmsg'),
  success?: boolean(description='是否成功', name='success'),
}

model GrouprobotOapiBipaasNotifyResponse = {
  headers: map[string]string,
  body: GrouprobotOapiBipaasNotifyResponseBody,
}

/**
 * Description: 给蚂蚁 DeepInsight 调用机器人 AT 人的专属接口，基于开放平台自定义群机器人接口二次封装，DeepInisght 传入蚂蚁 DI 账号信息使用@具体人的能力
 */
async function grouprobotOapiBipaasNotify(request: GrouprobotOapiBipaasNotifyRequest): GrouprobotOapiBipaasNotifyResponse {
  var runtime = new Util.RuntimeOptions{};
  return grouprobotOapiBipaasNotifyEx(request, runtime);
}

/**
 * Description: 给蚂蚁 DeepInsight 调用机器人 AT 人的专属接口，基于开放平台自定义群机器人接口二次封装，DeepInisght 传入蚂蚁 DI 账号信息使用@具体人的能力
 */
async function grouprobotOapiBipaasNotifyEx(request: GrouprobotOapiBipaasNotifyRequest, runtime: Util.RuntimeOptions): GrouprobotOapiBipaasNotifyResponse {
  Util.validateModel(request);
  var appParams = Util.stringifyMapValue(Util.toMap(request.params));
  return doRequestOApi('POST', '/topapi/bipaas/notify/grouprobot', request.headers, appParams, runtime);
}

model AddOapiSmartappFormInstanceParams = {
  operatorUserid: string(description='操作人ID', name='operator_userid'),
  appUuid: string(description='表单应用ID', name='app_uuid'),
  formCode: string(description='表单ID', name='form_code'),
  dataList?: [
    {
      participantUseridList?: [ string ](description='协同人ID列表', maxItems=100, name='participant_userid_list'),
      bizId: string(description='业务主键', name='biz_id'),
      formComponentValues?: [
        {
          name: string(description='组件字段名', name='name'),
          extendValue?: string(description='扩展值', name='extend_value'),
          value: string(description='组件值', name='value'),
        }
      ](description='组件值列表', maxItems=100, name='form_component_values'),
      creatorUserid?: string(description='数据创建人ID', name='creator_userid'),
      chargerUseridList?: [ string ](description='数据负责人ID列表', maxItems=100, name='charger_userid_list'),
    }
  ](description='插入数据列表', maxItems=50, name='data_list'),
}

model AddOapiSmartappFormInstanceRequest = {
  headers?: map[string]string,
  params:AddOapiSmartappFormInstanceParams,
}

model AddOapiSmartappFormInstanceResponseBody = {
  result?: [
    {
      bizId?: string(description='发生错误的业务主键', name='biz_id'),
      errorMsg?: string(description='该数据导入的错误信息', name='error_msg'),
    }
  ](description='导入错误信息', name='result'),
  success?: boolean(description='执行结果', name='success'),
  errcode?: int64(description='错误码', name='errcode'),
  errmsg?: string(description='错误信息', name='errmsg'),
}

model AddOapiSmartappFormInstanceResponse = {
  headers: map[string]string,
  body: AddOapiSmartappFormInstanceResponseBody,
}

/**
 * Description: 调用接口写入数据到企业下某办公应用表单
 */
async function addOapiSmartappFormInstance(request: AddOapiSmartappFormInstanceRequest): AddOapiSmartappFormInstanceResponse {
  var runtime = new Util.RuntimeOptions{};
  return addOapiSmartappFormInstanceEx(request, runtime);
}

/**
 * Description: 调用接口写入数据到企业下某办公应用表单
 */
async function addOapiSmartappFormInstanceEx(request: AddOapiSmartappFormInstanceRequest, runtime: Util.RuntimeOptions): AddOapiSmartappFormInstanceResponse {
  Util.validateModel(request);
  var appParams = Util.stringifyMapValue(Util.toMap(request.params));
  return doRequestOApi('POST', '/topapi/smartapp/form/instance/add', request.headers, appParams, runtime);
}

model GetOapiProcessPrinterInstanceParams = {
  request: {
    instanceId: string(description='审批单实例编号', name='instance_id'),
    agentid?: int64(description='微应用agentId', name='agentid'),
    processCode: string(description='流程code', name='process_code'),
  }(description='脱敏数据请求', name='request'),
}

model GetOapiProcessPrinterInstanceRequest = {
  headers?: map[string]string,
  params:GetOapiProcessPrinterInstanceParams,
}

model GetOapiProcessPrinterInstanceResponseBody = {
  result?: string(description='脱敏实例数据', name='result'),
  success?: boolean(description='成功标识', name='success'),
  errcode?: int64(description='错误码', name='errcode'),
  errmsg?: string(description='错误信息', name='errmsg'),
}

model GetOapiProcessPrinterInstanceResponse = {
  headers: map[string]string,
  body: GetOapiProcessPrinterInstanceResponseBody,
}

/**
 * Description: isv需要审批单实例信息排查自定义打印业务的bug问题，审批方提供去敏的数据查询接口，isv每日对单个企业的单个模板每日限制调用次数。
 */
async function getOapiProcessPrinterInstance(request: GetOapiProcessPrinterInstanceRequest): GetOapiProcessPrinterInstanceResponse {
  var runtime = new Util.RuntimeOptions{};
  return getOapiProcessPrinterInstanceEx(request, runtime);
}

/**
 * Description: isv需要审批单实例信息排查自定义打印业务的bug问题，审批方提供去敏的数据查询接口，isv每日对单个企业的单个模板每日限制调用次数。
 */
async function getOapiProcessPrinterInstanceEx(request: GetOapiProcessPrinterInstanceRequest, runtime: Util.RuntimeOptions): GetOapiProcessPrinterInstanceResponse {
  Util.validateModel(request);
  var appParams = Util.stringifyMapValue(Util.toMap(request.params));
  return doRequestOApi('POST', '/topapi/process/printer/instance/get', request.headers, appParams, runtime);
}

model FinishOapiRhinoMosExecClothesParams = {
  entityIds: [ int64 ](description='衣服ID列表', maxItems=500, name='entity_ids'),
  tenantId: string(description='租户ID', name='tenant_id'),
  userid?: string(description='业务参数[这里先预留],这里是用户ID,比如钉钉用户ID', name='userid'),
  orderId?: int64(description='订单ID', name='order_id'),
}

model FinishOapiRhinoMosExecClothesRequest = {
  headers?: map[string]string,
  params:FinishOapiRhinoMosExecClothesParams,
}

model FinishOapiRhinoMosExecClothesResponseBody = {
  errmsg?: string(description='错误信息', name='errmsg'),
  model?: boolean(description='执行结果', name='model'),
  success?: boolean(description='是否成功', name='success'),
  errcode?: int64(description='错误码', name='errcode'),
}

model FinishOapiRhinoMosExecClothesResponse = {
  headers: map[string]string,
  body: FinishOapiRhinoMosExecClothesResponseBody,
}

/**
 * Description: 完成衣服
 */
async function finishOapiRhinoMosExecClothes(request: FinishOapiRhinoMosExecClothesRequest): FinishOapiRhinoMosExecClothesResponse {
  var runtime = new Util.RuntimeOptions{};
  return finishOapiRhinoMosExecClothesEx(request, runtime);
}

/**
 * Description: 完成衣服
 */
async function finishOapiRhinoMosExecClothesEx(request: FinishOapiRhinoMosExecClothesRequest, runtime: Util.RuntimeOptions): FinishOapiRhinoMosExecClothesResponse {
  Util.validateModel(request);
  var appParams = Util.stringifyMapValue(Util.toMap(request.params));
  return doRequestOApi('POST', '/topapi/rhino/mos/exec/clothes/finish', request.headers, appParams, runtime);
}

model UnfinishOapiRhinoMosExecClothesParams = {
  req?: {
    tenantId: string(description='租户id', name='tenant_id'),
    userid?: string(description='用户id', name='userid'),
    entityIds?: [ int64 ](description='实体列表', maxItems=500, name='entity_ids'),
    orderId?: int64(description='订单ID', name='order_id'),
  }(description='入参', name='req'),
}

model UnfinishOapiRhinoMosExecClothesRequest = {
  headers?: map[string]string,
  params?:UnfinishOapiRhinoMosExecClothesParams,
}

model UnfinishOapiRhinoMosExecClothesResponseBody = {
  success?: boolean(description='是否成功', name='success'),
  errcode?: int64(description='错误码', name='errcode'),
  model?: boolean(description='结果', name='model'),
  errmsg?: string(description='错误信息', name='errmsg'),
}

model UnfinishOapiRhinoMosExecClothesResponse = {
  headers: map[string]string,
  body: UnfinishOapiRhinoMosExecClothesResponseBody,
}

/**
 * Description: 取消完成衣服
 */
async function unfinishOapiRhinoMosExecClothes(request: UnfinishOapiRhinoMosExecClothesRequest): UnfinishOapiRhinoMosExecClothesResponse {
  var runtime = new Util.RuntimeOptions{};
  return unfinishOapiRhinoMosExecClothesEx(request, runtime);
}

/**
 * Description: 取消完成衣服
 */
async function unfinishOapiRhinoMosExecClothesEx(request: UnfinishOapiRhinoMosExecClothesRequest, runtime: Util.RuntimeOptions): UnfinishOapiRhinoMosExecClothesResponse {
  Util.validateModel(request);
  var appParams = Util.stringifyMapValue(Util.toMap(request.params));
  return doRequestOApi('POST', '/topapi/rhino/mos/exec/clothes/unfinish', request.headers, appParams, runtime);
}

model BindOapiRhinoMosExecTrackParams = {
  entities: [ int64 ](description='实体ID列表', maxItems=500, name='entities'),
  entityType: string(description='实体类型', name='entity_type'),
  tenantId: string(description='租户ID', name='tenant_id'),
  trackId: string(description='追踪ID', name='track_id'),
  trackType: string(description='追踪类型，吊挂或才RF', name='track_type'),
  workstationCode?: string(description='工位', name='workstation_code'),
  userid?: string(description='系统参数', name='userid'),
  orderId?: int64(description='订单ID', name='order_id'),
}

model BindOapiRhinoMosExecTrackRequest = {
  headers?: map[string]string,
  params:BindOapiRhinoMosExecTrackParams,
}

model BindOapiRhinoMosExecTrackResponseBody = {
  errmsg?: string(description='错误信息', name='errmsg'),
  model?: boolean(description='是否绑定成功', name='model'),
  success?: boolean(description='是否成功', name='success'),
  errcode?: int64(description='错误码', name='errcode'),
}

model BindOapiRhinoMosExecTrackResponse = {
  headers: map[string]string,
  body: BindOapiRhinoMosExecTrackResponseBody,
}

/**
 * Description: 绑定追踪记录
 */
async function bindOapiRhinoMosExecTrack(request: BindOapiRhinoMosExecTrackRequest): BindOapiRhinoMosExecTrackResponse {
  var runtime = new Util.RuntimeOptions{};
  return bindOapiRhinoMosExecTrackEx(request, runtime);
}

/**
 * Description: 绑定追踪记录
 */
async function bindOapiRhinoMosExecTrackEx(request: BindOapiRhinoMosExecTrackRequest, runtime: Util.RuntimeOptions): BindOapiRhinoMosExecTrackResponse {
  Util.validateModel(request);
  var appParams = Util.stringifyMapValue(Util.toMap(request.params));
  return doRequestOApi('POST', '/topapi/rhino/mos/exec/track/bind', request.headers, appParams, runtime);
}

model CountOapiRhinoMosExecClothesSizeParams = {
  req: {
    clothesStatusList: [ string ](description='衣服状态列表', maxItems=20, name='clothes_status_list'),
    orderId: int64(description='订单ID', name='order_id'),
    tenantId: string(description='租户ID', name='tenant_id'),
    userid?: string(description='预留参数', name='userid'),
  }(description='入参', name='req'),
}

model CountOapiRhinoMosExecClothesSizeRequest = {
  headers?: map[string]string,
  params:CountOapiRhinoMosExecClothesSizeParams,
}

model CountOapiRhinoMosExecClothesSizeResponseBody = {
  errcode?: int64(description='错误码', name='errcode'),
  errmsg?: string(description='错误信息', name='errmsg'),
  model?: [
    {
      count?: int64(description='1', name='count'),
      sizeCode?: string(description='1', name='size_code'),
    }
  ](description='返回结果', name='model'),
  success?: boolean(description='是否成功', name='success'),
}

model CountOapiRhinoMosExecClothesSizeResponse = {
  headers: map[string]string,
  body: CountOapiRhinoMosExecClothesSizeResponseBody,
}

/**
 * Description: 获取衣服各细码数量
 */
async function countOapiRhinoMosExecClothesSize(request: CountOapiRhinoMosExecClothesSizeRequest): CountOapiRhinoMosExecClothesSizeResponse {
  var runtime = new Util.RuntimeOptions{};
  return countOapiRhinoMosExecClothesSizeEx(request, runtime);
}

/**
 * Description: 获取衣服各细码数量
 */
async function countOapiRhinoMosExecClothesSizeEx(request: CountOapiRhinoMosExecClothesSizeRequest, runtime: Util.RuntimeOptions): CountOapiRhinoMosExecClothesSizeResponse {
  Util.validateModel(request);
  var appParams = Util.stringifyMapValue(Util.toMap(request.params));
  return doRequestOApi('POST', '/topapi/rhino/mos/exec/clothes/size/count', request.headers, appParams, runtime);
}

model UpdateorgbotCorpChatbotParams = {
  icon: string(description='头像的mediaId', name='icon'),
  name: string(description='机器人名字', name='name'),
  chatbotId: int64(description='创建时返回的机器人Id', name='chatbot_id'),
}

model UpdateorgbotCorpChatbotRequest = {
  headers?: map[string]string,
  params:UpdateorgbotCorpChatbotParams,
}

model UpdateorgbotCorpChatbotResponseBody = {
  result?: {
    dingOpenErrcode?: int64(description='dingOpenErrcode', name='ding_open_errcode'),
    errorMsg?: string(description='errorMsg', name='error_msg'),
    success?: boolean(description='success', name='success'),
  }(description='result', name='result'),
}

model UpdateorgbotCorpChatbotResponse = {
  headers: map[string]string,
  body: UpdateorgbotCorpChatbotResponseBody,
}

/**
 * Description: 小蜜isv修改机器人名字头像接口。(接口只给小蜜用，机器人应用会白名单处理)
 */
async function updateorgbotCorpChatbot(request: UpdateorgbotCorpChatbotRequest): UpdateorgbotCorpChatbotResponse {
  var runtime = new Util.RuntimeOptions{};
  return updateorgbotCorpChatbotEx(request, runtime);
}

/**
 * Description: 小蜜isv修改机器人名字头像接口。(接口只给小蜜用，机器人应用会白名单处理)
 */
async function updateorgbotCorpChatbotEx(request: UpdateorgbotCorpChatbotRequest, runtime: Util.RuntimeOptions): UpdateorgbotCorpChatbotResponse {
  Util.validateModel(request);
  var appParams = Util.stringifyMapValue(Util.toMap(request.params));
  return doRequest('dingtalk.corp.chatbot.updateorgbot', 'POST', '/router/rest', request.headers, appParams, runtime);
}

model SendOapiRobotParams = {
  msgtype: string(description='消息类型', name='msgtype'),
  text?: {
    content?: string(description='text类型', name='content'),
  }(description='text类型', name='text'),
  at?: {
    isAtAll?: boolean(description='@所有人时:true,否则为:false', name='isAtAll'),
    atMobiles?: [ string ](description='被@人的手机号', name='atMobiles'),
  }(description='被@人的手机号', name='at'),
  link?: {
    messageUrl?: string(description='点击消息跳转的URL', name='messageUrl'),
    title?: string(description='消息标题', name='title'),
    picUrl?: string(description='图片URL', name='picUrl'),
    text?: string(description='消息内容。如果太长只会部分展示', name='text'),
  }(description='消息类型，此时固定为:link', name='link'),
  markdown?: {
    text?: string(description='markdown格式的消息', name='text'),
    title?: string(description='首屏会话透出的展示内容', name='title'),
  }(description='此消息类型为固定markdown', name='markdown'),
  actionCard?: {
    hideAvatar?: string(description='0-正常发消息者头像,1-隐藏发消息者头像', name='hideAvatar'),
    btnOrientation?: string(description='0-按钮竖直排列，1-按钮横向排列', name='btnOrientation'),
    singleURL?: string(description='点击singleTitle按钮触发的URL', name='singleURL'),
    singleTitle?: string(description='单个按钮的方案。(设置此项和singleURL后btns无效。)', name='singleTitle'),
    text?: string(description='markdown格式的消息', name='text'),
    title?: string(description='首屏会话透出的展示内容', name='title'),
    btns?: [
      {
        actionURL?: string(description='按钮方案，', name='actionURL'),
        title?: string(description='点击按钮触发的URL此消息类型为固定feedCard', name='title'),
      }
    ](description='按钮的信息', maxItems=20, name='btns'),
  }(description='此消息类型为固定actionCard', name='actionCard'),
  feedCard?: {
    links?: [
      {
        picURL?: string(description='单条信息文本', name='picURL'),
        messageURL?: string(description='点击单条信息到跳转链接', name='messageURL'),
        title?: string(description='单条信息后面图片的URL', name='title'),
      }
    ](description='links', maxItems=20, name='links'),
  }(description='此消息类型为固定feedCard', name='feedCard'),
}

model SendOapiRobotRequest = {
  headers?: map[string]string,
  params:SendOapiRobotParams,
}

model SendOapiRobotResponseBody = {
  errmsg?: string(description='errmsg', name='errmsg'),
  errcode?: int64(description='errcode', name='errcode'),
}

model SendOapiRobotResponse = {
  headers: map[string]string,
  body: SendOapiRobotResponseBody,
}

/**
 * Description: 自定义机器人发送消息
 */
async function sendOapiRobot(request: SendOapiRobotRequest): SendOapiRobotResponse {
  var runtime = new Util.RuntimeOptions{};
  return sendOapiRobotEx(request, runtime);
}

/**
 * Description: 自定义机器人发送消息
 */
async function sendOapiRobotEx(request: SendOapiRobotRequest, runtime: Util.RuntimeOptions): SendOapiRobotResponse {
  Util.validateModel(request);
  var appParams = Util.stringifyMapValue(Util.toMap(request.params));
  return doRequestOApi('POST', '/robot/send', request.headers, appParams, runtime);
}

model ListorgbotCorpChatbotParams = {
  agentId: int64(description='微应用id', name='agent_id'),
  type: string(description='钉钉分配的类型', name='type'),
}

model ListorgbotCorpChatbotRequest = {
  headers?: map[string]string,
  params:ListorgbotCorpChatbotParams,
}

model ListorgbotCorpChatbotResponseBody = {
  result?: {
    resultList?: [
      {
        outgoingToken?: string(description='鉴权token', name='outgoing_token'),
        outgoingUrl?: string(description='回调的URL', name='outgoing_url'),
        description?: string(description='机器人详细描述', name='description'),
        breif?: string(description='机器人简介', name='breif'),
        icon?: string(description='机器人头像', name='icon'),
        name?: string(description='机器人名字', name='name'),
        type?: string(description='钉钉分配的type', name='type'),
        botType?: int64(description='机器人类型', name='bot_type'),
        corpId?: string(description='企业corpId', name='corp_id'),
        microappAgentId?: int64(description='微应用Id', name='microapp_agent_id'),
        chatbotId?: int64(description='机器人id', name='chatbot_id'),
      }
    ](description='result', name='result_list'),
    dingOpenErrcode?: int64(description='dingOpenErrcode', name='ding_open_errcode'),
    errorMsg?: string(description='errorMsg', name='error_msg'),
    success?: boolean(description='success', name='success'),
  }(description='result', name='result'),
}

model ListorgbotCorpChatbotResponse = {
  headers: map[string]string,
  body: ListorgbotCorpChatbotResponseBody,
}

/**
 * Description: 小蜜isv查询给企业创建的机器人接口。(接口只给小蜜用，机器人应用会白名单处理)
 */
async function listorgbotCorpChatbot(request: ListorgbotCorpChatbotRequest): ListorgbotCorpChatbotResponse {
  var runtime = new Util.RuntimeOptions{};
  return listorgbotCorpChatbotEx(request, runtime);
}

/**
 * Description: 小蜜isv查询给企业创建的机器人接口。(接口只给小蜜用，机器人应用会白名单处理)
 */
async function listorgbotCorpChatbotEx(request: ListorgbotCorpChatbotRequest, runtime: Util.RuntimeOptions): ListorgbotCorpChatbotResponse {
  Util.validateModel(request);
  var appParams = Util.stringifyMapValue(Util.toMap(request.params));
  return doRequest('dingtalk.corp.chatbot.listorgbot', 'POST', '/router/rest', request.headers, appParams, runtime);
}

model GetOapiIndustryDepartmentParams = {
  deptId: int64(description='部门ID', name='dept_id'),
}

model GetOapiIndustryDepartmentRequest = {
  headers?: map[string]string,
  params:GetOapiIndustryDepartmentParams,
}

model GetOapiIndustryDepartmentResponseBody = {
  result?: {
    feature?: string(description='部门属性', name='feature'),
    contactType?: string(description='通讯录类型，行业相关', name='contact_type'),
    deptType?: string(description='部门类型，行业相关', name='dept_type'),
    superId?: int64(description='父部门ID', name='super_id'),
    name?: string(description='部门名称', name='name'),
  }(description='result', name='result'),
  success?: boolean(description='成功', name='success'),
  errcode?: int64(description='错误码', name='errcode'),
  errmsg?: string(description='错误信息', name='errmsg'),
}

model GetOapiIndustryDepartmentResponse = {
  headers: map[string]string,
  body: GetOapiIndustryDepartmentResponseBody,
}

/**
 * Description: 行业通讯录获取部门信息接口
 */
async function getOapiIndustryDepartment(request: GetOapiIndustryDepartmentRequest): GetOapiIndustryDepartmentResponse {
  var runtime = new Util.RuntimeOptions{};
  return getOapiIndustryDepartmentEx(request, runtime);
}

/**
 * Description: 行业通讯录获取部门信息接口
 */
async function getOapiIndustryDepartmentEx(request: GetOapiIndustryDepartmentRequest, runtime: Util.RuntimeOptions): GetOapiIndustryDepartmentResponse {
  Util.validateModel(request);
  var appParams = Util.stringifyMapValue(Util.toMap(request.params));
  return doRequestOApi('POST', '/topapi/industry/department/get', request.headers, appParams, runtime);
}

model ListOapiIndustryUserParams = {
  deptId: int64(description='部门id', name='dept_id'),
  role?: string(description='标签', name='role'),
  cursor?: int64(description='游标位置', name='cursor'),
  size: int64(description='页尺寸', name='size'),
}

model ListOapiIndustryUserRequest = {
  headers?: map[string]string,
  params:ListOapiIndustryUserParams,
}

model ListOapiIndustryUserResponseBody = {
  result?: {
    hasMore?: boolean(description='是否有更多', name='has_more'),
    nextCursor?: int64(description='游标位置', name='next_cursor'),
    details?: [
      {
        feature?: string(description='员工特征', name='feature'),
        roles?: [
          {
            name?: string(description='标签名', name='name'),
            id?: int64(description='标签id', name='id'),
          }
        ](description='标签列表', name='roles'),
        name?: string(description='员工名', name='name'),
        userid?: string(description='员工id', name='userid'),
      }
    ](description='员工列表', name='details'),
  }(description='结果', name='result'),
  errcode?: int64(description='错误码', name='errcode'),
  errmsg?: string(description='错误信息', name='errmsg'),
  success?: boolean(description='是否成功', name='success'),
}

model ListOapiIndustryUserResponse = {
  headers: map[string]string,
  body: ListOapiIndustryUserResponseBody,
}

/**
 * Description: 获取部门下的人员列表信息
 */
async function listOapiIndustryUser(request: ListOapiIndustryUserRequest): ListOapiIndustryUserResponse {
  var runtime = new Util.RuntimeOptions{};
  return listOapiIndustryUserEx(request, runtime);
}

/**
 * Description: 获取部门下的人员列表信息
 */
async function listOapiIndustryUserEx(request: ListOapiIndustryUserRequest, runtime: Util.RuntimeOptions): ListOapiIndustryUserResponse {
  Util.validateModel(request);
  var appParams = Util.stringifyMapValue(Util.toMap(request.params));
  return doRequestOApi('POST', '/topapi/industry/user/list', request.headers, appParams, runtime);
}

model ListOapiIndustryDepartmentParams = {
  deptId: int64(description='部门ID', name='dept_id'),
  cursor?: int64(description='游标，不传默认1', name='cursor'),
  size: int64(description='大小', name='size'),
}

model ListOapiIndustryDepartmentRequest = {
  headers?: map[string]string,
  params:ListOapiIndustryDepartmentParams,
}

model ListOapiIndustryDepartmentResponseBody = {
  result?: {
    details?: [
      {
        feature?: string(description='部门属性信息', name='feature'),
        contactType?: string(description='传统农村类型', name='contact_type'),
        deptType?: string(description='户', name='dept_type'),
        name?: string(description='部门名称', name='name'),
        deptId?: int64(description='部门ID', name='dept_id'),
      }
    ](description='details', name='details'),
    nextCursor?: int64(description='下一个游标开始位置', name='next_cursor'),
    hasMore?: boolean(description='是否还有更多', name='has_more'),
  }(description='result', name='result'),
  success?: boolean(description='成功', name='success'),
  errcode?: int64(description='成功', name='errcode'),
  errmsg?: string(description='errorMsg', name='errmsg'),
}

model ListOapiIndustryDepartmentResponse = {
  headers: map[string]string,
  body: ListOapiIndustryDepartmentResponseBody,
}

/**
 * Description: 获取行业部门列表接口
 */
async function listOapiIndustryDepartment(request: ListOapiIndustryDepartmentRequest): ListOapiIndustryDepartmentResponse {
  var runtime = new Util.RuntimeOptions{};
  return listOapiIndustryDepartmentEx(request, runtime);
}

/**
 * Description: 获取行业部门列表接口
 */
async function listOapiIndustryDepartmentEx(request: ListOapiIndustryDepartmentRequest, runtime: Util.RuntimeOptions): ListOapiIndustryDepartmentResponse {
  Util.validateModel(request);
  var appParams = Util.stringifyMapValue(Util.toMap(request.params));
  return doRequestOApi('POST', '/topapi/industry/department/list', request.headers, appParams, runtime);
}

model GetOapiIndustryUserParams = {
  deptId: int64(description='部门id', name='dept_id'),
  userid: string(description='员工id', name='userid'),
}

model GetOapiIndustryUserRequest = {
  headers?: map[string]string,
  params:GetOapiIndustryUserParams,
}

model GetOapiIndustryUserResponseBody = {
  result?: {
    roles?: [
      {
        name?: string(description='标签名', name='name'),
        id?: int64(description='标签id', name='id'),
      }
    ](description='员工角色列表', name='roles'),
    name?: string(description='员工名字', name='name'),
    feature?: string(description='员工特征', name='feature'),
  }(description='员工信息', name='result'),
  errmsg?: string(description='错误信息', name='errmsg'),
  success?: boolean(description='是否成功', name='success'),
  errcode?: int64(description='错误码', name='errcode'),
}

model GetOapiIndustryUserResponse = {
  headers: map[string]string,
  body: GetOapiIndustryUserResponseBody,
}

/**
 * Description: 获取部门用户详情
 */
async function getOapiIndustryUser(request: GetOapiIndustryUserRequest): GetOapiIndustryUserResponse {
  var runtime = new Util.RuntimeOptions{};
  return getOapiIndustryUserEx(request, runtime);
}

/**
 * Description: 获取部门用户详情
 */
async function getOapiIndustryUserEx(request: GetOapiIndustryUserRequest, runtime: Util.RuntimeOptions): GetOapiIndustryUserResponse {
  Util.validateModel(request);
  var appParams = Util.stringifyMapValue(Util.toMap(request.params));
  return doRequestOApi('POST', '/topapi/industry/user/get', request.headers, appParams, runtime);
}

model CreateOapiDingTaskParams = {
  taskSendVO: {
    sendUserid: string(description='发送者ID', name='send_userid'),
    contentType: int64(description='任务内容类型；1-文本；目前只支持文本；', name='content_type'),
    content: string(description='任务内容', maxLength=256, name='content'),
    remindType: int64(description='提醒方式；1-应用内；目前只支持应用内；', name='remind_type'),
    remindTime?: int64(description='提醒时间（单位：毫秒），datetime转成long', name='remind_time'),
    receiverUserid: string(description='任务执行人', name='receiver_userid'),
    deadLine: int64(description='任务截止时间（单位：毫秒），datetime转成long', name='dead_line'),
    taskAheadRemindTime?: int64(description='任务截止前提醒时间', name='task_ahead_remind_time'),
    taskAheadRemindType?: int64(description='提醒类型:1-应用内', name='task_ahead_remind_type'),
    attachment?: {
      linkText?: string(description='链接摘要', name='link_text'),
      linkUrl?: string(description='链接URL', name='link_url'),
      linkPicUrl?: string(description='链接缩略图', name='link_pic_url'),
      fileId?: string(description='上传DING盘后的文件ID', name='file_id'),
      linkTitle?: string(description='链接标题', name='link_title'),
      fileName?: string(description='文件名', name='file_name'),
      type?: string(description='附件类型:img-图片,link-链接,file-文件', name='type'),
      detailType?: string(description='文件后缀, 用于展示文件对应图标', name='detail_type'),
      fileSize?: int64(description='文件大小(单位:Byte, 最大2G)', name='file_size'),
      fileSpaceId?: string(description='上传DING盘后的SpaceId', name='file_space_id'),
    }(description='附件', name='attachment'),
  }(description='任务对外接口', name='task_send_v_o'),
}

model CreateOapiDingTaskRequest = {
  headers?: map[string]string,
  params:CreateOapiDingTaskParams,
}

model CreateOapiDingTaskResponseBody = {
  errcode?: int64(description='dingOpenErrcode', name='errcode'),
  errmsg?: string(description='errorMsg', name='errmsg'),
  result?: {
    dingId?: string(description='dingId', name='ding_id'),
  }(description='result', name='result'),
}

model CreateOapiDingTaskResponse = {
  headers: map[string]string,
  body: CreateOapiDingTaskResponseBody,
}

/**
 * Description: ding任务创建。不过会有一些限制，只能发送文本任务，不能设置抄送人，只能有一个任务执行人。
 */
async function createOapiDingTask(request: CreateOapiDingTaskRequest): CreateOapiDingTaskResponse {
  var runtime = new Util.RuntimeOptions{};
  return createOapiDingTaskEx(request, runtime);
}

/**
 * Description: ding任务创建。不过会有一些限制，只能发送文本任务，不能设置抄送人，只能有一个任务执行人。
 */
async function createOapiDingTaskEx(request: CreateOapiDingTaskRequest, runtime: Util.RuntimeOptions): CreateOapiDingTaskResponse {
  Util.validateModel(request);
  var appParams = Util.stringifyMapValue(Util.toMap(request.params));
  return doRequestOApi('POST', '/topapi/ding/task/create', request.headers, appParams, runtime);
}

model StartOapiEduCourseParams = {
  courseCode: string(description='需要开始的课程编码', name='course_code'),
  opUserId: string(description='操作用户id', name='op_user_id'),
}

model StartOapiEduCourseRequest = {
  headers?: map[string]string,
  params:StartOapiEduCourseParams,
}

model StartOapiEduCourseResponseBody = {
  result?: {
    targetType?: int64(description='交互目标类型', name='target_type'),
    targetId?: string(description='交互内容id', name='target_id'),
    isReuse?: boolean(description='交互是否重用', name='is_reuse'),
  }(description='result', name='result'),
  success?: boolean(description='success', name='success'),
  errcode?: int64(description='dingOpenErrcode', name='errcode'),
  errmsg?: string(description='errorMsg', name='errmsg'),
}

model StartOapiEduCourseResponse = {
  headers: map[string]string,
  body: StartOapiEduCourseResponseBody,
}

/**
 * Description: 开始课程，一般由老师点击上课发起，进行课程交互创建并发起，例如直播上课场景会创建直播内容，返回相关信息供前端唤起直播端
 */
async function startOapiEduCourse(request: StartOapiEduCourseRequest): StartOapiEduCourseResponse {
  var runtime = new Util.RuntimeOptions{};
  return startOapiEduCourseEx(request, runtime);
}

/**
 * Description: 开始课程，一般由老师点击上课发起，进行课程交互创建并发起，例如直播上课场景会创建直播内容，返回相关信息供前端唤起直播端
 */
async function startOapiEduCourseEx(request: StartOapiEduCourseRequest, runtime: Util.RuntimeOptions): StartOapiEduCourseResponse {
  Util.validateModel(request);
  var appParams = Util.stringifyMapValue(Util.toMap(request.params));
  return doRequestOApi('POST', '/topapi/edu/course/start', request.headers, appParams, runtime);
}

model CreateOapiCalendarParams = {
  createVo?: {
    summary: string(description='主题', maxLength=5000, name='summary'),
    reminder?: {
      minutes?: int64(description='距开始时多久进行提醒(单位:分钟)', maximum=2880, name='minutes'),
      remindType?: string(description='提醒类型:app-应用内;', name='remind_type'),
    }(description='事项开始前提醒', name='reminder'),
    location?: string(description='地点', maxLength=512, name='location'),
    receiverUserids: [ string ](description='接收者工号', maxItems=600, name='receiver_userids'),
    endTime: {
      unixTimestamp: int64(description='结束的unix时间戳(单位:毫秒)', name='unix_timestamp'),
      timezone?: string(description='时区', name='timezone'),
    }(description='结束时间', name='end_time'),
    calendarType: string(description='日程类型:task-任务;meeting-会议;notification-提醒', name='calendar_type'),
    startTime: {
      unixTimestamp: int64(description='开始的unix时间戳(单位:毫秒)', name='unix_timestamp'),
      timezone?: string(description='时区', name='timezone'),
    }(description='开始时间', name='start_time'),
    source?: {
      title: string(description='日程来源', name='title'),
      url: string(description='点击日程跳转目标地址', name='url'),
    }(description='显示日程来源', name='source'),
    description?: string(description='备注', maxLength=1024, name='description'),
    creatorUserid: string(description='创建者工号', name='creator_userid'),
    uuid: string(description='请求的唯一标识, 保证请求唯一性', name='uuid'),
    bizId: string(description='业务方自己的主键', name='biz_id'),
  }(description='创建日程实体', name='create_vo'),
}

model CreateOapiCalendarRequest = {
  headers?: map[string]string,
  params?:CreateOapiCalendarParams,
}

model CreateOapiCalendarResponseBody = {
  result?: {
    dingtalkCalendarId?: string(description='dingtalkCalendarId', name='dingtalk_calendar_id'),
    invalidUserids?: [ string ](description='invalidUser', name='invalid_userids'),
  }(description='result', name='result'),
  errcode?: int64(description='dingOpenErrcode', name='errcode'),
  errmsg?: string(description='errorMsg', name='errmsg'),
}

model CreateOapiCalendarResponse = {
  headers: map[string]string,
  body: CreateOapiCalendarResponseBody,
}

/**
 * Description: 通过此接口可以把企业员工的待办事项导入到钉钉日历并在钉钉日历中展示, 支持任务, 会议,审批,普通日程等.
该接口处于内部灰度阶段, 申请使用请邮件联系:wusuan.yby@alibaba-inc.com
 */
async function createOapiCalendar(request: CreateOapiCalendarRequest): CreateOapiCalendarResponse {
  var runtime = new Util.RuntimeOptions{};
  return createOapiCalendarEx(request, runtime);
}

/**
 * Description: 通过此接口可以把企业员工的待办事项导入到钉钉日历并在钉钉日历中展示, 支持任务, 会议,审批,普通日程等.
该接口处于内部灰度阶段, 申请使用请邮件联系:wusuan.yby@alibaba-inc.com
 */
async function createOapiCalendarEx(request: CreateOapiCalendarRequest, runtime: Util.RuntimeOptions): CreateOapiCalendarResponse {
  Util.validateModel(request);
  var appParams = Util.stringifyMapValue(Util.toMap(request.params));
  return doRequestOApi('POST', '/topapi/calendar/create', request.headers, appParams, runtime);
}

model CreateOapiEduCourseParams = {
  opUserid: string(description='当前用户ID', name='op_userid'),
  teacherCorpid: string(description='老师的组织CorpId', name='teacher_corpid'),
  teacherUserid: string(description='老师的用户ID', name='teacher_userid'),
  introduce: string(description='课程介绍', maxLength=120, name='introduce'),
  bizKey: string(description='业务唯一键，用于保证课程的唯一性，防止重复创建', maxLength=64, name='biz_key'),
  name: string(description='课程名称', maxLength=64, name='name'),
  startTime?: int64(description='课程的开始时间，Unix毫秒时间戳', name='start_time'),
  endTime?: int64(description='课程的结束时间，Unix毫秒时间戳', name='end_time'),
}

model CreateOapiEduCourseRequest = {
  headers?: map[string]string,
  params:CreateOapiEduCourseParams,
}

model CreateOapiEduCourseResponseBody = {
  courseCode?: string(description='课程唯一编码', name='course_code'),
  success?: boolean(description='请求是否成功', name='success'),
  errcode?: int64(description='dingOpenErrcode', name='errcode'),
  errmsg?: string(description='errorMsg', name='errmsg'),
}

model CreateOapiEduCourseResponse = {
  headers: map[string]string,
  body: CreateOapiEduCourseResponseBody,
}

/**
 * Description: 创建课程
 */
async function createOapiEduCourse(request: CreateOapiEduCourseRequest): CreateOapiEduCourseResponse {
  var runtime = new Util.RuntimeOptions{};
  return createOapiEduCourseEx(request, runtime);
}

/**
 * Description: 创建课程
 */
async function createOapiEduCourseEx(request: CreateOapiEduCourseRequest, runtime: Util.RuntimeOptions): CreateOapiEduCourseResponse {
  Util.validateModel(request);
  var appParams = Util.stringifyMapValue(Util.toMap(request.params));
  return doRequestOApi('POST', '/topapi/edu/course/create', request.headers, appParams, runtime);
}

model CreateOapiDingParams = {
  creatorUserid: string(description='发送者工号', name='creator_userid'),
  receiverUserids: [ string ](description='接收者工号列表', maxItems=20, name='receiver_userids'),
  remindType: int64(description='提醒类型:1-应用内;2-短信', name='remind_type'),
  remindTime: int64(description='发送时间(单位:毫秒)', name='remind_time'),
  textContent: string(description='通知内容', maxLength=5000, name='text_content'),
  attachment?: {
    fileId?: string(description='上传DING盘后的文件ID', name='file_id'),
    fileSize?: int64(description='文件大小(单位:Byte, 最大2G)', maximum=2147483648, name='file_size'),
    linkPicUrl?: string(description='链接缩略图', name='link_pic_url'),
    detailType?: string(description='文件后缀, 用于展示文件对应图标', name='detail_type'),
    linkText?: string(description='链接摘要', maxLength=5000, name='link_text'),
    linkUrl?: string(description='链接URL', name='link_url'),
    fileName?: string(description='文件名', name='file_name'),
    linkTitle?: string(description='链接标题', maxLength=200, name='link_title'),
    type?: string(description='附件类型:img-图片,link-链接,file-文件', name='type'),
    fileSpaceId?: string(description='上传DING盘后的SpaceId', name='file_space_id'),
  }(description='附件内容', name='attachment'),
}

model CreateOapiDingRequest = {
  headers?: map[string]string,
  params:CreateOapiDingParams,
}

model CreateOapiDingResponseBody = {
  result?: {
    openDingId?: string(description='openDingId', name='open_ding_id'),
    invalidUsers?: [ string ](description='invalidUser', name='invalid_users'),
  }(description='返回结果', name='result'),
  errcode?: int64(description='错码码', name='errcode'),
  errmsg?: string(description='失败原因', name='errmsg'),
}

model CreateOapiDingResponse = {
  headers: map[string]string,
  body: CreateOapiDingResponseBody,
}

/**
 * Description: 通过此接口发DING通知给企业内部员工, 支持短信DING和应用内DING. 
该接口正在灰度内测中, 暂不对外开放
 */
async function createOapiDing(request: CreateOapiDingRequest): CreateOapiDingResponse {
  var runtime = new Util.RuntimeOptions{};
  return createOapiDingEx(request, runtime);
}

/**
 * Description: 通过此接口发DING通知给企业内部员工, 支持短信DING和应用内DING. 
该接口正在灰度内测中, 暂不对外开放
 */
async function createOapiDingEx(request: CreateOapiDingRequest, runtime: Util.RuntimeOptions): CreateOapiDingResponse {
  Util.validateModel(request);
  var appParams = Util.stringifyMapValue(Util.toMap(request.params));
  return doRequestOApi('POST', '/topapi/ding/create', request.headers, appParams, runtime);
}

model RemoveOapiEduCourseParticipantParams = {
  opUserid: string(description='当前用户ID', name='op_userid'),
  participantCorpid: string(description='参与方的组织CropId', name='participant_corpid'),
  courseCode: string(description='课程编码', name='course_code'),
  participantId: string(description='参与方ID。participant_type=1时，participant_id表示用户ID；participant_type=2时，participant_id表示部门ID；participant_type=3时，participant_id表示组织ID；', name='participant_id'),
  role: string(description='student：学生、guardian: 监护人、teacher：老师（注意：授课老师不支持移除）', name='role'),
  participantType: int64(description='1：用户、2：部门（对应家校通讯录中的班级、年级。详情请参考https://ding-doc.dingtalk.com/doc#/serverapi3/gga05a/z3y0h）、3：组织', name='participant_type'),
}

model RemoveOapiEduCourseParticipantRequest = {
  headers?: map[string]string,
  params:RemoveOapiEduCourseParticipantParams,
}

model RemoveOapiEduCourseParticipantResponseBody = {
  result?: boolean(description='操作是否成功', name='result'),
  success?: boolean(description='请求是否成功', name='success'),
  errcode?: int64(description='dingOpenErrcode', name='errcode'),
  errmsg?: string(description='errorMsg', name='errmsg'),
}

model RemoveOapiEduCourseParticipantResponse = {
  headers: map[string]string,
  body: RemoveOapiEduCourseParticipantResponseBody,
}

/**
 * Description: 移除课程参与方
 */
async function removeOapiEduCourseParticipant(request: RemoveOapiEduCourseParticipantRequest): RemoveOapiEduCourseParticipantResponse {
  var runtime = new Util.RuntimeOptions{};
  return removeOapiEduCourseParticipantEx(request, runtime);
}

/**
 * Description: 移除课程参与方
 */
async function removeOapiEduCourseParticipantEx(request: RemoveOapiEduCourseParticipantRequest, runtime: Util.RuntimeOptions): RemoveOapiEduCourseParticipantResponse {
  Util.validateModel(request);
  var appParams = Util.stringifyMapValue(Util.toMap(request.params));
  return doRequestOApi('POST', '/topapi/edu/course/participant/remove', request.headers, appParams, runtime);
}

model AddOapiEduCourseParticipantParams = {
  opUserid: string(description='当前用户ID', name='op_userid'),
  participantCorpid: string(description='参与方的组织CropId', name='participant_corpid'),
  courseCode: string(description='课程编码', name='course_code'),
  participantId: string(description='参与方ID。participant_type=1时，participant_id表示用户ID；participant_type=2时，participant_id表示部门ID；participant_type=3时，participant_id表示组织ID；', name='participant_id'),
  role: string(description='参与方角色。student：学生、guardian: 监护人、teacher：老师（注意：授课老师只支持通过课程创建和修改接口，进行添加和修改）', name='role'),
  participantType: int64(description='参与方类型。1：用户、2：部门（对应家校通讯录中的班级、年级。详情请参考https://ding-doc.dingtalk.com/doc#/serverapi3/gga05a/z3y0h）、3：组织', name='participant_type'),
}

model AddOapiEduCourseParticipantRequest = {
  headers?: map[string]string,
  params:AddOapiEduCourseParticipantParams,
}

model AddOapiEduCourseParticipantResponseBody = {
  result?: boolean(description='操作是否成功', name='result'),
  success?: boolean(description='请求是否成功', name='success'),
  errcode?: int64(description='dingOpenErrcode', name='errcode'),
  errmsg?: string(description='errorMsg', name='errmsg'),
}

model AddOapiEduCourseParticipantResponse = {
  headers: map[string]string,
  body: AddOapiEduCourseParticipantResponseBody,
}

/**
 * Description: 添加课程参与方
 */
async function addOapiEduCourseParticipant(request: AddOapiEduCourseParticipantRequest): AddOapiEduCourseParticipantResponse {
  var runtime = new Util.RuntimeOptions{};
  return addOapiEduCourseParticipantEx(request, runtime);
}

/**
 * Description: 添加课程参与方
 */
async function addOapiEduCourseParticipantEx(request: AddOapiEduCourseParticipantRequest, runtime: Util.RuntimeOptions): AddOapiEduCourseParticipantResponse {
  Util.validateModel(request);
  var appParams = Util.stringifyMapValue(Util.toMap(request.params));
  return doRequestOApi('POST', '/topapi/edu/course/participant/add', request.headers, appParams, runtime);
}

model GetAttendUpdateDataOapiAttendanceParams = {
  userid: string(description='用户id', name='userid'),
  workDate: string(description='工作日', pattern='\\\\d{4}[-]\\\\d{1,2}[-]\\\\d{1,2}[T]\\\\d{2}:\\\\d{2}:\\\\d{2}[Z]', name='work_date'),
}

model GetAttendUpdateDataOapiAttendanceRequest = {
  headers?: map[string]string,
  params:GetAttendUpdateDataOapiAttendanceParams,
}

model GetAttendUpdateDataOapiAttendanceResponseBody = {
  errmsg?: string(description='errorMsg', name='errmsg'),
  result?: {
    workDate?: string(description='查询日期', pattern='\\\\d{4}[-]\\\\d{1,2}[-]\\\\d{1,2}[T]\\\\d{2}:\\\\d{2}:\\\\d{2}[Z]', name='work_date'),
    attendanceResultList?: {
      recordId?: int64(description='打卡流水id', name='record_id'),
      sourceType?: string(description='打卡来源', name='source_type'),
      planCheckTime?: string(description='标准打卡时间', pattern='\\\\d{4}[-]\\\\d{1,2}[-]\\\\d{1,2}[T]\\\\d{2}:\\\\d{2}:\\\\d{2}[Z]', name='plan_check_time'),
      classId?: int64(description='班次id', name='class_id'),
      locationMethod?: string(description='定位方法', name='location_method'),
      locationResult?: string(description='定位结果', name='location_result'),
      outsideRemark?: string(description='外勤备注', name='outside_remark'),
      planId?: int64(description='排班id', name='plan_id'),
      userAddress?: string(description='用户打卡地址', name='user_address'),
      groupId?: int64(description='考勤组id', name='group_id'),
      userCheckTime?: string(description='用户打卡时间', pattern='\\\\d{4}[-]\\\\d{1,2}[-]\\\\d{1,2}[T]\\\\d{2}:\\\\d{2}:\\\\d{2}[Z]', name='user_check_time'),
      procInstId?: string(description='审批单id', name='procInst_id'),
      checkType?: string(description='打卡类型 上班还是下班', name='check_type'),
      timeResult?: string(description='打卡的时间结果', name='time_result'),
    }(description='打卡结果list', name='attendance_result_list'),
    userid?: string(description='用户id', name='userid'),
    approveList?: {
      durationUnit?: string(description='审批单的单位', name='duration_unit'),
      duration?: string(description='时长', name='duration'),
      subType?: string(description='子类型', name='sub_type'),
      tagName?: string(description='审批单的tag', name='tag_name'),
      procInstId?: string(description='审批单id', name='procInst_id'),
      beginTime?: string(description='审批单开始时间', pattern='\\\\d{4}[-]\\\\d{1,2}[-]\\\\d{1,2}[T]\\\\d{2}:\\\\d{2}:\\\\d{2}[Z]', name='begin_time'),
      bizType?: int64(description='业务类型', name='biz_type'),
      endTime?: string(description='审批单结束时间', pattern='\\\\d{4}[-]\\\\d{1,2}[-]\\\\d{1,2}[T]\\\\d{2}:\\\\d{2}:\\\\d{2}[Z]', name='end_time'),
      gmtFinished?: string(description='审批单审批完成时间', pattern='\\\\d{4}[-]\\\\d{1,2}[-]\\\\d{1,2}[T]\\\\d{2}:\\\\d{2}:\\\\d{2}[Z]', name='gmt_finished'),
    }(description='审批单列表', name='approve_list'),
    checkRecordList?: {
      recordId?: int64(description='流水id', name='record_id'),
      sourceType?: string(description='打卡来源', name='source_type'),
      userAccuracy?: string(description='用户定位精度', name='user_accuracy'),
      validMatched?: boolean(description='是否匹配', name='valid_matched'),
      userCheckTime?: string(description='用户打卡时间', pattern='\\\\d{4}[-]\\\\d{1,2}[-]\\\\d{1,2}[T]\\\\d{2}:\\\\d{2}:\\\\d{2}[Z]', name='user_check_time'),
      userLongitude?: string(description='打卡维度', name='user_longitude'),
      userSsid?: string(description='wifi名称', name='user_ssid'),
      baseAccuracy?: string(description='基本定位精度', name='base_accuracy'),
      userMacAddr?: string(description='mac地址', name='user_mac_addr'),
      userLatitude?: string(description='打卡纬度', name='user_latitude'),
      baseAddress?: string(description='打卡基础地质', name='base_address'),
    }(description='打卡流水list', name='check_record_list'),
    corpId?: string(description='公司id', name='corpId'),
  }(description='result', name='result'),
  errcode?: int64(description='dingOpenErrcode', name='errcode'),
  success?: boolean(description='success', name='success'),
}

model GetAttendUpdateDataOapiAttendanceResponse = {
  headers: map[string]string,
  body: GetAttendUpdateDataOapiAttendanceResponseBody,
}

/**
 * Description: 增加这个api的目的是为了给外部企业提供实时的考勤数据变更，提升外部企业的考勤统计数据的准确度。外部企业只能通过入参获取数据，属于只读接口。
 */
async function getAttendUpdateDataOapiAttendance(request: GetAttendUpdateDataOapiAttendanceRequest): GetAttendUpdateDataOapiAttendanceResponse {
  var runtime = new Util.RuntimeOptions{};
  return getAttendUpdateDataOapiAttendanceEx(request, runtime);
}

/**
 * Description: 增加这个api的目的是为了给外部企业提供实时的考勤数据变更，提升外部企业的考勤统计数据的准确度。外部企业只能通过入参获取数据，属于只读接口。
 */
async function getAttendUpdateDataOapiAttendanceEx(request: GetAttendUpdateDataOapiAttendanceRequest, runtime: Util.RuntimeOptions): GetAttendUpdateDataOapiAttendanceResponse {
  Util.validateModel(request);
  var appParams = Util.stringifyMapValue(Util.toMap(request.params));
  return doRequestOApi('POST', '/topapi/attendance/getAttendUpdateData', request.headers, appParams, runtime);
}

model GetOapiEduCourseParams = {
  courseCode: string(description='课程编码', name='course_code'),
  opUserid: string(description='当前操作人的用户ID', name='op_userid'),
}

model GetOapiEduCourseRequest = {
  headers?: map[string]string,
  params:GetOapiEduCourseParams,
}

model GetOapiEduCourseResponseBody = {
  result?: {
    introduce?: string(description='课程介绍', name='introduce'),
    name?: string(description='课程名称', name='name'),
    code?: string(description='课程编码', name='code'),
    teacherCorpid?: string(description='老师的组织CorpId', name='teacher_corpid'),
    teacherUserid?: string(description='老师的用户ID', name='teacher_userid'),
    startTime?: int64(description='课程开始时间', name='start_time'),
    endTime?: int64(description='课程结束时间', name='end_time'),
    bizKey?: string(description='业务唯一键', name='biz_key'),
  }(description='result', name='result'),
  success?: boolean(description='请求是否成功', name='success'),
  errcode?: int64(description='错误编码', name='errcode'),
  errmsg?: string(description='错误信息', name='errmsg'),
}

model GetOapiEduCourseResponse = {
  headers: map[string]string,
  body: GetOapiEduCourseResponseBody,
}

/**
 * Description: 获取课程详情
 */
async function getOapiEduCourse(request: GetOapiEduCourseRequest): GetOapiEduCourseResponse {
  var runtime = new Util.RuntimeOptions{};
  return getOapiEduCourseEx(request, runtime);
}

/**
 * Description: 获取课程详情
 */
async function getOapiEduCourseEx(request: GetOapiEduCourseRequest, runtime: Util.RuntimeOptions): GetOapiEduCourseResponse {
  Util.validateModel(request);
  var appParams = Util.stringifyMapValue(Util.toMap(request.params));
  return doRequestOApi('POST', '/topapi/edu/course/get', request.headers, appParams, runtime);
}

model DeleteOapiEduCourseParams = {
  courseCode: string(description='课程编码', name='course_code'),
  opUserid: string(description='当前操作人的用户ID', name='op_userid'),
}

model DeleteOapiEduCourseRequest = {
  headers?: map[string]string,
  params:DeleteOapiEduCourseParams,
}

model DeleteOapiEduCourseResponseBody = {
  result?: boolean(description='删除是否成功', name='result'),
  success?: boolean(description='请求是否成功', name='success'),
  errcode?: int64(description='错误编码', name='errcode'),
  errmsg?: string(description='错误信息', name='errmsg'),
}

model DeleteOapiEduCourseResponse = {
  headers: map[string]string,
  body: DeleteOapiEduCourseResponseBody,
}

/**
 * Description: 删除课程
 */
async function deleteOapiEduCourse(request: DeleteOapiEduCourseRequest): DeleteOapiEduCourseResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteOapiEduCourseEx(request, runtime);
}

/**
 * Description: 删除课程
 */
async function deleteOapiEduCourseEx(request: DeleteOapiEduCourseRequest, runtime: Util.RuntimeOptions): DeleteOapiEduCourseResponse {
  Util.validateModel(request);
  var appParams = Util.stringifyMapValue(Util.toMap(request.params));
  return doRequestOApi('POST', '/topapi/edu/course/delete', request.headers, appParams, runtime);
}

model GetOapiEduMainDataParams = {
  statDate: string(description='统计日期', name='stat_date'),
}

model GetOapiEduMainDataRequest = {
  headers?: map[string]string,
  params:GetOapiEduMainDataParams,
}

model GetOapiEduMainDataResponseBody = {
  result?: {
    teacherSendDingCnt1d?: string(description='最近1天教师钉消息发送数', name='teacher_send_ding_cnt_1d'),
    actTeacherCnt7d?: string(description='最近7天活跃教师数量', name='act_teacher_cnt_7d'),
    classCardUserCnt7d?: string(description='最近7天班级打卡使用人数', name='class_card_user_cnt_7d'),
    authTeacherCntStd?: string(description='数字化教师数量', name='auth_teacher_cnt_std'),
    actPatriarchCnt1d?: string(description='最近1天活跃家长数量', name='act_patriarch_cnt_1d'),
    sendCirclePostCnt1d?: string(description='最近1天班级圈发送数', name='send_circle_post_cnt_1d'),
    actClassCircleCnt7d?: string(description='最近7天活跃班级圈数', name='act_class_circle_cnt_7d'),
    actClassCircleCnt1d?: string(description='最近1天活跃班级圈数', name='act_class_circle_cnt_1d'),
    schoolCntStd?: string(description='注册学校数', name='school_cnt_std'),
    actClassGroupCnt1d?: string(description='最近1天活跃班级群数', name='act_class_group_cnt_1d'),
    rcvDingPatriarchCnt7d?: string(description='最近7天接收DING的家长数', name='rcv_ding_patriarch_cnt_7d'),
    classCntStd?: string(description='注册班级数', name='class_cnt_std'),
    classGroupUserCnt1d?: string(description='最近1天班级群使用人数', name='class_group_user_cnt_1d'),
    patriarchCntStd?: string(description='注册家长数', name='patriarch_cnt_std'),
    actClassGroupCnt7d?: string(description='最近7天活跃班级群数', name='act_class_group_cnt_7d'),
    actPatriarchCnt7d?: string(description='最近7天活跃家长数量', name='act_patriarch_cnt_7d'),
    statDate?: string(description='统计日期', name='stat_date'),
    classCircleUserCnt1d?: string(description='最近1天班级圈使用人数', name='class_circle_user_cnt_1d'),
    corpId?: string(description='局id', name='corp_id'),
    teacherSendDingCnt7d?: string(description='最近7天教师钉消息发送数', name='teacher_send_ding_cnt_7d'),
    studentCntStd?: string(description='注册学生数', name='student_cnt_std'),
    classGroupUserCnt7d?: string(description='最近7天班级群使用人数', name='class_group_user_cnt_7d'),
    rcvDingPatriarchCnt1d?: string(description='最近1天接收DING的家长数', name='rcv_ding_patriarch_cnt_1d'),
    classCardUserCnt1d?: string(description='最近1天班级打卡使用人数', name='class_card_user_cnt_1d'),
    classCircleUserCnt7d?: string(description='最近7天班级圈使用人数', name='class_circle_user_cnt_7d'),
    actTeacherCnt1d?: string(description='最近1天活跃教师数量', name='act_teacher_cnt_1d'),
    teacherCntStd?: string(description='注册教师数', name='teacher_cnt_std'),
    sendCirclePostCnt7d?: string(description='最近7天班级圈发送数', name='send_circle_post_cnt_7d'),
  }(description='结果', name='result'),
  errmsg?: string(description='错误信息', name='errmsg'),
  errcode?: int64(description='错误码', name='errcode'),
  success?: boolean(description='成功or失败', name='success'),
}

model GetOapiEduMainDataResponse = {
  headers: map[string]string,
  body: GetOapiEduMainDataResponseBody,
}

/**
 * Description: 查询以教育局粒度统计的数据
 */
async function getOapiEduMainData(request: GetOapiEduMainDataRequest): GetOapiEduMainDataResponse {
  var runtime = new Util.RuntimeOptions{};
  return getOapiEduMainDataEx(request, runtime);
}

/**
 * Description: 查询以教育局粒度统计的数据
 */
async function getOapiEduMainDataEx(request: GetOapiEduMainDataRequest, runtime: Util.RuntimeOptions): GetOapiEduMainDataResponse {
  Util.validateModel(request);
  var appParams = Util.stringifyMapValue(Util.toMap(request.params));
  return doRequestOApi('POST', '/topapi/edu/main/data/get', request.headers, appParams, runtime);
}

model EndOapiEduCourseParams = {
  courseCode: string(description='需要结束的课程编码', name='course_code'),
  opUserId: string(description='操作用户id', name='op_user_id'),
}

model EndOapiEduCourseRequest = {
  headers?: map[string]string,
  params:EndOapiEduCourseParams,
}

model EndOapiEduCourseResponseBody = {
  result?: boolean(description='结束课程结果', name='result'),
  success?: boolean(description='success', name='success'),
  errcode?: int64(description='dingOpenErrcode', name='errcode'),
  errmsg?: string(description='errorMsg', name='errmsg'),
}

model EndOapiEduCourseResponse = {
  headers: map[string]string,
  body: EndOapiEduCourseResponseBody,
}

/**
 * Description: 结束课程，本次课程完结接口，调用方需主动调用本接口进行课程完结动作
 */
async function endOapiEduCourse(request: EndOapiEduCourseRequest): EndOapiEduCourseResponse {
  var runtime = new Util.RuntimeOptions{};
  return endOapiEduCourseEx(request, runtime);
}

/**
 * Description: 结束课程，本次课程完结接口，调用方需主动调用本接口进行课程完结动作
 */
async function endOapiEduCourseEx(request: EndOapiEduCourseRequest, runtime: Util.RuntimeOptions): EndOapiEduCourseResponse {
  Util.validateModel(request);
  var appParams = Util.stringifyMapValue(Util.toMap(request.params));
  return doRequestOApi('POST', '/topapi/edu/course/end', request.headers, appParams, runtime);
}

model GetOapiEduSubDataParams = {
  statDate: string(description='统计日期', name='stat_date'),
  pageNum: int64(description='页码，必须大于0', name='page_num'),
  pageSize: int64(description='每页大小，必须大于0', name='page_size'),
  orders?: [
    {
      fieldName?: string(description='排序字段名；字段名详见返回字段', name='field_name'),
      order?: string(description='升序 asc; 降序 desc；', name='order'),
    }
  ](description='排序因子', maxItems=20, name='orders'),
}

model GetOapiEduSubDataRequest = {
  headers?: map[string]string,
  params:GetOapiEduSubDataParams,
}

model GetOapiEduSubDataResponseBody = {
  result?: [
    {
      subCorpAreaLng?: string(description='所辖组织的地理经度', name='sub_corp_area_lng'),
      subCorpAreaLat?: string(description='所辖组织的地理纬度', name='sub_corp_area_lat'),
      classCardUserCnt7d?: string(description='最近7天班级打卡使用人数', name='class_card_user_cnt_7d'),
      multiPatriarchStudentRatio?: string(description='多家长监管学生比率', name='multi_patriarch_student_ratio'),
      nonePatriarchStudentRatio?: string(description='无家长监管学生比率', name='none_patriarch_student_ratio'),
      rcvDingPatriarchCnt7d?: string(description='最近7天接收DING的家长数', name='rcv_ding_patriarch_cnt_7d'),
      classCntStd?: string(description='班级数量', name='class_cnt_std'),
      actClassGroupCnt7d?: string(description='最近7天活跃的班级群数', name='act_class_group_cnt_7d'),
      activeMbrCntStd?: string(description='激活用户数', name='active_mbr_cnt_std'),
      actUsrRatio1d?: string(description='最近1天活跃率', name='act_usr_ratio_1d'),
      actUsrCnt1d?: string(description='最近1天活跃用户数', name='act_usr_cnt_1d'),
      statDate?: string(description='统计日期', name='stat_date'),
      mbrCntStd?: string(description='通讯录人数', name='mbr_cnt_std'),
      sendMsgUserRatio1d?: string(description='最近1天沟通率', name='send_msg_user_ratio_1d'),
      corpId?: string(description='教育局ID', name='corp_id'),
      actUsrRatio7d?: string(description='最近7天活跃率', name='act_usr_ratio_7d'),
      teacherSendDingCnt7d?: string(description='最近7天教师钉消息发送数', name='teacher_send_ding_cnt_7d'),
      twoPatriarchStudentRatio?: string(description='双家长监管学生比率', name='two_patriarch_student_ratio'),
      dingIndex1d?: string(description='最近1天钉钉指数', name='ding_index_1d'),
      studentCntStd?: string(description='学生数量', name='student_cnt_std'),
      subCorpName?: string(description='学校名称', name='sub_corp_name'),
      classGroupUserCnt7d?: string(description='最近7天班级群使用人数', name='class_group_user_cnt_7d'),
      classCardUserCnt1d?: string(description='最近1天班级打卡使用人数', name='class_card_user_cnt_1d'),
      liveLaunchSuccCnt1d?: string(description='最近1天成功发起直播次数', name='live_launch_succ_cnt_1d'),
      subCorpId?: string(description='学校id', name='sub_corp_id'),
      actTeacherCnt1d?: string(description='最近1天活跃教师数量', name='act_teacher_cnt_1d'),
      teacherCntStd?: string(description='教师数量', name='teacher_cnt_std'),
      sendCirclePostCnt7d?: string(description='最近7天班级圈发送数', name='send_circle_post_cnt_7d'),
      teacherSendDingCnt1d?: string(description='最近1天教师钉消息发送数', name='teacher_send_ding_cnt_1d'),
      actTeacherCnt7d?: string(description='最近7天活跃教师数量', name='act_teacher_cnt_7d'),
      singlePatriarchStudentRatio?: string(description='单家长监管学生比率', name='single_patriarch_student_ratio'),
      twoPatriarchStudentCnt?: string(description='双家长监管学生数', name='two_patriarch_student_cnt'),
      authTeacherCntStd?: string(description='数字化教师数量', name='auth_teacher_cnt_std'),
      actPatriarchCnt1d?: string(description='最近1天活跃家长数量', name='act_patriarch_cnt_1d'),
      sendCirclePostCnt1d?: string(description='最近1天班级圈发送数', name='send_circle_post_cnt_1d'),
      actClassCircleCnt7d?: string(description='最近7天活跃的班级圈数', name='act_class_circle_cnt_7d'),
      livePlayUserCnt7d?: string(description='最近7天观看和回看直播人数', name='live_play_user_cnt_7d'),
      actClassCircleCnt1d?: string(description='最近1天活跃的班级圈数', name='act_class_circle_cnt_1d'),
      sendMsgUserCnt1d?: string(description='最近1天沟通用户数', name='send_msg_user_cnt_1d'),
      actClassGroupCnt1d?: string(description='最近1天活跃的班级群数', name='act_class_group_cnt_1d'),
      classGroupUserCnt1d?: string(description='最近1天班级群使用人数', name='class_group_user_cnt_1d'),
      patriarchCntStd?: string(description='家长数量', name='patriarch_cnt_std'),
      sendMsgUserRatio7d?: string(description='最近7天沟通率', name='send_msg_user_ratio_7d'),
      mbrActiveRatio?: string(description='激活率', name='mbr_active_ratio'),
      singlePatriarchStudentCnt?: string(description='单家长监管学生数', name='single_patriarch_student_cnt'),
      dingIndex7d?: string(description='最近7天钉钉指数', name='ding_index_7d'),
      actPatriarchCnt7d?: string(description='最近7天活跃家长数量', name='act_patriarch_cnt_7d'),
      liveSuccTimeLen1d?: string(description='最近1天成功发起直播时长', name='live_succ_time_len_1d'),
      classCircleUserCnt1d?: string(description='最近1天班级圈使用人数', name='class_circle_user_cnt_1d'),
      multiPatriarchStudentCnt?: string(description='多家长监管学生数', name='multi_patriarch_student_cnt'),
      liveLaunchSuccCnt7d?: string(description='最近7天成功发起直播次数', name='live_launch_succ_cnt_7d'),
      livePlayUserCnt1d?: string(description='最近1天观看和回看直播人数', name='live_play_user_cnt_1d'),
      rcvDingPatriarchCnt1d?: string(description='最近1天接收DING的家长数', name='rcv_ding_patriarch_cnt_1d'),
      nonePatriarchStudentCnt?: string(description='无家长监管学生数', name='none_patriarch_student_cnt'),
      classCircleUserCnt7d?: string(description='最近7天班级圈使用人数', name='class_circle_user_cnt_7d'),
      actUsrCnt7d?: string(description='最近7天总活跃用户数', name='act_usr_cnt_7d'),
      sendMsgUserCnt7d?: string(description='最近7天沟通用户数', name='send_msg_user_cnt_7d'),
      liveSuccTimeLen7d?: string(description='最近7天成功发起直播时长', name='live_succ_time_len_7d'),
    }
  ](description='结果集', name='result'),
  errmsg?: string(description='错误信息', name='errmsg'),
  errcode?: int64(description='错误码', name='errcode'),
  success?: boolean(description='成功or失败', name='success'),
}

model GetOapiEduSubDataResponse = {
  headers: map[string]string,
  body: GetOapiEduSubDataResponseBody,
}

/**
 * Description: 查询以学校粒度维度的统计数据
 */
async function getOapiEduSubData(request: GetOapiEduSubDataRequest): GetOapiEduSubDataResponse {
  var runtime = new Util.RuntimeOptions{};
  return getOapiEduSubDataEx(request, runtime);
}

/**
 * Description: 查询以学校粒度维度的统计数据
 */
async function getOapiEduSubDataEx(request: GetOapiEduSubDataRequest, runtime: Util.RuntimeOptions): GetOapiEduSubDataResponse {
  Util.validateModel(request);
  var appParams = Util.stringifyMapValue(Util.toMap(request.params));
  return doRequestOApi('POST', '/topapi/edu/sub/data/get', request.headers, appParams, runtime);
}

model JoinOapiEduCourseParams = {
  courseCode: string(description='需要加入的课程编码', name='course_code'),
  opUserId: string(description='操作用户id', name='op_user_id'),
}

model JoinOapiEduCourseRequest = {
  headers?: map[string]string,
  params:JoinOapiEduCourseParams,
}

model JoinOapiEduCourseResponseBody = {
  result?: {
    joinUrl?: string(description='加入链接', name='join_url'),
    joinable?: boolean(description='是否可加入', name='joinable'),
  }(description='result', name='result'),
  success?: boolean(description='success', name='success'),
  errcode?: int64(description='dingOpenErrcode', name='errcode'),
  errmsg?: string(description='errorMsg', name='errmsg'),
}

model JoinOapiEduCourseResponse = {
  headers: map[string]string,
  body: JoinOapiEduCourseResponseBody,
}

/**
 * Description: 加入课程，一般由前端学生点击上课加入课堂，返回相应课堂交互信息，例如直播场景下返回加入url等信息
 */
async function joinOapiEduCourse(request: JoinOapiEduCourseRequest): JoinOapiEduCourseResponse {
  var runtime = new Util.RuntimeOptions{};
  return joinOapiEduCourseEx(request, runtime);
}

/**
 * Description: 加入课程，一般由前端学生点击上课加入课堂，返回相应课堂交互信息，例如直播场景下返回加入url等信息
 */
async function joinOapiEduCourseEx(request: JoinOapiEduCourseRequest, runtime: Util.RuntimeOptions): JoinOapiEduCourseResponse {
  Util.validateModel(request);
  var appParams = Util.stringifyMapValue(Util.toMap(request.params));
  return doRequestOApi('POST', '/topapi/edu/course/join', request.headers, appParams, runtime);
}

model ListorgbotbytypeandbottypeCorpChatbotParams = {
  type: string(description='机器人类型(钉钉分配)', name='type'),
  botType: int64(description='2-企业对内机器人，3-企业对外机器人', name='bot_type'),
}

model ListorgbotbytypeandbottypeCorpChatbotRequest = {
  headers?: map[string]string,
  params:ListorgbotbytypeandbottypeCorpChatbotParams,
}

model ListorgbotbytypeandbottypeCorpChatbotResponseBody = {
  result?: {
    resultList?: [
      {
        chatbotId?: int64(description='机器人id', name='chatbot_id'),
        corpId?: string(description='企业corpId', name='corp_id'),
        botType?: int64(description='机器人类型', name='bot_type'),
        type?: string(description='钉钉分配的type', name='type'),
        name?: string(description='机器人名字', name='name'),
        icon?: string(description='机器人头像', name='icon'),
        breif?: string(description='机器人简介', name='breif'),
        description?: string(description='机器人详细描述', name='description'),
        outgoingUrl?: string(description='outgoingURL', name='outgoing_url'),
        outgoingToken?: string(description='outgoingToken', name='outgoing_token'),
        microappAgentId?: int64(description='microappAgentId', name='microapp_agent_id'),
      }
    ](description='result', name='result_list'),
    dingOpenErrcode?: int64(description='dingOpenErrcode', name='ding_open_errcode'),
    errorMsg?: string(description='errorMsg', name='error_msg'),
    success?: boolean(description='success', name='success'),
  }(description='result', name='result'),
}

model ListorgbotbytypeandbottypeCorpChatbotResponse = {
  headers: map[string]string,
  body: ListorgbotbytypeandbottypeCorpChatbotResponseBody,
}

/**
 * Description: 小蜜isv查询给企业创建的机器人接口。(接口只给小蜜用，机器人应用会白名单处理)
 */
async function listorgbotbytypeandbottypeCorpChatbot(request: ListorgbotbytypeandbottypeCorpChatbotRequest): ListorgbotbytypeandbottypeCorpChatbotResponse {
  var runtime = new Util.RuntimeOptions{};
  return listorgbotbytypeandbottypeCorpChatbotEx(request, runtime);
}

/**
 * Description: 小蜜isv查询给企业创建的机器人接口。(接口只给小蜜用，机器人应用会白名单处理)
 */
async function listorgbotbytypeandbottypeCorpChatbotEx(request: ListorgbotbytypeandbottypeCorpChatbotRequest, runtime: Util.RuntimeOptions): ListorgbotbytypeandbottypeCorpChatbotResponse {
  Util.validateModel(request);
  var appParams = Util.stringifyMapValue(Util.toMap(request.params));
  return doRequest('dingtalk.corp.chatbot.listorgbotbytypeandbottype', 'POST', '/router/rest', request.headers, appParams, runtime);
}

model GetOapiEduTypeDataParams = {
  pageSize: string(description='每页大小；必须大于0', name='page_size'),
  pageNum: string(description='页码；必须大于0', name='page_num'),
  statDate: string(description='统计日期', name='stat_date'),
  orders?: [
    {
      fieldName?: string(description='排序字段名；字段名与返回值名保持一致', name='field_name'),
      order?: string(description='升序: asc; 降序：desc;', name='order'),
    }
  ](description='排序因子', maxItems=20, name='orders'),
}

model GetOapiEduTypeDataRequest = {
  headers?: map[string]string,
  params:GetOapiEduTypeDataParams,
}

model GetOapiEduTypeDataResponseBody = {
  result?: [
    {
      nonePatriarchStudentRatio?: string(description='无家长监管学生比率', name='none_patriarch_student_ratio'),
      nonePatriarchStudentCnt?: string(description='无家长监管学生数', name='none_patriarch_student_cnt'),
      multiPatriarchStudentRatio?: string(description='多家长监管学生比率', name='multi_patriarch_student_ratio'),
      schoolCntStd?: string(description='学校数量', name='school_cnt_std'),
      studentCntStd?: string(description='学生数量', name='student_cnt_std'),
      schoolType?: string(description='学校类型', name='school_type'),
      twoPatriarchStudentRatio?: string(description='双家长监管学生比率', name='two_patriarch_student_ratio'),
      authTeacherCntStd?: string(description='数字化教师数量', name='auth_teacher_cnt_std'),
      twoPatriarchStudentCnt?: string(description='双家长监管学生数', name='two_patriarch_student_cnt'),
      corpId?: string(description='学校id', name='corp_id'),
      singlePatriarchStudentRatio?: string(description='单家长监管学生比率', name='single_patriarch_student_ratio'),
      multiPatriarchStudentCnt?: string(description='多家长监管学生数', name='multi_patriarch_student_cnt'),
      statDate?: string(description='统计日期', name='stat_date'),
      classCntStd?: string(description='班级数量', name='class_cnt_std'),
      patriarchCntStd?: string(description='家长数量', name='patriarch_cnt_std'),
      singlePatriarchStudentCnt?: string(description='单家长监管学生数', name='single_patriarch_student_cnt'),
      teacherCntStd?: string(description='教师数量', name='teacher_cnt_std'),
    }
  ](description='结果合集', name='result'),
  errmsg?: string(description='错误信息', name='errmsg'),
  errcode?: int64(description='错误码', name='errcode'),
  success?: boolean(description='成功偶然失败', name='success'),
}

model GetOapiEduTypeDataResponse = {
  headers: map[string]string,
  body: GetOapiEduTypeDataResponseBody,
}

/**
 * Description: 查询学校类型维度的统计数据
 */
async function getOapiEduTypeData(request: GetOapiEduTypeDataRequest): GetOapiEduTypeDataResponse {
  var runtime = new Util.RuntimeOptions{};
  return getOapiEduTypeDataEx(request, runtime);
}

/**
 * Description: 查询学校类型维度的统计数据
 */
async function getOapiEduTypeDataEx(request: GetOapiEduTypeDataRequest, runtime: Util.RuntimeOptions): GetOapiEduTypeDataResponse {
  Util.validateModel(request);
  var appParams = Util.stringifyMapValue(Util.toMap(request.params));
  return doRequestOApi('POST', '/topapi/edu/type/data/get', request.headers, appParams, runtime);
}

model UpdateOapiEduCourseParams = {
  courseCode: string(description='课程唯一编码', name='course_code'),
  teacherCorpid?: string(description='老师的组织CorpId', name='teacher_corpid'),
  teacherUserid?: string(description='老师的用户ID', name='teacher_userid'),
  introduce?: string(description='课程介绍', maxLength=120, name='introduce'),
  name?: string(description='课程名称', maxLength=64, name='name'),
  startTime?: int64(description='课程的开始时间，Unix毫秒时间戳', name='start_time'),
  endTime?: int64(description='课程的结束时间，Unix毫秒时间戳', name='end_time'),
  opUserid: string(description='当前用户ID', name='op_userid'),
}

model UpdateOapiEduCourseRequest = {
  headers?: map[string]string,
  params:UpdateOapiEduCourseParams,
}

model UpdateOapiEduCourseResponseBody = {
  result?: boolean(description='修改是否成功', name='result'),
  success?: boolean(description='请求是否成功', name='success'),
  errcode?: int64(description='dingOpenErrcode', name='errcode'),
  errmsg?: string(description='errorMsg', name='errmsg'),
}

model UpdateOapiEduCourseResponse = {
  headers: map[string]string,
  body: UpdateOapiEduCourseResponseBody,
}

/**
 * Description: 修改课程
 */
async function updateOapiEduCourse(request: UpdateOapiEduCourseRequest): UpdateOapiEduCourseResponse {
  var runtime = new Util.RuntimeOptions{};
  return updateOapiEduCourseEx(request, runtime);
}

/**
 * Description: 修改课程
 */
async function updateOapiEduCourseEx(request: UpdateOapiEduCourseRequest, runtime: Util.RuntimeOptions): UpdateOapiEduCourseResponse {
  Util.validateModel(request);
  var appParams = Util.stringifyMapValue(Util.toMap(request.params));
  return doRequestOApi('POST', '/topapi/edu/course/update', request.headers, appParams, runtime);
}

model ListscheduleSmartworkAttendsParams = {
  workDate: string(description='排班时间，只取年月日部分', pattern='\\\\d{4}[-]\\\\d{1,2}[-]\\\\d{1,2}[T]\\\\d{2}:\\\\d{2}:\\\\d{2}[Z]', name='work_date'),
  offset?: int64(description='偏移位置', name='offset'),
  size?: int64(description='分页大小，最大200', name='size'),
}

model ListscheduleSmartworkAttendsRequest = {
  headers?: map[string]string,
  params:ListscheduleSmartworkAttendsParams,
}

model ListscheduleSmartworkAttendsResponseBody = {
  result?: {
    dingOpenErrcode?: int64(description='dingOpenErrcode', name='ding_open_errcode'),
    errorMsg?: string(description='errorMsg', name='error_msg'),
    success?: boolean(description='success', name='success'),
    result?: {
      hasMore?: boolean(description='分页用，表示是否还有下一页', name='has_more'),
      schedules?: [
        {
          groupId?: int64(description='考勤组id', name='group_id'),
          planCheckTime?: string(description='打卡时间', pattern='\\\\d{4}[-]\\\\d{1,2}[-]\\\\d{1,2}[T]\\\\d{2}:\\\\d{2}:\\\\d{2}[Z]', name='plan_check_time'),
          classId?: int64(description='考勤班次id', name='class_id'),
          userid?: string(description='userId', name='userid'),
          checkType?: string(description='打卡类型，Onduty表示上班打卡，OffDuty表示下班打卡', name='check_type'),
          classSettingId?: int64(description='班次配置id，结果集中没有的话表示使用全局班次配置', name='class_setting_id'),
          approveId?: int64(description='审批id,结果集中没有的话表示没有审批单', name='approve_id'),
          planId?: int64(description='排班id', name='plan_id'),
        }
      ](description='排班列表', name='schedules'),
    }(description='result', name='result'),
  }(description='result', name='result'),
}

model ListscheduleSmartworkAttendsResponse = {
  headers: map[string]string,
  body: ListscheduleSmartworkAttendsResponseBody,
}

/**
 * Description: 按天查询企业考勤排班全量信息，使用分页功能
 */
async function listscheduleSmartworkAttends(request: ListscheduleSmartworkAttendsRequest): ListscheduleSmartworkAttendsResponse {
  var runtime = new Util.RuntimeOptions{};
  return listscheduleSmartworkAttendsEx(request, runtime);
}

/**
 * Description: 按天查询企业考勤排班全量信息，使用分页功能
 */
async function listscheduleSmartworkAttendsEx(request: ListscheduleSmartworkAttendsRequest, runtime: Util.RuntimeOptions): ListscheduleSmartworkAttendsResponse {
  Util.validateModel(request);
  var appParams = Util.stringifyMapValue(Util.toMap(request.params));
  return doRequest('dingtalk.smartwork.attends.listschedule', 'POST', '/router/rest', request.headers, appParams, runtime);
}

model InstallOapiChatbotParams = {
  chatbotVo: {
    icon: string(description='机器人头像mediaId', name='icon'),
    nameModify: int64(description='向群添加机器人时是否可改名字：0-不可必，1-可改', name='name_modify'),
    chatbotId: string(description='机器人id(钉钉分配)', name='chatbot_id'),
    breif: string(description='机器人简介', name='breif'),
    function: int64(description='INCOMING = 1,OUTGOING  = 2,INOUT     = 3', name='function'),
    outgoingUrl: string(description='机器人回调URL', name='outgoing_url'),
    authority: int64(description='0-正常，1-只服务端可管理', name='authority'),
    previewMediaId: string(description='机器人预览图', name='preview_media_id'),
    botType: int64(description='2-企业对内机器人，3-企业对外机器人', name='bot_type'),
    mobileSwitch: int64(description='手机端是否能添加机器人：0-移动端不能加，1-移动端能添加', name='mobile_switch'),
    description: string(description='机器详细介绍', name='description'),
    name: string(description='机器人的名字', name='name'),
    iconMdify: int64(description='向群添加机器人时是否可改头像：0-不可必，1-可改', name='icon_mdify'),
    outgoingToken: string(description='机器人消息回调时在header中添加的token,用于对钉钉鉴权', name='outgoing_token'),
    otoSupport?: int64(description='是否支持单聊：0-不要单聊，1需要单聊', name='oto_support'),
  }(description='安装的机器人信息', name='chatbot_vo'),
}

model InstallOapiChatbotRequest = {
  headers?: map[string]string,
  params:InstallOapiChatbotParams,
}

model InstallOapiChatbotResponseBody = {
  result?: {
    errcode?: int64(description='dingOpenErrcode', name='errcode'),
    errmsg?: string(description='errorMsg', name='errmsg'),
    success?: boolean(description='success', name='success'),
  }(description='result', name='result'),
}

model InstallOapiChatbotResponse = {
  headers: map[string]string,
  body: InstallOapiChatbotResponseBody,
}

/**
 * Description: 企业安装微应用后，ISV可通过本接口给企业上架一个企业机器人。目前灰度几个ISV，机器人应用会白名单处理
 */
async function installOapiChatbot(request: InstallOapiChatbotRequest): InstallOapiChatbotResponse {
  var runtime = new Util.RuntimeOptions{};
  return installOapiChatbotEx(request, runtime);
}

/**
 * Description: 企业安装微应用后，ISV可通过本接口给企业上架一个企业机器人。目前灰度几个ISV，机器人应用会白名单处理
 */
async function installOapiChatbotEx(request: InstallOapiChatbotRequest, runtime: Util.RuntimeOptions): InstallOapiChatbotResponse {
  Util.validateModel(request);
  var appParams = Util.stringifyMapValue(Util.toMap(request.params));
  return doRequestOApi('POST', '/topapi/chatbot/install', request.headers, appParams, runtime);
}

model GetsimplegroupsSmartworkAttendsParams = {
  offset?: int64(description='偏移位置', name='offset'),
  size?: int64(description='分页大小，最大10', name='size'),
}

model GetsimplegroupsSmartworkAttendsRequest = {
  headers?: map[string]string,
  params?:GetsimplegroupsSmartworkAttendsParams,
}

model GetsimplegroupsSmartworkAttendsResponseBody = {
  result?: {
    dingOpenErrcode?: int64(description='dingOpenErrcode', name='ding_open_errcode'),
    errorMsg?: string(description='errorMsg', name='error_msg'),
    success?: boolean(description='success', name='success'),
    result?: {
      hasMore?: boolean(description='分页用，表示是否还有下一页', name='has_more'),
      groups?: [
        {
          groupId?: int64(description='考勤组id', name='group_id'),
          isDefault?: boolean(description='是否默认考勤组', name='is_default'),
          groupName?: string(description='考勤组名称', name='group_name'),
          selectedClass?: [
            {
              setting?: {
                classSettingId?: int64(description='考勤组班次id', name='class_setting_id'),
                restBeginTime?: {
                  checkTime?: string(description='开始时间', pattern='\\\\d{4}[-]\\\\d{1,2}[-]\\\\d{1,2}[T]\\\\d{2}:\\\\d{2}:\\\\d{2}[Z]', name='check_time'),
                }(description='休息开始时间，只有一个时间段的班次有', name='rest_begin_time'),
                permitLateMinutes?: int64(description='允许迟到时长，单位分钟', name='permit_late_minutes'),
                workTimeMinutes?: int64(description='工作时长，单位分钟，-1表示关闭该功能', name='work_time_minutes'),
                restEndTime?: {
                  checkTime?: string(description='结束时间', pattern='\\\\d{4}[-]\\\\d{1,2}[-]\\\\d{1,2}[T]\\\\d{2}:\\\\d{2}:\\\\d{2}[Z]', name='check_time'),
                }(description='休息结束时间，只有一个时间段的班次有', name='rest_end_time'),
                absenteeismLateMinutes?: int64(description='旷工迟到时长,单位分钟', name='absenteeism_late_minutes'),
                seriousLateMinutes?: int64(description='严重迟到时长,单位分钟', name='serious_late_minutes'),
                isOffDutyFreeCheck?: string(description='Y表示下班不强制打卡,N表示下班强制打卡', name='is_off_duty_free_check'),
              }(description='考勤组班次配置', name='setting'),
              classId?: int64(description='考勤班次id', name='class_id'),
              sections?: [
                {
                  times?: [
                    {
                      checkTime?: string(description='打卡时间', pattern='\\\\d{4}[-]\\\\d{1,2}[-]\\\\d{1,2}[T]\\\\d{2}:\\\\d{2}:\\\\d{2}[Z]', name='check_time'),
                      checkType?: string(description='打卡类型枚举（Onduty和OffDuty）', name='check_type'),
                      across?: int64(description='打卡时间跨度', name='across'),
                    }
                  ](description='时间段列表', name='times'),
                }
              ](description='班次打卡时间段,最多', name='sections'),
              className?: string(description='考勤班次名称', name='class_name'),
            }
          ](description='考勤组对应的考勤班次列表', name='selected_class'),
          type?: string(description='考勤类型，FIXED为固定排班，TURN为轮班排班，NONE为无班次', name='type'),
          memberCount?: int64(description='成员人数', name='member_count'),
          defaultClassId?: int64(description='默认班次id', name='default_class_id'),
          workDayList?: [ string ](description='固定班次的工作日班次', name='work_day_list'),
          classesList?: [ string ](description='一周的班次时间展示列表。["周一、二 班次A:09:00-18:00", "周六、周日 休息"]', name='classes_list'),
          managerList?: [ string ](description='考勤组负责人', name='manager_list'),
          deptNameList?: [ string ](description='关联的部门', name='dept_name_list'),
        }
      ](description='考勤组列表', name='groups'),
    }(description='result', name='result'),
  }(description='result', name='result'),
}

model GetsimplegroupsSmartworkAttendsResponse = {
  headers: map[string]string,
  body: GetsimplegroupsSmartworkAttendsResponseBody,
}

/**
 * Description: 获取公司自身的考勤组列表详情信息
 */
async function getsimplegroupsSmartworkAttends(request: GetsimplegroupsSmartworkAttendsRequest): GetsimplegroupsSmartworkAttendsResponse {
  var runtime = new Util.RuntimeOptions{};
  return getsimplegroupsSmartworkAttendsEx(request, runtime);
}

/**
 * Description: 获取公司自身的考勤组列表详情信息
 */
async function getsimplegroupsSmartworkAttendsEx(request: GetsimplegroupsSmartworkAttendsRequest, runtime: Util.RuntimeOptions): GetsimplegroupsSmartworkAttendsResponse {
  Util.validateModel(request);
  var appParams = Util.stringifyMapValue(Util.toMap(request.params));
  return doRequest('dingtalk.smartwork.attends.getsimplegroups', 'POST', '/router/rest', request.headers, appParams, runtime);
}

model UpdateOapiEduSubjectParams = {
  code: string(description='学科编码', name='code'),
  name: string(description='学科名称', name='name'),
  operatorUserid: string(description='操作人userid', name='operator_userid'),
}

model UpdateOapiEduSubjectRequest = {
  headers?: map[string]string,
  params:UpdateOapiEduSubjectParams,
}

model UpdateOapiEduSubjectResponseBody = {
  result?: boolean(description='更新结果', name='result'),
  success?: boolean(description='是否成功', name='success'),
  errcode?: int64(description='错误code', name='errcode'),
  errmsg?: string(description='错误msg', name='errmsg'),
}

model UpdateOapiEduSubjectResponse = {
  headers: map[string]string,
  body: UpdateOapiEduSubjectResponseBody,
}

/**
 * Description: 钉钉教育生态主数据-学科实例的更新
 */
async function updateOapiEduSubject(request: UpdateOapiEduSubjectRequest): UpdateOapiEduSubjectResponse {
  var runtime = new Util.RuntimeOptions{};
  return updateOapiEduSubjectEx(request, runtime);
}

/**
 * Description: 钉钉教育生态主数据-学科实例的更新
 */
async function updateOapiEduSubjectEx(request: UpdateOapiEduSubjectRequest, runtime: Util.RuntimeOptions): UpdateOapiEduSubjectResponse {
  Util.validateModel(request);
  var appParams = Util.stringifyMapValue(Util.toMap(request.params));
  return doRequestOApi('POST', '/topapi/edu/subject/update', request.headers, appParams, runtime);
}

model CreateOapiEduSubjectParams = {
  code?: string(description='学科编码（依赖元数据创建时传入元数据编码，自定义时为空）', name='code'),
  name: string(description='学科名称', name='name'),
  operatorUserid: string(description='操作人userId', name='operator_userid'),
}

model CreateOapiEduSubjectRequest = {
  headers?: map[string]string,
  params:CreateOapiEduSubjectParams,
}

model CreateOapiEduSubjectResponseBody = {
  result?: string(description='学科编码', name='result'),
  success?: boolean(description='是否成功', name='success'),
  errcode?: int64(description='错误code', name='errcode'),
  errmsg?: string(description='错误msg', name='errmsg'),
}

model CreateOapiEduSubjectResponse = {
  headers: map[string]string,
  body: CreateOapiEduSubjectResponseBody,
}

/**
 * Description: 钉钉教育生态主数据-学科实例的创建
 */
async function createOapiEduSubject(request: CreateOapiEduSubjectRequest): CreateOapiEduSubjectResponse {
  var runtime = new Util.RuntimeOptions{};
  return createOapiEduSubjectEx(request, runtime);
}

/**
 * Description: 钉钉教育生态主数据-学科实例的创建
 */
async function createOapiEduSubjectEx(request: CreateOapiEduSubjectRequest, runtime: Util.RuntimeOptions): CreateOapiEduSubjectResponse {
  Util.validateModel(request);
  var appParams = Util.stringifyMapValue(Util.toMap(request.params));
  return doRequestOApi('POST', '/topapi/edu/subject/create', request.headers, appParams, runtime);
}

model DeleteOapiEduSubjectParams = {
  code: string(description='学科编码', name='code'),
  name?: string(description='学科名称', name='name'),
  operatorUserid: string(description='操作人userId', name='operator_userid'),
}

model DeleteOapiEduSubjectRequest = {
  headers?: map[string]string,
  params:DeleteOapiEduSubjectParams,
}

model DeleteOapiEduSubjectResponseBody = {
  result?: boolean(description='删除结果', name='result'),
  success?: boolean(description='是否调用成功', name='success'),
  errcode?: int64(description='错误编码', name='errcode'),
  errmsg?: string(description='错误msg', name='errmsg'),
}

model DeleteOapiEduSubjectResponse = {
  headers: map[string]string,
  body: DeleteOapiEduSubjectResponseBody,
}

/**
 * Description: 钉钉教育生态主数据-学科实例的删除
 */
async function deleteOapiEduSubject(request: DeleteOapiEduSubjectRequest): DeleteOapiEduSubjectResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteOapiEduSubjectEx(request, runtime);
}

/**
 * Description: 钉钉教育生态主数据-学科实例的删除
 */
async function deleteOapiEduSubjectEx(request: DeleteOapiEduSubjectRequest, runtime: Util.RuntimeOptions): DeleteOapiEduSubjectResponse {
  Util.validateModel(request);
  var appParams = Util.stringifyMapValue(Util.toMap(request.params));
  return doRequestOApi('POST', '/topapi/edu/subject/delete', request.headers, appParams, runtime);
}

model UpdategroupnickOapiChatParams = {
  userid: string(description='用户userid', name='userid'),
  chatid: string(description='chatid', name='chatid'),
  groupNick: string(description='群昵称', name='group_nick'),
}

model UpdategroupnickOapiChatRequest = {
  headers?: map[string]string,
  params:UpdategroupnickOapiChatParams,
}

model UpdategroupnickOapiChatResponseBody = {
  errcode?: int64(description='dingOpenErrcode', name='errcode'),
  errmsg?: string(description='errorMsg', name='errmsg'),
  success?: boolean(description='success', name='success'),
}

model UpdategroupnickOapiChatResponse = {
  headers: map[string]string,
  body: UpdategroupnickOapiChatResponseBody,
}

/**
 * Description: 设置群成员的群昵称
 */
async function updategroupnickOapiChat(request: UpdategroupnickOapiChatRequest): UpdategroupnickOapiChatResponse {
  var runtime = new Util.RuntimeOptions{};
  return updategroupnickOapiChatEx(request, runtime);
}

/**
 * Description: 设置群成员的群昵称
 */
async function updategroupnickOapiChatEx(request: UpdategroupnickOapiChatRequest, runtime: Util.RuntimeOptions): UpdategroupnickOapiChatResponse {
  Util.validateModel(request);
  var appParams = Util.stringifyMapValue(Util.toMap(request.params));
  return doRequestOApi('POST', '/topapi/chat/updategroupnick', request.headers, appParams, runtime);
}

model TranslateOapiAiMtParams = {
  query: string(description='翻译源文字符串', name='query'),
  sourceLanguage: string(description='翻译源语言类型', name='source_language'),
  targetLanguage: string(description='翻译目标语言类型', name='target_language'),
}

model TranslateOapiAiMtRequest = {
  headers?: map[string]string,
  params:TranslateOapiAiMtParams,
}

model TranslateOapiAiMtResponseBody = {
  result?: string(description='翻译结果字符串', name='result'),
  errcode?: int64(description='成功为0', name='errcode'),
  errmsg?: string(description='成功', name='errmsg'),
}

model TranslateOapiAiMtResponse = {
  headers: map[string]string,
  body: TranslateOapiAiMtResponseBody,
}

/**
 * Description: 输入一段文本，得到翻译指定语言后的译文，支持多种语言的互译
 */
async function translateOapiAiMt(request: TranslateOapiAiMtRequest): TranslateOapiAiMtResponse {
  var runtime = new Util.RuntimeOptions{};
  return translateOapiAiMtEx(request, runtime);
}

/**
 * Description: 输入一段文本，得到翻译指定语言后的译文，支持多种语言的互译
 */
async function translateOapiAiMtEx(request: TranslateOapiAiMtRequest, runtime: Util.RuntimeOptions): TranslateOapiAiMtResponse {
  Util.validateModel(request);
  var appParams = Util.stringifyMapValue(Util.toMap(request.params));
  return doRequestOApi('POST', '/topapi/ai/mt/translate', request.headers, appParams, runtime);
}

model UpdateOapiDingTaskStatusParams = {
  taskId?: string(description='任务ID', name='task_id'),
  taskStatus?: int64(description='任务状态:1-未完成;2-完成', name='task_status'),
  operatorUserid?: string(description='操作人id', name='operator_userid'),
}

model UpdateOapiDingTaskStatusRequest = {
  headers?: map[string]string,
  params?:UpdateOapiDingTaskStatusParams,
}

model UpdateOapiDingTaskStatusResponseBody = {
  result?: boolean(description='result', name='result'),
  errmsg?: string(description='errormsg', name='errmsg'),
  errcode?: int64(description='errorcode', name='errcode'),
}

model UpdateOapiDingTaskStatusResponse = {
  headers: map[string]string,
  body: UpdateOapiDingTaskStatusResponseBody,
}

/**
 * Description: 企业更新已经发送到用户的任务完成状态
 */
async function updateOapiDingTaskStatus(request: UpdateOapiDingTaskStatusRequest): UpdateOapiDingTaskStatusResponse {
  var runtime = new Util.RuntimeOptions{};
  return updateOapiDingTaskStatusEx(request, runtime);
}

/**
 * Description: 企业更新已经发送到用户的任务完成状态
 */
async function updateOapiDingTaskStatusEx(request: UpdateOapiDingTaskStatusRequest, runtime: Util.RuntimeOptions): UpdateOapiDingTaskStatusResponse {
  Util.validateModel(request);
  var appParams = Util.stringifyMapValue(Util.toMap(request.params));
  return doRequestOApi('POST', '/topapi/ding/task/status/update', request.headers, appParams, runtime);
}

model CheckOapiSmartworkHrmMasterParams = {
  tenantid: int64(description='业务方id(由系统统一分配)', name='tenantid'),
  bizUk: [ string ](description='业务UK唯一确定一条流水', maxItems=20, name='biz_uk'),
}

model CheckOapiSmartworkHrmMasterRequest = {
  headers?: map[string]string,
  params:CheckOapiSmartworkHrmMasterParams,
}

model CheckOapiSmartworkHrmMasterResponseBody = {
  result?: {
    failResult?: [
      {
        errorMsg?: string(description='保存错误信息', name='error_msg'),
        errorCode?: string(description='错误码', name='error_code'),
        bizUk?: string(description='业务UK唯一确定一条流水', name='biz_uk'),
        success?: boolean(description='是否成功', name='success'),
      }
    ](description='保存失败的结果，全部成功是为空', name='fail_result'),
    allSuccess?: boolean(description='是否全部处理成功', name='all_success'),
  }(description='保存结果', name='result'),
  errmsg?: string(description='保存错误信息', name='errmsg'),
  errcode?: int64(description='错误码', name='errcode'),
}

model CheckOapiSmartworkHrmMasterResponse = {
  headers: map[string]string,
  body: CheckOapiSmartworkHrmMasterResponseBody,
}

/**
 * Description: 根据bizUK批量查询数据是否导入成功
 */
async function checkOapiSmartworkHrmMaster(request: CheckOapiSmartworkHrmMasterRequest): CheckOapiSmartworkHrmMasterResponse {
  var runtime = new Util.RuntimeOptions{};
  return checkOapiSmartworkHrmMasterEx(request, runtime);
}

/**
 * Description: 根据bizUK批量查询数据是否导入成功
 */
async function checkOapiSmartworkHrmMasterEx(request: CheckOapiSmartworkHrmMasterRequest, runtime: Util.RuntimeOptions): CheckOapiSmartworkHrmMasterResponse {
  Util.validateModel(request);
  var appParams = Util.stringifyMapValue(Util.toMap(request.params));
  return doRequestOApi('POST', '/topapi/smartwork/hrm/master/check', request.headers, appParams, runtime);
}

model DeleteOapiSmartworkHrmMasterParams = {
  tenantid: int64(description='业务方id(由系统统一分配)', name='tenantid'),
  bizData: [
    {
      fields: [
        {
          value: string(description='字段值原始字符串', name='value'),
          name: string(description='字段名', name='name'),
        }
      ](description='字段列表', maxItems=20, name='fields'),
      scope: {
        version?: int64(description='业务域版本号', name='version'),
        scopeCode: string(description='业务域code', name='scope_code'),
      }(description='数据所属业务域', name='scope'),
      bizTime: int64(description='数据业务时间戳', name='biz_time'),
      bizUk: string(description='业务uk，唯一标识一条流水', name='biz_uk'),
      userid: string(description='员工id', name='userid'),
    }
  ](description='业务数据', maxItems=20, name='biz_data'),
}

model DeleteOapiSmartworkHrmMasterRequest = {
  headers?: map[string]string,
  params:DeleteOapiSmartworkHrmMasterParams,
}

model DeleteOapiSmartworkHrmMasterResponseBody = {
  result?: {
    failResult?: [
      {
        errorMsg?: string(description='错误信息', name='error_msg'),
        errorCode?: string(description='错误码', name='error_code'),
        success?: boolean(description='是否成功', name='success'),
        bizUk?: string(description='业务UK,唯一确定一条流水', name='biz_uk'),
      }
    ](description='失败的处理结果', name='fail_result'),
    allSuccess?: boolean(description='是否全部成功', name='all_success'),
  }(description='批量处理结果', name='result'),
  errmsg?: string(description='错误信息', name='errmsg'),
  errcode?: int64(description='错误码', name='errcode'),
  success?: boolean(description='是否成功', name='success'),
}

model DeleteOapiSmartworkHrmMasterResponse = {
  headers: map[string]string,
  body: DeleteOapiSmartworkHrmMasterResponseBody,
}

/**
 * Description: 智能人事主数据服务,提供给ISV删除的接口
 */
async function deleteOapiSmartworkHrmMaster(request: DeleteOapiSmartworkHrmMasterRequest): DeleteOapiSmartworkHrmMasterResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteOapiSmartworkHrmMasterEx(request, runtime);
}

/**
 * Description: 智能人事主数据服务,提供给ISV删除的接口
 */
async function deleteOapiSmartworkHrmMasterEx(request: DeleteOapiSmartworkHrmMasterRequest, runtime: Util.RuntimeOptions): DeleteOapiSmartworkHrmMasterResponse {
  Util.validateModel(request);
  var appParams = Util.stringifyMapValue(Util.toMap(request.params));
  return doRequestOApi('POST', '/topapi/smartwork/hrm/master/delete', request.headers, appParams, runtime);
}

model GetupdatedataOapiAttendanceParams = {
  userid: string(description='用户id', name='userid'),
  workDate: string(description='工作日', pattern='\\\\d{4}[-]\\\\d{1,2}[-]\\\\d{1,2}[T]\\\\d{2}:\\\\d{2}:\\\\d{2}[Z]', name='work_date'),
}

model GetupdatedataOapiAttendanceRequest = {
  headers?: map[string]string,
  params:GetupdatedataOapiAttendanceParams,
}

model GetupdatedataOapiAttendanceResponseBody = {
  errmsg?: string(description='errorMsg', name='errmsg'),
  result?: {
    workDate?: string(description='查询日期', pattern='\\\\d{4}[-]\\\\d{1,2}[-]\\\\d{1,2}[T]\\\\d{2}:\\\\d{2}:\\\\d{2}[Z]', name='work_date'),
    attendanceResultList?: [
      {
        recordId?: int64(description='打卡流水id', name='record_id'),
        sourceType?: string(description='打卡来源', name='source_type'),
        planCheckTime?: string(description='标准打卡时间', pattern='\\\\d{4}[-]\\\\d{1,2}[-]\\\\d{1,2}[T]\\\\d{2}:\\\\d{2}:\\\\d{2}[Z]', name='plan_check_time'),
        classId?: int64(description='班次id', name='class_id'),
        locationMethod?: string(description='定位方法', name='location_method'),
        locationResult?: string(description='定位结果', name='location_result'),
        outsideRemark?: string(description='外勤备注', name='outside_remark'),
        planId?: int64(description='排班id', name='plan_id'),
        userAddress?: string(description='用户打卡地址', name='user_address'),
        groupId?: int64(description='考勤组id', name='group_id'),
        userCheckTime?: string(description='用户打卡时间', pattern='\\\\d{4}[-]\\\\d{1,2}[-]\\\\d{1,2}[T]\\\\d{2}:\\\\d{2}:\\\\d{2}[Z]', name='user_check_time'),
        procInstId?: string(description='审批单id', name='procInst_id'),
        checkType?: string(description='打卡类型 上班还是下班', name='check_type'),
        timeResult?: string(description='打卡的时间结果', name='time_result'),
      }
    ](description='打卡结果list', name='attendance_result_list'),
    userid?: string(description='用户id', name='userid'),
    approveList?: [
      {
        durationUnit?: string(description='审批单的单位', name='duration_unit'),
        duration?: string(description='时长', name='duration'),
        subType?: string(description='子类型', name='sub_type'),
        tagName?: string(description='审批单的tag', name='tag_name'),
        procInstId?: string(description='审批单id', name='procInst_id'),
        beginTime?: string(description='审批单开始时间', pattern='\\\\d{4}[-]\\\\d{1,2}[-]\\\\d{1,2}[T]\\\\d{2}:\\\\d{2}:\\\\d{2}[Z]', name='begin_time'),
        bizType?: int64(description='业务类型', name='biz_type'),
        endTime?: string(description='审批单结束时间', pattern='\\\\d{4}[-]\\\\d{1,2}[-]\\\\d{1,2}[T]\\\\d{2}:\\\\d{2}:\\\\d{2}[Z]', name='end_time'),
        gmtFinished?: string(description='审批单审批完成时间', pattern='\\\\d{4}[-]\\\\d{1,2}[-]\\\\d{1,2}[T]\\\\d{2}:\\\\d{2}:\\\\d{2}[Z]', name='gmt_finished'),
      }
    ](description='审批单列表', name='approve_list'),
    checkRecordList?: [
      {
        recordId?: int64(description='流水id', name='record_id'),
        sourceType?: string(description='打卡来源', name='source_type'),
        userAccuracy?: string(description='用户定位精度', name='user_accuracy'),
        validMatched?: boolean(description='是否匹配', name='valid_matched'),
        userCheckTime?: string(description='用户打卡时间', pattern='\\\\d{4}[-]\\\\d{1,2}[-]\\\\d{1,2}[T]\\\\d{2}:\\\\d{2}:\\\\d{2}[Z]', name='user_check_time'),
        userLongitude?: string(description='打卡维度', name='user_longitude'),
        userSsid?: string(description='wifi名称', name='user_ssid'),
        baseAccuracy?: string(description='基本定位精度', name='base_accuracy'),
        userMacAddr?: string(description='mac地址', name='user_mac_addr'),
        userLatitude?: string(description='打卡纬度', name='user_latitude'),
        baseAddress?: string(description='打卡基础地质', name='base_address'),
        invalidRecordMsg?: string(description='流水无效的原因', name='invalid_record_msg'),
        invalidRecordType?: string(description='流水无效的类型', name='invalid_record_type'),
      }
    ](description='打卡流水list', name='check_record_list'),
    corpId?: string(description='公司id', name='corpId'),
    classSettingInfo?: {
      restTimeVoList?: [
        {
          restEndTime?: int64(description='休息结束时间', name='rest_end_time'),
          restBeginTime?: int64(description='休息开始时间', name='rest_begin_time'),
        }
      ](description='restTimeVOList', name='rest_time_vo_list'),
    }(description='当前排班对应的休息时间段', name='class_setting_info'),
  }(description='result', name='result'),
  errcode?: int64(description='dingOpenErrcode', name='errcode'),
  success?: boolean(description='success', name='success'),
}

model GetupdatedataOapiAttendanceResponse = {
  headers: map[string]string,
  body: GetupdatedataOapiAttendanceResponseBody,
}

/**
 * Description: 增加这个api的目的是为了给外部企业提供考勤数据变更，提升外部企业的考勤统计数据的准确度。外部企业只能通过入参获取数据，属于只读接口。
接口的入参是 查询用户corpId，userid以及查询日期，这些参数是我们开放平台推送给用户的变更。
返回的结果是三个list结果：分别是打卡流水记录 打卡结果 以及 审批列表 都是被查询用户在查询日期内的数据。
 */
async function getupdatedataOapiAttendance(request: GetupdatedataOapiAttendanceRequest): GetupdatedataOapiAttendanceResponse {
  var runtime = new Util.RuntimeOptions{};
  return getupdatedataOapiAttendanceEx(request, runtime);
}

/**
 * Description: 增加这个api的目的是为了给外部企业提供考勤数据变更，提升外部企业的考勤统计数据的准确度。外部企业只能通过入参获取数据，属于只读接口。
接口的入参是 查询用户corpId，userid以及查询日期，这些参数是我们开放平台推送给用户的变更。
返回的结果是三个list结果：分别是打卡流水记录 打卡结果 以及 审批列表 都是被查询用户在查询日期内的数据。
 */
async function getupdatedataOapiAttendanceEx(request: GetupdatedataOapiAttendanceRequest, runtime: Util.RuntimeOptions): GetupdatedataOapiAttendanceResponse {
  Util.validateModel(request);
  var appParams = Util.stringifyMapValue(Util.toMap(request.params));
  return doRequestOApi('POST', '/topapi/attendance/getupdatedata', request.headers, appParams, runtime);
}

model Add_to_single_chatOapiCspaceParams = {
  fileName?: string(description='文件名(需包含含扩展名),需要utf-8 urlEncode', name='file_name'),
  mediaId?: string(description='调用钉盘上传文件接口得到的mediaid,需要utf-8 urlEncode', name='media_id'),
  userid?: string(description='文件发送者微应用的agentId', name='userid'),
  agentId?: string(description='文件接收人的userid', name='agent_id'),
}

model Add_to_single_chatOapiCspaceRequest = {
  headers?: map[string]string,
  params?:Add_to_single_chatOapiCspaceParams,
}

model Add_to_single_chatOapiCspaceResponseBody = {
  errmsg?: string(description='errmsg', name='errmsg'),
  errcode?: int64(description='errcode', name='errcode'),
}

model Add_to_single_chatOapiCspaceResponse = {
  headers: map[string]string,
  body: Add_to_single_chatOapiCspaceResponseBody,
}

/**
 * Description: 发送文件给指定用户
 */
async function add_to_single_chatOapiCspace(request: Add_to_single_chatOapiCspaceRequest): Add_to_single_chatOapiCspaceResponse {
  var runtime = new Util.RuntimeOptions{};
  return add_to_single_chatOapiCspaceEx(request, runtime);
}

/**
 * Description: 发送文件给指定用户
 */
async function add_to_single_chatOapiCspaceEx(request: Add_to_single_chatOapiCspaceRequest, runtime: Util.RuntimeOptions): Add_to_single_chatOapiCspaceResponse {
  Util.validateModel(request);
  var appParams = Util.stringifyMapValue(Util.toMap(request.params));
  return doRequestOApi('POST', '/cspace/add_to_single_chat', request.headers, appParams, runtime);
}

model GetOapiSmartdeviceFacelevelParams = {
  useridList: [ string ](description='字符串数组', maxItems=100, name='userid_list'),
}

model GetOapiSmartdeviceFacelevelRequest = {
  headers?: map[string]string,
  params:GetOapiSmartdeviceFacelevelParams,
}

model GetOapiSmartdeviceFacelevelResponseBody = {
  errcode?: int64(description='错误码', name='errcode'),
  errmsg?: string(description='错误信息', name='errmsg'),
  result?: [
    {
      certifyType?: int64(description='实人认证结果', name='certify_type'),
      hasFace?: boolean(description='有人脸', name='has_face'),
      lastModified?: string(description='人脸最后更新时间', pattern='\\\\d{4}[-]\\\\d{1,2}[-]\\\\d{1,2}[T]\\\\d{2}:\\\\d{2}:\\\\d{2}[Z]', name='last_modified'),
      userid?: string(description='用户staffid', name='userid'),
      operatorUserid?: string(description='当前操作人的userid', name='operator_userid'),
      operatorUsername?: string(description='当前操作人的姓名', name='operator_username'),
    }
  ](description='父对象', name='result'),
}

model GetOapiSmartdeviceFacelevelResponse = {
  headers: map[string]string,
  body: GetOapiSmartdeviceFacelevelResponseBody,
}

/**
 * Description: 查询人脸实人认证的结果
 */
async function getOapiSmartdeviceFacelevel(request: GetOapiSmartdeviceFacelevelRequest): GetOapiSmartdeviceFacelevelResponse {
  var runtime = new Util.RuntimeOptions{};
  return getOapiSmartdeviceFacelevelEx(request, runtime);
}

/**
 * Description: 查询人脸实人认证的结果
 */
async function getOapiSmartdeviceFacelevelEx(request: GetOapiSmartdeviceFacelevelRequest, runtime: Util.RuntimeOptions): GetOapiSmartdeviceFacelevelResponse {
  Util.validateModel(request);
  var appParams = Util.stringifyMapValue(Util.toMap(request.params));
  return doRequestOApi('POST', '/topapi/smartdevice/facelevel/get', request.headers, appParams, runtime);
}

model AddOapiCspaceParams = {
  agentId?: string(description='微应用的agentId', name='agent_id'),
  code?: string(description='如果是微应用，code值为微应用免登授权码,如果是服务窗应用，code值为服务窗免登授权码。code为临时授权码，只能消费一次，下次请求需要重新获取新的code。', name='code'),
  mediaId?: string(description='调用钉盘上传文件接口得到的mediaid, 需要utf-8 urlEncode', name='media_id'),
  folderId?: string(description='调用云盘选择控件后获取的用户钉盘空间ID', name='folder_id'),
  spaceId?: string(description='调用云盘选择控件后获取的用户钉盘文件夹ID', name='space_id'),
  name?: string(description='上传文件的名称，不能包含非法字符，需要utf-8 urlEncode', name='name'),
  overwrite?: boolean(description='遇到同名文件是否覆盖，若不覆盖，则会自动重命名本次新增的文件，默认为false', name='overwrite'),
}

model AddOapiCspaceRequest = {
  headers?: map[string]string,
  params?:AddOapiCspaceParams,
}

model AddOapiCspaceResponseBody = {
  dentry?: string(description='dentry', name='dentry'),
  errmsg?: string(description='errmsg', name='errmsg'),
  errcode?: int64(description='errcode', name='errcode'),
}

model AddOapiCspaceResponse = {
  headers: map[string]string,
  body: AddOapiCspaceResponseBody,
}

/**
 * Description: 新增文件到用户钉盘
 */
async function addOapiCspace(request: AddOapiCspaceRequest): AddOapiCspaceResponse {
  var runtime = new Util.RuntimeOptions{};
  return addOapiCspaceEx(request, runtime);
}

/**
 * Description: 新增文件到用户钉盘
 */
async function addOapiCspaceEx(request: AddOapiCspaceRequest, runtime: Util.RuntimeOptions): AddOapiCspaceResponse {
  Util.validateModel(request);
  var appParams = Util.stringifyMapValue(Util.toMap(request.params));
  return doRequestOApi('GET', '/cspace/add', request.headers, appParams, runtime);
}

model Get_custom_spaceOapiCspaceParams = {
  domain?: string(description='企业调用时传入，需要为10个字节以内的字符串，仅可包含字母和数字，大小写不敏感', name='domain'),
  agentId?: string(description='ISV调用时传入，微应用agentId', name='agent_id'),
}

model Get_custom_spaceOapiCspaceRequest = {
  headers?: map[string]string,
  params?:Get_custom_spaceOapiCspaceParams,
}

model Get_custom_spaceOapiCspaceResponseBody = {
  spaceid?: string(description='spaceid', name='spaceid'),
  errmsg?: string(description='errmsg', name='errmsg'),
  errcode?: int64(description='errcode', name='errcode'),
}

model Get_custom_spaceOapiCspaceResponse = {
  headers: map[string]string,
  body: Get_custom_spaceOapiCspaceResponseBody,
}

/**
 * Description: 获取企业下的自定义空间
 */
async function get_custom_spaceOapiCspace(request: Get_custom_spaceOapiCspaceRequest): Get_custom_spaceOapiCspaceResponse {
  var runtime = new Util.RuntimeOptions{};
  return get_custom_spaceOapiCspaceEx(request, runtime);
}

/**
 * Description: 获取企业下的自定义空间
 */
async function get_custom_spaceOapiCspaceEx(request: Get_custom_spaceOapiCspaceRequest, runtime: Util.RuntimeOptions): Get_custom_spaceOapiCspaceResponse {
  Util.validateModel(request);
  var appParams = Util.stringifyMapValue(Util.toMap(request.params));
  return doRequestOApi('GET', '/cspace/get_custom_space', request.headers, appParams, runtime);
}

model Grant_custom_spaceOapiCspaceParams = {
  agentId?: string(description='ISV调用时传入，授权访问指定微应用的自定义空间', name='agent_id'),
  domain?: string(description='权限类型，目前支持上传和下载，上传请传add，下载请传download', name='domain'),
  type?: string(description='企业调用时传入，授权访问该domain的自定义空间', name='type'),
  userid?: string(description='企业用户userid', name='userid'),
  path?: string(description='授权访问的路径，如授权访问所有文件传“/”，授权访问/doc文件夹传“/doc/” 需要utf-8 urlEncode', name='path'),
  fileids?: string(description='授权访问的文件id列表，id之间用英文逗号隔开，如“fileId1,fileId2”', name='fileids'),
  duration?: int64(description='权限有效时间，有效范围为0~3600秒，超出此范围或不传默认为30秒', name='duration'),
}

model Grant_custom_spaceOapiCspaceRequest = {
  headers?: map[string]string,
  params?:Grant_custom_spaceOapiCspaceParams,
}

model Grant_custom_spaceOapiCspaceResponseBody = {
  errmsg?: string(description='errmsg', name='errmsg'),
  errcode?: int64(description='errcode', name='errcode'),
}

model Grant_custom_spaceOapiCspaceResponse = {
  headers: map[string]string,
  body: Grant_custom_spaceOapiCspaceResponseBody,
}

/**
 * Description: 授权用户访问企业下的自定义空间
 */
async function grant_custom_spaceOapiCspace(request: Grant_custom_spaceOapiCspaceRequest): Grant_custom_spaceOapiCspaceResponse {
  var runtime = new Util.RuntimeOptions{};
  return grant_custom_spaceOapiCspaceEx(request, runtime);
}

/**
 * Description: 授权用户访问企业下的自定义空间
 */
async function grant_custom_spaceOapiCspaceEx(request: Grant_custom_spaceOapiCspaceRequest, runtime: Util.RuntimeOptions): Grant_custom_spaceOapiCspaceResponse {
  Util.validateModel(request);
  var appParams = Util.stringifyMapValue(Util.toMap(request.params));
  return doRequestOApi('GET', '/cspace/grant_custom_space', request.headers, appParams, runtime);
}

model ApplytokenOapiSmartworkHrmFlexibleParams = {
  optUserId: string(description='用户在企业的ID', name='opt_user_id'),
  agentid: int64(description='微应用在企业的AgentId，不需要自定义字段可不传', name='agentid'),
}

model ApplytokenOapiSmartworkHrmFlexibleRequest = {
  headers?: map[string]string,
  params:ApplytokenOapiSmartworkHrmFlexibleParams,
}

model ApplytokenOapiSmartworkHrmFlexibleResponseBody = {
  result?: {
    token?: string(description='令牌', name='token'),
  }(description='结果', name='result'),
  success?: boolean(description='成功标记', name='success'),
  errcode?: int64(description='错误码', name='errcode'),
  errmsg?: string(description='错误描述', name='errmsg'),
}

model ApplytokenOapiSmartworkHrmFlexibleResponse = {
  headers: map[string]string,
  body: ApplytokenOapiSmartworkHrmFlexibleResponseBody,
}

/**
 * Description: 创建关联组织的功能，必须确保来源是灵活用工的微应用，为了确保这个来源是符合要求，提供灵活用工的微应用一个单独的开放接口来申请token，为下一个创建关联组织校验使用
 */
async function applytokenOapiSmartworkHrmFlexible(request: ApplytokenOapiSmartworkHrmFlexibleRequest): ApplytokenOapiSmartworkHrmFlexibleResponse {
  var runtime = new Util.RuntimeOptions{};
  return applytokenOapiSmartworkHrmFlexibleEx(request, runtime);
}

/**
 * Description: 创建关联组织的功能，必须确保来源是灵活用工的微应用，为了确保这个来源是符合要求，提供灵活用工的微应用一个单独的开放接口来申请token，为下一个创建关联组织校验使用
 */
async function applytokenOapiSmartworkHrmFlexibleEx(request: ApplytokenOapiSmartworkHrmFlexibleRequest, runtime: Util.RuntimeOptions): ApplytokenOapiSmartworkHrmFlexibleResponse {
  Util.validateModel(request);
  var appParams = Util.stringifyMapValue(Util.toMap(request.params));
  return doRequestOApi('POST', '/topapi/smartwork/hrm/flexible/applytoken', request.headers, appParams, runtime);
}

model TransactionOapiFileUploadParams = {
  agentId?: string(description='微应用的agentId', name='agent_id'),
  fileSize?: int64(description='文件大小', name='file_size'),
  chunkNumbers?: int64(description='文件总块数', name='chunk_numbers'),
  uploadId?: string(description='上传事务id 需要utf-8 urlEncode', name='upload_id'),
}

model TransactionOapiFileUploadRequest = {
  headers?: map[string]string,
  params?:TransactionOapiFileUploadParams,
}

model TransactionOapiFileUploadResponseBody = {
  uploadId?: string(description='upload_id', name='upload_id'),
  errmsg?: string(description='errmsg', name='errmsg'),
  errcode?: int64(description='errcode', name='errcode'),
  mediaId?: string(description='文件存储id', name='media_id'),
}

model TransactionOapiFileUploadResponse = {
  headers: map[string]string,
  body: TransactionOapiFileUploadResponseBody,
}

/**
 * Description: 开启文件上传事务
 */
async function transactionOapiFileUpload(request: TransactionOapiFileUploadRequest): TransactionOapiFileUploadResponse {
  var runtime = new Util.RuntimeOptions{};
  return transactionOapiFileUploadEx(request, runtime);
}

/**
 * Description: 开启文件上传事务
 */
async function transactionOapiFileUploadEx(request: TransactionOapiFileUploadRequest, runtime: Util.RuntimeOptions): TransactionOapiFileUploadResponse {
  Util.validateModel(request);
  var appParams = Util.stringifyMapValue(Util.toMap(request.params));
  return doRequestOApi('GET', '/file/upload/transaction', request.headers, appParams, runtime);
}

model UpdateOapiAttendanceGroupMemberParams = {
  opUserId: string(description='操作人userId', name='op_user_id'),
  groupId: int64(description='考勤组id', name='group_id'),
  scheduleFlag: int64(description='0表示从今天开始排班，1表示从明天', name='schedule_flag'),
  updateParam: {
    removeExtraUsers?: [ string ](description='要删除的无需考勤人员，没有的话，无需赋值', maxItems=20, name='remove_extra_users'),
    removeDepts?: [ string ](description='要删除的考勤部门，没有的话，无需赋值', maxItems=20, name='remove_depts'),
    removeUsers?: [ string ](description='要删除的考勤人员，没有的话，无需赋值', maxItems=20, name='remove_users'),
    addDepts?: [ string ](description='要添加的考勤部门，没有的话，无需赋值', maxItems=20, name='add_depts'),
    addUsers?: [ string ](description='要添加的考勤人员，没有的话，无需赋值', maxItems=20, name='add_users'),
    addExtraUsers?: [ string ](description='要添加的无需考勤人员，没有的话，无需赋值', maxItems=20, name='add_extra_users'),
  }(description='更新入参', name='update_param'),
}

model UpdateOapiAttendanceGroupMemberRequest = {
  headers?: map[string]string,
  params:UpdateOapiAttendanceGroupMemberParams,
}

model UpdateOapiAttendanceGroupMemberResponseBody = {
  errmsg?: string(description='错误信息', name='errmsg'),
  errcode?: int64(description='错误码', name='errcode'),
  success?: boolean(description='成功标记', name='success'),
}

model UpdateOapiAttendanceGroupMemberResponse = {
  headers: map[string]string,
  body: UpdateOapiAttendanceGroupMemberResponseBody,
}

/**
 * Description: 更新考勤组成员，新增/删除人员，部门，或无需考勤人员
 */
async function updateOapiAttendanceGroupMember(request: UpdateOapiAttendanceGroupMemberRequest): UpdateOapiAttendanceGroupMemberResponse {
  var runtime = new Util.RuntimeOptions{};
  return updateOapiAttendanceGroupMemberEx(request, runtime);
}

/**
 * Description: 更新考勤组成员，新增/删除人员，部门，或无需考勤人员
 */
async function updateOapiAttendanceGroupMemberEx(request: UpdateOapiAttendanceGroupMemberRequest, runtime: Util.RuntimeOptions): UpdateOapiAttendanceGroupMemberResponse {
  Util.validateModel(request);
  var appParams = Util.stringifyMapValue(Util.toMap(request.params));
  return doRequestOApi('POST', '/topapi/attendance/group/member/update', request.headers, appParams, runtime);
}

model GetbysourceidOapiTdpTaskBasicParams = {
  agentId?: int64(description='微应用agentId', name='agent_id'),
  sourceId: string(description='任务来源sourceId', name='source_id'),
  source?: string(description='任务来源source', name='source'),
}

model GetbysourceidOapiTdpTaskBasicRequest = {
  headers?: map[string]string,
  params:GetbysourceidOapiTdpTaskBasicParams,
}

model GetbysourceidOapiTdpTaskBasicResponseBody = {
  result?: {
    gmtCreate?: string(description='创建时间', pattern='\\\\d{4}[-]\\\\d{1,2}[-]\\\\d{1,2}[T]\\\\d{2}:\\\\d{2}:\\\\d{2}[Z]', name='gmt_create'),
    modifierUserid?: string(description='更新者id', name='modifier_userid'),
    creatorUserid?: string(description='创建者id', name='creator_userid'),
    bizTag?: string(description='业务标识', name='biz_tag'),
    priority?: int64(description='优先级', name='priority'),
    description?: string(description='任务描述', name='description'),
    finishDate?: string(description='完成时间', pattern='\\\\d{4}[-]\\\\d{1,2}[-]\\\\d{1,2}[T]\\\\d{2}:\\\\d{2}:\\\\d{2}[Z]', name='finish_date'),
    startDate?: string(description='开始时间', pattern='\\\\d{4}[-]\\\\d{1,2}[-]\\\\d{1,2}[T]\\\\d{2}:\\\\d{2}:\\\\d{2}[Z]', name='start_date'),
    isRecycled?: boolean(description='是否放入回收站', name='is_recycled'),
    isArchived?: boolean(description='是否归档', name='is_archived'),
    statusStage?: int64(description='状态阶段: 开始阶段(0)，进行阶段(1)，完成阶段(2)', name='status_stage'),
    sourceId?: string(description='来源id', name='source_id'),
    parentId?: string(description='父任务id', name='parent_id'),
    taskTypeId?: int64(description='任务类型id', name='task_type_id'),
    statusId?: int64(description='工作流状态id', name='status_id'),
    executorUserid?: string(description='执行者id', name='executor_userid'),
    subject?: string(description='标题', name='subject'),
    gmtModified?: string(description='修改时间', pattern='\\\\d{4}[-]\\\\d{1,2}[-]\\\\d{1,2}[T]\\\\d{2}:\\\\d{2}:\\\\d{2}[Z]', name='gmt_modified'),
    belongCorpId?: string(description='归属企业id', name='belong_corp_id'),
    taskTypeCategory?: string(description='任务类型分类:// 任务 TASK("task"),     // 需求     REQ("req"),     // 缺陷     BUG("bug"),     // 风险     RISK("risk"),     // 工作项     WORKITEM("workitem")', name='task_type_category'),
    taskId?: string(description='任务id', name='task_id'),
    planStartDate?: string(description='计划开始时间', pattern='\\\\d{4}[-]\\\\d{1,2}[-]\\\\d{1,2}[T]\\\\d{2}:\\\\d{2}:\\\\d{2}[Z]', name='plan_start_date'),
    planFinishDate?: string(description='计划完成时间', pattern='\\\\d{4}[-]\\\\d{1,2}[-]\\\\d{1,2}[T]\\\\d{2}:\\\\d{2}:\\\\d{2}[Z]', name='plan_finish_date'),
    trackerUserids?: [ string ](description='任务参与者列表', name='tracker_userids'),
    extension?: {
      commentCount?: string(description='评论数', name='comment_count'),
      filePath?: string(description='附件地址', name='file_path'),
      other?: string(description='用户可扩展的字段', name='other'),
    }(description='任务的扩展字段', name='extension'),
    projectId?: string(description='任务所属项目ID', name='project_id'),
    source?: string(description='任务source来源', name='source'),
  }(description='响应结果', name='result'),
  errcode?: int64(description='错误码', name='errcode'),
  errmsg?: string(description='错误描述', name='errmsg'),
}

model GetbysourceidOapiTdpTaskBasicResponse = {
  headers: map[string]string,
  body: GetbysourceidOapiTdpTaskBasicResponseBody,
}

/**
 * Description: 根据任务来源source和sourceId获取任务详情
 */
async function getbysourceidOapiTdpTaskBasic(request: GetbysourceidOapiTdpTaskBasicRequest): GetbysourceidOapiTdpTaskBasicResponse {
  var runtime = new Util.RuntimeOptions{};
  return getbysourceidOapiTdpTaskBasicEx(request, runtime);
}

/**
 * Description: 根据任务来源source和sourceId获取任务详情
 */
async function getbysourceidOapiTdpTaskBasicEx(request: GetbysourceidOapiTdpTaskBasicRequest, runtime: Util.RuntimeOptions): GetbysourceidOapiTdpTaskBasicResponse {
  Util.validateModel(request);
  var appParams = Util.stringifyMapValue(Util.toMap(request.params));
  return doRequestOApi('POST', '/topapi/tdp/task/basic/getbysourceid', request.headers, appParams, runtime);
}

model ListbyusersOapiAttendanceScheduleParams = {
  opUserId: string(description='操作者userId', name='op_user_id'),
  userids: [ string ](description='人员userIds', maxItems=50, name='userids'),
  fromDateTime: int64(description='起始日期', name='from_date_time'),
  toDateTime: int64(description='结束日期', name='to_date_time'),
}

model ListbyusersOapiAttendanceScheduleRequest = {
  headers?: map[string]string,
  params:ListbyusersOapiAttendanceScheduleParams,
}

model ListbyusersOapiAttendanceScheduleResponseBody = {
  result?: [
    {
      checkType?: string(description='考勤类型，上班/下班', name='check_type'),
      planCheckTime?: string(description='计划打卡时间', pattern='\\\\d{4}[-]\\\\d{1,2}[-]\\\\d{1,2}[T]\\\\d{2}:\\\\d{2}:\\\\d{2}[Z]', name='plan_check_time'),
      groupId?: int64(description='考勤组id', name='group_id'),
      userid?: string(description='用户userId', name='userid'),
      approveId?: int64(description='审批单id', name='approve_id'),
      workDate?: string(description='工作天', pattern='\\\\d{4}[-]\\\\d{1,2}[-]\\\\d{1,2}[T]\\\\d{2}:\\\\d{2}:\\\\d{2}[Z]', name='work_date'),
      id?: int64(description='id', name='id'),
      shiftVersion?: int64(description='班次id', name='shift_version'),
      shiftId?: int64(description='班次版本', name='shift_id'),
      isRest?: string(description='是否休息', name='is_rest'),
    }
  ](description='demo', name='result'),
  success?: boolean(description='成功标记', name='success'),
  errcode?: int64(description='错误码', name='errcode'),
  errmsg?: string(description='错误信息', name='errmsg'),
}

model ListbyusersOapiAttendanceScheduleResponse = {
  headers: map[string]string,
  body: ListbyusersOapiAttendanceScheduleResponseBody,
}

/**
 * Description: 查询一批人一段时间的排班
 */
async function listbyusersOapiAttendanceSchedule(request: ListbyusersOapiAttendanceScheduleRequest): ListbyusersOapiAttendanceScheduleResponse {
  var runtime = new Util.RuntimeOptions{};
  return listbyusersOapiAttendanceScheduleEx(request, runtime);
}

/**
 * Description: 查询一批人一段时间的排班
 */
async function listbyusersOapiAttendanceScheduleEx(request: ListbyusersOapiAttendanceScheduleRequest, runtime: Util.RuntimeOptions): ListbyusersOapiAttendanceScheduleResponse {
  Util.validateModel(request);
  var appParams = Util.stringifyMapValue(Util.toMap(request.params));
  return doRequestOApi('POST', '/topapi/attendance/schedule/listbyusers', request.headers, appParams, runtime);
}

model ListbyidsOapiAttendanceGroupMemberParams = {
  opUserId: string(description='操作人userId', name='op_user_id'),
  memberIds: [ string ](description='成员id，可以是userId或者deptId', maxItems=20, name='member_ids'),
  memberType: int64(description='0 表示员工，1表示部门', name='member_type'),
  groupId: int64(description='考勤组id', name='group_id'),
}

model ListbyidsOapiAttendanceGroupMemberRequest = {
  headers?: map[string]string,
  params:ListbyidsOapiAttendanceGroupMemberParams,
}

model ListbyidsOapiAttendanceGroupMemberResponseBody = {
  errmsg?: string(description='错误信息', name='errmsg'),
  errcode?: int64(description='错误码', name='errcode'),
  success?: boolean(description='成功标记', name='success'),
  result?: [ string ](description='人员列表', name='result'),
}

model ListbyidsOapiAttendanceGroupMemberResponse = {
  headers: map[string]string,
  body: ListbyidsOapiAttendanceGroupMemberResponseBody,
}

/**
 * Description: 传入id，获取在考勤组中的人
 */
async function listbyidsOapiAttendanceGroupMember(request: ListbyidsOapiAttendanceGroupMemberRequest): ListbyidsOapiAttendanceGroupMemberResponse {
  var runtime = new Util.RuntimeOptions{};
  return listbyidsOapiAttendanceGroupMemberEx(request, runtime);
}

/**
 * Description: 传入id，获取在考勤组中的人
 */
async function listbyidsOapiAttendanceGroupMemberEx(request: ListbyidsOapiAttendanceGroupMemberRequest, runtime: Util.RuntimeOptions): ListbyidsOapiAttendanceGroupMemberResponse {
  Util.validateModel(request);
  var appParams = Util.stringifyMapValue(Util.toMap(request.params));
  return doRequestOApi('POST', '/topapi/attendance/group/member/listbyids', request.headers, appParams, runtime);
}

model ListOapiAttendanceGroupMemberParams = {
  cursor?: int64(description='游标', name='cursor'),
  opUserId: string(description='操作人userId', name='op_user_id'),
  groupId: int64(description='考勤组id', name='group_id'),
}

model ListOapiAttendanceGroupMemberRequest = {
  headers?: map[string]string,
  params:ListOapiAttendanceGroupMemberParams,
}

model ListOapiAttendanceGroupMemberResponseBody = {
  errmsg?: string(description='错误信息', name='errmsg'),
  errcode?: int64(description='错误码', name='errcode'),
  success?: boolean(description='成功标记', name='success'),
  result?: {
    hasMore?: boolean(description='是否还有', name='has_more'),
    cursor?: int64(description='游标', name='cursor'),
    result?: [
      {
        atcFlag?: string(description='0表示需要考勤，1表示无需考勤人员', name='atc_flag'),
        type?: string(description='0表示员工，1表示部门', name='type'),
        memberId?: string(description='成员id，可以是userId或deptId', name='member_id'),
      }
    ](description='人员userId列表', name='result'),
  }(description='人员列表', name='result'),
}

model ListOapiAttendanceGroupMemberResponse = {
  headers: map[string]string,
  body: ListOapiAttendanceGroupMemberResponseBody,
}

/**
 * Description: 分批次获取考勤组成员信息
 */
async function listOapiAttendanceGroupMember(request: ListOapiAttendanceGroupMemberRequest): ListOapiAttendanceGroupMemberResponse {
  var runtime = new Util.RuntimeOptions{};
  return listOapiAttendanceGroupMemberEx(request, runtime);
}

/**
 * Description: 分批次获取考勤组成员信息
 */
async function listOapiAttendanceGroupMemberEx(request: ListOapiAttendanceGroupMemberRequest, runtime: Util.RuntimeOptions): ListOapiAttendanceGroupMemberResponse {
  Util.validateModel(request);
  var appParams = Util.stringifyMapValue(Util.toMap(request.params));
  return doRequestOApi('POST', '/topapi/attendance/group/member/list', request.headers, appParams, runtime);
}

model QueryOapiAttendanceGroupParams = {
  opUserId: string(description='操作者userId', name='op_user_id'),
  groupId: int64(description='考勤组id', name='group_id'),
}

model QueryOapiAttendanceGroupRequest = {
  headers?: map[string]string,
  params:QueryOapiAttendanceGroupParams,
}

model QueryOapiAttendanceGroupResponseBody = {
  result?: {
    name?: string(description='名称', name='name'),
    id?: int64(description='id', name='id'),
    wifis?: [ string ](description='wifi名称', name='wifis'),
    addressList?: [ string ](description='考勤地址', name='address_list'),
    workDayList?: [ int64 ](description='工作日', name='work_day_list'),
    memberCount?: int64(description='人员人数', name='member_count'),
    type?: string(description='固定值，轮班制', name='type'),
    url?: string(description='跳转链接', name='url'),
    managerList?: string(description='考勤组管理员', name='manager_list'),
    ownerUserId?: string(description='考勤组主负责人 id', name='owner_user_id'),
  }(description='demo', name='result'),
  success?: boolean(description='成功标记', name='success'),
  errcode?: int64(description='错误码', name='errcode'),
  errmsg?: string(description='错误信息', name='errmsg'),
}

model QueryOapiAttendanceGroupResponse = {
  headers: map[string]string,
  body: QueryOapiAttendanceGroupResponseBody,
}

/**
 * Description: 按id查询考勤组
 */
async function queryOapiAttendanceGroup(request: QueryOapiAttendanceGroupRequest): QueryOapiAttendanceGroupResponse {
  var runtime = new Util.RuntimeOptions{};
  return queryOapiAttendanceGroupEx(request, runtime);
}

/**
 * Description: 按id查询考勤组
 */
async function queryOapiAttendanceGroupEx(request: QueryOapiAttendanceGroupRequest, runtime: Util.RuntimeOptions): QueryOapiAttendanceGroupResponse {
  Util.validateModel(request);
  var appParams = Util.stringifyMapValue(Util.toMap(request.params));
  return doRequestOApi('POST', '/topapi/attendance/group/query', request.headers, appParams, runtime);
}

model GetbysourceidOapiWorkspaceTaskParams = {
  agentId?: int64(description='微应用agentId', name='agent_id'),
  sourceId: string(description='任务来源sourceId', name='source_id'),
  source?: string(description='任务来源source', name='source'),
}

model GetbysourceidOapiWorkspaceTaskRequest = {
  headers?: map[string]string,
  params:GetbysourceidOapiWorkspaceTaskParams,
}

model GetbysourceidOapiWorkspaceTaskResponseBody = {
  result?: {
    gmtCreate?: string(description='创建时间', pattern='\\\\d{4}[-]\\\\d{1,2}[-]\\\\d{1,2}[T]\\\\d{2}:\\\\d{2}:\\\\d{2}[Z]', name='gmt_create'),
    modifierUserid?: string(description='更新者id', name='modifier_userid'),
    creatorUserid?: string(description='创建者id', name='creator_userid'),
    bizTag?: string(description='业务标识', name='biz_tag'),
    priority?: int64(description='优先级', name='priority'),
    description?: string(description='任务描述', name='description'),
    finishDate?: string(description='完成时间', pattern='\\\\d{4}[-]\\\\d{1,2}[-]\\\\d{1,2}[T]\\\\d{2}:\\\\d{2}:\\\\d{2}[Z]', name='finish_date'),
    startDate?: string(description='开始时间', pattern='\\\\d{4}[-]\\\\d{1,2}[-]\\\\d{1,2}[T]\\\\d{2}:\\\\d{2}:\\\\d{2}[Z]', name='start_date'),
    isRecycled?: boolean(description='是否放入回收站', name='is_recycled'),
    isArchived?: boolean(description='是否归档', name='is_archived'),
    statusStage?: int64(description='状态阶段: 开始阶段(0)，进行阶段(1)，完成阶段(2)', name='status_stage'),
    sourceId?: string(description='来源id', name='source_id'),
    parentId?: string(description='父任务id', name='parent_id'),
    taskTypeId?: int64(description='任务类型id', name='task_type_id'),
    statusId?: int64(description='工作流状态id', name='status_id'),
    executorUserid?: string(description='执行者id', name='executor_userid'),
    subject?: string(description='标题', name='subject'),
    gmtModified?: string(description='修改时间', pattern='\\\\d{4}[-]\\\\d{1,2}[-]\\\\d{1,2}[T]\\\\d{2}:\\\\d{2}:\\\\d{2}[Z]', name='gmt_modified'),
    corpId?: string(description='任务所属项目(虚拟企业），基于项目空间的项目', name='corp_id'),
    belongCorpId?: string(description='归属企业id', name='belong_corp_id'),
    taskTypeCategory?: string(description='任务类型分类:// 任务 TASK("task"),     // 需求     REQ("req"),     // 缺陷     BUG("bug"),     // 风险     RISK("risk"),     // 工作项     WORKITEM("workitem")', name='task_type_category'),
    taskId?: string(description='任务id', name='task_id'),
    planStartDate?: string(description='计划开始时间', pattern='\\\\d{4}[-]\\\\d{1,2}[-]\\\\d{1,2}[T]\\\\d{2}:\\\\d{2}:\\\\d{2}[Z]', name='plan_start_date'),
    planFinishDate?: string(description='计划完成时间', pattern='\\\\d{4}[-]\\\\d{1,2}[-]\\\\d{1,2}[T]\\\\d{2}:\\\\d{2}:\\\\d{2}[Z]', name='plan_finish_date'),
    trackerUserids?: [ string ](description='任务参与者列表', name='tracker_userids'),
    extension?: {
      commentCount?: string(description='评论数', name='comment_count'),
      filePath?: string(description='附件地址', name='file_path'),
      other?: string(description='用户可扩展的字段', name='other'),
    }(description='任务的扩展字段', name='extension'),
    source?: string(description='任务source来源', name='source'),
  }(description='响应结果', name='result'),
  errcode?: int64(description='错误码', name='errcode'),
  errmsg?: string(description='错误描述', name='errmsg'),
}

model GetbysourceidOapiWorkspaceTaskResponse = {
  headers: map[string]string,
  body: GetbysourceidOapiWorkspaceTaskResponseBody,
}

/**
 * Description: 根据任务来源source和sourceId获取任务详情
 */
async function getbysourceidOapiWorkspaceTask(request: GetbysourceidOapiWorkspaceTaskRequest): GetbysourceidOapiWorkspaceTaskResponse {
  var runtime = new Util.RuntimeOptions{};
  return getbysourceidOapiWorkspaceTaskEx(request, runtime);
}

/**
 * Description: 根据任务来源source和sourceId获取任务详情
 */
async function getbysourceidOapiWorkspaceTaskEx(request: GetbysourceidOapiWorkspaceTaskRequest, runtime: Util.RuntimeOptions): GetbysourceidOapiWorkspaceTaskResponse {
  Util.validateModel(request);
  var appParams = Util.stringifyMapValue(Util.toMap(request.params));
  return doRequestOApi('POST', '/topapi/workspace/task/getbysourceid', request.headers, appParams, runtime);
}

model UpdatepunchesOapiAttendanceShiftParams = {
  opUserId: string(description='操作者userId', name='op_user_id'),
  punches?: [
    {
      id: int64(description='卡点id', name='id'),
      freeCheck: boolean(description='是否无需打卡 true：开启无需打卡，false：关闭无需打卡', name='free_check'),
    }
  ](description='系统自动生成', maxItems=20, name='punches'),
  shiftId: int64(description='班次id', name='shift_id'),
}

model UpdatepunchesOapiAttendanceShiftRequest = {
  headers?: map[string]string,
  params:UpdatepunchesOapiAttendanceShiftParams,
}

model UpdatepunchesOapiAttendanceShiftResponseBody = {
  success?: boolean(description='成功失败', name='success'),
  errcode?: int64(description='错误码，0代表成功', name='errcode'),
  errmsg?: string(description='错误文案', name='errmsg'),
}

model UpdatepunchesOapiAttendanceShiftResponse = {
  headers: map[string]string,
  body: UpdatepunchesOapiAttendanceShiftResponseBody,
}

/**
 * Description: 修改卡点的设置信息
 */
async function updatepunchesOapiAttendanceShift(request: UpdatepunchesOapiAttendanceShiftRequest): UpdatepunchesOapiAttendanceShiftResponse {
  var runtime = new Util.RuntimeOptions{};
  return updatepunchesOapiAttendanceShiftEx(request, runtime);
}

/**
 * Description: 修改卡点的设置信息
 */
async function updatepunchesOapiAttendanceShiftEx(request: UpdatepunchesOapiAttendanceShiftRequest, runtime: Util.RuntimeOptions): UpdatepunchesOapiAttendanceShiftResponse {
  Util.validateModel(request);
  var appParams = Util.stringifyMapValue(Util.toMap(request.params));
  return doRequestOApi('POST', '/topapi/attendance/shift/updatepunches', request.headers, appParams, runtime);
}

model CidOapiChatGetParams = {
  chatid: string(description='会话Id', name='chatid'),
}

model CidOapiChatGetRequest = {
  headers?: map[string]string,
  params:CidOapiChatGetParams,
}

model CidOapiChatGetResponseBody = {
  success?: boolean(description='是否调用成功', name='success'),
  errcode?: int64(description='错误码', name='errcode'),
  errmsg?: string(description='错误信息', name='errmsg'),
  result?: string(description='返回的cid', name='result'),
}

model CidOapiChatGetResponse = {
  headers: map[string]string,
  body: CidOapiChatGetResponseBody,
}

/**
 * Description: 通过chatId和orgId获取对应的会话Idcid
 */
async function cidOapiChatGet(request: CidOapiChatGetRequest): CidOapiChatGetResponse {
  var runtime = new Util.RuntimeOptions{};
  return cidOapiChatGetEx(request, runtime);
}

/**
 * Description: 通过chatId和orgId获取对应的会话Idcid
 */
async function cidOapiChatGetEx(request: CidOapiChatGetRequest, runtime: Util.RuntimeOptions): CidOapiChatGetResponse {
  Util.validateModel(request);
  var appParams = Util.stringifyMapValue(Util.toMap(request.params));
  return doRequestOApi('POST', '/topapi/chat/get/cid', request.headers, appParams, runtime);
}

model AgentOapiBipaasDiParams = {
  request: {
    path: string(description='路径', name='path'),
    params: string(description='参数', name='params'),
  }(description='请求体', name='request'),
}

model AgentOapiBipaasDiRequest = {
  headers?: map[string]string,
  params:AgentOapiBipaasDiParams,
}

model AgentOapiBipaasDiResponseBody = {
  result?: string(description='返回结果', name='result'),
  success?: boolean(description='是否成功', name='success'),
  errcode?: int64(description='ding错误码', name='errcode'),
  errmsg?: string(description='错误信息', name='errmsg'),
}

model AgentOapiBipaasDiResponse = {
  headers: map[string]string,
  body: AgentOapiBipaasDiResponseBody,
}

/**
 * Description: 给蚂蚁DeepInsight的Agent二次封装，支持对内部数据源的命令下发
 */
async function agentOapiBipaasDi(request: AgentOapiBipaasDiRequest): AgentOapiBipaasDiResponse {
  var runtime = new Util.RuntimeOptions{};
  return agentOapiBipaasDiEx(request, runtime);
}

/**
 * Description: 给蚂蚁DeepInsight的Agent二次封装，支持对内部数据源的命令下发
 */
async function agentOapiBipaasDiEx(request: AgentOapiBipaasDiRequest, runtime: Util.RuntimeOptions): AgentOapiBipaasDiResponse {
  Util.validateModel(request);
  var appParams = Util.stringifyMapValue(Util.toMap(request.params));
  return doRequestOApi('POST', '/topapi/bipaas/di/agent', request.headers, appParams, runtime);
}

model SetoaurlOapiOrgParams = {
  oaUrl: string(description='工作台首页地址，必须是https开头', name='oa_url'),
  oaTitle?: string(description='工作台名称，认证企业才能设置', name='oa_title'),
}

model SetoaurlOapiOrgRequest = {
  headers?: map[string]string,
  params:SetoaurlOapiOrgParams,
}

model SetoaurlOapiOrgResponseBody = {
  errcode?: int64(description='dingOpenErrcode', name='errcode'),
  errmsg?: string(description='errorMsg', name='errmsg'),
}

model SetoaurlOapiOrgResponse = {
  headers: map[string]string,
  body: SetoaurlOapiOrgResponseBody,
}

/**
 * Description: 企业可使用该接口来设置工作台首页地址，效果类似于在oa管理后台手动设置工作台地址
 */
async function setoaurlOapiOrg(request: SetoaurlOapiOrgRequest): SetoaurlOapiOrgResponse {
  var runtime = new Util.RuntimeOptions{};
  return setoaurlOapiOrgEx(request, runtime);
}

/**
 * Description: 企业可使用该接口来设置工作台首页地址，效果类似于在oa管理后台手动设置工作台地址
 */
async function setoaurlOapiOrgEx(request: SetoaurlOapiOrgRequest, runtime: Util.RuntimeOptions): SetoaurlOapiOrgResponse {
  Util.validateModel(request);
  var appParams = Util.stringifyMapValue(Util.toMap(request.params));
  return doRequestOApi('POST', '/topapi/org/setoaurl', request.headers, appParams, runtime);
}

model List_treeOapiBipaasMenuParams = {
  antcloudTenantId: string(description='金融云租户 ID', name='antcloud_tenant_id'),
  published: boolean(description='是否已发布菜单', name='published'),
}

model List_treeOapiBipaasMenuRequest = {
  headers?: map[string]string,
  params:List_treeOapiBipaasMenuParams,
}

model List_treeOapiBipaasMenuResponseBody = {
  result?: string(description='菜单数据', name='result'),
  errcode?: int64(description='错误码', name='errcode'),
  errmsg?: string(description='错误信息', name='errmsg'),
  success?: boolean(description='是否成功', name='success'),
}

model List_treeOapiBipaasMenuResponse = {
  headers: map[string]string,
  body: List_treeOapiBipaasMenuResponseBody,
}

/**
 * Description: 提供给蚂蚁 DeepInsight 查询对应租户在智能参谋的菜单数据
 */
async function list_treeOapiBipaasMenu(request: List_treeOapiBipaasMenuRequest): List_treeOapiBipaasMenuResponse {
  var runtime = new Util.RuntimeOptions{};
  return list_treeOapiBipaasMenuEx(request, runtime);
}

/**
 * Description: 提供给蚂蚁 DeepInsight 查询对应租户在智能参谋的菜单数据
 */
async function list_treeOapiBipaasMenuEx(request: List_treeOapiBipaasMenuRequest, runtime: Util.RuntimeOptions): List_treeOapiBipaasMenuResponse {
  Util.validateModel(request);
  var appParams = Util.stringifyMapValue(Util.toMap(request.params));
  return doRequestOApi('POST', '/topapi/bipaas/menu/list_tree', request.headers, appParams, runtime);
}

model GetOapiKacDatavGroupParams = {
  request: {
    dataId: string(description='日期标识', name='data_id'),
  }(description='请求对象', name='request'),
}

model GetOapiKacDatavGroupRequest = {
  headers?: map[string]string,
  params:GetOapiKacDatavGroupParams,
}

model GetOapiKacDatavGroupResponseBody = {
  result?: {
    innerGroupCnt?: int64(description='内部群数量', name='inner_group_cnt'),
    deptGroupCnt?: int64(description='部门群数量', name='dept_group_cnt'),
  }(description='返回结果对象', name='result'),
  errcode?: int64(description='错误码', name='errcode'),
  errmsg?: string(description='错误描述', name='errmsg'),
}

model GetOapiKacDatavGroupResponse = {
  headers: map[string]string,
  body: GetOapiKacDatavGroupResponseBody,
}

/**
 * Description: 大客户钉钉数据：查询大客户各类群组创建情况统计数据
 */
async function getOapiKacDatavGroup(request: GetOapiKacDatavGroupRequest): GetOapiKacDatavGroupResponse {
  var runtime = new Util.RuntimeOptions{};
  return getOapiKacDatavGroupEx(request, runtime);
}

/**
 * Description: 大客户钉钉数据：查询大客户各类群组创建情况统计数据
 */
async function getOapiKacDatavGroupEx(request: GetOapiKacDatavGroupRequest, runtime: Util.RuntimeOptions): GetOapiKacDatavGroupResponse {
  Util.validateModel(request);
  var appParams = Util.stringifyMapValue(Util.toMap(request.params));
  return doRequestOApi('POST', '/topapi/kac/datav/group/get', request.headers, appParams, runtime);
}

model RemoveuserlistOapiCallParams = {
  staffIdList: [ string ](description='要删除的员工userid列表', maxItems=20, name='staff_id_list'),
}

model RemoveuserlistOapiCallRequest = {
  headers?: map[string]string,
  params:RemoveuserlistOapiCallParams,
}

model RemoveuserlistOapiCallResponseBody = {
  errcode?: int64(description='dingOpenErrcode', name='errcode'),
  errmsg?: string(description='errorMsg', name='errmsg'),
}

model RemoveuserlistOapiCallResponse = {
  headers: map[string]string,
  body: RemoveuserlistOapiCallResponseBody,
}

/**
 * Description: 删除isv免费电话员工名单
 */
async function removeuserlistOapiCall(request: RemoveuserlistOapiCallRequest): RemoveuserlistOapiCallResponse {
  var runtime = new Util.RuntimeOptions{};
  return removeuserlistOapiCallEx(request, runtime);
}

/**
 * Description: 删除isv免费电话员工名单
 */
async function removeuserlistOapiCallEx(request: RemoveuserlistOapiCallRequest, runtime: Util.RuntimeOptions): RemoveuserlistOapiCallResponse {
  Util.validateModel(request);
  var appParams = Util.stringifyMapValue(Util.toMap(request.params));
  return doRequestOApi('POST', '/topapi/call/removeuserlist', request.headers, appParams, runtime);
}

model QuerydimissionOapiSmartworkHrmEmployeeParams = {
  offset: int64(description='分页游标，从0开始。根据返回结果里的next_cursor是否为空来判断是否还有下一页，且再次调用时offset设置成next_cursor的值', minimum=0, name='offset'),
  size: int64(description='分页大小，最大50', maximum=50, minimum=1, name='size'),
}

model QuerydimissionOapiSmartworkHrmEmployeeRequest = {
  headers?: map[string]string,
  params:QuerydimissionOapiSmartworkHrmEmployeeParams,
}

model QuerydimissionOapiSmartworkHrmEmployeeResponseBody = {
  result?: {
    nextCursor?: int64(description='下一次分页调用的offset值，当返回结果里没有nextCursor时，表示分页结束', name='next_cursor'),
    dataList?: [ string ](description='数据结果列表', name='data_list'),
  }(description='分页结果', name='result'),
  errcode?: int64(description='错误码', name='errcode'),
  errmsg?: string(description='错误信息', name='errmsg'),
  success?: boolean(description='调用结果', name='success'),
}

model QuerydimissionOapiSmartworkHrmEmployeeResponse = {
  headers: map[string]string,
  body: QuerydimissionOapiSmartworkHrmEmployeeResponseBody,
}

/**
 * Description: 智能人事业务，提供企业/ISV分页查询公司离职员工id列表
 */
async function querydimissionOapiSmartworkHrmEmployee(request: QuerydimissionOapiSmartworkHrmEmployeeRequest): QuerydimissionOapiSmartworkHrmEmployeeResponse {
  var runtime = new Util.RuntimeOptions{};
  return querydimissionOapiSmartworkHrmEmployeeEx(request, runtime);
}

/**
 * Description: 智能人事业务，提供企业/ISV分页查询公司离职员工id列表
 */
async function querydimissionOapiSmartworkHrmEmployeeEx(request: QuerydimissionOapiSmartworkHrmEmployeeRequest, runtime: Util.RuntimeOptions): QuerydimissionOapiSmartworkHrmEmployeeResponse {
  Util.validateModel(request);
  var appParams = Util.stringifyMapValue(Util.toMap(request.params));
  return doRequestOApi('POST', '/topapi/smartwork/hrm/employee/querydimission', request.headers, appParams, runtime);
}

model SetuserlistOapiCallParams = {
  staffIdList: [ string ](description='套件所所属企业免费电话主叫人员工号列表', maxItems=20, name='staff_id_list'),
}

model SetuserlistOapiCallRequest = {
  headers?: map[string]string,
  params:SetuserlistOapiCallParams,
}

model SetuserlistOapiCallResponseBody = {
  errcode?: int64(description='dingOpenErrcode', name='errcode'),
  errmsg?: string(description='errorMsg', name='errmsg'),
}

model SetuserlistOapiCallResponse = {
  headers: map[string]string,
  body: SetuserlistOapiCallResponseBody,
}

/**
 * Description: 设置isv发起免费电话的主叫白名单
 */
async function setuserlistOapiCall(request: SetuserlistOapiCallRequest): SetuserlistOapiCallResponse {
  var runtime = new Util.RuntimeOptions{};
  return setuserlistOapiCallEx(request, runtime);
}

/**
 * Description: 设置isv发起免费电话的主叫白名单
 */
async function setuserlistOapiCallEx(request: SetuserlistOapiCallRequest, runtime: Util.RuntimeOptions): SetuserlistOapiCallResponse {
  Util.validateModel(request);
  var appParams = Util.stringifyMapValue(Util.toMap(request.params));
  return doRequestOApi('POST', '/topapi/call/setuserlist', request.headers, appParams, runtime);
}

model ListdimissionOapiSmartworkHrmEmployeeParams = {
  useridList?: [ string ](description='员工id', maxItems=50, name='userid_list'),
}

model ListdimissionOapiSmartworkHrmEmployeeRequest = {
  headers?: map[string]string,
  params?:ListdimissionOapiSmartworkHrmEmployeeParams,
}

model ListdimissionOapiSmartworkHrmEmployeeResponseBody = {
  result?: [
    {
      userid?: string(description='员工id', name='userid'),
      lastWorkDay?: int64(description='最后工作日', name='last_work_day'),
      deptList?: [
        {
          deptPath?: string(description='部门路径', name='dept_path'),
          deptId?: int64(description='部门id', name='dept_id'),
        }
      ](description='离职部门列表', name='dept_list'),
      reasonMemo?: string(description='离职原因备注', name='reason_memo'),
      reasonType?: int64(description='离职原因类型：1，家庭原因；2，个人原因；3，发展原因；4，合同到期不续签；5，协议解除；6，无法胜任工作；7，经济性裁员；8，严重违法违纪；9，其他', name='reason_type'),
      preStatus?: int64(description='离职前工作状态：1，待入职；2，试用期；3，正式', name='pre_status'),
      handoverUserid?: string(description='离职交接人', name='handover_userid'),
      status?: int64(description='离职状态：1，待离职；2，已离职', name='status'),
      mainDeptName?: string(description='离职前主部门名称', name='main_dept_name'),
      mainDeptId?: int64(description='离职前主部门id', name='main_dept_id'),
    }
  ](description='数据结果', name='result'),
  errcode?: int64(description='错误码', name='errcode'),
  errmsg?: string(description='错误信息', name='errmsg'),
  success?: boolean(description='success', name='success'),
}

model ListdimissionOapiSmartworkHrmEmployeeResponse = {
  headers: map[string]string,
  body: ListdimissionOapiSmartworkHrmEmployeeResponseBody,
}

/**
 * Description: 根据传入的staffId列表，批量查询员工的离职信息
 */
async function listdimissionOapiSmartworkHrmEmployee(request: ListdimissionOapiSmartworkHrmEmployeeRequest): ListdimissionOapiSmartworkHrmEmployeeResponse {
  var runtime = new Util.RuntimeOptions{};
  return listdimissionOapiSmartworkHrmEmployeeEx(request, runtime);
}

/**
 * Description: 根据传入的staffId列表，批量查询员工的离职信息
 */
async function listdimissionOapiSmartworkHrmEmployeeEx(request: ListdimissionOapiSmartworkHrmEmployeeRequest, runtime: Util.RuntimeOptions): ListdimissionOapiSmartworkHrmEmployeeResponse {
  Util.validateModel(request);
  var appParams = Util.stringifyMapValue(Util.toMap(request.params));
  return doRequestOApi('POST', '/topapi/smartwork/hrm/employee/listdimission', request.headers, appParams, runtime);
}

model CalluserOapiCallParams = {
  staffId: string(description='isv套件所属企业下的员工userid', name='staff_id'),
  authedCorpId: string(description='授权isv套件企业的corpid', name='authed_corp_id'),
  authedStaffId: string(description='授权isv套件企业的员工userid', name='authed_staff_id'),
}

model CalluserOapiCallRequest = {
  headers?: map[string]string,
  params:CalluserOapiCallParams,
}

model CalluserOapiCallResponseBody = {
  errcode?: int64(description='dingOpenErrcode', name='errcode'),
  errmsg?: string(description='errorMsg', name='errmsg'),
}

model CalluserOapiCallResponse = {
  headers: map[string]string,
  body: CalluserOapiCallResponseBody,
}

/**
 * Description: 主叫方发起免费电话给授权企业下的授权范围内的人员
 */
async function calluserOapiCall(request: CalluserOapiCallRequest): CalluserOapiCallResponse {
  var runtime = new Util.RuntimeOptions{};
  return calluserOapiCallEx(request, runtime);
}

/**
 * Description: 主叫方发起免费电话给授权企业下的授权范围内的人员
 */
async function calluserOapiCallEx(request: CalluserOapiCallRequest, runtime: Util.RuntimeOptions): CalluserOapiCallResponse {
  Util.validateModel(request);
  var appParams = Util.stringifyMapValue(Util.toMap(request.params));
  return doRequestOApi('POST', '/topapi/call/calluser', request.headers, appParams, runtime);
}

model GetuserlistOapiCallParams = {
  offset?: int64(description='偏移量', name='offset'),
  size?: int64(description='size', name='size'),
}

model GetuserlistOapiCallRequest = {
  headers?: map[string]string,
  params?:GetuserlistOapiCallParams,
}

model GetuserlistOapiCallResponseBody = {
  result?: {
    hasMore?: boolean(description='hasMore', name='has_more'),
    staffIdList?: [ string ](description='staffIdList', name='staff_id_list'),
  }(description='result', name='result'),
  errcode?: int64(description='dingOpenErrcode', name='errcode'),
  errmsg?: string(description='errorMsg', name='errmsg'),
}

model GetuserlistOapiCallResponse = {
  headers: map[string]string,
  body: GetuserlistOapiCallResponseBody,
}

/**
 * Description: 删除ISV套件对应的企业下的可以主动调用接口发起免费电话的员工
 */
async function getuserlistOapiCall(request: GetuserlistOapiCallRequest): GetuserlistOapiCallResponse {
  var runtime = new Util.RuntimeOptions{};
  return getuserlistOapiCallEx(request, runtime);
}

/**
 * Description: 删除ISV套件对应的企业下的可以主动调用接口发起免费电话的员工
 */
async function getuserlistOapiCallEx(request: GetuserlistOapiCallRequest, runtime: Util.RuntimeOptions): GetuserlistOapiCallResponse {
  Util.validateModel(request);
  var appParams = Util.stringifyMapValue(Util.toMap(request.params));
  return doRequestOApi('POST', '/topapi/call/getuserlist', request.headers, appParams, runtime);
}

model SendsmsOapiNewretailParams = {
  smsmodule?: [
    {
      userid?: string(description='员工id', name='userid'),
      username?: string(description='员工nick', name='username'),
      brandname?: string(description='品牌名', name='brandname'),
    }
  ](description='短信接受者信息', maxItems=20, name='smsmodule'),
}

model SendsmsOapiNewretailRequest = {
  headers?: map[string]string,
  params?:SendsmsOapiNewretailParams,
}

model SendsmsOapiNewretailResponseBody = {
  errcode?: int64(description='dingOpenErrcode', name='errcode'),
  errmsg?: string(description='errorMsg', name='errmsg'),
  success?: boolean(description='success', name='success'),
}

model SendsmsOapiNewretailResponse = {
  headers: map[string]string,
  body: SendsmsOapiNewretailResponseBody,
}

/**
 * Description: 提供给天地会调用发短信，提醒用户激活钉钉
 */
async function sendsmsOapiNewretail(request: SendsmsOapiNewretailRequest): SendsmsOapiNewretailResponse {
  var runtime = new Util.RuntimeOptions{};
  return sendsmsOapiNewretailEx(request, runtime);
}

/**
 * Description: 提供给天地会调用发短信，提醒用户激活钉钉
 */
async function sendsmsOapiNewretailEx(request: SendsmsOapiNewretailRequest, runtime: Util.RuntimeOptions): SendsmsOapiNewretailResponse {
  Util.validateModel(request);
  var appParams = Util.stringifyMapValue(Util.toMap(request.params));
  return doRequestOApi('POST', '/topapi/newretail/sendsms', request.headers, appParams, runtime);
}

model SendnotifyOapiCcoserviceEntranceParams = {
  appId: int64(description='微应用ID', name='app_id'),
  userid: string(description='员工ID', name='userid'),
  content: string(description='文本的通知', name='content'),
}

model SendnotifyOapiCcoserviceEntranceRequest = {
  headers?: map[string]string,
  params:SendnotifyOapiCcoserviceEntranceParams,
}

model SendnotifyOapiCcoserviceEntranceResponseBody = {
  success?: boolean(description='success', name='success'),
  errcode?: int64(description='dingOpenErrcode', name='errcode'),
  errmsg?: string(description='errorMsg', name='errmsg'),
  result?: string(description='result', name='result'),
}

model SendnotifyOapiCcoserviceEntranceResponse = {
  headers: map[string]string,
  body: SendnotifyOapiCcoserviceEntranceResponseBody,
}

/**
 * Description: 通过企业的系统账号给企业员工发送消息
 */
async function sendnotifyOapiCcoserviceEntrance(request: SendnotifyOapiCcoserviceEntranceRequest): SendnotifyOapiCcoserviceEntranceResponse {
  var runtime = new Util.RuntimeOptions{};
  return sendnotifyOapiCcoserviceEntranceEx(request, runtime);
}

/**
 * Description: 通过企业的系统账号给企业员工发送消息
 */
async function sendnotifyOapiCcoserviceEntranceEx(request: SendnotifyOapiCcoserviceEntranceRequest, runtime: Util.RuntimeOptions): SendnotifyOapiCcoserviceEntranceResponse {
  Util.validateModel(request);
  var appParams = Util.stringifyMapValue(Util.toMap(request.params));
  return doRequestOApi('POST', '/topapi/ccoservice/entrance/sendnotify', request.headers, appParams, runtime);
}

model ListOapiEduCourseParticipantParams = {
  courseCode: string(description='课程编码', name='course_code'),
  opUserid: string(description='当前操作人的用户ID', name='op_userid'),
  cursor: int64(description='表示分页游标，从0开始', minimum=0, name='cursor'),
  size: int64(description='表示分页大小', maximum=100, minimum=1, name='size'),
}

model ListOapiEduCourseParticipantRequest = {
  headers?: map[string]string,
  params:ListOapiEduCourseParticipantParams,
}

model ListOapiEduCourseParticipantResponseBody = {
  result?: {
    hasMore?: boolean(description='表示是否还有更多的数据', name='has_more'),
    list?: [
      {
        role?: string(description='参与方角色。student：学生、teacher：老师、guardian: 监护人', name='role'),
        participantId?: string(description='参与方ID。participant_type=1时，participant_id表示用户ID；participant_type=2时，participant_id表示部门ID；participant_type=3时，participant_id表示组织ID；', name='participant_id'),
        participantType?: string(description='参与方类型。1：用户、2：部门（对应家校通讯录中的班级、年级。详情请参考https://ding-doc.dingtalk.com/doc#/serverapi3/gga05a/z3y0h）、3：组织', name='participant_type'),
        participantCorpid?: string(description='参与方的组织CorpId', name='participant_corpid'),
      }
    ](description='list', name='list'),
    nextCursor?: int64(description='表示下一次分页的游标，如果next_corsor为null或者has_more为false，表示没有更多的分页数据', name='next_cursor'),
  }(description='result', name='result'),
  success?: boolean(description='请求是否成功', name='success'),
  errcode?: int64(description='dingOpenErrcode', name='errcode'),
  errmsg?: string(description='errorMsg', name='errmsg'),
}

model ListOapiEduCourseParticipantResponse = {
  headers: map[string]string,
  body: ListOapiEduCourseParticipantResponseBody,
}

/**
 * Description: 获取课程参与方列表
 */
async function listOapiEduCourseParticipant(request: ListOapiEduCourseParticipantRequest): ListOapiEduCourseParticipantResponse {
  var runtime = new Util.RuntimeOptions{};
  return listOapiEduCourseParticipantEx(request, runtime);
}

/**
 * Description: 获取课程参与方列表
 */
async function listOapiEduCourseParticipantEx(request: ListOapiEduCourseParticipantRequest, runtime: Util.RuntimeOptions): ListOapiEduCourseParticipantResponse {
  Util.validateModel(request);
  var appParams = Util.stringifyMapValue(Util.toMap(request.params));
  return doRequestOApi('POST', '/topapi/edu/course/participant/list', request.headers, appParams, runtime);
}

model ListOapiEduCourseParams = {
  opUserid: string(description='当前操作人的用户ID', name='op_userid'),
  cursor: int64(description='表示分页游标，从0开始', minimum=0, name='cursor'),
  size: int64(description='表示分页大小', maximum=100, minimum=1, name='size'),
}

model ListOapiEduCourseRequest = {
  headers?: map[string]string,
  params:ListOapiEduCourseParams,
}

model ListOapiEduCourseResponseBody = {
  success?: boolean(description='请求是否成功', name='success'),
  errcode?: int64(description='错误编码', name='errcode'),
  errmsg?: string(description='错误信息', name='errmsg'),
  result?: {
    hasMore?: boolean(description='是否还有更多数据', name='has_more'),
    list?: [
      {
        bizKey?: string(description='业务唯一键', name='biz_key'),
        teacherUserid?: string(description='老师的用户ID', name='teacher_userid'),
        teacherCorpid?: string(description='老的的组织CorpId', name='teacher_corpid'),
        endTime?: int64(description='结束时间，Unix毫秒时间戳', name='end_time'),
        startTime?: int64(description='开始时间，Unix毫秒时间戳', name='start_time'),
        introduce?: string(description='课程介绍', name='introduce'),
        name?: string(description='课程名称', name='name'),
        code?: string(description='课程编码', name='code'),
      }
    ](description='list', name='list'),
    nextCursor?: int64(description='表示下一次分页的游标，如果next_corsor为null或者has_more为false，表示没有更多的分页数据', name='next_cursor'),
  }(description='result', name='result'),
}

model ListOapiEduCourseResponse = {
  headers: map[string]string,
  body: ListOapiEduCourseResponseBody,
}

/**
 * Description: 获取课程列表
 */
async function listOapiEduCourse(request: ListOapiEduCourseRequest): ListOapiEduCourseResponse {
  var runtime = new Util.RuntimeOptions{};
  return listOapiEduCourseEx(request, runtime);
}

/**
 * Description: 获取课程列表
 */
async function listOapiEduCourseEx(request: ListOapiEduCourseRequest, runtime: Util.RuntimeOptions): ListOapiEduCourseResponse {
  Util.validateModel(request);
  var appParams = Util.stringifyMapValue(Util.toMap(request.params));
  return doRequestOApi('POST', '/topapi/edu/course/list', request.headers, appParams, runtime);
}

model ModprofileOapiImpaasUserParams = {
  request: {
    extension?: string(description='附带信息', name='extension'),
    nick?: string(description='nick', name='nick'),
    accountInfo: {
      id: string(description='账号id', name='id'),
      type: string(description='类型', name='type'),
      channel: string(description='渠道', name='channel'),
    }(description='账号信息', name='account_info'),
    avatarMediaid?: string(description='头像', name='avatar_mediaid'),
  }(description='修改profile入参', name='request'),
}

model ModprofileOapiImpaasUserRequest = {
  headers?: map[string]string,
  params:ModprofileOapiImpaasUserParams,
}

model ModprofileOapiImpaasUserResponseBody = {
  errcode?: int64(description='dingOpenErrcode', name='errcode'),
  errmsg?: string(description='errorMsg', name='errmsg'),
  success?: boolean(description='success', name='success'),
}

model ModprofileOapiImpaasUserResponse = {
  headers: map[string]string,
  body: ModprofileOapiImpaasUserResponseBody,
}

/**
 * Description: 修改profile信息，开放 nick， extension， avatarMediaId
 */
async function modprofileOapiImpaasUser(request: ModprofileOapiImpaasUserRequest): ModprofileOapiImpaasUserResponse {
  var runtime = new Util.RuntimeOptions{};
  return modprofileOapiImpaasUserEx(request, runtime);
}

/**
 * Description: 修改profile信息，开放 nick， extension， avatarMediaId
 */
async function modprofileOapiImpaasUserEx(request: ModprofileOapiImpaasUserRequest, runtime: Util.RuntimeOptions): ModprofileOapiImpaasUserResponse {
  Util.validateModel(request);
  var appParams = Util.stringifyMapValue(Util.toMap(request.params));
  return doRequestOApi('POST', '/topapi/impaas/user/modprofile', request.headers, appParams, runtime);
}

model ListOapiSmartworkHrmEmployeeParams = {
  useridList: [ string ](description='员工id列表', maxItems=50, name='userid_list'),
  fieldFilterList?: [ string ](description='需要获取的花名册字段信息', maxItems=100, name='field_filter_list'),
  agentid?: int64(description='微应用在企业的agentId', name='agentid'),
}

model ListOapiSmartworkHrmEmployeeRequest = {
  headers?: map[string]string,
  params:ListOapiSmartworkHrmEmployeeParams,
}

model ListOapiSmartworkHrmEmployeeResponseBody = {
  result?: [
    {
      userid?: string(description='员工id', name='userid'),
      fieldList?: [
        {
          groupId?: string(description='字段业务分组', name='group_id'),
          value?: string(description='字段值', name='value'),
          fieldCode?: string(description='字段编码', name='field_code'),
          fieldName?: string(description='字段名称', name='field_name'),
          label?: string(description='字段值翻译', name='label'),
        }
      ](description='字段信息列表', name='field_list'),
      partner?: boolean(description='是否是合伙伙伴', name='partner'),
    }
  ](description='返回结果', name='result'),
  errcode?: int64(description='错误码', name='errcode'),
  errmsg?: string(description='错误信息', name='errmsg'),
  success?: boolean(description='调用是否成功', name='success'),
}

model ListOapiSmartworkHrmEmployeeResponse = {
  headers: map[string]string,
  body: ListOapiSmartworkHrmEmployeeResponseBody,
}

/**
 * Description: 智能人事业务，企业/ISV根据员工id批量访问员工花名册信息
 */
async function listOapiSmartworkHrmEmployee(request: ListOapiSmartworkHrmEmployeeRequest): ListOapiSmartworkHrmEmployeeResponse {
  var runtime = new Util.RuntimeOptions{};
  return listOapiSmartworkHrmEmployeeEx(request, runtime);
}

/**
 * Description: 智能人事业务，企业/ISV根据员工id批量访问员工花名册信息
 */
async function listOapiSmartworkHrmEmployeeEx(request: ListOapiSmartworkHrmEmployeeRequest, runtime: Util.RuntimeOptions): ListOapiSmartworkHrmEmployeeResponse {
  Util.validateModel(request);
  var appParams = Util.stringifyMapValue(Util.toMap(request.params));
  return doRequestOApi('POST', '/topapi/smartwork/hrm/employee/list', request.headers, appParams, runtime);
}

model ListOapiEduSubjectParams = {
  cursor: int64(description='游标', name='cursor'),
  dataOrderType?: int64(description='排序方式（0:创建时间）', name='data_order_type'),
  codes?: [ string ](description='学科编码列表', maxItems=999, name='codes'),
  size: int64(description='每页数据条数', name='size'),
  sortType?: int64(description='排序规则（0:升序，1:降序）', name='sort_type'),
  operatorUserid: string(description='用户id', name='operator_userid'),
}

model ListOapiEduSubjectRequest = {
  headers?: map[string]string,
  params:ListOapiEduSubjectParams,
}

model ListOapiEduSubjectResponseBody = {
  success?: boolean(description='是否调用成功', name='success'),
  errcode?: int64(description='错误编码', name='errcode'),
  errmsg?: string(description='错误msg', name='errmsg'),
  data?: {
    nextCursor?: int64(description='下一页游标', name='next_cursor'),
    hasMore?: boolean(description='是否还有更多数据', name='has_more'),
    list?: [
      {
        code?: string(description='学科编码', name='code'),
        name?: string(description='学科名称', name='name'),
      }
    ](description='学科实例列表', name='list'),
    totalCount?: int64(description='总数据条数', name='total_count'),
  }(description='返回结果', name='data'),
}

model ListOapiEduSubjectResponse = {
  headers: map[string]string,
  body: ListOapiEduSubjectResponseBody,
}

/**
 * Description: 钉钉教育生态主数据-查询学科实例列表
 */
async function listOapiEduSubject(request: ListOapiEduSubjectRequest): ListOapiEduSubjectResponse {
  var runtime = new Util.RuntimeOptions{};
  return listOapiEduSubjectEx(request, runtime);
}

/**
 * Description: 钉钉教育生态主数据-查询学科实例列表
 */
async function listOapiEduSubjectEx(request: ListOapiEduSubjectRequest, runtime: Util.RuntimeOptions): ListOapiEduSubjectResponse {
  Util.validateModel(request);
  var appParams = Util.stringifyMapValue(Util.toMap(request.params));
  return doRequestOApi('POST', '/topapi/edu/subject/list', request.headers, appParams, runtime);
}

model GetOapiEduSubjectParams = {
  code?: string(description='学科编码', name='code'),
  name?: string(description='学科名称', name='name'),
  operatorUserid: string(description='操作人的userid', name='operator_userid'),
}

model GetOapiEduSubjectRequest = {
  headers?: map[string]string,
  params:GetOapiEduSubjectParams,
}

model GetOapiEduSubjectResponseBody = {
  result?: {
    data?: {
      code?: string(description='学科编码', name='code'),
      name?: string(description='学科名称', name='name'),
    }(description='学科实例对象', name='data'),
    success?: boolean(description='是否调用成功', name='success'),
    errcode?: int64(description='错误code', name='errcode'),
    errmsg?: string(description='错误msg', name='errmsg'),
  }(description='钉钉开放api通用result', name='result'),
}

model GetOapiEduSubjectResponse = {
  headers: map[string]string,
  body: GetOapiEduSubjectResponseBody,
}

/**
 * Description: 钉钉教育生态主数据-查询学科实例（单个）
 */
async function getOapiEduSubject(request: GetOapiEduSubjectRequest): GetOapiEduSubjectResponse {
  var runtime = new Util.RuntimeOptions{};
  return getOapiEduSubjectEx(request, runtime);
}

/**
 * Description: 钉钉教育生态主数据-查询学科实例（单个）
 */
async function getOapiEduSubjectEx(request: GetOapiEduSubjectRequest, runtime: Util.RuntimeOptions): GetOapiEduSubjectResponse {
  Util.validateModel(request);
  var appParams = Util.stringifyMapValue(Util.toMap(request.params));
  return doRequestOApi('POST', '/topapi/edu/subject/get', request.headers, appParams, runtime);
}

model SimplelistCorpRoleParams = {
  roleId: int64(description='角色ID', name='role_id'),
  size?: int64(description='分页大小', name='size'),
  offset?: int64(description='分页偏移', name='offset'),
}

model SimplelistCorpRoleRequest = {
  headers?: map[string]string,
  params:SimplelistCorpRoleParams,
}

model SimplelistCorpRoleResponseBody = {
  result?: {
    hasMore?: boolean(description='hasMore', name='has_more'),
    list?: [
      {
        userid?: string(description='userId', name='userid'),
      }
    ](description='list', name='list'),
  }(description='result', name='result'),
}

model SimplelistCorpRoleResponse = {
  headers: map[string]string,
  body: SimplelistCorpRoleResponseBody,
}

/**
 * Description: 获取企业中角色下的员工列表
 */
async function simplelistCorpRole(request: SimplelistCorpRoleRequest): SimplelistCorpRoleResponse {
  var runtime = new Util.RuntimeOptions{};
  return simplelistCorpRoleEx(request, runtime);
}

/**
 * Description: 获取企业中角色下的员工列表
 */
async function simplelistCorpRoleEx(request: SimplelistCorpRoleRequest, runtime: Util.RuntimeOptions): SimplelistCorpRoleResponse {
  Util.validateModel(request);
  var appParams = Util.stringifyMapValue(Util.toMap(request.params));
  return doRequest('dingtalk.corp.role.simplelist', 'POST', '/router/rest', request.headers, appParams, runtime);
}

model GetOapiAlitripBtripMonthbillUrlParams = {
  request: {
    billMonth?: string(description='对账单月份，不传取最新对账单', name='bill_month'),
    corpid: string(description='企业id', name='corpid'),
  }(description='请求对象', name='request'),
}

model GetOapiAlitripBtripMonthbillUrlRequest = {
  headers?: map[string]string,
  params:GetOapiAlitripBtripMonthbillUrlParams,
}

model GetOapiAlitripBtripMonthbillUrlResponseBody = {
  success?: boolean(description='成功标识', name='success'),
  module?: [
    {
      startDate?: string(description='账期开始时间', name='start_date'),
      endDate?: string(description='账期结束时间', name='end_date'),
      url?: string(description='json数据下载链接，通过HttpClient 获取 并GBK格式解析，链接五分钟有效期', name='url'),
    }
  ](description='结果对象', name='module'),
  errcode?: int64(description='错误码', name='errcode'),
  errmsg?: string(description='错误信息', name='errmsg'),
}

model GetOapiAlitripBtripMonthbillUrlResponse = {
  headers: map[string]string,
  body: GetOapiAlitripBtripMonthbillUrlResponseBody,
}

/**
 * Description: 获取月对账结算数据下载地址
 */
async function getOapiAlitripBtripMonthbillUrl(request: GetOapiAlitripBtripMonthbillUrlRequest): GetOapiAlitripBtripMonthbillUrlResponse {
  var runtime = new Util.RuntimeOptions{};
  return getOapiAlitripBtripMonthbillUrlEx(request, runtime);
}

/**
 * Description: 获取月对账结算数据下载地址
 */
async function getOapiAlitripBtripMonthbillUrlEx(request: GetOapiAlitripBtripMonthbillUrlRequest, runtime: Util.RuntimeOptions): GetOapiAlitripBtripMonthbillUrlResponse {
  Util.validateModel(request);
  var appParams = Util.stringifyMapValue(Util.toMap(request.params));
  return doRequestOApi('POST', '/topapi/alitrip/btrip/monthbill/url/get', request.headers, appParams, runtime);
}

model ListCorpRoleParams = {
  size?: int64(description='分页大小', name='size'),
  offset?: int64(description='分页偏移', name='offset'),
}

model ListCorpRoleRequest = {
  headers?: map[string]string,
  params?:ListCorpRoleParams,
}

model ListCorpRoleResponseBody = {
  result?: {
    hasMore?: string(description='分页是否还有数据', name='has_more'),
    list?: [
      {
        roles?: [
          {
            id?: int64(description='角色ID', name='id'),
            roleName?: string(description='角色名称', name='role_name'),
          }
        ](description='角色列表', name='roles'),
        groupName?: string(description='角色分组名称', name='group_name'),
      }
    ](description='角色分组列表', name='list'),
  }(description='result', name='result'),
}

model ListCorpRoleResponse = {
  headers: map[string]string,
  body: ListCorpRoleResponseBody,
}

/**
 * Description: 获取企业角色列表
 */
async function listCorpRole(request: ListCorpRoleRequest): ListCorpRoleResponse {
  var runtime = new Util.RuntimeOptions{};
  return listCorpRoleEx(request, runtime);
}

/**
 * Description: 获取企业角色列表
 */
async function listCorpRoleEx(request: ListCorpRoleRequest, runtime: Util.RuntimeOptions): ListCorpRoleResponse {
  Util.validateModel(request);
  var appParams = Util.stringifyMapValue(Util.toMap(request.params));
  return doRequest('dingtalk.corp.role.list', 'POST', '/router/rest', request.headers, appParams, runtime);
}

model ListOapiReportCommentParams = {
  reportId: string(description='日志id', name='report_id'),
  offset?: int64(description='分页查询的游标，最开始传0，后续传返回参数中的next_cursor值，默认值为0', name='offset'),
  size?: int64(description='分页参数，每页大小，最多传20，默认值为20', name='size'),
}

model ListOapiReportCommentRequest = {
  headers?: map[string]string,
  params:ListOapiReportCommentParams,
}

model ListOapiReportCommentResponseBody = {
  result?: {
    comments?: [
      {
        createTime?: string(description='评论时间', pattern='\\\\d{4}[-]\\\\d{1,2}[-]\\\\d{1,2}[T]\\\\d{2}:\\\\d{2}:\\\\d{2}[Z]', name='create_time'),
        content?: string(description='评论内容', name='content'),
        userid?: string(description='评论人id', name='userid'),
      }
    ](description='日志评论详情', name='comments'),
    hasMore?: boolean(description='是否还有下一页', name='has_more'),
    nextCursor?: int64(description='下一次分页调用的offset值，当返回结果里没有next_cursor时，表示分页结束', name='next_cursor'),
  }(description='统计结果', name='result'),
  errcode?: int64(description='错误码', name='errcode'),
  errmsg?: string(description='错误信息', name='errmsg'),
  success?: boolean(description='成功', name='success'),
}

model ListOapiReportCommentResponse = {
  headers: map[string]string,
  body: ListOapiReportCommentResponseBody,
}

/**
 * Description: 分页获取评论详情，包括评论人userid、评论内容、评论时间
 */
async function listOapiReportComment(request: ListOapiReportCommentRequest): ListOapiReportCommentResponse {
  var runtime = new Util.RuntimeOptions{};
  return listOapiReportCommentEx(request, runtime);
}

/**
 * Description: 分页获取评论详情，包括评论人userid、评论内容、评论时间
 */
async function listOapiReportCommentEx(request: ListOapiReportCommentRequest, runtime: Util.RuntimeOptions): ListOapiReportCommentResponse {
  Util.validateModel(request);
  var appParams = Util.stringifyMapValue(Util.toMap(request.params));
  return doRequestOApi('POST', '/topapi/report/comment/list', request.headers, appParams, runtime);
}

model ListOapiReportReceiverParams = {
  reportId: string(description='日志id', name='report_id'),
  offset?: int64(description='分页查询的游标，最开始传0，后续传返回参数中next_cursor的值，默认值为0', name='offset'),
  size?: int64(description='分页参数，每页大小，最多传100，默认值为100', name='size'),
}

model ListOapiReportReceiverRequest = {
  headers?: map[string]string,
  params:ListOapiReportReceiverParams,
}

model ListOapiReportReceiverResponseBody = {
  result?: {
    hasMore?: boolean(description='是否还有下一页', name='has_more'),
    nextCursor?: int64(description='下一次分页调用的offset值，当返回结果里没有next_cursor时，表示分页结束', name='next_cursor'),
    useridList?: [ string ](description='userid列表', name='userid_list'),
  }(description='统计结果', name='result'),
  errcode?: int64(description='错误吗', name='errcode'),
  errmsg?: string(description='错误信息', name='errmsg'),
  success?: boolean(description='成功', name='success'),
}

model ListOapiReportReceiverResponse = {
  headers: map[string]string,
  body: ListOapiReportReceiverResponseBody,
}

/**
 * Description: 获取日志的分享人员列表
 */
async function listOapiReportReceiver(request: ListOapiReportReceiverRequest): ListOapiReportReceiverResponse {
  var runtime = new Util.RuntimeOptions{};
  return listOapiReportReceiverEx(request, runtime);
}

/**
 * Description: 获取日志的分享人员列表
 */
async function listOapiReportReceiverEx(request: ListOapiReportReceiverRequest, runtime: Util.RuntimeOptions): ListOapiReportReceiverResponse {
  Util.validateModel(request);
  var appParams = Util.stringifyMapValue(Util.toMap(request.params));
  return doRequestOApi('POST', '/topapi/report/receiver/list', request.headers, appParams, runtime);
}

model ListbytypeOapiReportStatisticsParams = {
  reportId: string(description='日志id', name='report_id'),
  type: int64(description='查询类型 0:已读人员列表 1:评论人员列表 2:点赞人员列表', name='type'),
  offset?: int64(description='分页查询的游标，最开始传0，后续传返回参数中的next_cursor值，默认值为0', name='offset'),
  size?: int64(description='分页参数，每页大小，最多传100，默认值为100', name='size'),
}

model ListbytypeOapiReportStatisticsRequest = {
  headers?: map[string]string,
  params:ListbytypeOapiReportStatisticsParams,
}

model ListbytypeOapiReportStatisticsResponseBody = {
  success?: boolean(description='成功', name='success'),
  errmsg?: string(description='错误信息', name='errmsg'),
  errcode?: int64(description='错误码', name='errcode'),
  result?: {
    nextCursor?: int64(description='下一次分页调用的offset值，当返回结果里没有next_cursor时，表示分页结束', name='next_cursor'),
    hasMore?: boolean(description='是否还有下一页', name='has_more'),
    useridList?: [ string ](description='userid列表', name='userid_list'),
  }(description='统计结果', name='result'),
}

model ListbytypeOapiReportStatisticsResponse = {
  headers: map[string]string,
  body: ListbytypeOapiReportStatisticsResponseBody,
}

/**
 * Description: 分页获取日志相关人员列表，包括已读人员列表、评论人员列表、点赞人员列表
 */
async function listbytypeOapiReportStatistics(request: ListbytypeOapiReportStatisticsRequest): ListbytypeOapiReportStatisticsResponse {
  var runtime = new Util.RuntimeOptions{};
  return listbytypeOapiReportStatisticsEx(request, runtime);
}

/**
 * Description: 分页获取日志相关人员列表，包括已读人员列表、评论人员列表、点赞人员列表
 */
async function listbytypeOapiReportStatisticsEx(request: ListbytypeOapiReportStatisticsRequest, runtime: Util.RuntimeOptions): ListbytypeOapiReportStatisticsResponse {
  Util.validateModel(request);
  var appParams = Util.stringifyMapValue(Util.toMap(request.params));
  return doRequestOApi('POST', '/topapi/report/statistics/listbytype', request.headers, appParams, runtime);
}

model RecallOapiChatMessageParams = {
  chatid: string(description='会话id', name='chatid'),
  msgid: string(description='消息id', name='msgid'),
}

model RecallOapiChatMessageRequest = {
  headers?: map[string]string,
  params:RecallOapiChatMessageParams,
}

model RecallOapiChatMessageResponseBody = {
  success?: boolean(description='执行成功', name='success'),
  errcode?: int64(description='错误码', name='errcode'),
  errmsg?: string(description='错误信息', name='errmsg'),
}

model RecallOapiChatMessageResponse = {
  headers: map[string]string,
  body: RecallOapiChatMessageResponseBody,
}

/**
 * Description: 群中消息的撤回功能
 */
async function recallOapiChatMessage(request: RecallOapiChatMessageRequest): RecallOapiChatMessageResponse {
  var runtime = new Util.RuntimeOptions{};
  return recallOapiChatMessageEx(request, runtime);
}

/**
 * Description: 群中消息的撤回功能
 */
async function recallOapiChatMessageEx(request: RecallOapiChatMessageRequest, runtime: Util.RuntimeOptions): RecallOapiChatMessageResponse {
  Util.validateModel(request);
  var appParams = Util.stringifyMapValue(Util.toMap(request.params));
  return doRequestOApi('POST', '/topapi/chat/message/recall', request.headers, appParams, runtime);
}

model PublishOapiBipaasMenuParams = {
  antcloudTenantId: string(description='金融云租户ID', name='antcloud_tenant_id'),
}

model PublishOapiBipaasMenuRequest = {
  headers?: map[string]string,
  params:PublishOapiBipaasMenuParams,
}

model PublishOapiBipaasMenuResponseBody = {
  result?: boolean(description='菜单是否发布成功', name='result'),
  errcode?: int64(description='错误码', name='errcode'),
  errmsg?: string(description='错误信息', name='errmsg'),
  success?: boolean(description='请求是否成功', name='success'),
}

model PublishOapiBipaasMenuResponse = {
  headers: map[string]string,
  body: PublishOapiBipaasMenuResponseBody,
}

/**
 * Description: 将智能参谋中正在编辑中的菜单进行发布
 */
async function publishOapiBipaasMenu(request: PublishOapiBipaasMenuRequest): PublishOapiBipaasMenuResponse {
  var runtime = new Util.RuntimeOptions{};
  return publishOapiBipaasMenuEx(request, runtime);
}

/**
 * Description: 将智能参谋中正在编辑中的菜单进行发布
 */
async function publishOapiBipaasMenuEx(request: PublishOapiBipaasMenuRequest, runtime: Util.RuntimeOptions): PublishOapiBipaasMenuResponse {
  Util.validateModel(request);
  var appParams = Util.stringifyMapValue(Util.toMap(request.params));
  return doRequestOApi('POST', '/topapi/bipaas/menu/publish', request.headers, appParams, runtime);
}

model Add_reportOapiBipaasMenuParams = {
  reportIds: [ string ](description='报表ID列表', maxItems=20, name='report_ids'),
  antcloudTenantId: string(description='金融云租户ID信息', name='antcloud_tenant_id'),
  menuId: int64(description='智能参谋菜单ID', name='menu_id'),
}

model Add_reportOapiBipaasMenuRequest = {
  headers?: map[string]string,
  params:Add_reportOapiBipaasMenuParams,
}

model Add_reportOapiBipaasMenuResponseBody = {
  errcode?: int64(description='错误码', name='errcode'),
  errmsg?: string(description='错误信息', name='errmsg'),
  success?: boolean(description='执行结果', name='success'),
}

model Add_reportOapiBipaasMenuResponse = {
  headers: map[string]string,
  body: Add_reportOapiBipaasMenuResponseBody,
}

/**
 * Description: 提供给DeepInsight的专用接口，用于将DeepInsight产生的报表关联到对应租户在智能参谋的菜单上
 */
async function add_reportOapiBipaasMenu(request: Add_reportOapiBipaasMenuRequest): Add_reportOapiBipaasMenuResponse {
  var runtime = new Util.RuntimeOptions{};
  return add_reportOapiBipaasMenuEx(request, runtime);
}

/**
 * Description: 提供给DeepInsight的专用接口，用于将DeepInsight产生的报表关联到对应租户在智能参谋的菜单上
 */
async function add_reportOapiBipaasMenuEx(request: Add_reportOapiBipaasMenuRequest, runtime: Util.RuntimeOptions): Add_reportOapiBipaasMenuResponse {
  Util.validateModel(request);
  var appParams = Util.stringifyMapValue(Util.toMap(request.params));
  return doRequestOApi('POST', '/topapi/bipaas/menu/add_report', request.headers, appParams, runtime);
}

model UploadOapiAttendanceRecordParams = {
  userid: string(description='员工id', name='userid'),
  deviceName: string(description='打卡设备名称', name='device_name'),
  deviceId: string(description='设备唯一标识', name='device_id'),
  photoUrl?: string(description='打卡备注图片地址，必须是公网可访问的地址', name='photo_url'),
  userCheckTime: int64(description='员工打卡的时间', name='user_check_time'),
}

model UploadOapiAttendanceRecordRequest = {
  headers?: map[string]string,
  params:UploadOapiAttendanceRecordParams,
}

model UploadOapiAttendanceRecordResponseBody = {
  success?: boolean(description='本次调用成功失败', name='success'),
  errcode?: int64(description='错误码', name='errcode'),
  errmsg?: string(description='错误信息', name='errmsg'),
}

model UploadOapiAttendanceRecordResponse = {
  headers: map[string]string,
  body: UploadOapiAttendanceRecordResponseBody,
}

/**
 * Description: 上传考勤打卡流水
 */
async function uploadOapiAttendanceRecord(request: UploadOapiAttendanceRecordRequest): UploadOapiAttendanceRecordResponse {
  var runtime = new Util.RuntimeOptions{};
  return uploadOapiAttendanceRecordEx(request, runtime);
}

/**
 * Description: 上传考勤打卡流水
 */
async function uploadOapiAttendanceRecordEx(request: UploadOapiAttendanceRecordRequest, runtime: Util.RuntimeOptions): UploadOapiAttendanceRecordResponse {
  Util.validateModel(request);
  var appParams = Util.stringifyMapValue(Util.toMap(request.params));
  return doRequestOApi('POST', '/topapi/attendance/record/upload', request.headers, appParams, runtime);
}

model SetscreenOapiOrgParams = {
  mediaId: string(description='开机图片资源id，可以通过/media/upload接口上传图片获取', name='mediaId'),
  endTime: string(description='yyyy-MM-dd显示截止时间', name='endTime'),
  jumpUrl?: string(description='点击开机图片跳转地址', name='jumpUrl'),
}

model SetscreenOapiOrgRequest = {
  headers?: map[string]string,
  params:SetscreenOapiOrgParams,
}

model SetscreenOapiOrgResponseBody = {
  errcode?: int64(description='错误码', name='errcode'),
  errmsg?: string(description='错误描述', name='errmsg'),
}

model SetscreenOapiOrgResponse = {
  headers: map[string]string,
  body: SetscreenOapiOrgResponseBody,
}

/**
 * Description: 企业设置开机闪屏动画信息
 */
async function setscreenOapiOrg(request: SetscreenOapiOrgRequest): SetscreenOapiOrgResponse {
  var runtime = new Util.RuntimeOptions{};
  return setscreenOapiOrgEx(request, runtime);
}

/**
 * Description: 企业设置开机闪屏动画信息
 */
async function setscreenOapiOrgEx(request: SetscreenOapiOrgRequest, runtime: Util.RuntimeOptions): SetscreenOapiOrgResponse {
  Util.validateModel(request);
  var appParams = Util.stringifyMapValue(Util.toMap(request.params));
  return doRequestOApi('POST', '/topapi/org/setscreen', request.headers, appParams, runtime);
}

model ListidsOapiProcessinstanceParams = {
  processCode: string(description='流程模板唯一标识，可在oa后台编辑审批表单部分查询', name='process_code'),
  startTime: int64(description='审批实例开始时间，毫秒级', name='start_time'),
  endTime?: int64(description='审批实例结束时间，毫秒级，默认取当前值', name='end_time'),
  size?: int64(description='分页参数，每页大小，最多传10', name='size'),
  cursor?: int64(description='分页查询的游标，最开始传0，后续传返回参数中的next_cursor值', name='cursor'),
  useridList?: [ string ](description='发起人用户id列表', maxItems=20, name='userid_list'),
}

model ListidsOapiProcessinstanceRequest = {
  headers?: map[string]string,
  params:ListidsOapiProcessinstanceParams,
}

model ListidsOapiProcessinstanceResponseBody = {
  result?: {
    list?: [ string ](description='id列表', name='list'),
    nextCursor?: int64(description='表示下次查询的游标，当返回结果没有该字段时表示没有更多数据了', name='next_cursor'),
  }(description='result', name='result'),
  errcode?: int64(description='errcode', name='errcode'),
  errmsg?: string(description='errmsg', name='errmsg'),
}

model ListidsOapiProcessinstanceResponse = {
  headers: map[string]string,
  body: ListidsOapiProcessinstanceResponseBody,
}

/**
 * Description: 企业可以根据审批流的唯一标识，分页获取该审批流对应的审批实例id。只能取到权限范围内的相关部门的审批实例
 */
async function listidsOapiProcessinstance(request: ListidsOapiProcessinstanceRequest): ListidsOapiProcessinstanceResponse {
  var runtime = new Util.RuntimeOptions{};
  return listidsOapiProcessinstanceEx(request, runtime);
}

/**
 * Description: 企业可以根据审批流的唯一标识，分页获取该审批流对应的审批实例id。只能取到权限范围内的相关部门的审批实例
 */
async function listidsOapiProcessinstanceEx(request: ListidsOapiProcessinstanceRequest, runtime: Util.RuntimeOptions): ListidsOapiProcessinstanceResponse {
  Util.validateModel(request);
  var appParams = Util.stringifyMapValue(Util.toMap(request.params));
  return doRequestOApi('POST', '/topapi/processinstance/listids', request.headers, appParams, runtime);
}

model ListbydeviceOapiRhinoMosSpaceDeviceCheckInParams = {
  request: {
    deviceIds: [ int64 ](description='设备id列表', maxItems=100, name='device_ids'),
    tenantId: string(description='租户ID', name='tenant_id'),
    userid?: string(description='userid', name='userid'),
  }(description='request', name='request'),
}

model ListbydeviceOapiRhinoMosSpaceDeviceCheckInRequest = {
  headers?: map[string]string,
  params:ListbydeviceOapiRhinoMosSpaceDeviceCheckInParams,
}

model ListbydeviceOapiRhinoMosSpaceDeviceCheckInResponseBody = {
  errcode?: int64(description='error_code', name='errcode'),
  model?: [
    {
      prodWorkstationCode?: string(description='站位code', name='prod_workstation_code'),
      checkStatus?: string(description='登入登出状态', name='check_status'),
      checkOutTime?: string(description='登出时间', pattern='\\\\d{4}[-]\\\\d{1,2}[-]\\\\d{1,2}[T]\\\\d{2}:\\\\d{2}:\\\\d{2}[Z]', name='check_out_time'),
      checkInTime?: string(description='登入时间', pattern='\\\\d{4}[-]\\\\d{1,2}[-]\\\\d{1,2}[T]\\\\d{2}:\\\\d{2}:\\\\d{2}[Z]', name='check_in_time'),
      tenantId?: string(description='租户ID', name='tenant_id'),
      deviceId?: int64(description='device_id', name='device_id'),
    }
  ](description='结果', name='model'),
  errmsg?: string(description='错误信息', name='errmsg'),
}

model ListbydeviceOapiRhinoMosSpaceDeviceCheckInResponse = {
  headers: map[string]string,
  body: ListbydeviceOapiRhinoMosSpaceDeviceCheckInResponseBody,
}

/**
 * Description: 空间资源根据设备id列表查询站位
 */
async function listbydeviceOapiRhinoMosSpaceDeviceCheckIn(request: ListbydeviceOapiRhinoMosSpaceDeviceCheckInRequest): ListbydeviceOapiRhinoMosSpaceDeviceCheckInResponse {
  var runtime = new Util.RuntimeOptions{};
  return listbydeviceOapiRhinoMosSpaceDeviceCheckInEx(request, runtime);
}

/**
 * Description: 空间资源根据设备id列表查询站位
 */
async function listbydeviceOapiRhinoMosSpaceDeviceCheckInEx(request: ListbydeviceOapiRhinoMosSpaceDeviceCheckInRequest, runtime: Util.RuntimeOptions): ListbydeviceOapiRhinoMosSpaceDeviceCheckInResponse {
  Util.validateModel(request);
  var appParams = Util.stringifyMapValue(Util.toMap(request.params));
  return doRequestOApi('POST', '/topapi/rhino/mos/space/device/check/in/listbydevice', request.headers, appParams, runtime);
}

model ListOapiRhinoMosExecTrackTrackconditionParams = {
  req: {
    page: {
      pageSize: int64(description='每页大小', name='page_size'),
      start: int64(description='起始位置', name='start'),
    }(description='分页', name='page'),
    tenantId?: string(description='租户ID', name='tenant_id'),
    trackIds: [ string ](description='追踪ID列表', maxItems=500, name='track_ids'),
    trackType: string(description='追踪类型', name='track_type'),
    userid?: string(description='预留参数', name='userid'),
    entityTypes?: [ string ](description='实体类型', maxItems=20, name='entity_types'),
  }(description='入参', name='req'),
}

model ListOapiRhinoMosExecTrackTrackconditionRequest = {
  headers?: map[string]string,
  params:ListOapiRhinoMosExecTrackTrackconditionParams,
}

model ListOapiRhinoMosExecTrackTrackconditionResponseBody = {
  errcode?: int64(description='错误码', name='errcode'),
  errmsg?: string(description='错误信息', name='errmsg'),
  model?: {
    currentStart?: int64(description='当前起始位置', name='current_start'),
    pageSize?: int64(description='每页大小', name='page_size'),
    result?: [
      {
        effectEndTime?: string(description='生效结束时间', pattern='\\\\d{4}[-]\\\\d{1,2}[-]\\\\d{1,2}[T]\\\\d{2}:\\\\d{2}:\\\\d{2}[Z]', name='effect_end_time'),
        effectStartTime?: string(description='生效开始时间', pattern='\\\\d{4}[-]\\\\d{1,2}[-]\\\\d{1,2}[T]\\\\d{2}:\\\\d{2}:\\\\d{2}[Z]', name='effect_start_time'),
        effectStatus?: string(description='生效状态', name='effect_status'),
        entityId?: int64(description='实体ID', name='entity_id'),
        entityType?: string(description='实体类型', name='entity_type'),
        tenantId?: string(description='租户ID', name='tenant_id'),
        trackId?: string(description='追踪ID', name='track_id'),
        trackType?: string(description='追踪类型', name='track_type'),
        effectStartWorkstationCode?: string(description='生效工位', name='effect_start_workstation_code'),
        orderId?: int64(description='订单id', name='order_id'),
      }
    ](description='追踪记录', name='result'),
    total?: int64(description='总数', name='total'),
  }(description='返回结果', name='model'),
  success?: boolean(description='是否成功', name='success'),
}

model ListOapiRhinoMosExecTrackTrackconditionResponse = {
  headers: map[string]string,
  body: ListOapiRhinoMosExecTrackTrackconditionResponseBody,
}

/**
 * Description: 通过追踪ID查询追踪记录
 */
async function listOapiRhinoMosExecTrackTrackcondition(request: ListOapiRhinoMosExecTrackTrackconditionRequest): ListOapiRhinoMosExecTrackTrackconditionResponse {
  var runtime = new Util.RuntimeOptions{};
  return listOapiRhinoMosExecTrackTrackconditionEx(request, runtime);
}

/**
 * Description: 通过追踪ID查询追踪记录
 */
async function listOapiRhinoMosExecTrackTrackconditionEx(request: ListOapiRhinoMosExecTrackTrackconditionRequest, runtime: Util.RuntimeOptions): ListOapiRhinoMosExecTrackTrackconditionResponse {
  Util.validateModel(request);
  var appParams = Util.stringifyMapValue(Util.toMap(request.params));
  return doRequestOApi('POST', '/topapi/rhino/mos/exec/track/trackcondition/list', request.headers, appParams, runtime);
}

model FilterOapiRhinoMosExecClothesUnperformedParams = {
  req?: {
    entityIds?: [ int64 ](description='实体ID列表', maxItems=500, name='entity_ids'),
    operationUids?: [ int64 ](description='工序ID列表', maxItems=500, name='operation_uids'),
    tenantId?: string(description='租户ID', name='tenant_id'),
    userid?: string(description='预留参数', name='userid'),
    orderId?: int64(description='订单ID', name='order_id'),
  }(description='入参', name='req'),
}

model FilterOapiRhinoMosExecClothesUnperformedRequest = {
  headers?: map[string]string,
  params?:FilterOapiRhinoMosExecClothesUnperformedParams,
}

model FilterOapiRhinoMosExecClothesUnperformedResponseBody = {
  errcode?: int64(description='错误码', name='errcode'),
  errmsg?: string(description='错误信息', name='errmsg'),
  model?: [ int64 ](description='实体ID列表', name='model'),
  success?: boolean(description='是否成功', name='success'),
}

model FilterOapiRhinoMosExecClothesUnperformedResponse = {
  headers: map[string]string,
  body: FilterOapiRhinoMosExecClothesUnperformedResponseBody,
}

/**
 * Description: 过滤出未执行过指定工序的实体
 */
async function filterOapiRhinoMosExecClothesUnperformed(request: FilterOapiRhinoMosExecClothesUnperformedRequest): FilterOapiRhinoMosExecClothesUnperformedResponse {
  var runtime = new Util.RuntimeOptions{};
  return filterOapiRhinoMosExecClothesUnperformedEx(request, runtime);
}

/**
 * Description: 过滤出未执行过指定工序的实体
 */
async function filterOapiRhinoMosExecClothesUnperformedEx(request: FilterOapiRhinoMosExecClothesUnperformedRequest, runtime: Util.RuntimeOptions): FilterOapiRhinoMosExecClothesUnperformedResponse {
  Util.validateModel(request);
  var appParams = Util.stringifyMapValue(Util.toMap(request.params));
  return doRequestOApi('POST', '/topapi/rhino/mos/exec/clothes/unperformed/filter', request.headers, appParams, runtime);
}

model ListOapiRhinoMosExecTrackEntityconditionParams = {
  req: {
    entityType: string(description='实体类型', name='entity_type'),
    page: {
      pageSize: int64(description='每页大小', name='page_size'),
      start: int64(description='起始位置', name='start'),
    }(description='分页', name='page'),
    tenantId: string(description='租户ID', name='tenant_id'),
    userid?: string(description='预留参数', name='userid'),
    entityIds: [ int64 ](description='实体ID列表', maxItems=500, name='entity_ids'),
    trackTypes?: [ string ](description='追踪类型', maxItems=20, name='track_types'),
  }(description='入参', name='req'),
}

model ListOapiRhinoMosExecTrackEntityconditionRequest = {
  headers?: map[string]string,
  params:ListOapiRhinoMosExecTrackEntityconditionParams,
}

model ListOapiRhinoMosExecTrackEntityconditionResponseBody = {
  errcode?: int64(description='错误码', name='errcode'),
  errmsg?: string(description='错误信息', name='errmsg'),
  model?: {
    currentStart?: int64(description='当前起始位置', name='current_start'),
    pageSize?: int64(description='每页大小', name='page_size'),
    result?: [
      {
        effectEndTime?: string(description='生效结束时间', pattern='\\\\d{4}[-]\\\\d{1,2}[-]\\\\d{1,2}[T]\\\\d{2}:\\\\d{2}:\\\\d{2}[Z]', name='effect_end_time'),
        effectStartTime?: string(description='生效开始时间', pattern='\\\\d{4}[-]\\\\d{1,2}[-]\\\\d{1,2}[T]\\\\d{2}:\\\\d{2}:\\\\d{2}[Z]', name='effect_start_time'),
        effectStatus?: string(description='生效状态', name='effect_status'),
        entityId?: int64(description='实体ID', name='entity_id'),
        entityType?: string(description='实体类型', name='entity_type'),
        tenantId?: string(description='租户ID', name='tenant_id'),
        trackId?: string(description='追踪ID', name='track_id'),
        trackType?: string(description='追踪类型', name='track_type'),
        effectStartWorkstationCode?: string(description='生效工位', name='effect_start_workstation_code'),
      }
    ](description='追踪记录', name='result'),
    total?: int64(description='总数', name='total'),
  }(description='返回结果', name='model'),
  success?: boolean(description='是否成功', name='success'),
}

model ListOapiRhinoMosExecTrackEntityconditionResponse = {
  headers: map[string]string,
  body: ListOapiRhinoMosExecTrackEntityconditionResponseBody,
}

/**
 * Description: 通过实体查询追踪记录
 */
async function listOapiRhinoMosExecTrackEntitycondition(request: ListOapiRhinoMosExecTrackEntityconditionRequest): ListOapiRhinoMosExecTrackEntityconditionResponse {
  var runtime = new Util.RuntimeOptions{};
  return listOapiRhinoMosExecTrackEntityconditionEx(request, runtime);
}

/**
 * Description: 通过实体查询追踪记录
 */
async function listOapiRhinoMosExecTrackEntityconditionEx(request: ListOapiRhinoMosExecTrackEntityconditionRequest, runtime: Util.RuntimeOptions): ListOapiRhinoMosExecTrackEntityconditionResponse {
  Util.validateModel(request);
  var appParams = Util.stringifyMapValue(Util.toMap(request.params));
  return doRequestOApi('POST', '/topapi/rhino/mos/exec/track/entitycondition/list', request.headers, appParams, runtime);
}

model SendOapiCardIntelligentEmpgroupParams = {
  receiverList?: [ string ](description='卡片接收成员列表，不填写为全部接收', maxItems=999, name='receiver_list'),
  paramJson?: string(description='卡片中需要填充的参数', name='param_json'),
  msgKey: string(description='模版卡片注册的key', name='msg_key'),
  uuid?: string(description='卡片消息去重复，长度不能大于64', name='uuid'),
}

model SendOapiCardIntelligentEmpgroupRequest = {
  headers?: map[string]string,
  params:SendOapiCardIntelligentEmpgroupParams,
}

model SendOapiCardIntelligentEmpgroupResponseBody = {
  errcode?: int64(description='错误码', name='errcode'),
  success?: boolean(description='调用接口是否成功', name='success'),
  result?: boolean(description='业务结果', name='result'),
  errmsg?: string(description='接口调用错误信息', name='errmsg'),
}

model SendOapiCardIntelligentEmpgroupResponse = {
  headers: map[string]string,
  body: SendOapiCardIntelligentEmpgroupResponseBody,
}

/**
 * Description: 提供给isv，发送全员群的小钉卡片接口。其中发送模版msgkey是我们这边配置，有管控，发送方isv，代码中也进行了管控
 */
async function sendOapiCardIntelligentEmpgroup(request: SendOapiCardIntelligentEmpgroupRequest): SendOapiCardIntelligentEmpgroupResponse {
  var runtime = new Util.RuntimeOptions{};
  return sendOapiCardIntelligentEmpgroupEx(request, runtime);
}

/**
 * Description: 提供给isv，发送全员群的小钉卡片接口。其中发送模版msgkey是我们这边配置，有管控，发送方isv，代码中也进行了管控
 */
async function sendOapiCardIntelligentEmpgroupEx(request: SendOapiCardIntelligentEmpgroupRequest, runtime: Util.RuntimeOptions): SendOapiCardIntelligentEmpgroupResponse {
  Util.validateModel(request);
  var appParams = Util.stringifyMapValue(Util.toMap(request.params));
  return doRequestOApi('POST', '/topapi/card/intelligent/empgroup/send', request.headers, appParams, runtime);
}

model UnbindOapiRhinoMosExecTrackParams = {
  entities: [ int64 ](description='实体ID列表', maxItems=500, name='entities'),
  entityType: string(description='实体类型', name='entity_type'),
  tenantId: string(description='租户ID', name='tenant_id'),
  trackId: string(description='追踪ID', name='track_id'),
  trackType: string(description='追踪类型，吊挂或才RF', name='track_type'),
  workstationCode?: string(description='工位', name='workstation_code'),
  userid?: string(description='预留参数', name='userid'),
  orderId?: int64(description='订单ID', name='order_id'),
}

model UnbindOapiRhinoMosExecTrackRequest = {
  headers?: map[string]string,
  params:UnbindOapiRhinoMosExecTrackParams,
}

model UnbindOapiRhinoMosExecTrackResponseBody = {
  errmsg?: string(description='错误信息', name='errmsg'),
  model?: boolean(description='是否解绑成功', name='model'),
  success?: boolean(description='是否成功', name='success'),
  errcode?: int64(description='错误码', name='errcode'),
}

model UnbindOapiRhinoMosExecTrackResponse = {
  headers: map[string]string,
  body: UnbindOapiRhinoMosExecTrackResponseBody,
}

/**
 * Description: 解除追踪记录的绑定关系
 */
async function unbindOapiRhinoMosExecTrack(request: UnbindOapiRhinoMosExecTrackRequest): UnbindOapiRhinoMosExecTrackResponse {
  var runtime = new Util.RuntimeOptions{};
  return unbindOapiRhinoMosExecTrackEx(request, runtime);
}

/**
 * Description: 解除追踪记录的绑定关系
 */
async function unbindOapiRhinoMosExecTrackEx(request: UnbindOapiRhinoMosExecTrackRequest, runtime: Util.RuntimeOptions): UnbindOapiRhinoMosExecTrackResponse {
  Util.validateModel(request);
  var appParams = Util.stringifyMapValue(Util.toMap(request.params));
  return doRequestOApi('POST', '/topapi/rhino/mos/exec/track/unbind', request.headers, appParams, runtime);
}

model RemovefaceOapiSmartdeviceParams = {
  userid: string(description='员工ID', name='userid'),
}

model RemovefaceOapiSmartdeviceRequest = {
  headers?: map[string]string,
  params:RemovefaceOapiSmartdeviceParams,
}

model RemovefaceOapiSmartdeviceResponseBody = {
  errcode?: int64(description='errcode', name='errcode'),
  errmsg?: string(description='errorMsg', name='errmsg'),
  result?: boolean(description='result', name='result'),
}

model RemovefaceOapiSmartdeviceResponse = {
  headers: map[string]string,
  body: RemovefaceOapiSmartdeviceResponseBody,
}

/**
 * Description: 删除企业中员工的人脸识别照片
 */
async function removefaceOapiSmartdevice(request: RemovefaceOapiSmartdeviceRequest): RemovefaceOapiSmartdeviceResponse {
  var runtime = new Util.RuntimeOptions{};
  return removefaceOapiSmartdeviceEx(request, runtime);
}

/**
 * Description: 删除企业中员工的人脸识别照片
 */
async function removefaceOapiSmartdeviceEx(request: RemovefaceOapiSmartdeviceRequest, runtime: Util.RuntimeOptions): RemovefaceOapiSmartdeviceResponse {
  Util.validateModel(request);
  var appParams = Util.stringifyMapValue(Util.toMap(request.params));
  return doRequestOApi('POST', '/topapi/smartdevice/removeface', request.headers, appParams, runtime);
}

model StartOapiRhinoMosExecPerformParams = {
  operationPerformRecordIds: [ int64 ](description='工序执行记录ID列表', maxItems=500, name='operation_perform_record_ids'),
  tenantId: string(description='租户ID', name='tenant_id'),
  deviceIds?: [ int64 ](description='执行设备ID列表', maxItems=500, name='device_ids'),
  workNos?: [ string ](description='执行员工列表', maxItems=500, name='work_nos'),
  userid?: string(description='系统参数', name='userid'),
  orderId?: int64(description='订单ID', name='order_id'),
}

model StartOapiRhinoMosExecPerformRequest = {
  headers?: map[string]string,
  params:StartOapiRhinoMosExecPerformParams,
}

model StartOapiRhinoMosExecPerformResponseBody = {
  errmsg?: string(description='错误信息', name='errmsg'),
  model?: boolean(description='操作结果', name='model'),
  success?: boolean(description='是否成功', name='success'),
  errcode?: int64(description='错误码', name='errcode'),
}

model StartOapiRhinoMosExecPerformResponse = {
  headers: map[string]string,
  body: StartOapiRhinoMosExecPerformResponseBody,
}

/**
 * Description: 开始执行某工序
 */
async function startOapiRhinoMosExecPerform(request: StartOapiRhinoMosExecPerformRequest): StartOapiRhinoMosExecPerformResponse {
  var runtime = new Util.RuntimeOptions{};
  return startOapiRhinoMosExecPerformEx(request, runtime);
}

/**
 * Description: 开始执行某工序
 */
async function startOapiRhinoMosExecPerformEx(request: StartOapiRhinoMosExecPerformRequest, runtime: Util.RuntimeOptions): StartOapiRhinoMosExecPerformResponse {
  Util.validateModel(request);
  var appParams = Util.stringifyMapValue(Util.toMap(request.params));
  return doRequestOApi('POST', '/topapi/rhino/mos/exec/perform/start', request.headers, appParams, runtime);
}

model UpdateOapiSmartworkHrmMasterCorpconfigParams = {
  status: int64(description='企业开通状态 1:开通 2:关闭', name='status'),
  tenantId: int64(description='租户id', name='tenant_id'),
  scopeCode: string(description='业务类型', name='scope_code'),
}

model UpdateOapiSmartworkHrmMasterCorpconfigRequest = {
  headers?: map[string]string,
  params:UpdateOapiSmartworkHrmMasterCorpconfigParams,
}

model UpdateOapiSmartworkHrmMasterCorpconfigResponseBody = {
  result?: boolean(description='更新成功状态', name='result'),
  errmsg?: string(description='错误描述', name='errmsg'),
  errcode?: int64(description='错误码', name='errcode'),
  success?: boolean(description='成功标记', name='success'),
}

model UpdateOapiSmartworkHrmMasterCorpconfigResponse = {
  headers: map[string]string,
  body: UpdateOapiSmartworkHrmMasterCorpconfigResponseBody,
}

/**
 * Description: 智能人事第三方业务数据企业配置写入
 */
async function updateOapiSmartworkHrmMasterCorpconfig(request: UpdateOapiSmartworkHrmMasterCorpconfigRequest): UpdateOapiSmartworkHrmMasterCorpconfigResponse {
  var runtime = new Util.RuntimeOptions{};
  return updateOapiSmartworkHrmMasterCorpconfigEx(request, runtime);
}

/**
 * Description: 智能人事第三方业务数据企业配置写入
 */
async function updateOapiSmartworkHrmMasterCorpconfigEx(request: UpdateOapiSmartworkHrmMasterCorpconfigRequest, runtime: Util.RuntimeOptions): UpdateOapiSmartworkHrmMasterCorpconfigResponse {
  Util.validateModel(request);
  var appParams = Util.stringifyMapValue(Util.toMap(request.params));
  return doRequestOApi('POST', '/topapi/smartwork/hrm/master/corpconfig/update', request.headers, appParams, runtime);
}

model ReworkOapiRhinoMosExecPerformParams = {
  context?: string(description='执行上下文', name='context'),
  reworkStartId: int64(description='要重新开始的工序执行ID', name='rework_start_id'),
  tenantId: string(description='租户ID', name='tenant_id'),
  toInactiveIds: [ int64 ](description='要失效的工序执行ID列表', maxItems=500, name='to_inactive_ids'),
  userid?: string(description='系统参数', name='userid'),
  orderId?: int64(description='订单ID', name='order_id'),
}

model ReworkOapiRhinoMosExecPerformRequest = {
  headers?: map[string]string,
  params:ReworkOapiRhinoMosExecPerformParams,
}

model ReworkOapiRhinoMosExecPerformResponseBody = {
  errmsg?: string(description='错误信息', name='errmsg'),
  model?: {
    active?: string(description='是否有效', name='active'),
    batchId?: int64(description='分批ID', name='batch_id'),
    context?: string(description='上下文', name='context'),
    createType?: string(description='创建类型', name='create_type'),
    deviceIds?: [ int64 ](description='执行设备ID列表', name='device_ids'),
    entityId?: int64(description='实体ID', name='entity_id'),
    entityType?: string(description='实体类型', name='entity_type'),
    flowVersion?: int64(description='排位布局版本', name='flow_version'),
    id?: int64(description='工序执行记录ID', name='id'),
    operationType?: string(description='工序类型', name='operation_type'),
    operationUid?: int64(description='工序ID', name='operation_uid'),
    orderId?: int64(description='订单ID', name='order_id'),
    performStatus?: string(description='执行状态', name='perform_status'),
    performType?: string(description='执行类型', name='perform_type'),
    priority?: int64(description='优先级', name='priority'),
    processTypeCode?: string(description='工序能力类型', name='process_type_code'),
    processingEndTime?: string(description='执行结束时间', pattern='\\\\d{4}[-]\\\\d{1,2}[-]\\\\d{1,2}[T]\\\\d{2}:\\\\d{2}:\\\\d{2}[Z]', name='processing_end_time'),
    processingStartTime?: string(description='执行开始时间', pattern='\\\\d{4}[-]\\\\d{1,2}[-]\\\\d{1,2}[T]\\\\d{2}:\\\\d{2}:\\\\d{2}[Z]', name='processing_start_time'),
    sectionCode?: string(description='工段', name='section_code'),
    sourceId?: string(description='来源ID', name='source_id'),
    sourceType?: string(description='来源类型', name='source_type'),
    tenantId?: string(description='租户ID', name='tenant_id'),
    workNos?: [ string ](description='执行员工列表', name='work_nos'),
    workstationCode?: string(description='执行工位', name='workstation_code'),
    processCostTime?: string(description='处理耗时', name='process_cost_time'),
  }(description='重新开始的工序详情', name='model'),
  success?: boolean(description='是否成功', name='success'),
  errcode?: int64(description='错误码', name='errcode'),
}

model ReworkOapiRhinoMosExecPerformResponse = {
  headers: map[string]string,
  body: ReworkOapiRhinoMosExecPerformResponseBody,
}

/**
 * Description: 重做工序，从某个工序开始重新执行
 */
async function reworkOapiRhinoMosExecPerform(request: ReworkOapiRhinoMosExecPerformRequest): ReworkOapiRhinoMosExecPerformResponse {
  var runtime = new Util.RuntimeOptions{};
  return reworkOapiRhinoMosExecPerformEx(request, runtime);
}

/**
 * Description: 重做工序，从某个工序开始重新执行
 */
async function reworkOapiRhinoMosExecPerformEx(request: ReworkOapiRhinoMosExecPerformRequest, runtime: Util.RuntimeOptions): ReworkOapiRhinoMosExecPerformResponse {
  Util.validateModel(request);
  var appParams = Util.stringifyMapValue(Util.toMap(request.params));
  return doRequestOApi('POST', '/topapi/rhino/mos/exec/perform/rework', request.headers, appParams, runtime);
}

model UnbindOapiRhinoMosExecTrackTrackersParams = {
  req: {
    entityType: string(description='实体类型', name='entity_type'),
    tenantId: string(description='租户ID', name='tenant_id'),
    trackIds: [ string ](description='追踪ID', maxItems=500, name='track_ids'),
    trackType: string(description='追踪类型', name='track_type'),
    userid?: string(description='预留参数', name='userid'),
    orderId?: int64(description='订单ID', name='order_id'),
  }(description='入参', name='req'),
}

model UnbindOapiRhinoMosExecTrackTrackersRequest = {
  headers?: map[string]string,
  params:UnbindOapiRhinoMosExecTrackTrackersParams,
}

model UnbindOapiRhinoMosExecTrackTrackersResponseBody = {
  errcode?: int64(description='错误码', name='errcode'),
  errmsg?: string(description='错误信息', name='errmsg'),
  model?: boolean(description='返回结果', name='model'),
  success?: boolean(description='是否成功', name='success'),
}

model UnbindOapiRhinoMosExecTrackTrackersResponse = {
  headers: map[string]string,
  body: UnbindOapiRhinoMosExecTrackTrackersResponseBody,
}

/**
 * Description: 解绑追踪者
 */
async function unbindOapiRhinoMosExecTrackTrackers(request: UnbindOapiRhinoMosExecTrackTrackersRequest): UnbindOapiRhinoMosExecTrackTrackersResponse {
  var runtime = new Util.RuntimeOptions{};
  return unbindOapiRhinoMosExecTrackTrackersEx(request, runtime);
}

/**
 * Description: 解绑追踪者
 */
async function unbindOapiRhinoMosExecTrackTrackersEx(request: UnbindOapiRhinoMosExecTrackTrackersRequest, runtime: Util.RuntimeOptions): UnbindOapiRhinoMosExecTrackTrackersResponse {
  Util.validateModel(request);
  var appParams = Util.stringifyMapValue(Util.toMap(request.params));
  return doRequestOApi('POST', '/topapi/rhino/mos/exec/track/trackers/unbind', request.headers, appParams, runtime);
}

model InvalidbyentopOapiRhinoMosExecPerformParams = {
  req: {
    entityType: string(description='实体类型', name='entity_type'),
    tenantId: string(description='租户ID', name='tenant_id'),
    userid?: string(description='扩展参数', name='userid'),
    entityOperations?: [
      {
        entityId?: int64(description='实体ID', name='entity_id'),
        operationUid?: int64(description='工序ID', name='operation_uid'),
      }
    ](description='实体和工序', maxItems=500, name='entity_operations'),
    orderId?: int64(description='订单ID', name='order_id'),
  }(description='入参', name='req'),
}

model InvalidbyentopOapiRhinoMosExecPerformRequest = {
  headers?: map[string]string,
  params:InvalidbyentopOapiRhinoMosExecPerformParams,
}

model InvalidbyentopOapiRhinoMosExecPerformResponseBody = {
  errcode?: int64(description='错误码', name='errcode'),
  errmsg?: string(description='错误信息', name='errmsg'),
  model?: boolean(description='返回结果', name='model'),
  success?: boolean(description='是否成功', name='success'),
}

model InvalidbyentopOapiRhinoMosExecPerformResponse = {
  headers: map[string]string,
  body: InvalidbyentopOapiRhinoMosExecPerformResponseBody,
}

/**
 * Description: 通过实体和工序失效工序执行记录
 */
async function invalidbyentopOapiRhinoMosExecPerform(request: InvalidbyentopOapiRhinoMosExecPerformRequest): InvalidbyentopOapiRhinoMosExecPerformResponse {
  var runtime = new Util.RuntimeOptions{};
  return invalidbyentopOapiRhinoMosExecPerformEx(request, runtime);
}

/**
 * Description: 通过实体和工序失效工序执行记录
 */
async function invalidbyentopOapiRhinoMosExecPerformEx(request: InvalidbyentopOapiRhinoMosExecPerformRequest, runtime: Util.RuntimeOptions): InvalidbyentopOapiRhinoMosExecPerformResponse {
  Util.validateModel(request);
  var appParams = Util.stringifyMapValue(Util.toMap(request.params));
  return doRequestOApi('POST', '/topapi/rhino/mos/exec/perform/invalidbyentop', request.headers, appParams, runtime);
}

model GetOapiOrgpaasOrgInfoRequest = {
  headers?: map[string]string,
}

model GetOapiOrgpaasOrgInfoResponseBody = {
  result?: {
    orgName?: string(description='组织名', name='org_name'),
    extension?: string(description='组织附件信息', name='extension'),
  }(description='组织信息', name='result'),
  errcode?: int64(description='错误码 -1 系统异常 40035 参数错误', name='errcode'),
  errmsg?: string(description='错误信息', name='errmsg'),
  success?: boolean(description='接口是否调用成功', name='success'),
}

model GetOapiOrgpaasOrgInfoResponse = {
  headers: map[string]string,
  body: GetOapiOrgpaasOrgInfoResponseBody,
}

/**
 * Description: 获取组织信息，前期先开放组织的名称及ext
 */
async function getOapiOrgpaasOrgInfo(request: GetOapiOrgpaasOrgInfoRequest): GetOapiOrgpaasOrgInfoResponse {
  var runtime = new Util.RuntimeOptions{};
  return getOapiOrgpaasOrgInfoEx(request, runtime);
}

/**
 * Description: 获取组织信息，前期先开放组织的名称及ext
 */
async function getOapiOrgpaasOrgInfoEx(request: GetOapiOrgpaasOrgInfoRequest, runtime: Util.RuntimeOptions): GetOapiOrgpaasOrgInfoResponse {
  Util.validateModel(request);
  var appParams : map[string]string = {};
  return doRequestOApi('POST', '/topapi/orgpaas/org/info/get', request.headers, appParams, runtime);
}

model QueryOapiRhinoSalesOrderCustomInfoParams = {
  req?: {
    batchId?: int64(description='同步的2C订单批次id', name='batch_id'),
    page: int64(description='页码', minimum=1, name='page'),
    pageSize: int64(description='每页大小', maximum=500, minimum=1, name='page_size'),
    plannedDeliveryTimeBegin?: string(description='计划交期-查询时间开始', pattern='\\\\d{4}[-]\\\\d{1,2}[-]\\\\d{1,2}[T]\\\\d{2}:\\\\d{2}:\\\\d{2}[Z]', name='planned_delivery_time_begin'),
    plannedDeliveryTimeEnd?: string(description='计划交期-查询时间结束', pattern='\\\\d{4}[-]\\\\d{1,2}[-]\\\\d{1,2}[T]\\\\d{2}:\\\\d{2}:\\\\d{2}[Z]', name='planned_delivery_time_end'),
    productOrderId: int64(description='生产订单id', name='product_order_id'),
    tenantId: string(description='租户id', name='tenant_id'),
    userid?: string(description='用户id', name='userid'),
  }(description='请求体', name='req'),
}

model QueryOapiRhinoSalesOrderCustomInfoRequest = {
  headers?: map[string]string,
  params?:QueryOapiRhinoSalesOrderCustomInfoParams,
}

model QueryOapiRhinoSalesOrderCustomInfoResponseBody = {
  errcode?: int64(description='响应码', name='errcode'),
  errmsg?: string(description='调用信息', name='errmsg'),
  model?: {
    list?: [
      {
        bizIdCustomerOrder?: string(description='局定需求id', name='biz_id_customer_order'),
        gmtOrderCreate?: string(description='2C订单下单时间', pattern='\\\\d{4}[-]\\\\d{1,2}[-]\\\\d{1,2}[T]\\\\d{2}:\\\\d{2}:\\\\d{2}[Z]', name='gmt_order_create'),
        gmtPlannedDelivery?: string(description='2C订单计划交期时间', pattern='\\\\d{4}[-]\\\\d{1,2}[-]\\\\d{1,2}[T]\\\\d{2}:\\\\d{2}:\\\\d{2}[Z]', name='gmt_planned_delivery'),
        imgUrl?: string(description='图片链接', name='img_url'),
        productOrderId?: int64(description='对应生产订单id', name='product_order_id'),
        quantity?: int64(description='数量', name='quantity'),
        sizeId?: int64(description='尺码ID', name='size_id'),
        sizeName?: string(description='尺码名称', name='size_name'),
        gmtPlannedProductionFinished?: string(description='2C订单制造域计划完成时间', pattern='\\\\d{4}[-]\\\\d{1,2}[-]\\\\d{1,2}[T]\\\\d{2}:\\\\d{2}:\\\\d{2}[Z]', name='gmt_planned_production_finished'),
        skipCustomized?: boolean(description='是否跳过定制（印空花）', name='skip_customized'),
        productionTime?: string(description='开始生产时间', pattern='\\\\d{4}[-]\\\\d{1,2}[-]\\\\d{1,2}[T]\\\\d{2}:\\\\d{2}:\\\\d{2}[Z]', name='production_time'),
        status?: string(description='状态，WAIT_PRODUCTION - 待生产，PRODUCING - 生产中， CLOSED - 已关单， CANCELLED - 已取消', name='status'),
      }
    ](description='2C订单列表', name='list'),
    page?: int64(description='当前页数', name='page'),
    pageSize?: int64(description='分页大小', name='page_size'),
    total?: int64(description='总数', name='total'),
  }(description='返回内容', name='model'),
}

model QueryOapiRhinoSalesOrderCustomInfoResponse = {
  headers: map[string]string,
  body: QueryOapiRhinoSalesOrderCustomInfoResponseBody,
}

/**
 * Description: 查询2C订单信息
 */
async function queryOapiRhinoSalesOrderCustomInfo(request: QueryOapiRhinoSalesOrderCustomInfoRequest): QueryOapiRhinoSalesOrderCustomInfoResponse {
  var runtime = new Util.RuntimeOptions{};
  return queryOapiRhinoSalesOrderCustomInfoEx(request, runtime);
}

/**
 * Description: 查询2C订单信息
 */
async function queryOapiRhinoSalesOrderCustomInfoEx(request: QueryOapiRhinoSalesOrderCustomInfoRequest, runtime: Util.RuntimeOptions): QueryOapiRhinoSalesOrderCustomInfoResponse {
  Util.validateModel(request);
  var appParams = Util.stringifyMapValue(Util.toMap(request.params));
  return doRequestOApi('POST', '/topapi/rhino/sales/order/custom/info/query', request.headers, appParams, runtime);
}

model CreateOapiImpaasOtoconversationParams = {
  request?: {
    accountInfoList?: [
      {
        channel?: string(description='channel名称', name='channel'),
        id?: string(description='id', name='id'),
        type?: string(description='id类型', name='type'),
      }
    ](description='账号列表，size=2。第一个表示自己，第二个表示对方', maxItems=2, name='account_info_list'),
    entranceIdList?: [ int64 ](description='入口id列表，size=2。普通会话填0，二级会话填entrnaceid', maxItems=2, name='entrance_id_list'),
    uuid?: string(description='用于去重和追踪', name='uuid'),
    channel?: string(description='channel名称', name='channel'),
    extension?: string(description='扩展信息', name='extension'),
  }(description='请求', name='request'),
}

model CreateOapiImpaasOtoconversationRequest = {
  headers?: map[string]string,
  params?:CreateOapiImpaasOtoconversationParams,
}

model CreateOapiImpaasOtoconversationResponseBody = {
  result?: string(description='会话id', name='result'),
  errcode?: int64(description='dingOpenErrcode', name='errcode'),
  errmsg?: string(description='errmsg', name='errmsg'),
}

model CreateOapiImpaasOtoconversationResponse = {
  headers: map[string]string,
  body: CreateOapiImpaasOtoconversationResponseBody,
}

/**
 * Description: 部分新零售场景需要支持二级会话，也就是把部分同类会话聚合在一起
本接口给二方提供了创建二级单聊会话的能力
 */
async function createOapiImpaasOtoconversation(request: CreateOapiImpaasOtoconversationRequest): CreateOapiImpaasOtoconversationResponse {
  var runtime = new Util.RuntimeOptions{};
  return createOapiImpaasOtoconversationEx(request, runtime);
}

/**
 * Description: 部分新零售场景需要支持二级会话，也就是把部分同类会话聚合在一起
本接口给二方提供了创建二级单聊会话的能力
 */
async function createOapiImpaasOtoconversationEx(request: CreateOapiImpaasOtoconversationRequest, runtime: Util.RuntimeOptions): CreateOapiImpaasOtoconversationResponse {
  Util.validateModel(request);
  var appParams = Util.stringifyMapValue(Util.toMap(request.params));
  return doRequestOApi('POST', '/topapi/impaas/otoconversation/create', request.headers, appParams, runtime);
}

model GetOapiRhinoOrderBatchParams = {
  req?: {
    idList?: [ int64 ](description='订单id列表', maxItems=500, name='id_list'),
    tenantId?: string(description='租户Id', name='tenant_id'),
    userid?: string(description='用户id', name='userid'),
  }(description='请求体', name='req'),
}

model GetOapiRhinoOrderBatchRequest = {
  headers?: map[string]string,
  params?:GetOapiRhinoOrderBatchParams,
}

model GetOapiRhinoOrderBatchResponseBody = {
  errcode?: int64(description='响应码', name='errcode'),
  errmsg?: string(description='调用信息', name='errmsg'),
  model?: {
    list?: [
      {
        actualFinishTime?: string(description='实际完成时间', pattern='\\\\d{4}[-]\\\\d{1,2}[-]\\\\d{1,2}[T]\\\\d{2}:\\\\d{2}:\\\\d{2}[Z]', name='actual_finish_time'),
        actualStartTime?: string(description='实际开始时间', pattern='\\\\d{4}[-]\\\\d{1,2}[-]\\\\d{1,2}[T]\\\\d{2}:\\\\d{2}:\\\\d{2}[Z]', name='actual_start_time'),
        bizIdDtechCategory?: string(description='数字工艺品类id', name='biz_id_dtech_category'),
        bizIdDtechCategoryName?: string(description='数字工艺品类名称', name='biz_id_dtech_category_name'),
        bizIdDtechPkg?: string(description='数字工艺包id', name='biz_id_dtech_pkg'),
        colorId?: string(description='颜色id', name='color_id'),
        colorName?: string(description='颜色名称', name='color_name'),
        id?: int64(description='主键id', name='id'),
        planFinishTime?: string(description='计划完成时间', pattern='\\\\d{4}[-]\\\\d{1,2}[-]\\\\d{1,2}[T]\\\\d{2}:\\\\d{2}:\\\\d{2}[Z]', name='plan_finish_time'),
        planStartTime?: string(description='计划开始时间', pattern='\\\\d{4}[-]\\\\d{1,2}[-]\\\\d{1,2}[T]\\\\d{2}:\\\\d{2}:\\\\d{2}[Z]', name='plan_start_time'),
        status?: string(description='状态', name='status'),
        styleCode?: string(description='款号', name='style_code'),
        styleId?: int64(description='款式id', name='style_id'),
        styleImg?: string(description='款式图片', name='style_img'),
        styleName?: string(description='款式名称', name='style_name'),
        tenantId?: string(description='租户id', name='tenant_id'),
        totalQuantity?: int64(description='总数量', name='total_quantity'),
        goodsNo?: string(description='商家货号', name='goods_no'),
        number?: string(description='订单BP号', name='number'),
        orderCreateTime?: string(description='订单创建时间', pattern='\\\\d{4}[-]\\\\d{1,2}[-]\\\\d{1,2}[T]\\\\d{2}:\\\\d{2}:\\\\d{2}[Z]', name='order_create_time'),
        source?: string(description='TRADE/DCC/TRAIN - 订单来源', name='source'),
        purchaseOrderId?: string(description='采购订单id', name='purchase_order_id'),
      }
    ](description='列表', name='list'),
  }(description='返回内容', name='model'),
}

model GetOapiRhinoOrderBatchResponse = {
  headers: map[string]string,
  body: GetOapiRhinoOrderBatchResponseBody,
}

/**
 * Description: 根据订单id批量查询生产订单
 */
async function getOapiRhinoOrderBatch(request: GetOapiRhinoOrderBatchRequest): GetOapiRhinoOrderBatchResponse {
  var runtime = new Util.RuntimeOptions{};
  return getOapiRhinoOrderBatchEx(request, runtime);
}

/**
 * Description: 根据订单id批量查询生产订单
 */
async function getOapiRhinoOrderBatchEx(request: GetOapiRhinoOrderBatchRequest, runtime: Util.RuntimeOptions): GetOapiRhinoOrderBatchResponse {
  Util.validateModel(request);
  var appParams = Util.stringifyMapValue(Util.toMap(request.params));
  return doRequestOApi('POST', '/topapi/rhino/order/batch/get', request.headers, appParams, runtime);
}

model QueryOapiRhinoOrderParams = {
  req?: {
    keyWord?: string(description='搜索字段', name='key_word'),
    page: int64(description='分页字段，页数', minimum=1, name='page'),
    pageSize: int64(description='分页字段，默认分页大小', maximum=500, minimum=1, name='page_size'),
    planTimeBegin?: string(description='计划开始时间-查询结束时间', pattern='\\\\d{4}[-]\\\\d{1,2}[-]\\\\d{1,2}[T]\\\\d{2}:\\\\d{2}:\\\\d{2}[Z]', name='plan_time_begin'),
    planTimeEnd?: string(description='计划开始时间-查询结束时间', pattern='\\\\d{4}[-]\\\\d{1,2}[-]\\\\d{1,2}[T]\\\\d{2}:\\\\d{2}:\\\\d{2}[Z]', name='plan_time_end'),
    sort?: string(description='排序字段', name='sort'),
    sortAsc?: boolean(description='是否顺序排序', name='sort_asc'),
    statusList?: [ string ](description='状态列表', maxItems=20, name='status_list'),
    tenantId?: string(description='租户id', name='tenant_id'),
    userid?: string(description='用户id', name='userid'),
  }(description='请求体', name='req'),
}

model QueryOapiRhinoOrderRequest = {
  headers?: map[string]string,
  params?:QueryOapiRhinoOrderParams,
}

model QueryOapiRhinoOrderResponseBody = {
  errmsg?: string(description='返回信息', name='errmsg'),
  model?: {
    list?: [
      {
        actualFinishTime?: string(description='实际完成时间', pattern='\\\\d{4}[-]\\\\d{1,2}[-]\\\\d{1,2}[T]\\\\d{2}:\\\\d{2}:\\\\d{2}[Z]', name='actual_finish_time'),
        actualStartTime?: string(description='实际开始时间', pattern='\\\\d{4}[-]\\\\d{1,2}[-]\\\\d{1,2}[T]\\\\d{2}:\\\\d{2}:\\\\d{2}[Z]', name='actual_start_time'),
        bizIdDtechCategory?: string(description='类别编号', name='bizId_dtech_category'),
        bizIdDtechCategoryName?: string(description='类别名称', name='bizId_dtech_category_name'),
        bizIdDtechPkg?: string(description='数字工艺包id', name='bizId_dtech_pkg'),
        colorId?: string(description='颜色id', name='color_id'),
        colorName?: string(description='颜色名称', name='color_name'),
        id?: int64(description='主键id', name='id'),
        planFinishTime?: string(description='计划完成时间', pattern='\\\\d{4}[-]\\\\d{1,2}[-]\\\\d{1,2}[T]\\\\d{2}:\\\\d{2}:\\\\d{2}[Z]', name='plan_finish_time'),
        planStartTime?: string(description='计划开始时间', pattern='\\\\d{4}[-]\\\\d{1,2}[-]\\\\d{1,2}[T]\\\\d{2}:\\\\d{2}:\\\\d{2}[Z]', name='plan_start_time'),
        status?: string(description='生产订单状态', name='status'),
        styleCode?: string(description='款号code', name='style_code'),
        styleId?: int64(description='款号id', name='style_id'),
        styleImg?: string(description='款号图片连接', name='style_img'),
        styleName?: string(description='款号名称', name='style_name'),
        tenantId?: string(description='租户id', name='tenant_id'),
        totalQuantity?: int64(description='订单数量', name='total_quantity'),
        goodsNo?: string(description='商家货号', name='goods_no'),
        number?: string(description='订单BP号', name='number'),
        orderCreateTime?: string(description='订单创建时间', pattern='\\\\d{4}[-]\\\\d{1,2}[-]\\\\d{1,2}[T]\\\\d{2}:\\\\d{2}:\\\\d{2}[Z]', name='order_create_time'),
        source?: string(description='TRADE/DCC/TRAIN - 订单来源', name='source'),
        purchaseOrderId?: string(description='采购订单id', name='purchase_order_id'),
      }
    ](description='分页数组', name='list'),
    pageSize?: int64(description='分页属性 - 分页大小', name='page_size'),
    total?: int64(description='分页属性 - 总共数量', name='total'),
    page?: int64(description='当前页数', name='page'),
  }(description='调用结果', name='model'),
  errcode?: int64(description='响应码', name='errcode'),
}

model QueryOapiRhinoOrderResponse = {
  headers: map[string]string,
  body: QueryOapiRhinoOrderResponseBody,
}

/**
 * Description: 新制造订单搜索接口
 */
async function queryOapiRhinoOrder(request: QueryOapiRhinoOrderRequest): QueryOapiRhinoOrderResponse {
  var runtime = new Util.RuntimeOptions{};
  return queryOapiRhinoOrderEx(request, runtime);
}

/**
 * Description: 新制造订单搜索接口
 */
async function queryOapiRhinoOrderEx(request: QueryOapiRhinoOrderRequest, runtime: Util.RuntimeOptions): QueryOapiRhinoOrderResponse {
  Util.validateModel(request);
  var appParams = Util.stringifyMapValue(Util.toMap(request.params));
  return doRequestOApi('POST', '/topapi/rhino/order/query', request.headers, appParams, runtime);
}

model GetOapiRhinoOrderDetailParams = {
  req?: {
    productOrderId?: int64(description='生产订单id', name='product_order_id'),
    tenantId?: string(description='租户id', name='tenant_id'),
    userid?: string(description='用户id', name='userid'),
  }(description='请求体', name='req'),
}

model GetOapiRhinoOrderDetailRequest = {
  headers?: map[string]string,
  params?:GetOapiRhinoOrderDetailParams,
}

model GetOapiRhinoOrderDetailResponseBody = {
  errmsg?: string(description='响应消息', name='errmsg'),
  model?: {
    detailList?: [
      {
        id?: int64(description='主键id', name='id'),
        productOrderId?: int64(description='生产订单id', name='product_order_id'),
        quantity?: int64(description='数量', name='quantity'),
        sizeId?: int64(description='尺码id', name='size_id'),
        sizeName?: string(description='尺码名称', name='size_name'),
        tenantId?: string(description='租户id', name='tenant_id'),
      }
    ](description='细码列表', name='detail_list'),
  }(description='处理结果', name='model'),
  errcode?: int64(description='钉钉响应码', name='errcode'),
}

model GetOapiRhinoOrderDetailResponse = {
  headers: map[string]string,
  body: GetOapiRhinoOrderDetailResponseBody,
}

/**
 * Description: 查询生产订单细码
 */
async function getOapiRhinoOrderDetail(request: GetOapiRhinoOrderDetailRequest): GetOapiRhinoOrderDetailResponse {
  var runtime = new Util.RuntimeOptions{};
  return getOapiRhinoOrderDetailEx(request, runtime);
}

/**
 * Description: 查询生产订单细码
 */
async function getOapiRhinoOrderDetailEx(request: GetOapiRhinoOrderDetailRequest, runtime: Util.RuntimeOptions): GetOapiRhinoOrderDetailResponse {
  Util.validateModel(request);
  var appParams = Util.stringifyMapValue(Util.toMap(request.params));
  return doRequestOApi('POST', '/topapi/rhino/order/detail/get', request.headers, appParams, runtime);
}

model DelandhandoverOapiHrmEmployeeParams = {
  dismissionInfoWithHandOver: {
    handOverUserid?: string(description='交接人userid', name='hand_over_userid'),
    dismissionMemo?: string(description='离职描述', name='dismission_memo'),
    dismissionReason: string(description='离职原因（1：家庭原因，2:个人原因，3：发展原因，4：合同到期不续签，5：协议解除，6：无法胜任工作，7：经济性裁员，8：严重违法违纪，9：其他）', name='dismission_reason'),
    lastWorkDate: string(description='最后工作日', pattern='\\\\d{4}[-]\\\\d{1,2}[-]\\\\d{1,2}[T]\\\\d{2}:\\\\d{2}:\\\\d{2}[Z]', name='last_work_date'),
    dismissionUserid: string(description='离职人userid', name='dismission_userid'),
  }(description='确认离职对象', name='dismission_info_with_hand_over'),
  opUserid: string(description='操作人userid', name='op_userid'),
}

model DelandhandoverOapiHrmEmployeeRequest = {
  headers?: map[string]string,
  params:DelandhandoverOapiHrmEmployeeParams,
}

model DelandhandoverOapiHrmEmployeeResponseBody = {
  success?: boolean(description='是否成功', name='success'),
  errmsg?: string(description='错误信息', name='errmsg'),
  errcode?: int64(description='错误码', name='errcode'),
}

model DelandhandoverOapiHrmEmployeeResponse = {
  headers: map[string]string,
  body: DelandhandoverOapiHrmEmployeeResponseBody,
}

/**
 * Description: 确认离职并指定交接人，会从通讯录删除
 */
async function delandhandoverOapiHrmEmployee(request: DelandhandoverOapiHrmEmployeeRequest): DelandhandoverOapiHrmEmployeeResponse {
  var runtime = new Util.RuntimeOptions{};
  return delandhandoverOapiHrmEmployeeEx(request, runtime);
}

/**
 * Description: 确认离职并指定交接人，会从通讯录删除
 */
async function delandhandoverOapiHrmEmployeeEx(request: DelandhandoverOapiHrmEmployeeRequest, runtime: Util.RuntimeOptions): DelandhandoverOapiHrmEmployeeResponse {
  Util.validateModel(request);
  var appParams = Util.stringifyMapValue(Util.toMap(request.params));
  return doRequestOApi('POST', '/topapi/hrm/employee/delandhandover', request.headers, appParams, runtime);
}

model GetOapiRhinoOrderTagParams = {
  req?: {
    productOrderId: int64(description='生产订单id', name='product_order_id'),
    tenantId: string(description='租户id', name='tenant_id'),
    userid?: string(description='用户id', name='userid'),
  }(description='系统自动生成', name='req'),
}

model GetOapiRhinoOrderTagRequest = {
  headers?: map[string]string,
  params?:GetOapiRhinoOrderTagParams,
}

model GetOapiRhinoOrderTagResponseBody = {
  errmsg?: string(description='返回信息', name='errmsg'),
  model?: {
    bomReady?: boolean(description='bom是否ready', name='bom_ready'),
    embroideryReady?: boolean(description='embroidery是否ready', name='embroidery_ready'),
    goodsNo?: string(description='商家货号', name='goods_no'),
    markerReady?: boolean(description='唛架包是否ready', name='marker_ready'),
    noBom?: boolean(description='是否不需要BOM,除非明确设置为true，否则均为false', name='no_bom'),
    noGsd?: boolean(description='是否不需要GSD,除非明确设置为true，否则均为false', name='no_gsd'),
    noLaser?: boolean(description='是否不需要laser,除非明确设置为true，否则均为false', name='no_laser'),
    noMarker?: boolean(description='是否不需要唛架,除非明确设置为true，否则均为false', name='no_marker'),
    skipSap?: boolean(description='是否需要跳过sap,除非明确设置为true,否则均不跳过', name='skip_sap'),
    skipSupplyChain?: boolean(description='是否跳过供应链相关,除非明确设置为true，否则均不跳过', name='skip_supply_chain'),
    customizeOrder?: boolean(description='是否为2C订单', name='customize_order'),
  }(description='调用结果', name='model'),
  errcode?: int64(description='响应码', name='errcode'),
}

model GetOapiRhinoOrderTagResponse = {
  headers: map[string]string,
  body: GetOapiRhinoOrderTagResponseBody,
}

/**
 * Description: 查询生产订单的tag
 */
async function getOapiRhinoOrderTag(request: GetOapiRhinoOrderTagRequest): GetOapiRhinoOrderTagResponse {
  var runtime = new Util.RuntimeOptions{};
  return getOapiRhinoOrderTagEx(request, runtime);
}

/**
 * Description: 查询生产订单的tag
 */
async function getOapiRhinoOrderTagEx(request: GetOapiRhinoOrderTagRequest, runtime: Util.RuntimeOptions): GetOapiRhinoOrderTagResponse {
  Util.validateModel(request);
  var appParams = Util.stringifyMapValue(Util.toMap(request.params));
  return doRequestOApi('POST', '/topapi/rhino/order/tag/get', request.headers, appParams, runtime);
}

model ModjobinfoOapiHrmEmployeeParams = {
  opUserid: string(description='操作人userid，必须是拥有被操作人操作权限的管理员userid', name='op_userid'),
  hrmApiJobModel: {
    userid: string(description='被操作人userid', name='userid'),
    employeeType?: int64(description='员工类型（1:全职，2:兼职，3:实习，4:劳务派遣，5:退休返聘，6:劳务外包）', name='employee_type'),
    employeeStatus?: int64(description='员工状态（2:试用，3:正式）', name='employee_status'),
    confirmJoinTime?: string(description='入职日期', pattern='\\\\d{4}[-]\\\\d{1,2}[-]\\\\d{1,2}[T]\\\\d{2}:\\\\d{2}:\\\\d{2}[Z]', name='confirm_join_time'),
    probationPeriodType?: int64(description='试用期（1:无试用期，2:1个月，3:2个月，4:3个月，5:4个月，6:5个月，7:6个月，8:其他）', name='probation_period_type'),
    regularTime?: string(description='转正时间', pattern='\\\\d{4}[-]\\\\d{1,2}[-]\\\\d{1,2}[T]\\\\d{2}:\\\\d{2}:\\\\d{2}[Z]', name='regular_time'),
    joinWorkingTime?: string(description='首次参加工作时间', pattern='\\\\d{4}[-]\\\\d{1,2}[-]\\\\d{1,2}[T]\\\\d{2}:\\\\d{2}:\\\\d{2}[Z]', name='join_working_time'),
    birthTime?: string(description='生日日期', pattern='\\\\d{4}[-]\\\\d{1,2}[-]\\\\d{1,2}[T]\\\\d{2}:\\\\d{2}:\\\\d{2}[Z]', name='birth_time'),
  }(description='员工信息对象，被操作人userid是必填，其他信息选填，填写则更新', name='hrm_api_job_model'),
}

model ModjobinfoOapiHrmEmployeeRequest = {
  headers?: map[string]string,
  params:ModjobinfoOapiHrmEmployeeParams,
}

model ModjobinfoOapiHrmEmployeeResponseBody = {
  errcode?: int64(description='错误码', name='errcode'),
  errmsg?: string(description='错误信息', name='errmsg'),
}

model ModjobinfoOapiHrmEmployeeResponse = {
  headers: map[string]string,
  body: ModjobinfoOapiHrmEmployeeResponseBody,
}

/**
 * Description: 钉钉智能人事开放接口-更新员工工作信息
 */
async function modjobinfoOapiHrmEmployee(request: ModjobinfoOapiHrmEmployeeRequest): ModjobinfoOapiHrmEmployeeResponse {
  var runtime = new Util.RuntimeOptions{};
  return modjobinfoOapiHrmEmployeeEx(request, runtime);
}

/**
 * Description: 钉钉智能人事开放接口-更新员工工作信息
 */
async function modjobinfoOapiHrmEmployeeEx(request: ModjobinfoOapiHrmEmployeeRequest, runtime: Util.RuntimeOptions): ModjobinfoOapiHrmEmployeeResponse {
  Util.validateModel(request);
  var appParams = Util.stringifyMapValue(Util.toMap(request.params));
  return doRequestOApi('POST', '/topapi/hrm/employee/modjobinfo', request.headers, appParams, runtime);
}

model AddpreentryOapiSmartworkHrmEmployeeParams = {
  param: {
    preEntryTime?: string(description='预期入职时间', pattern='\\\\d{4}[-]\\\\d{1,2}[-]\\\\d{1,2}[T]\\\\d{2}:\\\\d{2}:\\\\d{2}[Z]', name='pre_entry_time'),
    name: string(description='待入职员工姓名', name='name'),
    extendInfo?: string(description='扩展信息，json串格式，按要求传入有效信息，无效信息不会保存。有效信息有：depts--部门id列表，"|"分隔多个；mainDeptId--主部门id； mainDeptName--主部门名称； position--职位； workPlace--工作地点；employeeType--员工类型枚举值（0，无类型;1，全职;2，兼职;3，实习;4，劳务派遣;5，退休返聘;6，劳务外包）', maxLength=1000, name='extend_info'),
    opUserid?: string(description='操作人userid', name='op_userid'),
    mobile: string(description='待入职员工手机号', maxLength=11, name='mobile'),
  }(description='添加待入职入参', name='param'),
}

model AddpreentryOapiSmartworkHrmEmployeeRequest = {
  headers?: map[string]string,
  params:AddpreentryOapiSmartworkHrmEmployeeParams,
}

model AddpreentryOapiSmartworkHrmEmployeeResponseBody = {
  userid?: string(description='员工id', name='userid'),
  errcode?: int64(description='错误码', name='errcode'),
  errmsg?: string(description='错误信息', name='errmsg'),
  success?: boolean(description='调用结果', name='success'),
}

model AddpreentryOapiSmartworkHrmEmployeeResponse = {
  headers: map[string]string,
  body: AddpreentryOapiSmartworkHrmEmployeeResponseBody,
}

/**
 * Description: 智能人事添加待入职员工信息
 */
async function addpreentryOapiSmartworkHrmEmployee(request: AddpreentryOapiSmartworkHrmEmployeeRequest): AddpreentryOapiSmartworkHrmEmployeeResponse {
  var runtime = new Util.RuntimeOptions{};
  return addpreentryOapiSmartworkHrmEmployeeEx(request, runtime);
}

/**
 * Description: 智能人事添加待入职员工信息
 */
async function addpreentryOapiSmartworkHrmEmployeeEx(request: AddpreentryOapiSmartworkHrmEmployeeRequest, runtime: Util.RuntimeOptions): AddpreentryOapiSmartworkHrmEmployeeResponse {
  Util.validateModel(request);
  var appParams = Util.stringifyMapValue(Util.toMap(request.params));
  return doRequestOApi('POST', '/topapi/smartwork/hrm/employee/addpreentry', request.headers, appParams, runtime);
}

model QuerypreentryOapiSmartworkHrmEmployeeParams = {
  offset: int64(description='分页起始值，默认0开始', minimum=0, name='offset'),
  size: int64(description='分页大小，最大50', maximum=50, minimum=1, name='size'),
}

model QuerypreentryOapiSmartworkHrmEmployeeRequest = {
  headers?: map[string]string,
  params:QuerypreentryOapiSmartworkHrmEmployeeParams,
}

model QuerypreentryOapiSmartworkHrmEmployeeResponseBody = {
  result?: {
    nextCursor?: int64(description='下一次分页调用的offset值，当返回结果里没有nextCursor时，表示分页结束', name='next_cursor'),
    dataList?: [ string ](description='数据结果列表', name='data_list'),
  }(description='分页结果', name='result'),
  errcode?: int64(description='错误码', name='errcode'),
  errmsg?: string(description='错误信息', name='errmsg'),
  success?: boolean(description='调用结果', name='success'),
}

model QuerypreentryOapiSmartworkHrmEmployeeResponse = {
  headers: map[string]string,
  body: QuerypreentryOapiSmartworkHrmEmployeeResponseBody,
}

/**
 * Description: 智能人事业务，企业/ISV分页查询公司待入职员工id列表
 */
async function querypreentryOapiSmartworkHrmEmployee(request: QuerypreentryOapiSmartworkHrmEmployeeRequest): QuerypreentryOapiSmartworkHrmEmployeeResponse {
  var runtime = new Util.RuntimeOptions{};
  return querypreentryOapiSmartworkHrmEmployeeEx(request, runtime);
}

/**
 * Description: 智能人事业务，企业/ISV分页查询公司待入职员工id列表
 */
async function querypreentryOapiSmartworkHrmEmployeeEx(request: QuerypreentryOapiSmartworkHrmEmployeeRequest, runtime: Util.RuntimeOptions): QuerypreentryOapiSmartworkHrmEmployeeResponse {
  Util.validateModel(request);
  var appParams = Util.stringifyMapValue(Util.toMap(request.params));
  return doRequestOApi('POST', '/topapi/smartwork/hrm/employee/querypreentry', request.headers, appParams, runtime);
}

model QueryonjobOapiSmartworkHrmEmployeeParams = {
  statusList: [ int64 ](description='在职员工子状态筛选。2，试用期；3，正式；5，待离职；-1，无状态', maxItems=20, name='status_list'),
  offset: int64(description='分页起始值，默认0开始', minimum=0, name='offset'),
  size: int64(description='分页大小，最大50', maximum=50, minimum=1, name='size'),
}

model QueryonjobOapiSmartworkHrmEmployeeRequest = {
  headers?: map[string]string,
  params:QueryonjobOapiSmartworkHrmEmployeeParams,
}

model QueryonjobOapiSmartworkHrmEmployeeResponseBody = {
  result?: {
    dataList?: [ string ](description='数据结果列表', name='data_list'),
    nextCursor?: int64(description='下一次分页调用的offset值，当返回结果里没有nextCursor时，表示分页结束', name='next_cursor'),
  }(description='分页结果', name='result'),
  errcode?: int64(description='错误码', name='errcode'),
  errmsg?: string(description='错误信息', name='errmsg'),
  success?: boolean(description='调用结果', name='success'),
}

model QueryonjobOapiSmartworkHrmEmployeeResponse = {
  headers: map[string]string,
  body: QueryonjobOapiSmartworkHrmEmployeeResponseBody,
}

/**
 * Description: 智能人事业务，提供企业/ISV按在职状态分页查询公司在职员工id列表
 */
async function queryonjobOapiSmartworkHrmEmployee(request: QueryonjobOapiSmartworkHrmEmployeeRequest): QueryonjobOapiSmartworkHrmEmployeeResponse {
  var runtime = new Util.RuntimeOptions{};
  return queryonjobOapiSmartworkHrmEmployeeEx(request, runtime);
}

/**
 * Description: 智能人事业务，提供企业/ISV按在职状态分页查询公司在职员工id列表
 */
async function queryonjobOapiSmartworkHrmEmployeeEx(request: QueryonjobOapiSmartworkHrmEmployeeRequest, runtime: Util.RuntimeOptions): QueryonjobOapiSmartworkHrmEmployeeResponse {
  Util.validateModel(request);
  var appParams = Util.stringifyMapValue(Util.toMap(request.params));
  return doRequestOApi('POST', '/topapi/smartwork/hrm/employee/queryonjob', request.headers, appParams, runtime);
}

model ListOapiEduCardTaskTodayParams = {
  cardType?: string(description='打卡类型,跳绳:jump', name='card_type'),
  userid?: string(description='用户userId', name='userid'),
}

model ListOapiEduCardTaskTodayRequest = {
  headers?: map[string]string,
  params?:ListOapiEduCardTaskTodayParams,
}

model ListOapiEduCardTaskTodayResponseBody = {
  result?: [
    {
      isFinishTask?: string(description='是否完成打卡 N当日未完成打卡  Y完成打卡', name='is_finish_task'),
      date?: string(description='打卡日期', pattern='\\\\d{4}[-]\\\\d{1,2}[-]\\\\d{1,2}[T]\\\\d{2}:\\\\d{2}:\\\\d{2}[Z]', name='date'),
      userCardTaskId?: int64(description='任务id', name='user_card_task_id'),
      studentName?: string(description='学生名字', name='student_name'),
      className?: string(description='班级名称', name='class_name'),
      content?: string(description='打卡内容', name='content'),
      title?: string(description='打卡任务名字', name='title'),
      cardId?: int64(description='卡片id', name='card_id'),
    }
  ](description='返回数据', name='result'),
  success?: boolean(description='表示结果是否成功', name='success'),
  errcode?: int64(description='错误码', name='errcode'),
  errmsg?: string(description='错误信息', name='errmsg'),
}

model ListOapiEduCardTaskTodayResponse = {
  headers: map[string]string,
  body: ListOapiEduCardTaskTodayResponseBody,
}

/**
 * Description: 获取指定用户的孩子当天待打卡的任务列表
 */
async function listOapiEduCardTaskToday(request: ListOapiEduCardTaskTodayRequest): ListOapiEduCardTaskTodayResponse {
  var runtime = new Util.RuntimeOptions{};
  return listOapiEduCardTaskTodayEx(request, runtime);
}

/**
 * Description: 获取指定用户的孩子当天待打卡的任务列表
 */
async function listOapiEduCardTaskTodayEx(request: ListOapiEduCardTaskTodayRequest, runtime: Util.RuntimeOptions): ListOapiEduCardTaskTodayResponse {
  Util.validateModel(request);
  var appParams = Util.stringifyMapValue(Util.toMap(request.params));
  return doRequestOApi('POST', '/topapi/edu/card/task/today/list', request.headers, appParams, runtime);
}

model SubmitOapiEduCardTaskParams = {
  content?: string(description='打卡内容', name='content'),
  meteringNumber?: string(description='计量数量', name='metering_number'),
  userCardTaskId?: int64(description='任务id', name='user_card_task_id'),
  cardType?: string(description='打卡类型,跳绳:jump', name='card_type'),
  userid?: string(description='用户id', name='userid'),
}

model SubmitOapiEduCardTaskRequest = {
  headers?: map[string]string,
  params?:SubmitOapiEduCardTaskParams,
}

model SubmitOapiEduCardTaskResponseBody = {
  result?: boolean(description='结果是否成功', name='result'),
  success?: boolean(description='调用是否成功', name='success'),
  errcode?: int64(description='错误码', name='errcode'),
  errmsg?: string(description='错误信息', name='errmsg'),
}

model SubmitOapiEduCardTaskResponse = {
  headers: map[string]string,
  body: SubmitOapiEduCardTaskResponseBody,
}

/**
 * Description: 帮用户提交打卡
 */
async function submitOapiEduCardTask(request: SubmitOapiEduCardTaskRequest): SubmitOapiEduCardTaskResponse {
  var runtime = new Util.RuntimeOptions{};
  return submitOapiEduCardTaskEx(request, runtime);
}

/**
 * Description: 帮用户提交打卡
 */
async function submitOapiEduCardTaskEx(request: SubmitOapiEduCardTaskRequest, runtime: Util.RuntimeOptions): SubmitOapiEduCardTaskResponse {
  Util.validateModel(request);
  var appParams = Util.stringifyMapValue(Util.toMap(request.params));
  return doRequestOApi('POST', '/topapi/edu/card/task/submit', request.headers, appParams, runtime);
}

model SendnotifyOapiSmartdeviceVisitorParams = {
  visitorNotifyVo?: {
    content: string(description='消息内容', name='content'),
    deviceId: int64(description='设备ID', name='device_id'),
    notifyType: int64(description='通知类型', name='notify_type'),
    userName: string(description='访客姓名', name='user_name'),
    userid?: string(description='外部联系ID', name='userid'),
    feedback?: string(description='接待意见反馈', name='feedback'),
  }(description='访客通知模型', name='visitor_notify_vo'),
  reservationId?: string(description='预约ID', name='reservation_id'),
}

model SendnotifyOapiSmartdeviceVisitorRequest = {
  headers?: map[string]string,
  params?:SendnotifyOapiSmartdeviceVisitorParams,
}

model SendnotifyOapiSmartdeviceVisitorResponseBody = {
  errcode?: int64(description='dingOpenErrcode', name='errcode'),
  errmsg?: string(description='errorMsg', name='errmsg'),
  result?: boolean(description='result', name='result'),
  success?: boolean(description='success', name='success'),
}

model SendnotifyOapiSmartdeviceVisitorResponse = {
  headers: map[string]string,
  body: SendnotifyOapiSmartdeviceVisitorResponseBody,
}

/**
 * Description: 提供向被访者或访客接待人员发送通知信息的功能
 */
async function sendnotifyOapiSmartdeviceVisitor(request: SendnotifyOapiSmartdeviceVisitorRequest): SendnotifyOapiSmartdeviceVisitorResponse {
  var runtime = new Util.RuntimeOptions{};
  return sendnotifyOapiSmartdeviceVisitorEx(request, runtime);
}

/**
 * Description: 提供向被访者或访客接待人员发送通知信息的功能
 */
async function sendnotifyOapiSmartdeviceVisitorEx(request: SendnotifyOapiSmartdeviceVisitorRequest, runtime: Util.RuntimeOptions): SendnotifyOapiSmartdeviceVisitorResponse {
  Util.validateModel(request);
  var appParams = Util.stringifyMapValue(Util.toMap(request.params));
  return doRequestOApi('POST', '/topapi/smartdevice/visitor/sendnotify', request.headers, appParams, runtime);
}

model GetmessageOapiImpaasMessageParams = {
  request: {
    groupId?: string(description='群id', name='group_id'),
    receiverId?: {
      id?: string(description='根据type类型确定', name='id'),
      type?: string(description='staff:表示使用钉钉的员工账号，channelUser：表示业务自己的账号', name='type'),
      channel?: string(description='业务对应的通道信息', name='channel'),
    }(description='单聊消息时使用，暂时不支持，可以不填', name='receiver_id'),
    limitNum: int64(description='获取的消息数量，总的数量小于需要获取的数量时，返回实际的消息数量.1-20之间', name='limit_num'),
    senderId?: {
      id?: string(description='根据type类型确定', name='id'),
      type?: string(description='staff:表示使用钉钉的员工账号，channelUser：表示业务自己的账号', name='type'),
      channel?: string(description='业务对应的通道信息', name='channel'),
    }(description='单聊消息时使用，暂时不支持，可以不填', name='sender_id'),
    begTime?: int64(description='从什么时候开始查，utc时间，单位毫秒', name='beg_time'),
  }(description='请求信息', name='request'),
}

model GetmessageOapiImpaasMessageRequest = {
  headers?: map[string]string,
  params:GetmessageOapiImpaasMessageParams,
}

model GetmessageOapiImpaasMessageResponseBody = {
  errcode?: int64(description='错误码，0表示成功，非0表示失败', name='errcode'),
  errmsg?: string(description='错误信息', name='errmsg'),
  result?: string(description='返回的是加密信息，需要开发者自行解密，解密完的内容看示例', name='result'),
}

model GetmessageOapiImpaasMessageResponse = {
  headers: map[string]string,
  body: GetmessageOapiImpaasMessageResponseBody,
}

/**
 * Description: 获取消息的内容
 */
async function getmessageOapiImpaasMessage(request: GetmessageOapiImpaasMessageRequest): GetmessageOapiImpaasMessageResponse {
  var runtime = new Util.RuntimeOptions{};
  return getmessageOapiImpaasMessageEx(request, runtime);
}

/**
 * Description: 获取消息的内容
 */
async function getmessageOapiImpaasMessageEx(request: GetmessageOapiImpaasMessageRequest, runtime: Util.RuntimeOptions): GetmessageOapiImpaasMessageResponse {
  Util.validateModel(request);
  var appParams = Util.stringifyMapValue(Util.toMap(request.params));
  return doRequestOApi('POST', '/topapi/impaas/message/getmessage', request.headers, appParams, runtime);
}

model CreateCorpExtcontactParams = {
  contact: {
    title?: string(description='职位', name='title'),
    labelIds: [ int64 ](description='标签列表', maxItems=20, name='label_ids'),
    shareDeptIds?: [ int64 ](description='共享给的部门ID', maxItems=20, name='share_dept_ids'),
    address?: string(description='地址', name='address'),
    remark?: string(description='备注', name='remark'),
    followerUserId: string(description='负责人userId', name='follower_user_id'),
    name: string(description='名称', name='name'),
    stateCode: string(description='手机号国家码', name='state_code'),
    companyName?: string(description='企业名', name='company_name'),
    shareUserIds?: [ string ](description='共享给的员工userId列表', maxItems=20, name='share_user_ids'),
    mobile: string(description='手机号', name='mobile'),
  }(description='外部联系人信息', name='contact'),
}

model CreateCorpExtcontactRequest = {
  headers?: map[string]string,
  params:CreateCorpExtcontactParams,
}

model CreateCorpExtcontactResponseBody = {
  result?: {
    userid?: string(description='新外部联系人的userId', name='userid'),
    dingOpenErrcode?: int64(description='dingOpenErrcode', name='ding_open_errcode'),
    errorMsg?: string(description='errorMsg', name='error_msg'),
    success?: boolean(description='success', name='success'),
  }(description='result', name='result'),
}

model CreateCorpExtcontactResponse = {
  headers: map[string]string,
  body: CreateCorpExtcontactResponseBody,
}

/**
 * Description: 添加企业外部联系人
 */
async function createCorpExtcontact(request: CreateCorpExtcontactRequest): CreateCorpExtcontactResponse {
  var runtime = new Util.RuntimeOptions{};
  return createCorpExtcontactEx(request, runtime);
}

/**
 * Description: 添加企业外部联系人
 */
async function createCorpExtcontactEx(request: CreateCorpExtcontactRequest, runtime: Util.RuntimeOptions): CreateCorpExtcontactResponse {
  Util.validateModel(request);
  var appParams = Util.stringifyMapValue(Util.toMap(request.params));
  return doRequest('dingtalk.corp.extcontact.create', 'POST', '/router/rest', request.headers, appParams, runtime);
}

model HasfaceCorpSmartdeviceParams = {
  useridList: [ string ](description='查询用userid列表', maxItems=100, name='userid_list'),
}

model HasfaceCorpSmartdeviceRequest = {
  headers?: map[string]string,
  params:HasfaceCorpSmartdeviceParams,
}

model HasfaceCorpSmartdeviceResponseBody = {
  result?: {
    dingOpenErrcode?: int64(description='dingOpenErrcode', name='ding_open_errcode'),
    errorMsg?: string(description='errorMsg', name='error_msg'),
    useridList?: [ string ](description='已录入用户列表', name='userid_list'),
    success?: boolean(description='success', name='success'),
  }(description='result', name='result'),
}

model HasfaceCorpSmartdeviceResponse = {
  headers: map[string]string,
  body: HasfaceCorpSmartdeviceResponseBody,
}

/**
 * Description: 开通人脸识别的企业中，会存在部分用户录入照片，此接口用于批量查看员工是否已录入照片
 */
async function hasfaceCorpSmartdevice(request: HasfaceCorpSmartdeviceRequest): HasfaceCorpSmartdeviceResponse {
  var runtime = new Util.RuntimeOptions{};
  return hasfaceCorpSmartdeviceEx(request, runtime);
}

/**
 * Description: 开通人脸识别的企业中，会存在部分用户录入照片，此接口用于批量查看员工是否已录入照片
 */
async function hasfaceCorpSmartdeviceEx(request: HasfaceCorpSmartdeviceRequest, runtime: Util.RuntimeOptions): HasfaceCorpSmartdeviceResponse {
  Util.validateModel(request);
  var appParams = Util.stringifyMapValue(Util.toMap(request.params));
  return doRequest('dingtalk.corp.smartdevice.hasface', 'POST', '/router/rest', request.headers, appParams, runtime);
}

model ListCorpExtcontactParams = {
  size?: int64(description='分页大小, 最大100', maximum=100, name='size'),
  offset?: int64(description='偏移位置', name='offset'),
}

model ListCorpExtcontactRequest = {
  headers?: map[string]string,
  params?:ListCorpExtcontactParams,
}

model ListCorpExtcontactResponseBody = {
  result?: {
    results?: [
      {
        title?: string(description='职位', name='title'),
        shareDeptIds?: [ int64 ](description='共享部门ID列表', name='share_dept_ids'),
        labelIds?: [ int64 ](description='标签', name='label_ids'),
        remark?: string(description='备注', name='remark'),
        address?: string(description='地址', name='address'),
        name?: string(description='姓名', name='name'),
        followerUserId?: string(description='负责人UserID', name='follower_user_id'),
        stateCode?: string(description='国家码', name='state_code'),
        companyName?: string(description='公司名', name='company_name'),
        shareUserIds?: [ string ](description='共享员工UserID列表', name='share_user_ids'),
        mobile?: string(description='手机号', name='mobile'),
        userid?: string(description='外部联系人UserID', name='userid'),
      }
    ](description='result', name='results'),
    dingOpenErrcode?: int64(description='dingOpenErrcode', name='ding_open_errcode'),
    errorMsg?: string(description='errorMsg', name='error_msg'),
    success?: boolean(description='success', name='success'),
  }(description='result', name='result'),
}

model ListCorpExtcontactResponse = {
  headers: map[string]string,
  body: ListCorpExtcontactResponseBody,
}

/**
 * Description: 获取企业外部联系人列表
 */
async function listCorpExtcontact(request: ListCorpExtcontactRequest): ListCorpExtcontactResponse {
  var runtime = new Util.RuntimeOptions{};
  return listCorpExtcontactEx(request, runtime);
}

/**
 * Description: 获取企业外部联系人列表
 */
async function listCorpExtcontactEx(request: ListCorpExtcontactRequest, runtime: Util.RuntimeOptions): ListCorpExtcontactResponse {
  Util.validateModel(request);
  var appParams = Util.stringifyMapValue(Util.toMap(request.params));
  return doRequest('dingtalk.corp.extcontact.list', 'POST', '/router/rest', request.headers, appParams, runtime);
}

model GetOapiHireNavigationParams = {
  userid: string(description='用户的userId', name='userid'),
}

model GetOapiHireNavigationRequest = {
  headers?: map[string]string,
  params:GetOapiHireNavigationParams,
}

model GetOapiHireNavigationResponseBody = {
  errcode?: int64(description='错误码，0表示成功', name='errcode'),
  errmsg?: string(description='错误信息', name='errmsg'),
  result?: string(description='导航栏数据的json字符串', name='result'),
}

model GetOapiHireNavigationResponse = {
  headers: map[string]string,
  body: GetOapiHireNavigationResponseBody,
}

/**
 * Description: 获取用户的导航栏
 */
async function getOapiHireNavigation(request: GetOapiHireNavigationRequest): GetOapiHireNavigationResponse {
  var runtime = new Util.RuntimeOptions{};
  return getOapiHireNavigationEx(request, runtime);
}

/**
 * Description: 获取用户的导航栏
 */
async function getOapiHireNavigationEx(request: GetOapiHireNavigationRequest, runtime: Util.RuntimeOptions): GetOapiHireNavigationResponse {
  Util.validateModel(request);
  var appParams = Util.stringifyMapValue(Util.toMap(request.params));
  return doRequestOApi('POST', '/topapi/hire/navigation/get', request.headers, appParams, runtime);
}

model UpdateCorpExtcontactParams = {
  contact: {
    title?: string(description='职位', name='title'),
    labelIds: [ int64 ](description='标签列表', maxItems=20, name='label_ids'),
    shareDeptIds?: [ int64 ](description='共享给的部门ID', maxItems=20, name='share_dept_ids'),
    address?: string(description='地址', name='address'),
    remark?: string(description='备注', name='remark'),
    followerUserId: string(description='负责人userId', name='follower_user_id'),
    name: string(description='名称', name='name'),
    userId: string(description='该外部联系人的userId', name='user_id'),
    companyName?: string(description='企业名', name='company_name'),
    shareUserIds?: [ string ](description='共享给的员工userId列表', maxItems=20, name='share_user_ids'),
  }(description='外部联系人信息', name='contact'),
}

model UpdateCorpExtcontactRequest = {
  headers?: map[string]string,
  params:UpdateCorpExtcontactParams,
}

model UpdateCorpExtcontactResponseBody = {
  result?: {
    dingOpenErrcode?: int64(description='dingOpenErrcode', name='ding_open_errcode'),
    errorMsg?: string(description='errorMsg', name='error_msg'),
    success?: boolean(description='success', name='success'),
  }(description='result', name='result'),
}

model UpdateCorpExtcontactResponse = {
  headers: map[string]string,
  body: UpdateCorpExtcontactResponseBody,
}

/**
 * Description: 更新企业外部联系人
 */
async function updateCorpExtcontact(request: UpdateCorpExtcontactRequest): UpdateCorpExtcontactResponse {
  var runtime = new Util.RuntimeOptions{};
  return updateCorpExtcontactEx(request, runtime);
}

/**
 * Description: 更新企业外部联系人
 */
async function updateCorpExtcontactEx(request: UpdateCorpExtcontactRequest, runtime: Util.RuntimeOptions): UpdateCorpExtcontactResponse {
  Util.validateModel(request);
  var appParams = Util.stringifyMapValue(Util.toMap(request.params));
  return doRequest('dingtalk.corp.extcontact.update', 'POST', '/router/rest', request.headers, appParams, runtime);
}

model CancelOapiAttendanceApproveParams = {
  userid?: string(description='员工的user_id', name='userid'),
  approveId?: string(description='审批单全局唯一id，最大长度100个字符', maxLength=100, name='approve_id'),
}

model CancelOapiAttendanceApproveRequest = {
  headers?: map[string]string,
  params?:CancelOapiAttendanceApproveParams,
}

model CancelOapiAttendanceApproveResponseBody = {
  errcode?: int64(description='0代表成功，其他代表失败', name='errcode'),
  errmsg?: string(description='错误信息', name='errmsg'),
}

model CancelOapiAttendanceApproveResponse = {
  headers: map[string]string,
  body: CancelOapiAttendanceApproveResponseBody,
}

/**
 * Description: 该接口提供通过审批修改打卡结果的能力，如外出，请假，审批等，指定时间内的打卡结果会被修改为正常
 */
async function cancelOapiAttendanceApprove(request: CancelOapiAttendanceApproveRequest): CancelOapiAttendanceApproveResponse {
  var runtime = new Util.RuntimeOptions{};
  return cancelOapiAttendanceApproveEx(request, runtime);
}

/**
 * Description: 该接口提供通过审批修改打卡结果的能力，如外出，请假，审批等，指定时间内的打卡结果会被修改为正常
 */
async function cancelOapiAttendanceApproveEx(request: CancelOapiAttendanceApproveRequest, runtime: Util.RuntimeOptions): CancelOapiAttendanceApproveResponse {
  Util.validateModel(request);
  var appParams = Util.stringifyMapValue(Util.toMap(request.params));
  return doRequestOApi('POST', '/topapi/attendance/approve/cancel', request.headers, appParams, runtime);
}

model GetCorpExtcontactParams = {
  userId: string(description='userId', name='user_id'),
}

model GetCorpExtcontactRequest = {
  headers?: map[string]string,
  params:GetCorpExtcontactParams,
}

model GetCorpExtcontactResponseBody = {
  result?: {
    result?: {
      title?: string(description='职位', name='title'),
      shareDeptIds?: [ int64 ](description='共享部门ID列表', name='share_dept_ids'),
      labelIds?: [ int64 ](description='标签', name='label_ids'),
      remark?: string(description='备注', name='remark'),
      address?: string(description='地址', name='address'),
      name?: string(description='姓名', name='name'),
      followerUserId?: string(description='负责人UserID', name='follower_user_id'),
      stateCode?: string(description='国家码', name='state_code'),
      companyName?: string(description='公司名', name='company_name'),
      shareUserIds?: [ string ](description='共享员工UserID列表', name='share_user_ids'),
      mobile?: string(description='手机号', name='mobile'),
      userid?: string(description='外部联系人UserID', name='userid'),
      extAttr?: string(description='扩展属性，可以设置多种属性', name='ext_attr'),
    }(description='result', name='result'),
    dingOpenErrcode?: int64(description='dingOpenErrcode', name='ding_open_errcode'),
    errorMsg?: string(description='errorMsg', name='error_msg'),
    success?: boolean(description='success', name='success'),
  }(description='result', name='result'),
}

model GetCorpExtcontactResponse = {
  headers: map[string]string,
  body: GetCorpExtcontactResponseBody,
}

/**
 * Description: 获取企业外部联系人详情
 */
async function getCorpExtcontact(request: GetCorpExtcontactRequest): GetCorpExtcontactResponse {
  var runtime = new Util.RuntimeOptions{};
  return getCorpExtcontactEx(request, runtime);
}

/**
 * Description: 获取企业外部联系人详情
 */
async function getCorpExtcontactEx(request: GetCorpExtcontactRequest, runtime: Util.RuntimeOptions): GetCorpExtcontactResponse {
  Util.validateModel(request);
  var appParams = Util.stringifyMapValue(Util.toMap(request.params));
  return doRequest('dingtalk.corp.extcontact.get', 'POST', '/router/rest', request.headers, appParams, runtime);
}

model FinishOapiAttendanceApproveParams = {
  userid?: string(description='员工的user_id', name='userid'),
  bizType?: int64(description='审批单类型1:加班，2：外出、出差，3：请假', name='biz_type'),
  fromTime?: string(description='开始时间，支持的时间格式 2019-08-15/2019-08-15 AM/2019-08-15 12:43。开始时间不能早于当前时间前31天', name='from_time'),
  toTime?: string(description='结束时间，支持的时间格式 2019-08-15/2019-08-15 AM/2019-08-15 12:43。结束时间减去开始时间的天数不能超过31天。biz_type为1时结束时间减去开始时间不能超过1天', name='to_time'),
  durationUnit?: string(description='时长单位，支持的day,halfDay,hour，biz_type为1时仅支持hour。时间格式必须与时长单位对应，2019-08-15对应day，2019-08-15  AM对应halfDay，2019-08-15 12:43对应hour', name='duration_unit'),
  calculateModel?: int64(description='计算方法，0：按自然日计算，1：按工作日计算', name='calculate_model'),
  tagName?: string(description='审批单类型名称，最大长度20个字符', maxLength=20, name='tag_name'),
  subType?: string(description='子类型名称，最大长度20个字符', maxLength=20, name='sub_type'),
  approveId?: string(description='审批单全局唯一id，最大长度100个字符', maxLength=100, name='approve_id'),
  jumpUrl?: string(description='审批单跳转地址，最大长度100个字符', maxLength=200, name='jump_url'),
  overtimeDuration?: string(description='biz_type为1时必传，加班时长单位小时', name='overtime_duration'),
  overtimeToMore?: int64(description='biz_type为1时必传，1：加班转调休，2：加班转工资', name='overtime_to_more'),
}

model FinishOapiAttendanceApproveRequest = {
  headers?: map[string]string,
  params?:FinishOapiAttendanceApproveParams,
}

model FinishOapiAttendanceApproveResponseBody = {
  errcode?: int64(description='0代表成功，其他代表失败', name='errcode'),
  errmsg?: string(description='错误信息', name='errmsg'),
  result?: {
    duration?: string(description='总时长', name='duration'),
    durationDetail?: [
      {
        date?: string(description='日期', name='date'),
        duration?: string(description='每日时长', name='duration'),
      }
    ](description='demo', name='durationDetail'),
  }(description='demo', name='result'),
}

model FinishOapiAttendanceApproveResponse = {
  headers: map[string]string,
  body: FinishOapiAttendanceApproveResponseBody,
}

/**
 * Description: 该接口提供通过审批修改打卡结果的能力，如外出，请假，审批等，指定时间内的打卡结果会被修改为正常
 */
async function finishOapiAttendanceApprove(request: FinishOapiAttendanceApproveRequest): FinishOapiAttendanceApproveResponse {
  var runtime = new Util.RuntimeOptions{};
  return finishOapiAttendanceApproveEx(request, runtime);
}

/**
 * Description: 该接口提供通过审批修改打卡结果的能力，如外出，请假，审批等，指定时间内的打卡结果会被修改为正常
 */
async function finishOapiAttendanceApproveEx(request: FinishOapiAttendanceApproveRequest, runtime: Util.RuntimeOptions): FinishOapiAttendanceApproveResponse {
  Util.validateModel(request);
  var appParams = Util.stringifyMapValue(Util.toMap(request.params));
  return doRequestOApi('POST', '/topapi/attendance/approve/finish', request.headers, appParams, runtime);
}

model DeleteCorpExtcontactParams = {
  userid: string(description='userId', name='userid'),
}

model DeleteCorpExtcontactRequest = {
  headers?: map[string]string,
  params:DeleteCorpExtcontactParams,
}

model DeleteCorpExtcontactResponseBody = {
  result?: {
    dingOpenErrcode?: int64(description='dingOpenErrcode', name='ding_open_errcode'),
    errorMsg?: string(description='errorMsg', name='error_msg'),
    success?: boolean(description='success', name='success'),
  }(description='result', name='result'),
}

model DeleteCorpExtcontactResponse = {
  headers: map[string]string,
  body: DeleteCorpExtcontactResponseBody,
}

/**
 * Description: 删除企业外部联系人
 */
async function deleteCorpExtcontact(request: DeleteCorpExtcontactRequest): DeleteCorpExtcontactResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteCorpExtcontactEx(request, runtime);
}

/**
 * Description: 删除企业外部联系人
 */
async function deleteCorpExtcontactEx(request: DeleteCorpExtcontactRequest, runtime: Util.RuntimeOptions): DeleteCorpExtcontactResponse {
  Util.validateModel(request);
  var appParams = Util.stringifyMapValue(Util.toMap(request.params));
  return doRequest('dingtalk.corp.extcontact.delete', 'POST', '/router/rest', request.headers, appParams, runtime);
}

model CalculateOapiAttendanceApproveDurationParams = {
  userid: string(description='员工的user_id', name='userid'),
  bizType: int64(description='审批单类型1：加班，2：出差，3：请假', name='biz_type'),
  fromTime: string(description='开始时间，支持的时间格式 2019-08-15/2019-08-15 AM/2019-08-15 12:43。开始时间不能早于当前时间前31天', name='from_time'),
  toTime: string(description='结束时间，支持的时间格式 2019-08-15/2019-08-15 AM/2019-08-15 12:43。结束时间减去开始时间的天数不能超过31天。biz_type为1时结束时间减去开始时间不能超过1天', name='to_time'),
  durationUnit: string(description='时长单位，支持的day,halfDay,hour，biz_type为1时仅支持hour。时间格式必须与时长单位对应，2019-08-15对应day，2019-08-15  AM对应halfDay，2019-08-15 12:43对应hour', name='duration_unit'),
  calculateModel: int64(description='计算方法，0：按自然日计算，1：按工作日计算', name='calculate_model'),
}

model CalculateOapiAttendanceApproveDurationRequest = {
  headers?: map[string]string,
  params:CalculateOapiAttendanceApproveDurationParams,
}

model CalculateOapiAttendanceApproveDurationResponseBody = {
  errcode?: int64(description='0代表成功，其他代表失败', name='errcode'),
  errmsg?: string(description='错误信息', name='errmsg'),
  result?: {
    duration?: string(description='总时长', name='duration'),
    durationDetails?: [
      {
        date?: string(description='日期', name='date'),
        duration?: string(description='每日时长', name='duration'),
      }
    ](description='demo', name='duration_details'),
  }(description='demo', name='result'),
}

model CalculateOapiAttendanceApproveDurationResponse = {
  headers: map[string]string,
  body: CalculateOapiAttendanceApproveDurationResponseBody,
}

/**
 * Description: 根据考勤系统的排班情况预计算员工加班，出差，请假的时长信息
 */
async function calculateOapiAttendanceApproveDuration(request: CalculateOapiAttendanceApproveDurationRequest): CalculateOapiAttendanceApproveDurationResponse {
  var runtime = new Util.RuntimeOptions{};
  return calculateOapiAttendanceApproveDurationEx(request, runtime);
}

/**
 * Description: 根据考勤系统的排班情况预计算员工加班，出差，请假的时长信息
 */
async function calculateOapiAttendanceApproveDurationEx(request: CalculateOapiAttendanceApproveDurationRequest, runtime: Util.RuntimeOptions): CalculateOapiAttendanceApproveDurationResponse {
  Util.validateModel(request);
  var appParams = Util.stringifyMapValue(Util.toMap(request.params));
  return doRequestOApi('POST', '/topapi/attendance/approve/duration/calculate', request.headers, appParams, runtime);
}

model ListlabelgroupsCorpExtcontactParams = {
  size?: int64(description='分页大小,最大100', maximum=100, name='size'),
  offset?: int64(description='偏移位置', name='offset'),
}

model ListlabelgroupsCorpExtcontactRequest = {
  headers?: map[string]string,
  params?:ListlabelgroupsCorpExtcontactParams,
}

model ListlabelgroupsCorpExtcontactResponseBody = {
  result?: {
    results?: [
      {
        name?: string(description='标签组名字', name='name'),
        color?: int64(description='标签组颜色', name='color'),
        labels?: [
          {
            name?: string(description='标签名字', name='name'),
            id?: int64(description='标签id', name='id'),
          }
        ](description='labels', name='labels'),
      }
    ](description='results', name='results'),
    dingOpenErrcode?: int64(description='dingOpenErrcode', name='ding_open_errcode'),
    errorMsg?: string(description='errorMsg', name='error_msg'),
    success?: boolean(description='success', name='success'),
  }(description='result', name='result'),
}

model ListlabelgroupsCorpExtcontactResponse = {
  headers: map[string]string,
  body: ListlabelgroupsCorpExtcontactResponseBody,
}

/**
 * Description: 获取企业外部联系人标签列表
 */
async function listlabelgroupsCorpExtcontact(request: ListlabelgroupsCorpExtcontactRequest): ListlabelgroupsCorpExtcontactResponse {
  var runtime = new Util.RuntimeOptions{};
  return listlabelgroupsCorpExtcontactEx(request, runtime);
}

/**
 * Description: 获取企业外部联系人标签列表
 */
async function listlabelgroupsCorpExtcontactEx(request: ListlabelgroupsCorpExtcontactRequest, runtime: Util.RuntimeOptions): ListlabelgroupsCorpExtcontactResponse {
  Util.validateModel(request);
  var appParams = Util.stringifyMapValue(Util.toMap(request.params));
  return doRequest('dingtalk.corp.extcontact.listlabelgroups', 'POST', '/router/rest', request.headers, appParams, runtime);
}

model HasbinddeviceCorpDeviceManageParams = {
  deviceServiceId: int64(description='设备产品类型 产品编码：M1：9 C1：14 M2：15 D1：24', name='device_service_id'),
}

model HasbinddeviceCorpDeviceManageRequest = {
  headers?: map[string]string,
  params:HasbinddeviceCorpDeviceManageParams,
}

model HasbinddeviceCorpDeviceManageResponseBody = {
  result?: {
    result?: boolean(description='result', name='result'),
    dingOpenErrcode?: int64(description='dingOpenErrcode', name='ding_open_errcode'),
    errorMsg?: string(description='errorMsg', name='error_msg'),
    success?: boolean(description='success', name='success'),
  }(description='result', name='result'),
}

model HasbinddeviceCorpDeviceManageResponse = {
  headers: map[string]string,
  body: HasbinddeviceCorpDeviceManageResponseBody,
}

/**
 * Description: 允许开发者查询企业是否绑定了某个类型的钉钉智能硬件设备
 */
async function hasbinddeviceCorpDeviceManage(request: HasbinddeviceCorpDeviceManageRequest): HasbinddeviceCorpDeviceManageResponse {
  var runtime = new Util.RuntimeOptions{};
  return hasbinddeviceCorpDeviceManageEx(request, runtime);
}

/**
 * Description: 允许开发者查询企业是否绑定了某个类型的钉钉智能硬件设备
 */
async function hasbinddeviceCorpDeviceManageEx(request: HasbinddeviceCorpDeviceManageRequest, runtime: Util.RuntimeOptions): HasbinddeviceCorpDeviceManageResponse {
  Util.validateModel(request);
  var appParams = Util.stringifyMapValue(Util.toMap(request.params));
  return doRequest('dingtalk.corp.device.manage.hasbinddevice', 'POST', '/router/rest', request.headers, appParams, runtime);
}

model AddfaceCorpSmartdeviceParams = {
  faceVo: {
    endDate?: int64(description='终端识别有效期截止时间 timestamp(毫秒)', name='end_date'),
    mediaId: string(description='识别用照片id，安全考虑，获取成功后立即删除', name='media_id'),
    startDate?: int64(description='终端识别有效期开始时间 timestamp(毫秒)', name='start_date'),
    userid: string(description='用户id', name='userid'),
    userType: string(description='用户类型，用于区别不同的识别问候语 如interview,friends,business,communication,training,inspection,other', name='user_type'),
  }(description='识别用户数据', name='face_vo'),
}

model AddfaceCorpSmartdeviceRequest = {
  headers?: map[string]string,
  params:AddfaceCorpSmartdeviceParams,
}

model AddfaceCorpSmartdeviceResponseBody = {
  result?: {
    dingOpenErrcode?: int64(description='dingOpenErrcode', name='ding_open_errcode'),
    errorMsg?: string(description='errorMsg', name='error_msg'),
    result?: boolean(description='result', name='result'),
    success?: boolean(description='success', name='success'),
  }(description='result', name='result'),
}

model AddfaceCorpSmartdeviceResponse = {
  headers: map[string]string,
  body: AddfaceCorpSmartdeviceResponseBody,
}

/**
 * Description: 为用户添加识别照片，以及指定在终端上识别的有效期，指定用户类型对应识别提示语
 */
async function addfaceCorpSmartdevice(request: AddfaceCorpSmartdeviceRequest): AddfaceCorpSmartdeviceResponse {
  var runtime = new Util.RuntimeOptions{};
  return addfaceCorpSmartdeviceEx(request, runtime);
}

/**
 * Description: 为用户添加识别照片，以及指定在终端上识别的有效期，指定用户类型对应识别提示语
 */
async function addfaceCorpSmartdeviceEx(request: AddfaceCorpSmartdeviceRequest, runtime: Util.RuntimeOptions): AddfaceCorpSmartdeviceResponse {
  Util.validateModel(request);
  var appParams = Util.stringifyMapValue(Util.toMap(request.params));
  return doRequest('dingtalk.corp.smartdevice.addface', 'POST', '/router/rest', request.headers, appParams, runtime);
}

model QueryOapiProcessWorkrecordTaskParams = {
  userid: string(description='用户id', name='userid'),
  offset: int64(description='分页游标', name='offset'),
  count: int64(description='分页大小', name='count'),
  status: int64(description='状态', name='status'),
}

model QueryOapiProcessWorkrecordTaskRequest = {
  headers?: map[string]string,
  params:QueryOapiProcessWorkrecordTaskParams,
}

model QueryOapiProcessWorkrecordTaskResponseBody = {
  result?: {
    hasMore?: boolean(description='是否有更多数据', name='has_more'),
    list?: [
      {
        url?: string(description='跳转链接', name='url'),
        taskId?: string(description='任务id', name='task_id'),
        instanceId?: string(description='实例id', name='instance_id'),
        title?: string(description='标题', name='title'),
        forms?: [
          {
            title?: string(description='标题', name='title'),
            content?: string(description='内容', name='content'),
          }
        ](description='表单列表', name='forms'),
      }
    ](description='列表', name='list'),
  }(description='结果集', name='result'),
  errcode?: int64(description='错误码', name='errcode'),
  errmsg?: string(description='错误信息', name='errmsg'),
}

model QueryOapiProcessWorkrecordTaskResponse = {
  headers: map[string]string,
  body: QueryOapiProcessWorkrecordTaskResponseBody,
}

/**
 * Description: 查询用户待办事项
 */
async function queryOapiProcessWorkrecordTask(request: QueryOapiProcessWorkrecordTaskRequest): QueryOapiProcessWorkrecordTaskResponse {
  var runtime = new Util.RuntimeOptions{};
  return queryOapiProcessWorkrecordTaskEx(request, runtime);
}

/**
 * Description: 查询用户待办事项
 */
async function queryOapiProcessWorkrecordTaskEx(request: QueryOapiProcessWorkrecordTaskRequest, runtime: Util.RuntimeOptions): QueryOapiProcessWorkrecordTaskResponse {
  Util.validateModel(request);
  var appParams = Util.stringifyMapValue(Util.toMap(request.params));
  return doRequestOApi('POST', '/topapi/process/workrecord/task/query', request.headers, appParams, runtime);
}

model AddrecognizenotifyCorpSmartdeviceParams = {
  notifyVo: {
    notifyUserList?: [ string ](description='被通知的用户列表', maxItems=20, name='notify_user_list'),
    notifyType: int64(description='通知类型 仅支持1：用户', name='notify_type'),
    notifyTemplate: string(description='消息内容的模板，key向智能硬件团队申请', name='notify_template'),
    recognizeStarttime?: int64(description='识别开始时间 timestamp(毫秒)', name='recognize_starttime'),
    recognizeEndtime?: int64(description='识别结束时间 timestamp(毫秒)', name='recognize_endtime'),
    appointedEndtime?: int64(description='预约开始时间 timestamp(毫秒)', name='appointed_endtime'),
    appointedStarttime?: int64(description='预约结束时间 timestamp(毫秒)', name='appointed_starttime'),
    userid?: string(description='联系人id', name='userid'),
  }(description='通知数据', name='notify_vo'),
}

model AddrecognizenotifyCorpSmartdeviceRequest = {
  headers?: map[string]string,
  params:AddrecognizenotifyCorpSmartdeviceParams,
}

model AddrecognizenotifyCorpSmartdeviceResponseBody = {
  result?: {
    result?: string(description='识别反馈编号', name='result'),
    dingOpenErrcode?: int64(description='dingOpenErrcode', name='ding_open_errcode'),
    errorMsg?: string(description='errorMsg', name='error_msg'),
    success?: boolean(description='success', name='success'),
  }(description='result', name='result'),
}

model AddrecognizenotifyCorpSmartdeviceResponse = {
  headers: map[string]string,
  body: AddrecognizenotifyCorpSmartdeviceResponseBody,
}

/**
 * Description: 当M2成功识别指定用户后，如需向指定用户发消息通知，使用些接口
 */
async function addrecognizenotifyCorpSmartdevice(request: AddrecognizenotifyCorpSmartdeviceRequest): AddrecognizenotifyCorpSmartdeviceResponse {
  var runtime = new Util.RuntimeOptions{};
  return addrecognizenotifyCorpSmartdeviceEx(request, runtime);
}

/**
 * Description: 当M2成功识别指定用户后，如需向指定用户发消息通知，使用些接口
 */
async function addrecognizenotifyCorpSmartdeviceEx(request: AddrecognizenotifyCorpSmartdeviceRequest, runtime: Util.RuntimeOptions): AddrecognizenotifyCorpSmartdeviceResponse {
  Util.validateModel(request);
  var appParams = Util.stringifyMapValue(Util.toMap(request.params));
  return doRequest('dingtalk.corp.smartdevice.addrecognizenotify', 'POST', '/router/rest', request.headers, appParams, runtime);
}

model PushinfoCorpSmartdeviceReceptionistParams = {
  microappAgentId: int64(description='微应用agentID', name='microapp_agent_id'),
  descTemplate: string(description='智能前台信息展示模板ID，需要向智能硬件团队申请', name='desc_template'),
  descContent: string(description='展示模板需要的变量数据', name='desc_content'),
}

model PushinfoCorpSmartdeviceReceptionistRequest = {
  headers?: map[string]string,
  params:PushinfoCorpSmartdeviceReceptionistParams,
}

model PushinfoCorpSmartdeviceReceptionistResponseBody = {
  result?: {
    dingOpenErrcode?: int64(description='dingOpenErrcode', name='ding_open_errcode'),
    errorMsg?: string(description='errorMsg', name='error_msg'),
    result?: boolean(description='推送是否成功', name='result'),
    success?: boolean(description='success', name='success'),
  }(description='result', name='result'),
}

model PushinfoCorpSmartdeviceReceptionistResponse = {
  headers: map[string]string,
  body: PushinfoCorpSmartdeviceReceptionistResponseBody,
}

/**
 * Description: 智能前台开放部分功能区块，区块内的显示信息由isv基于企业不同推送展示消息
 */
async function pushinfoCorpSmartdeviceReceptionist(request: PushinfoCorpSmartdeviceReceptionistRequest): PushinfoCorpSmartdeviceReceptionistResponse {
  var runtime = new Util.RuntimeOptions{};
  return pushinfoCorpSmartdeviceReceptionistEx(request, runtime);
}

/**
 * Description: 智能前台开放部分功能区块，区块内的显示信息由isv基于企业不同推送展示消息
 */
async function pushinfoCorpSmartdeviceReceptionistEx(request: PushinfoCorpSmartdeviceReceptionistRequest, runtime: Util.RuntimeOptions): PushinfoCorpSmartdeviceReceptionistResponse {
  Util.validateModel(request);
  var appParams = Util.stringifyMapValue(Util.toMap(request.params));
  return doRequest('dingtalk.corp.smartdevice.receptionist.pushinfo', 'POST', '/router/rest', request.headers, appParams, runtime);
}

model Getuserinfo_bycodeOapiSnsParams = {
  tmpAuthCode?: string(description='登录的临时授权码', name='tmp_auth_code'),
}

model Getuserinfo_bycodeOapiSnsRequest = {
  headers?: map[string]string,
  params?:Getuserinfo_bycodeOapiSnsParams,
}

model Getuserinfo_bycodeOapiSnsResponseBody = {
  userInfo?: {
    nick?: string(description='nick', name='nick'),
    unionid?: string(description='unionid', name='unionid'),
    openid?: string(description='openid', name='openid'),
    mainOrgAuthHighLevel?: boolean(description='用户主企业是否达到高级认证级别', name='main_org_auth_high_level'),
  }(description='user_info', name='user_info'),
  errmsg?: string(description='errmsg', name='errmsg'),
  errcode?: int64(description='errcode', name='errcode'),
}

model Getuserinfo_bycodeOapiSnsResponse = {
  headers: map[string]string,
  body: Getuserinfo_bycodeOapiSnsResponseBody,
}

/**
 * Description: 根据sns临时授权码获取用户信息
 */
async function getuserinfo_bycodeOapiSns(request: Getuserinfo_bycodeOapiSnsRequest): Getuserinfo_bycodeOapiSnsResponse {
  var runtime = new Util.RuntimeOptions{};
  return getuserinfo_bycodeOapiSnsEx(request, runtime);
}

/**
 * Description: 根据sns临时授权码获取用户信息
 */
async function getuserinfo_bycodeOapiSnsEx(request: Getuserinfo_bycodeOapiSnsRequest, runtime: Util.RuntimeOptions): Getuserinfo_bycodeOapiSnsResponse {
  Util.validateModel(request);
  var appParams = Util.stringifyMapValue(Util.toMap(request.params));
  return doRequestOApi('POST', '/sns/getuserinfo_bycode', request.headers, appParams, runtime);
}

model SimplelistOapiReportParams = {
  startTime: int64(description='查询起始时间', name='start_time'),
  endTime: int64(description='查询截止时间', name='end_time'),
  templateName?: string(description='要查询的模板名称', name='template_name'),
  userid?: string(description='员工的userid', name='userid'),
  cursor: int64(description='查询游标，初始传入0，后续从上一次的返回值中获取', name='cursor'),
  size: int64(description='每页数据量', name='size'),
}

model SimplelistOapiReportRequest = {
  headers?: map[string]string,
  params:SimplelistOapiReportParams,
}

model SimplelistOapiReportResponseBody = {
  result?: {
    dataList?: [
      {
        remark?: string(description='备注', name='remark'),
        templateName?: string(description='日志模板名', name='template_name'),
        deptName?: string(description='部门', name='dept_name'),
        creatorName?: string(description='日志创建人', name='creator_name'),
        creatorId?: string(description='日志创建人userid', name='creator_id'),
        createTime?: int64(description='日志创建时间', name='create_time'),
        reportId?: string(description='日志唯一id', name='report_id'),
      }
    ](description='日志列表', name='data_list'),
    size?: int64(description='分页大小', name='size'),
    nextCursor?: int64(description='nextCursor', name='next_cursor'),
    hasMore?: boolean(description='是否还有下一页', name='has_more'),
  }(description='result', name='result'),
  errcode?: int64(description='errcode', name='errcode'),
  errmsg?: string(description='errmsg', name='errmsg'),
}

model SimplelistOapiReportResponse = {
  headers: map[string]string,
  body: SimplelistOapiReportResponseBody,
}

/**
 * Description: 企业可以根据员工userid或者日志模板名称，分页获取员工一段时间范围内在【日志】微应用发送的日志概要信息
 */
async function simplelistOapiReport(request: SimplelistOapiReportRequest): SimplelistOapiReportResponse {
  var runtime = new Util.RuntimeOptions{};
  return simplelistOapiReportEx(request, runtime);
}

/**
 * Description: 企业可以根据员工userid或者日志模板名称，分页获取员工一段时间范围内在【日志】微应用发送的日志概要信息
 */
async function simplelistOapiReportEx(request: SimplelistOapiReportRequest, runtime: Util.RuntimeOptions): SimplelistOapiReportResponse {
  Util.validateModel(request);
  var appParams = Util.stringifyMapValue(Util.toMap(request.params));
  return doRequestOApi('POST', '/topapi/report/simplelist', request.headers, appParams, runtime);
}

model HasfaceOapiSmartdeviceParams = {
  useridList: [ string ](description='查询用userid列表', maxItems=100, name='userid_list'),
}

model HasfaceOapiSmartdeviceRequest = {
  headers?: map[string]string,
  params:HasfaceOapiSmartdeviceParams,
}

model HasfaceOapiSmartdeviceResponseBody = {
  errcode?: int64(description='dingOpenErrcode', name='errcode'),
  errmsg?: string(description='errorMsg', name='errmsg'),
  useridList?: [ string ](description='已录入用户列表', name='userid_list'),
}

model HasfaceOapiSmartdeviceResponse = {
  headers: map[string]string,
  body: HasfaceOapiSmartdeviceResponseBody,
}

/**
 * Description: 开通人脸识别的企业中，会存在部分用户录入照片，此接口用于批量查看员工是否已录入照片
 */
async function hasfaceOapiSmartdevice(request: HasfaceOapiSmartdeviceRequest): HasfaceOapiSmartdeviceResponse {
  var runtime = new Util.RuntimeOptions{};
  return hasfaceOapiSmartdeviceEx(request, runtime);
}

/**
 * Description: 开通人脸识别的企业中，会存在部分用户录入照片，此接口用于批量查看员工是否已录入照片
 */
async function hasfaceOapiSmartdeviceEx(request: HasfaceOapiSmartdeviceRequest, runtime: Util.RuntimeOptions): HasfaceOapiSmartdeviceResponse {
  Util.validateModel(request);
  var appParams = Util.stringifyMapValue(Util.toMap(request.params));
  return doRequestOApi('POST', '/topapi/smartdevice/hasface', request.headers, appParams, runtime);
}

model CreateOapiPbpInstanceParams = {
  startTime?: int64(description='实例开始时间，时间戳', name='start_time'),
  outerId: string(description='外部id，唯一对应一次业务实例，如一次会议的meeting_id', name='outer_id'),
  bizId: string(description='业务id，接入时由系统分配', name='biz_id'),
  endTime?: int64(description='实例结束时间，时间戳', name='end_time'),
  active?: boolean(description='是否启用，建议传入该参数，只有启用状态的实例才允许打卡。如果不传入该参数，则实例默认为“已创建”状态而非“启用”状态。', name='active'),
}

model CreateOapiPbpInstanceRequest = {
  headers?: map[string]string,
  params:CreateOapiPbpInstanceParams,
}

model CreateOapiPbpInstanceResponseBody = {
  errmsg?: string(description='错误信息', name='errmsg'),
  errcode?: int64(description='错误码', name='errcode'),
  bizInstId?: string(description='业务实例id', name='biz_inst_id'),
}

model CreateOapiPbpInstanceResponse = {
  headers: map[string]string,
  body: CreateOapiPbpInstanceResponseBody,
}

/**
 * Description: 打卡业务平台，创建业务实例，根据业务实例可以配置打卡组（位置、人群、规则）
 */
async function createOapiPbpInstance(request: CreateOapiPbpInstanceRequest): CreateOapiPbpInstanceResponse {
  var runtime = new Util.RuntimeOptions{};
  return createOapiPbpInstanceEx(request, runtime);
}

/**
 * Description: 打卡业务平台，创建业务实例，根据业务实例可以配置打卡组（位置、人群、规则）
 */
async function createOapiPbpInstanceEx(request: CreateOapiPbpInstanceRequest, runtime: Util.RuntimeOptions): CreateOapiPbpInstanceResponse {
  Util.validateModel(request);
  var appParams = Util.stringifyMapValue(Util.toMap(request.params));
  return doRequestOApi('POST', '/topapi/pbp/instance/create', request.headers, appParams, runtime);
}

model ListOapiPbpInstanceGroupMemberParams = {
  punchGroupId: string(description='打卡组id，由创建打卡组接口返回', name='punch_group_id'),
  cursor: int64(description='游标，用于分页查询', name='cursor'),
  size: int64(description='分页请求数量', name='size'),
  bizId?: string(description='业务唯一标识', name='biz_id'),
}

model ListOapiPbpInstanceGroupMemberRequest = {
  headers?: map[string]string,
  params:ListOapiPbpInstanceGroupMemberParams,
}

model ListOapiPbpInstanceGroupMemberResponseBody = {
  result?: {
    list?: [
      {
        type?: int64(description='成员类型，0表示员工，1表示部门', name='type'),
        memberId?: string(description='成员id，根据类型不同表示不同', name='member_id'),
      }
    ](description='列表结果', name='list'),
    nextCursor?: int64(description='下次请求需要带的游标', name='next_cursor'),
    hasMore?: boolean(description='是否还有数据', name='has_more'),
  }(description='分页结果', name='result'),
  errmsg?: string(description='错误信息', name='errmsg'),
  errcode?: int64(description='错误结果', name='errcode'),
}

model ListOapiPbpInstanceGroupMemberResponse = {
  headers: map[string]string,
  body: ListOapiPbpInstanceGroupMemberResponseBody,
}

/**
 * Description: 打卡业务平台，获取打卡组绑定的成员
 */
async function listOapiPbpInstanceGroupMember(request: ListOapiPbpInstanceGroupMemberRequest): ListOapiPbpInstanceGroupMemberResponse {
  var runtime = new Util.RuntimeOptions{};
  return listOapiPbpInstanceGroupMemberEx(request, runtime);
}

/**
 * Description: 打卡业务平台，获取打卡组绑定的成员
 */
async function listOapiPbpInstanceGroupMemberEx(request: ListOapiPbpInstanceGroupMemberRequest, runtime: Util.RuntimeOptions): ListOapiPbpInstanceGroupMemberResponse {
  Util.validateModel(request);
  var appParams = Util.stringifyMapValue(Util.toMap(request.params));
  return doRequestOApi('POST', '/topapi/pbp/instance/group/member/list', request.headers, appParams, runtime);
}

model CreateOapiPbpInstanceGroupParams = {
  groupParam: {
    bizInstId: string(description='业务实例id', name='biz_inst_id'),
    bizId?: string(description='业务唯一标识', name='biz_id'),
  }(description='打卡组创建参数', name='group_param'),
}

model CreateOapiPbpInstanceGroupRequest = {
  headers?: map[string]string,
  params:CreateOapiPbpInstanceGroupParams,
}

model CreateOapiPbpInstanceGroupResponseBody = {
  punchGroupId?: string(description='打卡组id', name='punch_group_id'),
  errcode?: int64(description='错误码', name='errcode'),
  errmsg?: string(description='错误信息', name='errmsg'),
}

model CreateOapiPbpInstanceGroupResponse = {
  headers: map[string]string,
  body: CreateOapiPbpInstanceGroupResponseBody,
}

/**
 * Description: 打卡业务平台，创建业务实例对应的打卡组
 */
async function createOapiPbpInstanceGroup(request: CreateOapiPbpInstanceGroupRequest): CreateOapiPbpInstanceGroupResponse {
  var runtime = new Util.RuntimeOptions{};
  return createOapiPbpInstanceGroupEx(request, runtime);
}

/**
 * Description: 打卡业务平台，创建业务实例对应的打卡组
 */
async function createOapiPbpInstanceGroupEx(request: CreateOapiPbpInstanceGroupRequest, runtime: Util.RuntimeOptions): CreateOapiPbpInstanceGroupResponse {
  Util.validateModel(request);
  var appParams = Util.stringifyMapValue(Util.toMap(request.params));
  return doRequestOApi('POST', '/topapi/pbp/instance/group/create', request.headers, appParams, runtime);
}

model GetdismissionlistOapiHrmEmployeeParams = {
  current: int64(description='第几页，从1开始', name='current'),
  pageSize: int64(description='一页多少数据，在1-100之间', name='page_size'),
  opUserid: string(description='操作人userid', name='op_userid'),
}

model GetdismissionlistOapiHrmEmployeeRequest = {
  headers?: map[string]string,
  params:GetdismissionlistOapiHrmEmployeeParams,
}

model GetdismissionlistOapiHrmEmployeeResponseBody = {
  errcode?: int64(description='错误码', name='errcode'),
  errmsg?: string(description='错误信息', name='errmsg'),
  page?: {
    current?: int64(description='当前页', name='current'),
    pageSize?: int64(description='每页最大数量，最大100', name='page_size'),
    total?: int64(description='总数', name='total'),
    dataList?: [
      {
        userid?: string(description='userId', name='userid'),
        name?: string(description='名称', name='name'),
        employeeType?: string(description='员工类型（0:无类型，1:全职，2:兼职，3:实习，4:劳务派遣，5:退休返聘，6:劳务外包）', name='employee_type'),
        deptName?: string(description='部门名称', name='dept_name'),
        position?: string(description='职位', name='position'),
        employeeStatus?: string(description='员工状态（-1:无状态，1:待入职，2:试用，3:正式，4:离职，5:待离职）', name='employee_status'),
        dismissionReason?: string(description='离职原因（1：家庭原因，2:个人原因，3：发展原因，4：合同到期不续签，5：协议解除，6：无法胜任工作，7：经济性裁员，8：严重违法违纪，9：其他）', name='dismission_reason'),
        confirmJoinTime?: string(description='入职时间', pattern='\\\\d{4}[-]\\\\d{1,2}[-]\\\\d{1,2}[T]\\\\d{2}:\\\\d{2}:\\\\d{2}[Z]', name='confirm_join_time'),
        lastWorkDate?: string(description='离职时间', pattern='\\\\d{4}[-]\\\\d{1,2}[-]\\\\d{1,2}[T]\\\\d{2}:\\\\d{2}:\\\\d{2}[Z]', name='last_work_date'),
        dismissionMemo?: string(description='离职描述', name='dismission_memo'),
        email?: string(description='email', name='email'),
      }
    ](description='实际每条数据', name='data_list'),
    totalPage?: int64(description='总页数', name='total_page'),
  }(description='分页数据', name='page'),
}

model GetdismissionlistOapiHrmEmployeeResponse = {
  headers: map[string]string,
  body: GetdismissionlistOapiHrmEmployeeResponseBody,
}

/**
 * Description: 智能人事开放接口-查询离职人员列表
 */
async function getdismissionlistOapiHrmEmployee(request: GetdismissionlistOapiHrmEmployeeRequest): GetdismissionlistOapiHrmEmployeeResponse {
  var runtime = new Util.RuntimeOptions{};
  return getdismissionlistOapiHrmEmployeeEx(request, runtime);
}

/**
 * Description: 智能人事开放接口-查询离职人员列表
 */
async function getdismissionlistOapiHrmEmployeeEx(request: GetdismissionlistOapiHrmEmployeeRequest, runtime: Util.RuntimeOptions): GetdismissionlistOapiHrmEmployeeResponse {
  Util.validateModel(request);
  var appParams = Util.stringifyMapValue(Util.toMap(request.params));
  return doRequestOApi('POST', '/topapi/hrm/employee/getdismissionlist', request.headers, appParams, runtime);
}

model ListOapiPbpInstanceGroupPositionParams = {
  punchGroupId: string(description='打卡组唯一标识，由创建打卡组接口返回', name='punch_group_id'),
  cursor?: int64(description='游标，用于分页查询', name='cursor'),
  size: int64(description='分页请求数量', name='size'),
  bizId?: string(description='业务唯一标识', name='biz_id'),
}

model ListOapiPbpInstanceGroupPositionRequest = {
  headers?: map[string]string,
  params:ListOapiPbpInstanceGroupPositionParams,
}

model ListOapiPbpInstanceGroupPositionResponseBody = {
  result?: {
    list?: [
      {
        positionName?: string(description='位置名称', name='position_name'),
        positionId?: string(description='位置唯一标识，根据type不同类型不同，如硬件类型代表硬件设备唯一标识', name='position_id'),
        positionType?: int64(description='位置类型，如100表示B1', name='position_type'),
      }
    ](description='位置列表', name='list'),
    nextCursor?: int64(description='下次请求需要带的游标', name='next_cursor'),
    hasMore?: boolean(description='是否还有数据', name='has_more'),
  }(description='分页结果', name='result'),
  errcode?: int64(description='错误码', name='errcode'),
  errmsg?: string(description='错误信息', name='errmsg'),
}

model ListOapiPbpInstanceGroupPositionResponse = {
  headers: map[string]string,
  body: ListOapiPbpInstanceGroupPositionResponseBody,
}

/**
 * Description: 打卡业务平台，获取打卡组绑定的位置
位置包括 硬件设备、GPS、Wifi等位置描述类型
 */
async function listOapiPbpInstanceGroupPosition(request: ListOapiPbpInstanceGroupPositionRequest): ListOapiPbpInstanceGroupPositionResponse {
  var runtime = new Util.RuntimeOptions{};
  return listOapiPbpInstanceGroupPositionEx(request, runtime);
}

/**
 * Description: 打卡业务平台，获取打卡组绑定的位置
位置包括 硬件设备、GPS、Wifi等位置描述类型
 */
async function listOapiPbpInstanceGroupPositionEx(request: ListOapiPbpInstanceGroupPositionRequest, runtime: Util.RuntimeOptions): ListOapiPbpInstanceGroupPositionResponse {
  Util.validateModel(request);
  var appParams = Util.stringifyMapValue(Util.toMap(request.params));
  return doRequestOApi('POST', '/topapi/pbp/instance/group/position/list', request.headers, appParams, runtime);
}

model GetOapiHrmEmployeeParams = {
  userid: string(description='查询用户userid', name='userid'),
}

model GetOapiHrmEmployeeRequest = {
  headers?: map[string]string,
  params:GetOapiHrmEmployeeParams,
}

model GetOapiHrmEmployeeResponseBody = {
  groupList?: [
    {
      fieldList?: [
        {
          hiddenFromEmployeeFlag?: boolean(description='员工查看个人档案时，该字段是否隐藏', name='hidden_from_employee_flag'),
          contactClientFlag?: boolean(description='手机端通讯录个人信息页，是否显示该字段', name='contact_client_flag'),
          contactSystemFlag?: boolean(description='是否是通讯录系统字段', name='contact_system_flag'),
          contactFlag?: boolean(description='是否是通讯录字段，包括系统字段和扩展字段', name='contact_flag'),
          systemFlag?: boolean(description='智能人事花名册默认的系统字段，包含通讯录的系统字段和花名册新增的字段', name='system_flag'),
          value?: string(description='字段的值', name='value'),
          hint?: string(description='花名册字段说明', name='hint'),
          optionText?: string(description='选项类花名册字段的选择内容，是一个json数组', name='option_text'),
          typeName?: string(description='类型名，有文本，图片，选项，时间四种类型', name='type_name'),
          fieldType?: string(description='字段类型，有TEXT,IMAGE,SELECT,TIME四种类型，与type_name一一对应', name='field_type'),
          required?: boolean(description='是否必须', name='required'),
          editableByHr?: boolean(description='HR是否可编辑该字段', name='editable_by_hr'),
          deleted?: boolean(description='是否已删除', name='deleted'),
          editableByEmp?: boolean(description='员工是否可编辑', name='editable_by_emp'),
          visibleByEmp?: boolean(description='员工填写入职登记表的时候，该字段是否可见', name='visible_by_emp'),
          fieldName?: string(description='字段名称', name='field_name'),
          fieldCode?: string(description='字段code', name='field_code'),
          corpId?: string(description='corpId', name='corp_id'),
          noWatermark?: boolean(description='是否无水印，仅针对图片类型的字段', name='no_watermark'),
          confirmEntryRequired?: boolean(description='人事管理员确认员工入职的时候，是否必填该字段', name='confirm_entry_required'),
        }
      ](description='字段列表', name='field_list'),
      groupName?: string(description='花名册分组名', name='group_name'),
      groupId?: string(description='花名册分组id', name='group_id'),
    }
  ](description='花名册分组列表', name='group_list'),
  errcode?: int64(description='dingOpenErrcode', name='errcode'),
  errmsg?: string(description='错误信息', name='errmsg'),
}

model GetOapiHrmEmployeeResponse = {
  headers: map[string]string,
  body: GetOapiHrmEmployeeResponseBody,
}

/**
 * Description: 获取智能人事指定员工花名册详细数据
 */
async function getOapiHrmEmployee(request: GetOapiHrmEmployeeRequest): GetOapiHrmEmployeeResponse {
  var runtime = new Util.RuntimeOptions{};
  return getOapiHrmEmployeeEx(request, runtime);
}

/**
 * Description: 获取智能人事指定员工花名册详细数据
 */
async function getOapiHrmEmployeeEx(request: GetOapiHrmEmployeeRequest, runtime: Util.RuntimeOptions): GetOapiHrmEmployeeResponse {
  Util.validateModel(request);
  var appParams = Util.stringifyMapValue(Util.toMap(request.params));
  return doRequestOApi('POST', '/topapi/hrm/employee/get', request.headers, appParams, runtime);
}

model UpdateOapiPbpInstanceGroupPositionParams = {
  syncParam: {
    addPositionList?: [
      {
        positionId?: string(description='位置唯一标识', name='position_id'),
        positionType?: int64(description='位置类型，如101表示B1', name='position_type'),
        positionName?: string(description='位置名称', name='position_name'),
      }
    ](description='新增位置列表', maxItems=20, name='add_position_list'),
    punchGroupId: string(description='打卡组唯一标识', name='punch_group_id'),
    deletePositionList?: [
      {
        positionId?: string(description='位置唯一标识', name='position_id'),
        positionType?: int64(description='位置类型，如101表示B1', name='position_type'),
        positionName?: string(description='位置名称', name='position_name'),
      }
    ](description='删除位置列表', maxItems=20, name='delete_position_list'),
    bizInstId: string(description='业务实例唯一标识', name='biz_inst_id'),
    bizId?: string(description='业务唯一标识', name='biz_id'),
  }(description='同步参数', name='sync_param'),
}

model UpdateOapiPbpInstanceGroupPositionRequest = {
  headers?: map[string]string,
  params:UpdateOapiPbpInstanceGroupPositionParams,
}

model UpdateOapiPbpInstanceGroupPositionResponseBody = {
  errmsg?: string(description='错误信息', name='errmsg'),
  errcode?: int64(description='错误码', name='errcode'),
  punchGroupId?: string(description='打卡组唯一标识', name='punch_group_id'),
}

model UpdateOapiPbpInstanceGroupPositionResponse = {
  headers: map[string]string,
  body: UpdateOapiPbpInstanceGroupPositionResponseBody,
}

/**
 * Description: 打卡业务平台，更新打卡组绑定的位置
位置包括 硬件设备、GPS、Wifi等位置描述类型
 */
async function updateOapiPbpInstanceGroupPosition(request: UpdateOapiPbpInstanceGroupPositionRequest): UpdateOapiPbpInstanceGroupPositionResponse {
  var runtime = new Util.RuntimeOptions{};
  return updateOapiPbpInstanceGroupPositionEx(request, runtime);
}

/**
 * Description: 打卡业务平台，更新打卡组绑定的位置
位置包括 硬件设备、GPS、Wifi等位置描述类型
 */
async function updateOapiPbpInstanceGroupPositionEx(request: UpdateOapiPbpInstanceGroupPositionRequest, runtime: Util.RuntimeOptions): UpdateOapiPbpInstanceGroupPositionResponse {
  Util.validateModel(request);
  var appParams = Util.stringifyMapValue(Util.toMap(request.params));
  return doRequestOApi('POST', '/topapi/pbp/instance/group/position/update', request.headers, appParams, runtime);
}

model ListOapiPbpInstancePositionParams = {
  bizId: string(description='业务唯一标识，由系统分配', name='biz_id'),
  bizInstId: string(description='业务实例唯一标识，由创建示例接口返回', name='biz_inst_id'),
  type: int64(description='位置类型，如100代表硬件B1设备', name='type'),
  cursor?: int64(description='游标，用于分页查询', name='cursor'),
  size: int64(description='查询数据量', name='size'),
}

model ListOapiPbpInstancePositionRequest = {
  headers?: map[string]string,
  params:ListOapiPbpInstancePositionParams,
}

model ListOapiPbpInstancePositionResponseBody = {
  result?: {
    list?: [
      {
        positionId?: string(description='位置唯一标识，根据type不同类型不同，如硬件类型代表硬件设备唯一标识', name='position_id'),
        positionName?: string(description='位置名称', name='position_name'),
        type?: int64(description='位置类型，如100代表硬件B1设备', name='type'),
      }
    ](description='位置列表', name='list'),
    hasMore?: boolean(description='是否还有数据', name='has_more'),
    nextCursor?: int64(description='下次请求需要带的游标', name='next_cursor'),
  }(description='分页结果', name='result'),
  errmsg?: string(description='错误信息', name='errmsg'),
  errcode?: int64(description='系统自动生成', name='errcode'),
}

model ListOapiPbpInstancePositionResponse = {
  headers: map[string]string,
  body: ListOapiPbpInstancePositionResponseBody,
}

/**
 * Description: 打卡业务平台，获取业务所有可用位置
位置包括 硬件设备、GPS、Wifi等位置描述类型
 */
async function listOapiPbpInstancePosition(request: ListOapiPbpInstancePositionRequest): ListOapiPbpInstancePositionResponse {
  var runtime = new Util.RuntimeOptions{};
  return listOapiPbpInstancePositionEx(request, runtime);
}

/**
 * Description: 打卡业务平台，获取业务所有可用位置
位置包括 硬件设备、GPS、Wifi等位置描述类型
 */
async function listOapiPbpInstancePositionEx(request: ListOapiPbpInstancePositionRequest, runtime: Util.RuntimeOptions): ListOapiPbpInstancePositionResponse {
  Util.validateModel(request);
  var appParams = Util.stringifyMapValue(Util.toMap(request.params));
  return doRequestOApi('POST', '/topapi/pbp/instance/position/list', request.headers, appParams, runtime);
}

model UpdateOapiPbpInstanceGroupMemberParams = {
  syncParam: {
    deleteMemberList?: [
      {
        memberId?: string(description='员工userId', name='member_id'),
        type?: int64(description='成员类型，0表示员工', name='type'),
      }
    ](description='删除成员列表', maxItems=20, name='delete_member_list'),
    addMemberList?: [
      {
        memberId?: string(description='员工userId', name='member_id'),
        type?: int64(description='成员类型，0表示员工', name='type'),
      }
    ](description='新增成员列表', maxItems=20, name='add_member_list'),
    punchGroupId: string(description='打卡组唯一标识', name='punch_group_id'),
    bizInstId: string(description='业务实例唯一标识', name='biz_inst_id'),
    bizId?: string(description='业务唯一标识', name='biz_id'),
  }(description='同步参数', name='sync_param'),
}

model UpdateOapiPbpInstanceGroupMemberRequest = {
  headers?: map[string]string,
  params:UpdateOapiPbpInstanceGroupMemberParams,
}

model UpdateOapiPbpInstanceGroupMemberResponseBody = {
  punchGroupId?: string(description='打卡组id', name='punch_group_id'),
  errcode?: int64(description='错误码', name='errcode'),
  errmsg?: string(description='错误信息', name='errmsg'),
}

model UpdateOapiPbpInstanceGroupMemberResponse = {
  headers: map[string]string,
  body: UpdateOapiPbpInstanceGroupMemberResponseBody,
}

/**
 * Description: 打卡业务平台，更新打卡组绑定的成员
 */
async function updateOapiPbpInstanceGroupMember(request: UpdateOapiPbpInstanceGroupMemberRequest): UpdateOapiPbpInstanceGroupMemberResponse {
  var runtime = new Util.RuntimeOptions{};
  return updateOapiPbpInstanceGroupMemberEx(request, runtime);
}

/**
 * Description: 打卡业务平台，更新打卡组绑定的成员
 */
async function updateOapiPbpInstanceGroupMemberEx(request: UpdateOapiPbpInstanceGroupMemberRequest, runtime: Util.RuntimeOptions): UpdateOapiPbpInstanceGroupMemberResponse {
  Util.validateModel(request);
  var appParams = Util.stringifyMapValue(Util.toMap(request.params));
  return doRequestOApi('POST', '/topapi/pbp/instance/group/member/update', request.headers, appParams, runtime);
}

model Send_msgOapiSnsParams = {
  code?: string(description='form表单提交成功后获取的formId', name='code'),
  msg?: {
    msgtype?: string(description='消息类型', name='msgtype'),
    eapp?: {
      title?: string(description='消息标题', name='title'),
      link?: string(description='消息链接', name='link'),
      content?: string(description='消息内容', name='content'),
      img?: string(description='消息图片资源id', name='img'),
    }(description='消息内容', name='eapp'),
  }(description='消息内容', name='msg'),
}

model Send_msgOapiSnsRequest = {
  headers?: map[string]string,
  params?:Send_msgOapiSnsParams,
}

model Send_msgOapiSnsResponseBody = {
  errcode?: int64(description='错误码', name='errcode'),
  errmsg?: string(description='错误描述', name='errmsg'),
}

model Send_msgOapiSnsResponse = {
  headers: map[string]string,
  body: Send_msgOapiSnsResponseBody,
}

/**
 * Description: 个人E应用消息推送
 */
async function send_msgOapiSns(request: Send_msgOapiSnsRequest): Send_msgOapiSnsResponse {
  var runtime = new Util.RuntimeOptions{};
  return send_msgOapiSnsEx(request, runtime);
}

/**
 * Description: 个人E应用消息推送
 */
async function send_msgOapiSnsEx(request: Send_msgOapiSnsRequest, runtime: Util.RuntimeOptions): Send_msgOapiSnsResponse {
  Util.validateModel(request);
  var appParams = Util.stringifyMapValue(Util.toMap(request.params));
  return doRequestOApi('POST', '/sns/send_msg', request.headers, appParams, runtime);
}

model GetCorpHrmEmployeeParams = {
  userid: string(description='查询用户userid', name='userid'),
}

model GetCorpHrmEmployeeRequest = {
  headers?: map[string]string,
  params:GetCorpHrmEmployeeParams,
}

model GetCorpHrmEmployeeResponseBody = {
  result?: {
    groupList?: [
      {
        fieldList?: [
          {
            hiddenFromEmployeeFlag?: boolean(description='对员工不可见', name='hidden_from_employee_flag'),
            contactClientFlag?: boolean(description='是否通讯录client字段', name='contact_client_flag'),
            contactSystemFlag?: boolean(description='是否通讯录系统字段', name='contact_system_flag'),
            contactFlag?: boolean(description='是否通讯录字段', name='contact_flag'),
            systemFlag?: boolean(description='是否系统字段', name='system_flag'),
            value?: string(description='字段的值', name='value'),
            hint?: string(description='提醒', name='hint'),
            optionText?: string(description='选项值', name='option_text'),
            typeName?: string(description='类型名', name='type_name'),
            fieldType?: string(description='字段类型', name='field_type'),
            required?: boolean(description='required', name='required'),
            editableByHr?: boolean(description='editableByHr', name='editable_by_hr'),
            deleted?: boolean(description='是否已删除', name='deleted'),
            editableByEmp?: boolean(description='editableByEmp', name='editable_by_emp'),
            visibleByEmp?: boolean(description='visibleByEmp', name='visible_by_emp'),
            groupId?: string(description='groupId', name='group_id'),
            fieldName?: string(description='字段名称', name='field_name'),
            fieldCode?: string(description='字段code', name='field_code'),
            corpId?: string(description='corpId', name='corp_id'),
            empProfileRequired?: boolean(description='在个人信息展示', name='emp_profile_required'),
            key?: string(description='字段key', name='key'),
            contactSource?: int64(description='通讯录来源', name='contact_source'),
            noWatermark?: boolean(description='是否需要水印', name='no_watermark'),
            confirmEntryRequired?: boolean(description='确认入职是否必填', name='confirm_entry_required'),
          }
        ](description='字段列表', name='field_list'),
        groupName?: string(description='花名册分组名', name='group_name'),
        groupId?: string(description='花名册分组id', name='group_id'),
      }
    ](description='花名册分组列表', name='group_list'),
    dingOpenErrcode?: int64(description='dingOpenErrcode', name='ding_open_errcode'),
    errorMsg?: string(description='错误信息', name='error_msg'),
    success?: boolean(description='是否成功', name='success'),
  }(description='返回结果', name='result'),
}

model GetCorpHrmEmployeeResponse = {
  headers: map[string]string,
  body: GetCorpHrmEmployeeResponseBody,
}

/**
 * Description: 获取智能人事指定员工花名册详细数据
 */
async function getCorpHrmEmployee(request: GetCorpHrmEmployeeRequest): GetCorpHrmEmployeeResponse {
  var runtime = new Util.RuntimeOptions{};
  return getCorpHrmEmployeeEx(request, runtime);
}

/**
 * Description: 获取智能人事指定员工花名册详细数据
 */
async function getCorpHrmEmployeeEx(request: GetCorpHrmEmployeeRequest, runtime: Util.RuntimeOptions): GetCorpHrmEmployeeResponse {
  Util.validateModel(request);
  var appParams = Util.stringifyMapValue(Util.toMap(request.params));
  return doRequest('dingtalk.corp.hrm.employee.get', 'POST', '/router/rest', request.headers, appParams, runtime);
}

model RecallOapiMessageCorpconversationParams = {
  agentId: int64(description='发送工作通知的微应用agentId', name='agent_id'),
  msgTaskId: int64(description='发送工作通知返回的taskId', name='msg_task_id'),
}

model RecallOapiMessageCorpconversationRequest = {
  headers?: map[string]string,
  params:RecallOapiMessageCorpconversationParams,
}

model RecallOapiMessageCorpconversationResponseBody = {
  errmsg?: string(description='错误描述', name='errmsg'),
  errcode?: int64(description='错误码', name='errcode'),
}

model RecallOapiMessageCorpconversationResponse = {
  headers: map[string]string,
  body: RecallOapiMessageCorpconversationResponseBody,
}

/**
 * Description: 根据发送工作通知消息的taskId进行消息撤回操作
 */
async function recallOapiMessageCorpconversation(request: RecallOapiMessageCorpconversationRequest): RecallOapiMessageCorpconversationResponse {
  var runtime = new Util.RuntimeOptions{};
  return recallOapiMessageCorpconversationEx(request, runtime);
}

/**
 * Description: 根据发送工作通知消息的taskId进行消息撤回操作
 */
async function recallOapiMessageCorpconversationEx(request: RecallOapiMessageCorpconversationRequest, runtime: Util.RuntimeOptions): RecallOapiMessageCorpconversationResponse {
  Util.validateModel(request);
  var appParams = Util.stringifyMapValue(Util.toMap(request.params));
  return doRequestOApi('POST', '/topapi/message/corpconversation/recall', request.headers, appParams, runtime);
}

model DeleteOapiAtsChannelAccountParams = {
  bizCode: string(description='招聘业务码', name='biz_code'),
  userid: string(description='钉钉用户userId', name='userid'),
  channelUserIdentify: string(description='渠道用户唯一标识', name='channel_user_identify'),
}

model DeleteOapiAtsChannelAccountRequest = {
  headers?: map[string]string,
  params:DeleteOapiAtsChannelAccountParams,
}

model DeleteOapiAtsChannelAccountResponseBody = {
  errcode?: int64(description='错误码', name='errcode'),
  errmsg?: string(description='错误描述', name='errmsg'),
  result?: boolean(description='操作成功', name='result'),
}

model DeleteOapiAtsChannelAccountResponse = {
  headers: map[string]string,
  body: DeleteOapiAtsChannelAccountResponseBody,
}

/**
 * Description: 删除渠道账号绑定关系
 */
async function deleteOapiAtsChannelAccount(request: DeleteOapiAtsChannelAccountRequest): DeleteOapiAtsChannelAccountResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteOapiAtsChannelAccountEx(request, runtime);
}

/**
 * Description: 删除渠道账号绑定关系
 */
async function deleteOapiAtsChannelAccountEx(request: DeleteOapiAtsChannelAccountRequest, runtime: Util.RuntimeOptions): DeleteOapiAtsChannelAccountResponse {
  Util.validateModel(request);
  var appParams = Util.stringifyMapValue(Util.toMap(request.params));
  return doRequestOApi('POST', '/topapi/ats/channel/account/delete', request.headers, appParams, runtime);
}

model ListbyownerOapiAtsJobParams = {
  bizCode: string(description='招聘业务标识', name='biz_code'),
  userid: string(description='钉钉userId', name='userid'),
}

model ListbyownerOapiAtsJobRequest = {
  headers?: map[string]string,
  params:ListbyownerOapiAtsJobParams,
}

model ListbyownerOapiAtsJobResponseBody = {
  errcode?: int64(description='错误码', name='errcode'),
  errmsg?: string(description='错误描述', name='errmsg'),
  result?: [
    {
      headCount?: int64(description='招募人数', name='head_count'),
      address?: {
        latitude?: string(description='经度', name='latitude'),
        longitude?: string(description='纬度', name='longitude'),
        detail?: string(description='地点详情', name='detail'),
        name?: string(description='地点名', name='name'),
      }(description='职位地址详情', name='address'),
      district?: string(description='职位地址 区/县', name='district'),
      city?: string(description='职位地址 市', name='city'),
      province?: string(description='职位地址 省', name='province'),
      maxSalary?: int64(description='最高薪水，单位元', name='max_salary'),
      minSalary?: int64(description='最低薪水，单位元', name='min_salary'),
      salaryNegotiable?: boolean(description='是否薪资面议', name='salary_negotiable'),
      description?: string(description='职位描述', name='description'),
      requiredEdu?: int64(description='最低职位要求 1小学 2初中 3高中 4中专 5大专 6本科 7硕士 8 博士 9其他', name='required_edu'),
      jobCode?: string(description='职位编码', name='job_code'),
      jobId?: string(description='职位唯一标识', name='job_id'),
      corpid?: string(description='企业id', name='corpid'),
      name?: string(description='职位名称', name='name'),
      salaryPeriod?: string(description='薪资类型，HOUR:小时，DAY:天，WEEK:周，MONTH:月，BY_TIME:次', name='salary_period'),
      salaryMonth?: int64(description='薪资月数', name='salary_month'),
      category?: string(description='职位分类', name='category'),
      campus?: boolean(description='true :校招，false：社招', name='campus'),
      jobNature?: string(description='职位类型：FULL-TIME:全职，PART-TIME:兼职，INTERNSHIP:实习，OTHER:其他', name='job_nature'),
      maxJobExperience?: int64(description='最高工作年限', name='max_job_experience'),
      minJobExperience?: int64(description='最低工作年限', name='min_job_experience'),
      mainDeptId?: int64(description='职位部门id', name='main_dept_id'),
      tags?: [ string ](description='职位标签', name='tags'),
    }
  ](description='职位数据列表', name='result'),
}

model ListbyownerOapiAtsJobResponse = {
  headers: map[string]string,
  body: ListbyownerOapiAtsJobResponseBody,
}

/**
 * Description: 根据创建者获取职位数据
 */
async function listbyownerOapiAtsJob(request: ListbyownerOapiAtsJobRequest): ListbyownerOapiAtsJobResponse {
  var runtime = new Util.RuntimeOptions{};
  return listbyownerOapiAtsJobEx(request, runtime);
}

/**
 * Description: 根据创建者获取职位数据
 */
async function listbyownerOapiAtsJobEx(request: ListbyownerOapiAtsJobRequest, runtime: Util.RuntimeOptions): ListbyownerOapiAtsJobResponse {
  Util.validateModel(request);
  var appParams = Util.stringifyMapValue(Util.toMap(request.params));
  return doRequestOApi('POST', '/topapi/ats/job/listbyowner', request.headers, appParams, runtime);
}

model AddOapiAtsChannelAccountParams = {
  bizCode: string(description='招聘业务码', name='biz_code'),
  userid: string(description='钉钉用户userId', name='userid'),
  channelUserIdentify: string(description='渠道用户唯一标识', name='channel_user_identify'),
}

model AddOapiAtsChannelAccountRequest = {
  headers?: map[string]string,
  params:AddOapiAtsChannelAccountParams,
}

model AddOapiAtsChannelAccountResponseBody = {
  errcode?: int64(description='错误码', name='errcode'),
  errmsg?: string(description='错误描述', name='errmsg'),
  result?: boolean(description='操作成功', name='result'),
}

model AddOapiAtsChannelAccountResponse = {
  headers: map[string]string,
  body: AddOapiAtsChannelAccountResponseBody,
}

/**
 * Description: 添加渠道的账号信息
 */
async function addOapiAtsChannelAccount(request: AddOapiAtsChannelAccountRequest): AddOapiAtsChannelAccountResponse {
  var runtime = new Util.RuntimeOptions{};
  return addOapiAtsChannelAccountEx(request, runtime);
}

/**
 * Description: 添加渠道的账号信息
 */
async function addOapiAtsChannelAccountEx(request: AddOapiAtsChannelAccountRequest, runtime: Util.RuntimeOptions): AddOapiAtsChannelAccountResponse {
  Util.validateModel(request);
  var appParams = Util.stringifyMapValue(Util.toMap(request.params));
  return doRequestOApi('POST', '/topapi/ats/channel/account/add', request.headers, appParams, runtime);
}

model ListtoptenSmartworkBlackboardParams = {
  userid: string(description='用户id', name='userid'),
}

model ListtoptenSmartworkBlackboardRequest = {
  headers?: map[string]string,
  params:ListtoptenSmartworkBlackboardParams,
}

model ListtoptenSmartworkBlackboardResponseBody = {
  result?: {
    dingOpenErrcode?: int64(description='dingOpenErrcode', name='ding_open_errcode'),
    errorMsg?: string(description='errorMsg', name='error_msg'),
    success?: boolean(description='success', name='success'),
    blackboardList?: [
      {
        gmtCreate?: string(description='创建时间', pattern='\\\\d{4}[-]\\\\d{1,2}[-]\\\\d{1,2}[T]\\\\d{2}:\\\\d{2}:\\\\d{2}[Z]', name='gmt_create'),
        title?: string(description='标题', name='title'),
        url?: string(description='跳转URL', name='url'),
      }
    ](description='result', name='blackboard_list'),
  }(description='result', name='result'),
}

model ListtoptenSmartworkBlackboardResponse = {
  headers: map[string]string,
  body: ListtoptenSmartworkBlackboardResponseBody,
}

/**
 * Description: 列出用户当前有权限看到的10条公告，可用于在企业自定义工作首页进行公告轮播展示
 */
async function listtoptenSmartworkBlackboard(request: ListtoptenSmartworkBlackboardRequest): ListtoptenSmartworkBlackboardResponse {
  var runtime = new Util.RuntimeOptions{};
  return listtoptenSmartworkBlackboardEx(request, runtime);
}

/**
 * Description: 列出用户当前有权限看到的10条公告，可用于在企业自定义工作首页进行公告轮播展示
 */
async function listtoptenSmartworkBlackboardEx(request: ListtoptenSmartworkBlackboardRequest, runtime: Util.RuntimeOptions): ListtoptenSmartworkBlackboardResponse {
  Util.validateModel(request);
  var appParams = Util.stringifyMapValue(Util.toMap(request.params));
  return doRequest('dingtalk.smartwork.blackboard.listtopten', 'POST', '/router/rest', request.headers, appParams, runtime);
}

model MigrateOapiWorkspaceTaskParams = {
  agentid?: int64(description='微应用agentId', name='agentid'),
  task: {
    sourceId: string(description='此字段用于数据迁移的场景，表示任务在源系统中的唯一ID，ISV接入时必填，用于跳转至各自的任务详情页', name='source_id'),
    isRecycled?: boolean(description='是否放入回收站', name='is_recycled'),
    gmtModified?: string(description='修改时间', pattern='\\\\d{4}[-]\\\\d{1,2}[-]\\\\d{1,2}[T]\\\\d{2}:\\\\d{2}:\\\\d{2}[Z]', name='gmt_modified'),
    executorUserid?: string(description='执行者id, 传staffId（工号）', name='executor_userid'),
    subject: string(description='任务标题', name='subject'),
    isArchived?: boolean(description='是否归档', name='is_archived'),
    creatorUserid: string(description='创建者id, 传staffId（工号）', name='creator_userid'),
    modifierUserid?: string(description='更新者id, 传staffId（工号）', name='modifier_userid'),
    description?: string(description='任务描述', name='description'),
    priority?: int64(description='优先级, 较低:10, 普通:20, 紧急:30, 非常紧急:40', name='priority'),
    gmtCreate?: string(description='创建时间', pattern='\\\\d{4}[-]\\\\d{1,2}[-]\\\\d{1,2}[T]\\\\d{2}:\\\\d{2}:\\\\d{2}[Z]', name='gmt_create'),
    parentId?: string(description='父任务id', name='parent_id'),
    taskTypeId?: int64(description='任务类型id，任务类型，可以不传', name='task_type_id'),
    statusId?: int64(description='状态id，工作流状态, 可以为空', name='status_id'),
    statusStage?: int64(description='状态阶段: 开始阶段(0)，进行阶段(1)，完成阶段(2)', name='status_stage'),
    finishDate?: string(description='任务实际完成时间', pattern='\\\\d{4}[-]\\\\d{1,2}[-]\\\\d{1,2}[T]\\\\d{2}:\\\\d{2}:\\\\d{2}[Z]', name='finish_date'),
    startDate?: string(description='任务实际开始日期', pattern='\\\\d{4}[-]\\\\d{1,2}[-]\\\\d{1,2}[T]\\\\d{2}:\\\\d{2}:\\\\d{2}[Z]', name='start_date'),
    corpId?: string(description='任务所属项目(虚拟企业），基于项目空间的项目', name='corp_id'),
    taskTypeCategory?: string(description='任务类型分类:// 任务 TASK("task"),     // 需求     REQ("req"),     // 缺陷     BUG("bug"),     // 风险     RISK("risk"),     // 工作项     WORKITEM("workitem")', name='task_type_category'),
    planStartDate?: string(description='任务计划开始时间', pattern='\\\\d{4}[-]\\\\d{1,2}[-]\\\\d{1,2}[T]\\\\d{2}:\\\\d{2}:\\\\d{2}[Z]', name='plan_start_date'),
    planFinishDate?: string(description='任务计划完成时间', pattern='\\\\d{4}[-]\\\\d{1,2}[-]\\\\d{1,2}[T]\\\\d{2}:\\\\d{2}:\\\\d{2}[Z]', name='plan_finish_date'),
    trackerUserids?: [ string ](description='任务参与者列表, 传staffId（工号）', maxItems=20, name='tracker_userids'),
    extension?: {
      commentCount?: int64(description='评论数', name='comment_count'),
      filePath?: string(description='附件地址', name='file_path'),
      other?: string(description='用户可扩展的字段', name='other'),
    }(description='任务的扩展字段', name='extension'),
    source?: string(description='任务来源source', name='source'),
  }(description='请求入参', name='task'),
  operatorUserid: string(description='操作者id', name='operator_userid'),
}

model MigrateOapiWorkspaceTaskRequest = {
  headers?: map[string]string,
  params:MigrateOapiWorkspaceTaskParams,
}

model MigrateOapiWorkspaceTaskResponseBody = {
  result?: {
    gmtCreate?: string(description='创建时间', pattern='\\\\d{4}[-]\\\\d{1,2}[-]\\\\d{1,2}[T]\\\\d{2}:\\\\d{2}:\\\\d{2}[Z]', name='gmt_create'),
    modifierUserid?: string(description='更新者id, 传staffId（工号）', name='modifier_userid'),
    creatorUserid?: string(description='创建者id, 传staffId（工号）', name='creator_userid'),
    bizTag?: string(description='业务标识', name='biz_tag'),
    priority?: int64(description='优先级, 较低:10, 普通:20, 紧急:30, 非常紧急:40', name='priority'),
    description?: string(description='任务描述', name='description'),
    finishDate?: string(description='完成时间', pattern='\\\\d{4}[-]\\\\d{1,2}[-]\\\\d{1,2}[T]\\\\d{2}:\\\\d{2}:\\\\d{2}[Z]', name='finish_date'),
    startDate?: string(description='开始时间', pattern='\\\\d{4}[-]\\\\d{1,2}[-]\\\\d{1,2}[T]\\\\d{2}:\\\\d{2}:\\\\d{2}[Z]', name='start_date'),
    isRecycled?: boolean(description='是否放入回收站', name='is_recycled'),
    isArchived?: boolean(description='是否归档', name='is_archived'),
    statusStage?: int64(description='状态阶段: 开始阶段(0)，进行阶段(1)，完成阶段(2)', name='status_stage'),
    sourceId?: string(description='此字段用于数据迁移的场景，表示任务在源系统中的唯一ID', name='source_id'),
    parentId?: string(description='父任务id', name='parent_id'),
    taskTypeId?: int64(description='任务类型id，任务类型，可以不传', name='task_type_id'),
    statusId?: int64(description='状态id，工作流状态, 可以为空', name='status_id'),
    executorUserid?: string(description='执行者id, 传staffId（工号）', name='executor_userid'),
    subject?: string(description='标题', name='subject'),
    gmtModified?: string(description='修改时间', pattern='\\\\d{4}[-]\\\\d{1,2}[-]\\\\d{1,2}[T]\\\\d{2}:\\\\d{2}:\\\\d{2}[Z]', name='gmt_modified'),
    belongCorpId?: string(description='归属企业id', name='belong_corp_id'),
    corpId?: string(description='任务所属项目(虚拟企业），基于项目空间的项目', name='corp_id'),
    taskId?: string(description='任务id', name='task_id'),
    taskTypeCategory?: string(description='任务类型分类:// 任务 TASK("task"),     // 需求     REQ("req"),     // 缺陷     BUG("bug"),     // 风险     RISK("risk"),     // 工作项     WORKITEM("workitem")', name='task_type_category'),
    planStartDate?: string(description='任务计划开始时间', pattern='\\\\d{4}[-]\\\\d{1,2}[-]\\\\d{1,2}[T]\\\\d{2}:\\\\d{2}:\\\\d{2}[Z]', name='plan_start_date'),
    planFinishDate?: string(description='任务计划完成时间', pattern='\\\\d{4}[-]\\\\d{1,2}[-]\\\\d{1,2}[T]\\\\d{2}:\\\\d{2}:\\\\d{2}[Z]', name='plan_finish_date'),
    trackerUserids?: [ string ](description='任务参与者列表', name='tracker_userids'),
    extension?: {
      commentCount?: int64(description='评论数量', name='comment_count'),
      filePath?: string(description='附件地址', name='file_path'),
      other?: string(description='用户可扩展的字段', name='other'),
    }(description='任务的扩展字段', name='extension'),
    source?: string(description='任务来源source', name='source'),
  }(description='响应结果', name='result'),
  errcode?: int64(description='错误码', name='errcode'),
  errmsg?: string(description='错误描述', name='errmsg'),
}

model MigrateOapiWorkspaceTaskResponse = {
  headers: map[string]string,
  body: MigrateOapiWorkspaceTaskResponseBody,
}

/**
 * Description: 迁移任务信息接口，用于ISV迁移历史数据
 */
async function migrateOapiWorkspaceTask(request: MigrateOapiWorkspaceTaskRequest): MigrateOapiWorkspaceTaskResponse {
  var runtime = new Util.RuntimeOptions{};
  return migrateOapiWorkspaceTaskEx(request, runtime);
}

/**
 * Description: 迁移任务信息接口，用于ISV迁移历史数据
 */
async function migrateOapiWorkspaceTaskEx(request: MigrateOapiWorkspaceTaskRequest, runtime: Util.RuntimeOptions): MigrateOapiWorkspaceTaskResponse {
  Util.validateModel(request);
  var appParams = Util.stringifyMapValue(Util.toMap(request.params));
  return doRequestOApi('POST', '/topapi/workspace/task/migrate', request.headers, appParams, runtime);
}

model AddresumerecordOapiHrmEmployeeParams = {
  userid?: string(description='被操作人userid', name='userid'),
  title?: string(description='成长记录title', name='title'),
  content?: string(description='成长记录第一条内容', name='content'),
  kVContent?: string(description='厂长记录kv展示内容：json格式，顺序展示', name='k_v_content'),
  phoneUrl?: string(description='手机端url', name='phone_url'),
  pcUrl?: string(description='pc端url', name='pc_url'),
  webUrl?: string(description='webOA后台url', name='web_url'),
  recordTimestamp?: int64(description='20180428 零点零分零秒', name='record_timestamp'),
}

model AddresumerecordOapiHrmEmployeeRequest = {
  headers?: map[string]string,
  params?:AddresumerecordOapiHrmEmployeeParams,
}

model AddresumerecordOapiHrmEmployeeResponseBody = {
  result?: string(description='成长记录唯一标记', name='result'),
  errcode?: int64(description='dingOpenErrcode', name='errcode'),
  errmsg?: string(description='errorMsg', name='errmsg'),
}

model AddresumerecordOapiHrmEmployeeResponse = {
  headers: map[string]string,
  body: AddresumerecordOapiHrmEmployeeResponseBody,
}

/**
 * Description: 企业员工的成长记录
 */
async function addresumerecordOapiHrmEmployee(request: AddresumerecordOapiHrmEmployeeRequest): AddresumerecordOapiHrmEmployeeResponse {
  var runtime = new Util.RuntimeOptions{};
  return addresumerecordOapiHrmEmployeeEx(request, runtime);
}

/**
 * Description: 企业员工的成长记录
 */
async function addresumerecordOapiHrmEmployeeEx(request: AddresumerecordOapiHrmEmployeeRequest, runtime: Util.RuntimeOptions): AddresumerecordOapiHrmEmployeeResponse {
  Util.validateModel(request);
  var appParams = Util.stringifyMapValue(Util.toMap(request.params));
  return doRequestOApi('POST', '/topapi/hrm/employee/addresumerecord', request.headers, appParams, runtime);
}

model DisableOapiPbpInstanceParams = {
  bizInstId: string(description='业务实例唯一标识', name='biz_inst_id'),
  bizId?: string(description='业务唯一标识', name='biz_id'),
}

model DisableOapiPbpInstanceRequest = {
  headers?: map[string]string,
  params:DisableOapiPbpInstanceParams,
}

model DisableOapiPbpInstanceResponseBody = {
  errcode?: int64(description='错误码', name='errcode'),
  errmsg?: string(description='错误信息', name='errmsg'),
}

model DisableOapiPbpInstanceResponse = {
  headers: map[string]string,
  body: DisableOapiPbpInstanceResponseBody,
}

/**
 * Description: 停用业务实例。业务实例停用后，对应的打卡组内的成员将无法自动打卡，企业或ISV也不会再收到自动打卡的回调通知
 */
async function disableOapiPbpInstance(request: DisableOapiPbpInstanceRequest): DisableOapiPbpInstanceResponse {
  var runtime = new Util.RuntimeOptions{};
  return disableOapiPbpInstanceEx(request, runtime);
}

/**
 * Description: 停用业务实例。业务实例停用后，对应的打卡组内的成员将无法自动打卡，企业或ISV也不会再收到自动打卡的回调通知
 */
async function disableOapiPbpInstanceEx(request: DisableOapiPbpInstanceRequest, runtime: Util.RuntimeOptions): DisableOapiPbpInstanceResponse {
  Util.validateModel(request);
  var appParams = Util.stringifyMapValue(Util.toMap(request.params));
  return doRequestOApi('POST', '/topapi/pbp/instance/disable', request.headers, appParams, runtime);
}

model SendmessageOapiImpaasConversationParams = {
  chatid: string(description='群id', name='chatid'),
  type: int64(description='1. 优惠券 2 系统消息', name='type'),
  content: string(description='消息内容', name='content'),
}

model SendmessageOapiImpaasConversationRequest = {
  headers?: map[string]string,
  params:SendmessageOapiImpaasConversationParams,
}

model SendmessageOapiImpaasConversationResponseBody = {
  errcode?: int64(description='dingOpenErrcode', name='errcode'),
  errmsg?: string(description='errorMsg', name='errmsg'),
}

model SendmessageOapiImpaasConversationResponse = {
  headers: map[string]string,
  body: SendmessageOapiImpaasConversationResponseBody,
}

/**
 * Description: 发送群消息
 */
async function sendmessageOapiImpaasConversation(request: SendmessageOapiImpaasConversationRequest): SendmessageOapiImpaasConversationResponse {
  var runtime = new Util.RuntimeOptions{};
  return sendmessageOapiImpaasConversationEx(request, runtime);
}

/**
 * Description: 发送群消息
 */
async function sendmessageOapiImpaasConversationEx(request: SendmessageOapiImpaasConversationRequest, runtime: Util.RuntimeOptions): SendmessageOapiImpaasConversationResponse {
  Util.validateModel(request);
  var appParams = Util.stringifyMapValue(Util.toMap(request.params));
  return doRequestOApi('POST', '/topapi/impaas/conversation/sendmessage', request.headers, appParams, runtime);
}

model CreateOapiImpaasConversationParams = {
  channel: string(description='渠道', name='channel'),
  ownerUserid: string(description='群主员工id', name='owner_userid'),
  useridList: [ string ](description='成员员工id列表', maxItems=500, name='userid_list'),
  name: string(description='群名称', name='name'),
}

model CreateOapiImpaasConversationRequest = {
  headers?: map[string]string,
  params:CreateOapiImpaasConversationParams,
}

model CreateOapiImpaasConversationResponseBody = {
  chatid?: string(description='群id', name='chatid'),
  errcode?: int64(description='错误码', name='errcode'),
  errmsg?: string(description='错误信息', name='errmsg'),
}

model CreateOapiImpaasConversationResponse = {
  headers: map[string]string,
  body: CreateOapiImpaasConversationResponseBody,
}

/**
 * Description: impaas创建群接口
 */
async function createOapiImpaasConversation(request: CreateOapiImpaasConversationRequest): CreateOapiImpaasConversationResponse {
  var runtime = new Util.RuntimeOptions{};
  return createOapiImpaasConversationEx(request, runtime);
}

/**
 * Description: impaas创建群接口
 */
async function createOapiImpaasConversationEx(request: CreateOapiImpaasConversationRequest, runtime: Util.RuntimeOptions): CreateOapiImpaasConversationResponse {
  Util.validateModel(request);
  var appParams = Util.stringifyMapValue(Util.toMap(request.params));
  return doRequestOApi('POST', '/topapi/impaas/conversation/create', request.headers, appParams, runtime);
}

model ModifymemberOapiImpaasConversationParams = {
  chatid: string(description='群ID', name='chatid'),
  memberidList: [ string ](description='会员ID列表', maxItems=500, name='memberid_list'),
  type: int64(description='1 添加 2 删除', name='type'),
  channel: string(description='渠道', name='channel'),
}

model ModifymemberOapiImpaasConversationRequest = {
  headers?: map[string]string,
  params:ModifymemberOapiImpaasConversationParams,
}

model ModifymemberOapiImpaasConversationResponseBody = {
  errcode?: int64(description='dingOpenErrcode', name='errcode'),
  errmsg?: string(description='errorMsg', name='errmsg'),
}

model ModifymemberOapiImpaasConversationResponse = {
  headers: map[string]string,
  body: ModifymemberOapiImpaasConversationResponseBody,
}

/**
 * Description: IMPAAS修改群成员接口
 */
async function modifymemberOapiImpaasConversation(request: ModifymemberOapiImpaasConversationRequest): ModifymemberOapiImpaasConversationResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifymemberOapiImpaasConversationEx(request, runtime);
}

/**
 * Description: IMPAAS修改群成员接口
 */
async function modifymemberOapiImpaasConversationEx(request: ModifymemberOapiImpaasConversationRequest, runtime: Util.RuntimeOptions): ModifymemberOapiImpaasConversationResponse {
  Util.validateModel(request);
  var appParams = Util.stringifyMapValue(Util.toMap(request.params));
  return doRequestOApi('POST', '/topapi/impaas/conversation/modifymember', request.headers, appParams, runtime);
}

model UpdateresumerecordOapiHrmEmployeeParams = {
  userid: string(description='被操作人员工userid', name='userid'),
  resumeId: string(description='成长记录唯一标识', name='resume_id'),
  title?: string(description='成长记录title', name='title'),
  content?: string(description='成长记录第一条内容', name='content'),
  kVContent?: string(description='成长记录kv展示内容：json格式，顺序展示', name='k_v_content'),
  phoneUrl?: string(description='手机端url', name='phone_url'),
  pcUrl?: string(description='pc端url', name='pc_url'),
  webUrl?: string(description='webOA后台url', name='web_url'),
  recordTimestamp?: int64(description='20180428 零点零分零秒', name='record_timestamp'),
}

model UpdateresumerecordOapiHrmEmployeeRequest = {
  headers?: map[string]string,
  params:UpdateresumerecordOapiHrmEmployeeParams,
}

model UpdateresumerecordOapiHrmEmployeeResponseBody = {
  errcode?: int64(description='dingOpenErrcode', name='errcode'),
  errmsg?: string(description='errorMsg', name='errmsg'),
}

model UpdateresumerecordOapiHrmEmployeeResponse = {
  headers: map[string]string,
  body: UpdateresumerecordOapiHrmEmployeeResponseBody,
}

/**
 * Description: 更新成长记录
 */
async function updateresumerecordOapiHrmEmployee(request: UpdateresumerecordOapiHrmEmployeeRequest): UpdateresumerecordOapiHrmEmployeeResponse {
  var runtime = new Util.RuntimeOptions{};
  return updateresumerecordOapiHrmEmployeeEx(request, runtime);
}

/**
 * Description: 更新成长记录
 */
async function updateresumerecordOapiHrmEmployeeEx(request: UpdateresumerecordOapiHrmEmployeeRequest, runtime: Util.RuntimeOptions): UpdateresumerecordOapiHrmEmployeeResponse {
  Util.validateModel(request);
  var appParams = Util.stringifyMapValue(Util.toMap(request.params));
  return doRequestOApi('POST', '/topapi/hrm/employee/updateresumerecord', request.headers, appParams, runtime);
}

model DelresumerecordOapiHrmEmployeeParams = {
  userid: string(description='员工userid', name='userid'),
  resumeId: string(description='成长记录唯一标识', name='resume_id'),
}

model DelresumerecordOapiHrmEmployeeRequest = {
  headers?: map[string]string,
  params:DelresumerecordOapiHrmEmployeeParams,
}

model DelresumerecordOapiHrmEmployeeResponseBody = {
  errmsg?: string(description='错误提示', name='errmsg'),
  errcode?: int64(description='错误code', name='errcode'),
}

model DelresumerecordOapiHrmEmployeeResponse = {
  headers: map[string]string,
  body: DelresumerecordOapiHrmEmployeeResponseBody,
}

/**
 * Description: 支持开放删除成长记录
 */
async function delresumerecordOapiHrmEmployee(request: DelresumerecordOapiHrmEmployeeRequest): DelresumerecordOapiHrmEmployeeResponse {
  var runtime = new Util.RuntimeOptions{};
  return delresumerecordOapiHrmEmployeeEx(request, runtime);
}

/**
 * Description: 支持开放删除成长记录
 */
async function delresumerecordOapiHrmEmployeeEx(request: DelresumerecordOapiHrmEmployeeRequest, runtime: Util.RuntimeOptions): DelresumerecordOapiHrmEmployeeResponse {
  Util.validateModel(request);
  var appParams = Util.stringifyMapValue(Util.toMap(request.params));
  return doRequestOApi('POST', '/topapi/hrm/employee/delresumerecord', request.headers, appParams, runtime);
}

model ListOapiEduClassStudentParams = {
  classId: int64(description='班级ID', name='class_id'),
  userid: string(description='用户ID', name='userid'),
  studentParam?: [
    {
      classId?: string(description='班级ID', name='class_id'),
      studentIds?: [ string ](description='学生列表', maxItems=20, name='student_ids'),
    }
  ](description='学生入参', maxItems=20, name='student_param'),
}

model ListOapiEduClassStudentRequest = {
  headers?: map[string]string,
  params:ListOapiEduClassStudentParams,
}

model ListOapiEduClassStudentResponseBody = {
  result?: string(description='返回结果', name='result'),
  success?: boolean(description='成功状态', name='success'),
  errcode?: int64(description='错误编码', name='errcode'),
  errmsg?: string(description='错误信息', name='errmsg'),
}

model ListOapiEduClassStudentResponse = {
  headers: map[string]string,
  body: ListOapiEduClassStudentResponseBody,
}

/**
 * Description: 查询班级下学生列表
 */
async function listOapiEduClassStudent(request: ListOapiEduClassStudentRequest): ListOapiEduClassStudentResponse {
  var runtime = new Util.RuntimeOptions{};
  return listOapiEduClassStudentEx(request, runtime);
}

/**
 * Description: 查询班级下学生列表
 */
async function listOapiEduClassStudentEx(request: ListOapiEduClassStudentRequest, runtime: Util.RuntimeOptions): ListOapiEduClassStudentResponse {
  Util.validateModel(request);
  var appParams = Util.stringifyMapValue(Util.toMap(request.params));
  return doRequestOApi('POST', '/topapi/edu/class/student/list', request.headers, appParams, runtime);
}

model GetOapiEduClassStudentParams = {
  studentParam?: [
    {
      classId?: string(description='班级ID', name='class_id'),
      studentIds?: [ string ](description='学生列表', maxItems=100, name='student_ids'),
    }
  ](description='学生入参', maxItems=100, name='student_param'),
  userid?: string(description='用户ID', name='userid'),
  classId?: int64(description='班级ID', name='class_id'),
}

model GetOapiEduClassStudentRequest = {
  headers?: map[string]string,
  params?:GetOapiEduClassStudentParams,
}

model GetOapiEduClassStudentResponseBody = {
  result?: string(description='结果', name='result'),
  success?: boolean(description='成功状态', name='success'),
  errcode?: int64(description='错误编码', name='errcode'),
  errmsg?: string(description='错误信息', name='errmsg'),
}

model GetOapiEduClassStudentResponse = {
  headers: map[string]string,
  body: GetOapiEduClassStudentResponseBody,
}

/**
 * Description: 根据班级Id和学生Id获取学生信息
 */
async function getOapiEduClassStudent(request: GetOapiEduClassStudentRequest): GetOapiEduClassStudentResponse {
  var runtime = new Util.RuntimeOptions{};
  return getOapiEduClassStudentEx(request, runtime);
}

/**
 * Description: 根据班级Id和学生Id获取学生信息
 */
async function getOapiEduClassStudentEx(request: GetOapiEduClassStudentRequest, runtime: Util.RuntimeOptions): GetOapiEduClassStudentResponse {
  Util.validateModel(request);
  var appParams = Util.stringifyMapValue(Util.toMap(request.params));
  return doRequestOApi('POST', '/topapi/edu/class/student/get', request.headers, appParams, runtime);
}

model ListbyteacherOapiEduClassParams = {
  filterParam?: {
    groupType?: string(description='群类型', name='group_type'),
    role?: string(description='角色', name='role'),
  }(description='过滤入参', name='filter_param'),
  userid?: string(description='用户ID', name='userid'),
}

model ListbyteacherOapiEduClassRequest = {
  headers?: map[string]string,
  params?:ListbyteacherOapiEduClassParams,
}

model ListbyteacherOapiEduClassResponseBody = {
  result?: [
    {
      nick?: string(description='昵称', name='nick'),
      classId?: int64(description='部门ID', name='class_id'),
      graduate?: boolean(description='是否毕业班', name='graduate'),
      count?: int64(description='班级学生人数', name='count'),
      name?: string(description='班级名称', name='name'),
      warning?: string(description='不再过滤群类型', name='warning'),
      superId?: int64(description='父部门ID', name='super_id'),
    }
  ](description='返回结果', name='result'),
  success?: boolean(description='成功状态', name='success'),
  errcode?: int64(description='错误编码', name='errcode'),
  errmsg?: string(description='错误信息', name='errmsg'),
}

model ListbyteacherOapiEduClassResponse = {
  headers: map[string]string,
  body: ListbyteacherOapiEduClassResponseBody,
}

/**
 * Description: 查询老师班级列表
 */
async function listbyteacherOapiEduClass(request: ListbyteacherOapiEduClassRequest): ListbyteacherOapiEduClassResponse {
  var runtime = new Util.RuntimeOptions{};
  return listbyteacherOapiEduClassEx(request, runtime);
}

/**
 * Description: 查询老师班级列表
 */
async function listbyteacherOapiEduClassEx(request: ListbyteacherOapiEduClassRequest, runtime: Util.RuntimeOptions): ListbyteacherOapiEduClassResponse {
  Util.validateModel(request);
  var appParams = Util.stringifyMapValue(Util.toMap(request.params));
  return doRequestOApi('POST', '/topapi/edu/class/listbyteacher', request.headers, appParams, runtime);
}

model SubmitOapiEduHomeworkStudentReportParams = {
  hwResult?: string(description='作业结果', name='hw_result'),
  classId: int64(description='部门ID', name='class_id'),
  studentName: string(description='学生姓名', name='student_name'),
  studentId: string(description='学生ID', name='student_id'),
  hwId: int64(description='作业ID', name='hw_id'),
  hwReport?: string(description='作业报告', name='hw_report'),
  bizCode: string(description='业务编码', name='biz_code'),
  attributes?: string(description='扩展属性', name='attributes'),
}

model SubmitOapiEduHomeworkStudentReportRequest = {
  headers?: map[string]string,
  params:SubmitOapiEduHomeworkStudentReportParams,
}

model SubmitOapiEduHomeworkStudentReportResponseBody = {
  result?: int64(description='结果', name='result'),
  success?: boolean(description='是否成功', name='success'),
  errcode?: int64(description='错误编码', name='errcode'),
  errmsg?: string(description='错误信息', name='errmsg'),
}

model SubmitOapiEduHomeworkStudentReportResponse = {
  headers: map[string]string,
  body: SubmitOapiEduHomeworkStudentReportResponseBody,
}

/**
 * Description: 提交学生作业学情分析
 */
async function submitOapiEduHomeworkStudentReport(request: SubmitOapiEduHomeworkStudentReportRequest): SubmitOapiEduHomeworkStudentReportResponse {
  var runtime = new Util.RuntimeOptions{};
  return submitOapiEduHomeworkStudentReportEx(request, runtime);
}

/**
 * Description: 提交学生作业学情分析
 */
async function submitOapiEduHomeworkStudentReportEx(request: SubmitOapiEduHomeworkStudentReportRequest, runtime: Util.RuntimeOptions): SubmitOapiEduHomeworkStudentReportResponse {
  Util.validateModel(request);
  var appParams = Util.stringifyMapValue(Util.toMap(request.params));
  return doRequestOApi('POST', '/topapi/edu/homework/student/report/submit', request.headers, appParams, runtime);
}

model ListOapiEduHomeworkStudentCommentParams = {
  classId: int64(description='班级ID', name='class_id'),
  hwId: int64(description='作业ID', name='hw_id'),
  studentId: string(description='学生ID', name='student_id'),
  teacherUserid: string(description='老师userID', name='teacher_userid'),
  bizCode: string(description='业务编码', name='biz_code'),
}

model ListOapiEduHomeworkStudentCommentRequest = {
  headers?: map[string]string,
  params:ListOapiEduHomeworkStudentCommentParams,
}

model ListOapiEduHomeworkStudentCommentResponseBody = {
  result?: [
    {
      studentId?: string(description='学生ID', name='student_id'),
      teacherId?: string(description='老师ID', name='teacher_id'),
      teacherName?: string(description='老师姓名', name='teacher_name'),
      studentName?: string(description='学生姓名', name='student_name'),
      photo?: string(description='图片', name='photo'),
      comment?: string(description='评论内容', name='comment'),
      attributes?: string(description='扩展属性', name='attributes'),
      media?: string(description='视频', name='media'),
      video?: string(description='音频', name='video'),
      commentTime?: string(description='评论时间', pattern='\\\\d{4}[-]\\\\d{1,2}[-]\\\\d{1,2}[T]\\\\d{2}:\\\\d{2}:\\\\d{2}[Z]', name='comment_time'),
      commentId?: int64(description='评论ID', name='comment_id'),
    }
  ](description='结果', name='result'),
  success?: boolean(description='是否成功', name='success'),
  errcode?: int64(description='错误编码', name='errcode'),
  errmsg?: string(description='错误信息', name='errmsg'),
}

model ListOapiEduHomeworkStudentCommentResponse = {
  headers: map[string]string,
  body: ListOapiEduHomeworkStudentCommentResponseBody,
}

/**
 * Description: 作业评论列表
 */
async function listOapiEduHomeworkStudentComment(request: ListOapiEduHomeworkStudentCommentRequest): ListOapiEduHomeworkStudentCommentResponse {
  var runtime = new Util.RuntimeOptions{};
  return listOapiEduHomeworkStudentCommentEx(request, runtime);
}

/**
 * Description: 作业评论列表
 */
async function listOapiEduHomeworkStudentCommentEx(request: ListOapiEduHomeworkStudentCommentRequest, runtime: Util.RuntimeOptions): ListOapiEduHomeworkStudentCommentResponse {
  Util.validateModel(request);
  var appParams = Util.stringifyMapValue(Util.toMap(request.params));
  return doRequestOApi('POST', '/topapi/edu/homework/student/comment/list', request.headers, appParams, runtime);
}

model QueryOapiEduHomeworkUserRoleParams = {
  userid: string(description='用户ID', name='userid'),
  bizCode: string(description='业务编码', name='biz_code'),
  classId?: int64(description='班级ID', name='class_id'),
}

model QueryOapiEduHomeworkUserRoleRequest = {
  headers?: map[string]string,
  params:QueryOapiEduHomeworkUserRoleParams,
}

model QueryOapiEduHomeworkUserRoleResponseBody = {
  result?: {
    teacher?: boolean(description='是否老师', name='teacher'),
    student?: boolean(description='是否学生', name='student'),
    headmaster?: boolean(description='是否班主任', name='headmaster'),
    students?: [ string ](description='学生列表', name='students'),
    guardian?: boolean(description='是否家长', name='guardian'),
    userRole?: string(description='用户角色', name='user_role'),
  }(description='返回结果', name='result'),
  success?: boolean(description='是否成功', name='success'),
  errcode?: int64(description='错误编码', name='errcode'),
  errmsg?: string(description='错误信息', name='errmsg'),
}

model QueryOapiEduHomeworkUserRoleResponse = {
  headers: map[string]string,
  body: QueryOapiEduHomeworkUserRoleResponseBody,
}

/**
 * Description: 查询用户角色
 */
async function queryOapiEduHomeworkUserRole(request: QueryOapiEduHomeworkUserRoleRequest): QueryOapiEduHomeworkUserRoleResponse {
  var runtime = new Util.RuntimeOptions{};
  return queryOapiEduHomeworkUserRoleEx(request, runtime);
}

/**
 * Description: 查询用户角色
 */
async function queryOapiEduHomeworkUserRoleEx(request: QueryOapiEduHomeworkUserRoleRequest, runtime: Util.RuntimeOptions): QueryOapiEduHomeworkUserRoleResponse {
  Util.validateModel(request);
  var appParams = Util.stringifyMapValue(Util.toMap(request.params));
  return doRequestOApi('POST', '/topapi/edu/homework/user/role/query', request.headers, appParams, runtime);
}

model QueryOapiEduHomeworkUserCourseParams = {
  bizCode: string(description='业务编码', name='biz_code'),
  userid: string(description='用户ID', name='userid'),
}

model QueryOapiEduHomeworkUserCourseRequest = {
  headers?: map[string]string,
  params:QueryOapiEduHomeworkUserCourseParams,
}

model QueryOapiEduHomeworkUserCourseResponseBody = {
  result?: {
    contents?: [
      {
        photo?: string(description='图片', name='photo'),
        title?: string(description='标题', name='title'),
      }
    ](description='科目内容详情', name='contents'),
  }(description='返回结果', name='result'),
  success?: boolean(description='是否成功', name='success'),
  errcode?: int64(description='错误编码', name='errcode'),
  errmsg?: string(description='错误信息', name='errmsg'),
}

model QueryOapiEduHomeworkUserCourseResponse = {
  headers: map[string]string,
  body: QueryOapiEduHomeworkUserCourseResponseBody,
}

/**
 * Description: 查询老师作业科目列表
 */
async function queryOapiEduHomeworkUserCourse(request: QueryOapiEduHomeworkUserCourseRequest): QueryOapiEduHomeworkUserCourseResponse {
  var runtime = new Util.RuntimeOptions{};
  return queryOapiEduHomeworkUserCourseEx(request, runtime);
}

/**
 * Description: 查询老师作业科目列表
 */
async function queryOapiEduHomeworkUserCourseEx(request: QueryOapiEduHomeworkUserCourseRequest, runtime: Util.RuntimeOptions): QueryOapiEduHomeworkUserCourseResponse {
  Util.validateModel(request);
  var appParams = Util.stringifyMapValue(Util.toMap(request.params));
  return doRequestOApi('POST', '/topapi/edu/homework/user/course/query', request.headers, appParams, runtime);
}

model SubmitOapiEduHomeworkStudentParams = {
  media?: string(description='视频地址', name='media'),
  photo?: string(description='图片地址', name='photo'),
  content?: string(description='内容', name='content'),
  title?: string(description='标题', name='title'),
  studentName: string(description='学生姓名', name='student_name'),
  submitorId: string(description='提交人ID', name='submitor_id'),
  video?: string(description='音频地址', name='video'),
  attributes?: string(description='属性参数', name='attributes'),
  studentId: string(description='学生ID', name='student_id'),
  hwId: int64(description='作业ID', name='hw_id'),
  classId: int64(description='班级ID', name='class_id'),
  bizCode: string(description='业务编码', name='biz_code'),
}

model SubmitOapiEduHomeworkStudentRequest = {
  headers?: map[string]string,
  params:SubmitOapiEduHomeworkStudentParams,
}

model SubmitOapiEduHomeworkStudentResponseBody = {
  result?: int64(description='结果', name='result'),
  success?: boolean(description='是否成功', name='success'),
  errcode?: int64(description='错误编码', name='errcode'),
  errmsg?: string(description='错误信息', name='errmsg'),
}

model SubmitOapiEduHomeworkStudentResponse = {
  headers: map[string]string,
  body: SubmitOapiEduHomeworkStudentResponseBody,
}

/**
 * Description: 家校本提交作业
 */
async function submitOapiEduHomeworkStudent(request: SubmitOapiEduHomeworkStudentRequest): SubmitOapiEduHomeworkStudentResponse {
  var runtime = new Util.RuntimeOptions{};
  return submitOapiEduHomeworkStudentEx(request, runtime);
}

/**
 * Description: 家校本提交作业
 */
async function submitOapiEduHomeworkStudentEx(request: SubmitOapiEduHomeworkStudentRequest, runtime: Util.RuntimeOptions): SubmitOapiEduHomeworkStudentResponse {
  Util.validateModel(request);
  var appParams = Util.stringifyMapValue(Util.toMap(request.params));
  return doRequestOApi('POST', '/topapi/edu/homework/student/submit', request.headers, appParams, runtime);
}

model GetOapiEduHomeworkGroupRoleParams = {
  userid: string(description='用户ID', name='userid'),
  bizCode: string(description='业务编码', name='biz_code'),
}

model GetOapiEduHomeworkGroupRoleRequest = {
  headers?: map[string]string,
  params:GetOapiEduHomeworkGroupRoleParams,
}

model GetOapiEduHomeworkGroupRoleResponseBody = {
  result?: boolean(description='是否存在', name='result'),
  success?: boolean(description='是否成功', name='success'),
  errcode?: int64(description='错误编码', name='errcode'),
  errmsg?: string(description='错误信息', name='errmsg'),
}

model GetOapiEduHomeworkGroupRoleResponse = {
  headers: map[string]string,
  body: GetOapiEduHomeworkGroupRoleResponseBody,
}

/**
 * Description: 查询组织是否存在师生群
 */
async function getOapiEduHomeworkGroupRole(request: GetOapiEduHomeworkGroupRoleRequest): GetOapiEduHomeworkGroupRoleResponse {
  var runtime = new Util.RuntimeOptions{};
  return getOapiEduHomeworkGroupRoleEx(request, runtime);
}

/**
 * Description: 查询组织是否存在师生群
 */
async function getOapiEduHomeworkGroupRoleEx(request: GetOapiEduHomeworkGroupRoleRequest, runtime: Util.RuntimeOptions): GetOapiEduHomeworkGroupRoleResponse {
  Util.validateModel(request);
  var appParams = Util.stringifyMapValue(Util.toMap(request.params));
  return doRequestOApi('POST', '/topapi/edu/homework/group/role/get', request.headers, appParams, runtime);
}

model CreateOapiEduHomeworkParams = {
  hwMedia?: string(description='作业视频', name='hw_media'),
  hwContent: string(description='作业内容', name='hw_content'),
  hwTitle: string(description='作业标题', name='hw_title'),
  courseName: string(description='作业课程名称', name='course_name'),
  hwPhoto?: string(description='作业图片', name='hw_photo'),
  hwVideo?: string(description='作业录音', name='hw_video'),
  teacherName: string(description='老师名称', name='teacher_name'),
  teacherUserid: string(description='老师userid', name='teacher_userid'),
  selectClass?: [
    {
      className?: string(description='班级名称', name='class_name'),
      classId?: int64(description='班级ID', name='class_id'),
    }
  ](description='选择的布置班级', maxItems=50, name='select_class'),
  selectStu?: [
    {
      className?: string(description='班级名称', name='class_name'),
      classId?: int64(description='班级ID', name='class_id'),
      classStu?: [
        {
          stuName?: string(description='学生姓名', name='stu_name'),
          stuId?: string(description='学生userid', name='stu_id'),
        }
      ](description='选择学生列表', maxItems=100, name='class_stu'),
    }
  ](description='选择班级对应学生', maxItems=50, name='select_stu'),
  identifier: string(description='幂等ID字段', name='identifier'),
  attributes?: string(description='扩展属性', name='attributes'),
  targetRole?: string(description='发送对象', name='target_role'),
  bizCode: string(description='业务编码', name='biz_code'),
  status: string(description='状态', name='status'),
  scheduledRelease?: string(description='是否开始定时调度', name='scheduled_release'),
  scheduledTime?: string(description='定时调度时间', name='scheduled_time'),
}

model CreateOapiEduHomeworkRequest = {
  headers?: map[string]string,
  params:CreateOapiEduHomeworkParams,
}

model CreateOapiEduHomeworkResponseBody = {
  result?: int64(description='结果', name='result'),
  success?: boolean(description='是否成功', name='success'),
  errcode?: int64(description='错误编码', name='errcode'),
  errmsg?: string(description='错误信息', name='errmsg'),
}

model CreateOapiEduHomeworkResponse = {
  headers: map[string]string,
  body: CreateOapiEduHomeworkResponseBody,
}

/**
 * Description: 家校本发送作业
 */
async function createOapiEduHomework(request: CreateOapiEduHomeworkRequest): CreateOapiEduHomeworkResponse {
  var runtime = new Util.RuntimeOptions{};
  return createOapiEduHomeworkEx(request, runtime);
}

/**
 * Description: 家校本发送作业
 */
async function createOapiEduHomeworkEx(request: CreateOapiEduHomeworkRequest, runtime: Util.RuntimeOptions): CreateOapiEduHomeworkResponse {
  Util.validateModel(request);
  var appParams = Util.stringifyMapValue(Util.toMap(request.params));
  return doRequestOApi('POST', '/topapi/edu/homework/create', request.headers, appParams, runtime);
}

model RecordOapiEduHomeworkStudentTopicParams = {
  studentAnswerDetails?: [
    {
      spendTime?: int64(description='做题时间', name='spend_time'),
      isRight?: string(description='是否答对', name='is_right'),
      questionId: string(description='题目ID', name='question_id'),
      classId: string(description='班级ID', name='class_id'),
      studentName?: string(description='学生姓名', name='student_name'),
      studentId: string(description='学生ID', name='student_id'),
      hwId: int64(description='作业ID', name='hw_id'),
      redoTimes?: int64(description='做了多少次', name='redo_times'),
      attributes?: string(description='扩展属性', name='attributes'),
      bizCode: string(description='业务编码', name='biz_code'),
    }
  ](description='答题记录详情', maxItems=20, name='student_answer_details'),
}

model RecordOapiEduHomeworkStudentTopicRequest = {
  headers?: map[string]string,
  params?:RecordOapiEduHomeworkStudentTopicParams,
}

model RecordOapiEduHomeworkStudentTopicResponseBody = {
  result?: [ int64 ](description='结果', name='result'),
  success?: boolean(description='是否成功', name='success'),
  errcode?: int64(description='错误编码', name='errcode'),
  errmsg?: string(description='错误信息', name='errmsg'),
}

model RecordOapiEduHomeworkStudentTopicResponse = {
  headers: map[string]string,
  body: RecordOapiEduHomeworkStudentTopicResponseBody,
}

/**
 * Description: 学生答题记录同步
 */
async function recordOapiEduHomeworkStudentTopic(request: RecordOapiEduHomeworkStudentTopicRequest): RecordOapiEduHomeworkStudentTopicResponse {
  var runtime = new Util.RuntimeOptions{};
  return recordOapiEduHomeworkStudentTopicEx(request, runtime);
}

/**
 * Description: 学生答题记录同步
 */
async function recordOapiEduHomeworkStudentTopicEx(request: RecordOapiEduHomeworkStudentTopicRequest, runtime: Util.RuntimeOptions): RecordOapiEduHomeworkStudentTopicResponse {
  Util.validateModel(request);
  var appParams = Util.stringifyMapValue(Util.toMap(request.params));
  return doRequestOApi('POST', '/topapi/edu/homework/student/topic/record', request.headers, appParams, runtime);
}

model BatchaddOapiAtsJobParams = {
  bizCode: string(description='招聘业务标识', name='biz_code'),
  jobs: [
    {
      extData: {
        headCount: int64(description='招募人数', name='head_count'),
      }(description='扩展数据', name='ext_data'),
      creatorUserId: string(description='操作人员工标识', name='creator_user_id'),
      address?: {
        detail: string(description='位置详情', name='detail'),
        name?: string(description='位置名称', name='name'),
      }(description='工作地点', name='address'),
      maxSalary: int64(description='最低月薪，单位：元', name='max_salary'),
      minSalary: int64(description='最高月薪，单位：元', name='min_salary'),
      requiredEdu: int64(description='学历要求，1小学 2初中 3高中  4中专 5大专 6本科  7硕士 8 博士 9其他', name='required_edu'),
      campus: boolean(description='是否校招', name='campus'),
      description: string(description='职位描述', name='description'),
      name: string(description='职位名称', name='name'),
    }
  ](description='职位列表，单次最多20个', maxItems=999, name='jobs'),
  opUserId: string(description='操作人员工标识', name='op_user_id'),
}

model BatchaddOapiAtsJobRequest = {
  headers?: map[string]string,
  params:BatchaddOapiAtsJobParams,
}

model BatchaddOapiAtsJobResponseBody = {
  result?: {
    result?: {
      result?: [
        {
          errorMsg?: string(description='错误描述', name='error_msg'),
          errorCode?: string(description='错误码', name='error_code'),
          item?: {
            name?: string(description='职位名称', name='name'),
            jobCode?: string(description='职位编号', name='job_code'),
            jobId?: string(description='职位唯一标识', name='job_id'),
          }(description='职位', name='item'),
          success?: boolean(description='是否成功', name='success'),
          index?: int64(description='下标（从0开始）', name='index'),
        }
      ](description='职位列表', name='result'),
      failedCount?: int64(description='失败数量', name='failed_count'),
      successCount?: int64(description='成功数量', name='success_count'),
      totalCount?: int64(description='总数量', name='total_count'),
    }(description='批量操作结果', name='result'),
    errmsg?: string(description='错误描述', name='errmsg'),
    errcode?: int64(description='错误码', name='errcode'),
  }(description='返回结果', name='result'),
}

model BatchaddOapiAtsJobResponse = {
  headers: map[string]string,
  body: BatchaddOapiAtsJobResponseBody,
}

/**
 * Description: 批量添加职位
 */
async function batchaddOapiAtsJob(request: BatchaddOapiAtsJobRequest): BatchaddOapiAtsJobResponse {
  var runtime = new Util.RuntimeOptions{};
  return batchaddOapiAtsJobEx(request, runtime);
}

/**
 * Description: 批量添加职位
 */
async function batchaddOapiAtsJobEx(request: BatchaddOapiAtsJobRequest, runtime: Util.RuntimeOptions): BatchaddOapiAtsJobResponse {
  Util.validateModel(request);
  var appParams = Util.stringifyMapValue(Util.toMap(request.params));
  return doRequestOApi('POST', '/topapi/ats/job/batchadd', request.headers, appParams, runtime);
}

model CreateOapiEduHomeworkStudentCommentParams = {
  video?: string(description='老师评论语音', name='video'),
  comment?: string(description='评论', name='comment'),
  teacherUserid: string(description='老师UserId', name='teacher_userid'),
  studentName?: string(description='学生姓名', name='student_name'),
  media?: string(description='老师评论视频', name='media'),
  photo?: string(description='老师评论图片', name='photo'),
  attributes?: string(description='属性参数', name='attributes'),
  bizCode: string(description='业务编码', name='biz_code'),
  classId: string(description='班级ID', name='class_id'),
  hwId: int64(description='作业ID', name='hw_id'),
  studentId: string(description='学生ID', name='student_id'),
}

model CreateOapiEduHomeworkStudentCommentRequest = {
  headers?: map[string]string,
  params:CreateOapiEduHomeworkStudentCommentParams,
}

model CreateOapiEduHomeworkStudentCommentResponseBody = {
  result?: int64(description='结果', name='result'),
  success?: boolean(description='是否成功', name='success'),
  errcode?: int64(description='错误编码', name='errcode'),
  errmsg?: string(description='错误信息', name='errmsg'),
}

model CreateOapiEduHomeworkStudentCommentResponse = {
  headers: map[string]string,
  body: CreateOapiEduHomeworkStudentCommentResponseBody,
}

/**
 * Description: 老师评论学生作业
 */
async function createOapiEduHomeworkStudentComment(request: CreateOapiEduHomeworkStudentCommentRequest): CreateOapiEduHomeworkStudentCommentResponse {
  var runtime = new Util.RuntimeOptions{};
  return createOapiEduHomeworkStudentCommentEx(request, runtime);
}

/**
 * Description: 老师评论学生作业
 */
async function createOapiEduHomeworkStudentCommentEx(request: CreateOapiEduHomeworkStudentCommentRequest, runtime: Util.RuntimeOptions): CreateOapiEduHomeworkStudentCommentResponse {
  Util.validateModel(request);
  var appParams = Util.stringifyMapValue(Util.toMap(request.params));
  return doRequestOApi('POST', '/topapi/edu/homework/student/comment/create', request.headers, appParams, runtime);
}

model UpdateOapiEduHomeworkParams = {
  hwId: int64(description='作业ID', name='hw_id'),
  status: string(description='状态', name='status'),
  teacherUserid: string(description='老师UserId', name='teacher_userid'),
  identifier: string(description='幂等标识', name='identifier'),
  bizCode: string(description='业务编码', name='biz_code'),
}

model UpdateOapiEduHomeworkRequest = {
  headers?: map[string]string,
  params:UpdateOapiEduHomeworkParams,
}

model UpdateOapiEduHomeworkResponseBody = {
  result?: int64(description='结果', name='result'),
  success?: boolean(description='是否成功', name='success'),
  errcode?: int64(description='错误码', name='errcode'),
  errmsg?: string(description='错误信息', name='errmsg'),
}

model UpdateOapiEduHomeworkResponse = {
  headers: map[string]string,
  body: UpdateOapiEduHomeworkResponseBody,
}

/**
 * Description: 家校本发送作业成功
 */
async function updateOapiEduHomework(request: UpdateOapiEduHomeworkRequest): UpdateOapiEduHomeworkResponse {
  var runtime = new Util.RuntimeOptions{};
  return updateOapiEduHomeworkEx(request, runtime);
}

/**
 * Description: 家校本发送作业成功
 */
async function updateOapiEduHomeworkEx(request: UpdateOapiEduHomeworkRequest, runtime: Util.RuntimeOptions): UpdateOapiEduHomeworkResponse {
  Util.validateModel(request);
  var appParams = Util.stringifyMapValue(Util.toMap(request.params));
  return doRequestOApi('POST', '/topapi/edu/homework/update', request.headers, appParams, runtime);
}

model CreateOapiImChatControlgroupParams = {
  title: string(description='群标题', maxLength=256, name='title'),
  ownerUserid: string(description='群主在钉钉组织内的userid', name='owner_userid'),
  groupUniqId?: string(description='建群去重的业务id', name='group_uniq_id'),
  memberUserids: [ string ](description='群成员在钉钉组织内的userid列表', maxItems=20, name='member_userids'),
  authorityType?: int64(description='群的管理权限设置，0-所有人可管理（默认），1-仅群主和群管理员可管理', name='authority_type'),
  groupType?: string(description='goc模拟群：goc， 网商银行群：eCommerce', name='group_type'),
}

model CreateOapiImChatControlgroupRequest = {
  headers?: map[string]string,
  params:CreateOapiImChatControlgroupParams,
}

model CreateOapiImChatControlgroupResponseBody = {
  result?: {
    openConversationId?: string(description='开放的会话ID', name='open_conversation_id'),
    chatId?: string(description='开放的会话chatId', name='chat_id'),
  }(description='结果', name='result'),
  errcode?: int64(description='错误代码', name='errcode'),
  errmsg?: string(description='错误描述', name='errmsg'),
  success?: boolean(description='是否成功', name='success'),
}

model CreateOapiImChatControlgroupResponse = {
  headers: map[string]string,
  body: CreateOapiImChatControlgroupResponseBody,
}

/**
 * Description: 创建一个信管群
 */
async function createOapiImChatControlgroup(request: CreateOapiImChatControlgroupRequest): CreateOapiImChatControlgroupResponse {
  var runtime = new Util.RuntimeOptions{};
  return createOapiImChatControlgroupEx(request, runtime);
}

/**
 * Description: 创建一个信管群
 */
async function createOapiImChatControlgroupEx(request: CreateOapiImChatControlgroupRequest, runtime: Util.RuntimeOptions): CreateOapiImChatControlgroupResponse {
  Util.validateModel(request);
  var appParams = Util.stringifyMapValue(Util.toMap(request.params));
  return doRequestOApi('POST', '/topapi/im/chat/controlgroup/create', request.headers, appParams, runtime);
}

model CreateOapiEduHomeworkTopicParams = {
  topicItems?: [
    {
      point?: string(description='知识点', name='point'),
      analysis?: string(description='解析', name='analysis'),
      answer?: string(description='答案', name='answer'),
      questionContent?: string(description='题目内容', name='question_content'),
      questionType?: string(description='题目类型', name='question_type'),
      questionId?: string(description='题目ID', name='question_id'),
      bizCode?: string(description='业务编码', name='biz_code'),
      attributes?: string(description='扩展属性', name='attributes'),
    }
  ](description='题目列表', maxItems=20, name='topic_items'),
}

model CreateOapiEduHomeworkTopicRequest = {
  headers?: map[string]string,
  params?:CreateOapiEduHomeworkTopicParams,
}

model CreateOapiEduHomeworkTopicResponseBody = {
  result?: [ int64 ](description='返回结果', name='result'),
  success?: boolean(description='是否成功', name='success'),
  errcode?: int64(description='错误编码', name='errcode'),
  errmsg?: string(description='错误信息', name='errmsg'),
}

model CreateOapiEduHomeworkTopicResponse = {
  headers: map[string]string,
  body: CreateOapiEduHomeworkTopicResponseBody,
}

/**
 * Description: 家校本中题库同步
 */
async function createOapiEduHomeworkTopic(request: CreateOapiEduHomeworkTopicRequest): CreateOapiEduHomeworkTopicResponse {
  var runtime = new Util.RuntimeOptions{};
  return createOapiEduHomeworkTopicEx(request, runtime);
}

/**
 * Description: 家校本中题库同步
 */
async function createOapiEduHomeworkTopicEx(request: CreateOapiEduHomeworkTopicRequest, runtime: Util.RuntimeOptions): CreateOapiEduHomeworkTopicResponse {
  Util.validateModel(request);
  var appParams = Util.stringifyMapValue(Util.toMap(request.params));
  return doRequestOApi('POST', '/topapi/edu/homework/topic/create', request.headers, appParams, runtime);
}

model QueryOapiEduHomeworkParams = {
  bizCode: string(description='业务编码', name='biz_code'),
  hwId: int64(description='作业ID', name='hw_id'),
}

model QueryOapiEduHomeworkRequest = {
  headers?: map[string]string,
  params:QueryOapiEduHomeworkParams,
}

model QueryOapiEduHomeworkResponseBody = {
  result?: {
    hwTitle?: string(description='作业标题', name='hw_title'),
    hwMedia?: string(description='作业视频', name='hw_media'),
    hwContent?: string(description='作业内容', name='hw_content'),
    hwPhoto?: string(description='作业图片', name='hw_photo'),
    scheduledTime?: string(description='定时发送事件', name='scheduled_time'),
    teacherId?: string(description='老师ID', name='teacher_id'),
    hwStatus?: string(description='作业状态', name='hw_status'),
    teacherName?: string(description='老师姓名', name='teacher_name'),
    hwVideo?: string(description='作业录音', name='hw_video'),
    attributes?: string(description='扩展属性', name='attributes'),
    scheduledRelease?: string(description='是否定时作业', name='scheduled_release'),
    sendTime?: string(description='发送时间', pattern='\\\\d{4}[-]\\\\d{1,2}[-]\\\\d{1,2}[T]\\\\d{2}:\\\\d{2}:\\\\d{2}[Z]', name='send_time'),
  }(description='结果', name='result'),
  success?: boolean(description='是否成功', name='success'),
  errcode?: int64(description='错误编码', name='errcode'),
  errmsg?: string(description='错误信息', name='errmsg'),
}

model QueryOapiEduHomeworkResponse = {
  headers: map[string]string,
  body: QueryOapiEduHomeworkResponseBody,
}

/**
 * Description: 查询作业详情
 */
async function queryOapiEduHomework(request: QueryOapiEduHomeworkRequest): QueryOapiEduHomeworkResponse {
  var runtime = new Util.RuntimeOptions{};
  return queryOapiEduHomeworkEx(request, runtime);
}

/**
 * Description: 查询作业详情
 */
async function queryOapiEduHomeworkEx(request: QueryOapiEduHomeworkRequest, runtime: Util.RuntimeOptions): QueryOapiEduHomeworkResponse {
  Util.validateModel(request);
  var appParams = Util.stringifyMapValue(Util.toMap(request.params));
  return doRequestOApi('POST', '/topapi/edu/homework/query', request.headers, appParams, runtime);
}

model ListCorpHealthStepinfoParams = {
  type: int64(description='0表示取用户步数，1表示取部门步数', name='type'),
  objectId: string(description='可以传入用户userid或者部门id', name='object_id'),
  statDates: [ string ](description='时间列表，注意时间格式是YYYYMMDD', maxItems=31, name='stat_dates'),
}

model ListCorpHealthStepinfoRequest = {
  headers?: map[string]string,
  params:ListCorpHealthStepinfoParams,
}

model ListCorpHealthStepinfoResponseBody = {
  result?: {
    dingOpenErrcode?: int64(description='dingOpenErrcode', name='ding_open_errcode'),
    errorMsg?: string(description='errorMsg', name='error_msg'),
    success?: boolean(description='success', name='success'),
    stepinfoList?: [
      {
        statDate?: int64(description='统计的时间', name='stat_date'),
        stepCount?: int64(description='步数', name='step_count'),
      }
    ](description='步数列表', name='stepinfo_list'),
  }(description='result', name='result'),
}

model ListCorpHealthStepinfoResponse = {
  headers: map[string]string,
  body: ListCorpHealthStepinfoResponseBody,
}

/**
 * Description: 查询企业用户或部门每天的钉钉运动步数，最多可以查询31天的数据
 */
async function listCorpHealthStepinfo(request: ListCorpHealthStepinfoRequest): ListCorpHealthStepinfoResponse {
  var runtime = new Util.RuntimeOptions{};
  return listCorpHealthStepinfoEx(request, runtime);
}

/**
 * Description: 查询企业用户或部门每天的钉钉运动步数，最多可以查询31天的数据
 */
async function listCorpHealthStepinfoEx(request: ListCorpHealthStepinfoRequest, runtime: Util.RuntimeOptions): ListCorpHealthStepinfoResponse {
  Util.validateModel(request);
  var appParams = Util.stringifyMapValue(Util.toMap(request.params));
  return doRequest('dingtalk.corp.health.stepinfo.list', 'POST', '/router/rest', request.headers, appParams, runtime);
}

model Get_admin_scopeOapiUserParams = {
  userid: string(description='用户id', name='userid'),
}

model Get_admin_scopeOapiUserRequest = {
  headers?: map[string]string,
  params:Get_admin_scopeOapiUserParams,
}

model Get_admin_scopeOapiUserResponseBody = {
  errcode?: int64(description='dingOpenErrcode', name='errcode'),
  errmsg?: string(description='errorMsg', name='errmsg'),
  deptIds?: [ int64 ](description='result', name='dept_ids'),
}

model Get_admin_scopeOapiUserResponse = {
  headers: map[string]string,
  body: Get_admin_scopeOapiUserResponseBody,
}

/**
 * Description: 查询管理员通讯录权限范围
 */
async function get_admin_scopeOapiUser(request: Get_admin_scopeOapiUserRequest): Get_admin_scopeOapiUserResponse {
  var runtime = new Util.RuntimeOptions{};
  return get_admin_scopeOapiUserEx(request, runtime);
}

/**
 * Description: 查询管理员通讯录权限范围
 */
async function get_admin_scopeOapiUserEx(request: Get_admin_scopeOapiUserRequest, runtime: Util.RuntimeOptions): Get_admin_scopeOapiUserResponse {
  Util.validateModel(request);
  var appParams = Util.stringifyMapValue(Util.toMap(request.params));
  return doRequestOApi('POST', '/topapi/user/get_admin_scope', request.headers, appParams, runtime);
}

model GenericOapiBipaasParams = {
  request: string(description='调用请求', name='request'),
}

model GenericOapiBipaasRequest = {
  headers?: map[string]string,
  params:GenericOapiBipaasParams,
}

model GenericOapiBipaasResponseBody = {
  result?: string(description='response json', name='result'),
  success?: boolean(description='调用是否成功', name='success'),
  errcode?: int64(description='错误码', name='errcode'),
  errmsg?: string(description='错误信息', name='errmsg'),
}

model GenericOapiBipaasResponse = {
  headers: map[string]string,
  body: GenericOapiBipaasResponseBody,
}

/**
 * Description: 给蚂蚁开放智能参谋接口，打通DeepInsight和钉钉智能参谋
 */
async function genericOapiBipaas(request: GenericOapiBipaasRequest): GenericOapiBipaasResponse {
  var runtime = new Util.RuntimeOptions{};
  return genericOapiBipaasEx(request, runtime);
}

/**
 * Description: 给蚂蚁开放智能参谋接口，打通DeepInsight和钉钉智能参谋
 */
async function genericOapiBipaasEx(request: GenericOapiBipaasRequest, runtime: Util.RuntimeOptions): GenericOapiBipaasResponse {
  Util.validateModel(request);
  var appParams = Util.stringifyMapValue(Util.toMap(request.params));
  return doRequestOApi('POST', '/topapi/bipaas/generic', request.headers, appParams, runtime);
}

model UpdateOapiEduHomeworkStudentCommentParams = {
  teacherUserid: string(description='老师UserId', name='teacher_userid'),
  studentName?: string(description='学生姓名', name='student_name'),
  studentId: string(description='学生ID', name='student_id'),
  commentId: int64(description='评论ID', name='comment_id'),
  hwId?: int64(description='作业ID', name='hw_id'),
  classId: int64(description='班级ID', name='class_id'),
  comment?: string(description='评论内容', name='comment'),
  video?: string(description='音频', name='video'),
  media?: string(description='视频', name='media'),
  photo?: string(description='图片', name='photo'),
  bizCode: string(description='业务编码', name='biz_code'),
  attributes?: string(description='扩展属性', name='attributes'),
}

model UpdateOapiEduHomeworkStudentCommentRequest = {
  headers?: map[string]string,
  params:UpdateOapiEduHomeworkStudentCommentParams,
}

model UpdateOapiEduHomeworkStudentCommentResponseBody = {
  result?: int64(description='结果', name='result'),
  success?: boolean(description='是否成功', name='success'),
  errcode?: int64(description='错误编码', name='errcode'),
  errmsg?: string(description='错误信息', name='errmsg'),
}

model UpdateOapiEduHomeworkStudentCommentResponse = {
  headers: map[string]string,
  body: UpdateOapiEduHomeworkStudentCommentResponseBody,
}

/**
 * Description: 更新评论学生作业
 */
async function updateOapiEduHomeworkStudentComment(request: UpdateOapiEduHomeworkStudentCommentRequest): UpdateOapiEduHomeworkStudentCommentResponse {
  var runtime = new Util.RuntimeOptions{};
  return updateOapiEduHomeworkStudentCommentEx(request, runtime);
}

/**
 * Description: 更新评论学生作业
 */
async function updateOapiEduHomeworkStudentCommentEx(request: UpdateOapiEduHomeworkStudentCommentRequest, runtime: Util.RuntimeOptions): UpdateOapiEduHomeworkStudentCommentResponse {
  Util.validateModel(request);
  var appParams = Util.stringifyMapValue(Util.toMap(request.params));
  return doRequestOApi('POST', '/topapi/edu/homework/student/comment/update', request.headers, appParams, runtime);
}

model DeleteOapiEduHomeworkStudentCommentParams = {
  studentId?: string(description='学生ID', name='student_id'),
  classId?: int64(description='班级ID', name='class_id'),
  hwId?: int64(description='作业ID', name='hw_id'),
  teacherUserid?: string(description='老师UserID', name='teacher_userid'),
  commentId?: int64(description='评论ID', name='comment_id'),
  bizCode?: string(description='业务编码', name='biz_code'),
}

model DeleteOapiEduHomeworkStudentCommentRequest = {
  headers?: map[string]string,
  params?:DeleteOapiEduHomeworkStudentCommentParams,
}

model DeleteOapiEduHomeworkStudentCommentResponseBody = {
  result?: boolean(description='结果', name='result'),
  success?: boolean(description='是否成功', name='success'),
  errcode?: int64(description='错误编码', name='errcode'),
  errmsg?: string(description='错误信息', name='errmsg'),
}

model DeleteOapiEduHomeworkStudentCommentResponse = {
  headers: map[string]string,
  body: DeleteOapiEduHomeworkStudentCommentResponseBody,
}

/**
 * Description: 删除作业评论
 */
async function deleteOapiEduHomeworkStudentComment(request: DeleteOapiEduHomeworkStudentCommentRequest): DeleteOapiEduHomeworkStudentCommentResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteOapiEduHomeworkStudentCommentEx(request, runtime);
}

/**
 * Description: 删除作业评论
 */
async function deleteOapiEduHomeworkStudentCommentEx(request: DeleteOapiEduHomeworkStudentCommentRequest, runtime: Util.RuntimeOptions): DeleteOapiEduHomeworkStudentCommentResponse {
  Util.validateModel(request);
  var appParams = Util.stringifyMapValue(Util.toMap(request.params));
  return doRequestOApi('POST', '/topapi/edu/homework/student/comment/delete', request.headers, appParams, runtime);
}

model GetOapiEduAlumniRequest = {
  headers?: map[string]string,
}

model GetOapiEduAlumniResponseBody = {
  result?: {
    corpId?: string(description='校友会id', name='corp_id'),
  }(description='结果', name='result'),
  success?: boolean(description='成功or失败', name='success'),
  errcode?: int64(description='错误码', name='errcode'),
  errmsg?: string(description='错误信息', name='errmsg'),
}

model GetOapiEduAlumniResponse = {
  headers: map[string]string,
  body: GetOapiEduAlumniResponseBody,
}

/**
 * Description: 通过学校id查询校友会id
 */
async function getOapiEduAlumni(request: GetOapiEduAlumniRequest): GetOapiEduAlumniResponse {
  var runtime = new Util.RuntimeOptions{};
  return getOapiEduAlumniEx(request, runtime);
}

/**
 * Description: 通过学校id查询校友会id
 */
async function getOapiEduAlumniEx(request: GetOapiEduAlumniRequest, runtime: Util.RuntimeOptions): GetOapiEduAlumniResponse {
  Util.validateModel(request);
  var appParams : map[string]string = {};
  return doRequestOApi('POST', '/topapi/edu/alumni/get', request.headers, appParams, runtime);
}

model UpdateOapiProcessinstanceVariableParams = {
  processInstanceId: string(description='审批实例id', name='process_instance_id'),
  remark?: string(description='备注', name='remark'),
  variables: [
    {
      id: string(description='表单组件id', name='id'),
      value: string(description='表单值', name='value'),
      extValue?: string(description='额外信息', name='ext_value'),
    }
  ](description='变量列表', maxItems=20, name='variables'),
}

model UpdateOapiProcessinstanceVariableRequest = {
  headers?: map[string]string,
  params:UpdateOapiProcessinstanceVariableParams,
}

model UpdateOapiProcessinstanceVariableResponseBody = {
  errcode?: int64(description='错误码', name='errcode'),
  errmsg?: string(description='错误信息', name='errmsg'),
  success?: boolean(description='成功标识', name='success'),
}

model UpdateOapiProcessinstanceVariableResponse = {
  headers: map[string]string,
  body: UpdateOapiProcessinstanceVariableResponseBody,
}

/**
 * Description: 可以通过API修改审批表单的值，通用接口，暂时只开放给E签宝，暂时只支持附件组件，只能添加属性，不能修改现有属性
 */
async function updateOapiProcessinstanceVariable(request: UpdateOapiProcessinstanceVariableRequest): UpdateOapiProcessinstanceVariableResponse {
  var runtime = new Util.RuntimeOptions{};
  return updateOapiProcessinstanceVariableEx(request, runtime);
}

/**
 * Description: 可以通过API修改审批表单的值，通用接口，暂时只开放给E签宝，暂时只支持附件组件，只能添加属性，不能修改现有属性
 */
async function updateOapiProcessinstanceVariableEx(request: UpdateOapiProcessinstanceVariableRequest, runtime: Util.RuntimeOptions): UpdateOapiProcessinstanceVariableResponse {
  Util.validateModel(request);
  var appParams = Util.stringifyMapValue(Util.toMap(request.params));
  return doRequestOApi('POST', '/topapi/processinstance/variable/update', request.headers, appParams, runtime);
}

model UploadOapiProcessinstanceFileParams = {
  agentId: int64(description='企业应用标识', name='agent_id'),
  processInstanceId: string(description='流程实例id', name='process_instance_id'),
}

model UploadOapiProcessinstanceFileRequest = {
  headers?: map[string]string,
  params:UploadOapiProcessinstanceFileParams,
}

model UploadOapiProcessinstanceFileResponseBody = {
  result?: {
    authCode?: string(description='临时授权码', name='auth_code'),
    spaceId?: int64(description='钉盘空间id', name='space_id'),
  }(description='返回结果', name='result'),
  errcode?: int64(description='错误码', name='errcode'),
  errmsg?: string(description='错误信息', name='errmsg'),
  success?: boolean(description='成功标识', name='success'),
}

model UploadOapiProcessinstanceFileResponse = {
  headers: map[string]string,
  body: UploadOapiProcessinstanceFileResponseBody,
}

/**
 * Description: 获取审批单文件上传授权
 */
async function uploadOapiProcessinstanceFile(request: UploadOapiProcessinstanceFileRequest): UploadOapiProcessinstanceFileResponse {
  var runtime = new Util.RuntimeOptions{};
  return uploadOapiProcessinstanceFileEx(request, runtime);
}

/**
 * Description: 获取审批单文件上传授权
 */
async function uploadOapiProcessinstanceFileEx(request: UploadOapiProcessinstanceFileRequest, runtime: Util.RuntimeOptions): UploadOapiProcessinstanceFileResponse {
  Util.validateModel(request);
  var appParams = Util.stringifyMapValue(Util.toMap(request.params));
  return doRequestOApi('POST', '/topapi/processinstance/file/upload', request.headers, appParams, runtime);
}

model ListbytimeOapiLiveGroupliveParams = {
  req: {
    endTime: int64(description='结束时间，单位秒', name='end_time'),
    startTime: int64(description='开始时间，单位秒', name='start_time'),
    deptId: int64(description='直播所属群对应的部门', name='dept_id'),
  }(description='查询直播参数', name='req'),
}

model ListbytimeOapiLiveGroupliveRequest = {
  headers?: map[string]string,
  params:ListbytimeOapiLiveGroupliveParams,
}

model ListbytimeOapiLiveGroupliveResponseBody = {
  errcode?: int64(description='错误码', name='errcode'),
  errmsg?: string(description='错误描述', name='errmsg'),
  result?: [
    {
      duration?: int64(description='直播时长', name='duration'),
      startTime?: int64(description='直播开始时间', name='start_time'),
      title?: string(description='直播标题', name='title'),
      userid?: string(description='主播userId', name='userid'),
      liveUuid?: string(description='直播id', name='live_uuid'),
      shareFrom?: boolean(description='true为被联播群，false为主群', name='share_from'),
    }
  ](description='直播列表', name='result'),
}

model ListbytimeOapiLiveGroupliveResponse = {
  headers: map[string]string,
  body: ListbytimeOapiLiveGroupliveResponseBody,
}

/**
 * Description: 根据时间范围查询群直播信息
 */
async function listbytimeOapiLiveGrouplive(request: ListbytimeOapiLiveGroupliveRequest): ListbytimeOapiLiveGroupliveResponse {
  var runtime = new Util.RuntimeOptions{};
  return listbytimeOapiLiveGroupliveEx(request, runtime);
}

/**
 * Description: 根据时间范围查询群直播信息
 */
async function listbytimeOapiLiveGroupliveEx(request: ListbytimeOapiLiveGroupliveRequest, runtime: Util.RuntimeOptions): ListbytimeOapiLiveGroupliveResponse {
  Util.validateModel(request);
  var appParams = Util.stringifyMapValue(Util.toMap(request.params));
  return doRequestOApi('POST', '/topapi/live/grouplive/listbytime', request.headers, appParams, runtime);
}

model DownloadOapiProcessinstanceFileParams = {
  agentId: int64(description='企业应用标识', name='agent_id'),
  processInstanceId: string(description='流程实例id', name='process_instance_id'),
  fileId: string(description='文件id', name='file_id'),
}

model DownloadOapiProcessinstanceFileRequest = {
  headers?: map[string]string,
  params:DownloadOapiProcessinstanceFileParams,
}

model DownloadOapiProcessinstanceFileResponseBody = {
  result?: {
    authCode?: string(description='临时授权码', name='auth_code'),
    spaceId?: int64(description='钉盘空间id', name='space_id'),
  }(description='返回数据', name='result'),
  errcode?: int64(description='错误码', name='errcode'),
  errmsg?: string(description='错误信息', name='errmsg'),
  success?: boolean(description='成功标识', name='success'),
}

model DownloadOapiProcessinstanceFileResponse = {
  headers: map[string]string,
  body: DownloadOapiProcessinstanceFileResponseBody,
}

/**
 * Description: 获取审批单文件下载授权
 */
async function downloadOapiProcessinstanceFile(request: DownloadOapiProcessinstanceFileRequest): DownloadOapiProcessinstanceFileResponse {
  var runtime = new Util.RuntimeOptions{};
  return downloadOapiProcessinstanceFileEx(request, runtime);
}

/**
 * Description: 获取审批单文件下载授权
 */
async function downloadOapiProcessinstanceFileEx(request: DownloadOapiProcessinstanceFileRequest, runtime: Util.RuntimeOptions): DownloadOapiProcessinstanceFileResponse {
  Util.validateModel(request);
  var appParams = Util.stringifyMapValue(Util.toMap(request.params));
  return doRequestOApi('POST', '/topapi/processinstance/file/download', request.headers, appParams, runtime);
}

model InfoOapiProcessinstanceCspaceParams = {
  userId: string(description='用户id', name='user_id'),
  agentId?: int64(description='企业应用标识(ISV调用必须设置)', name='agent_id'),
}

model InfoOapiProcessinstanceCspaceRequest = {
  headers?: map[string]string,
  params:InfoOapiProcessinstanceCspaceParams,
}

model InfoOapiProcessinstanceCspaceResponseBody = {
  result?: {
    spaceId?: int64(description='钉盘空间id', name='space_id'),
  }(description='返回结果', name='result'),
  errcode?: int64(description='错误码', name='errcode'),
  errmsg?: string(description='错误信息', name='errmsg'),
  success?: boolean(description='成功标识', name='success'),
}

model InfoOapiProcessinstanceCspaceResponse = {
  headers: map[string]string,
  body: InfoOapiProcessinstanceCspaceResponseBody,
}

/**
 * Description: 查询审批钉盘空间信息
 */
async function infoOapiProcessinstanceCspace(request: InfoOapiProcessinstanceCspaceRequest): InfoOapiProcessinstanceCspaceResponse {
  var runtime = new Util.RuntimeOptions{};
  return infoOapiProcessinstanceCspaceEx(request, runtime);
}

/**
 * Description: 查询审批钉盘空间信息
 */
async function infoOapiProcessinstanceCspaceEx(request: InfoOapiProcessinstanceCspaceRequest, runtime: Util.RuntimeOptions): InfoOapiProcessinstanceCspaceResponse {
  Util.validateModel(request);
  var appParams = Util.stringifyMapValue(Util.toMap(request.params));
  return doRequestOApi('POST', '/topapi/processinstance/cspace/info', request.headers, appParams, runtime);
}

model UpdateOapiSmartdeviceFacegroupMemberParams = {
  bizId: string(description='业务id', maxLength=23, name='biz_id'),
  addUserIds?: [ string ](description='需新增的用户id列表', maxItems=100, name='add_user_ids'),
  delUserIds?: [ string ](description='需移除的用户id列表', maxItems=100, name='del_user_ids'),
}

model UpdateOapiSmartdeviceFacegroupMemberRequest = {
  headers?: map[string]string,
  params:UpdateOapiSmartdeviceFacegroupMemberParams,
}

model UpdateOapiSmartdeviceFacegroupMemberResponseBody = {
  result?: boolean(description='操作结果：true代表更新成功', name='result'),
  errcode?: int64(description='错误代号', name='errcode'),
  errmsg?: string(description='错误提示', name='errmsg'),
  success?: boolean(description='调用结果', name='success'),
}

model UpdateOapiSmartdeviceFacegroupMemberResponse = {
  headers: map[string]string,
  body: UpdateOapiSmartdeviceFacegroupMemberResponseBody,
}

/**
 * Description: 更新人脸识别组的人员，如新增人员、移除人员
 */
async function updateOapiSmartdeviceFacegroupMember(request: UpdateOapiSmartdeviceFacegroupMemberRequest): UpdateOapiSmartdeviceFacegroupMemberResponse {
  var runtime = new Util.RuntimeOptions{};
  return updateOapiSmartdeviceFacegroupMemberEx(request, runtime);
}

/**
 * Description: 更新人脸识别组的人员，如新增人员、移除人员
 */
async function updateOapiSmartdeviceFacegroupMemberEx(request: UpdateOapiSmartdeviceFacegroupMemberRequest, runtime: Util.RuntimeOptions): UpdateOapiSmartdeviceFacegroupMemberResponse {
  Util.validateModel(request);
  var appParams = Util.stringifyMapValue(Util.toMap(request.params));
  return doRequestOApi('POST', '/topapi/smartdevice/facegroup/member/update', request.headers, appParams, runtime);
}

model ListOapiSmartdeviceFacegroupMemberParams = {
  bizId: string(description='业务id', maxLength=23, name='biz_id'),
  cursor: int64(description='游标，第一次传 <=0的值，后续传本调用的返回值', name='cursor'),
  size: int64(description='分页大小', maximum=500, minimum=1, name='size'),
}

model ListOapiSmartdeviceFacegroupMemberRequest = {
  headers?: map[string]string,
  params:ListOapiSmartdeviceFacegroupMemberParams,
}

model ListOapiSmartdeviceFacegroupMemberResponseBody = {
  result?: {
    items?: [ string ](description='已在识别组的用户ids', name='items'),
    cursor?: int64(description='游标，下一次请求需要传入的下一次请求时需传入的游标值', name='cursor'),
    hasMore?: boolean(description='是否还有下一页数据', name='has_more'),
  }(description='符合条件的当前页数据', name='result'),
  errcode?: int64(description='错误代号', name='errcode'),
  errmsg?: string(description='错误提示', name='errmsg'),
  success?: boolean(description='API调用结果', name='success'),
}

model ListOapiSmartdeviceFacegroupMemberResponse = {
  headers: map[string]string,
  body: ListOapiSmartdeviceFacegroupMemberResponseBody,
}

/**
 * Description: 查询已在识别组的人员列表
 */
async function listOapiSmartdeviceFacegroupMember(request: ListOapiSmartdeviceFacegroupMemberRequest): ListOapiSmartdeviceFacegroupMemberResponse {
  var runtime = new Util.RuntimeOptions{};
  return listOapiSmartdeviceFacegroupMemberEx(request, runtime);
}

/**
 * Description: 查询已在识别组的人员列表
 */
async function listOapiSmartdeviceFacegroupMemberEx(request: ListOapiSmartdeviceFacegroupMemberRequest, runtime: Util.RuntimeOptions): ListOapiSmartdeviceFacegroupMemberResponse {
  Util.validateModel(request);
  var appParams = Util.stringifyMapValue(Util.toMap(request.params));
  return doRequestOApi('POST', '/topapi/smartdevice/facegroup/member/list', request.headers, appParams, runtime);
}

model UpdateOapiSmartdeviceFacegroupDeviceParams = {
  bizId: string(description='业务id', maxLength=23, name='biz_id'),
  addDeviceIds?: [ int64 ](description='需新增的设备id列表', maxItems=20, name='add_device_ids'),
  delDeviceIds?: [ int64 ](description='需移除的设备id列表', maxItems=20, name='del_device_ids'),
}

model UpdateOapiSmartdeviceFacegroupDeviceRequest = {
  headers?: map[string]string,
  params:UpdateOapiSmartdeviceFacegroupDeviceParams,
}

model UpdateOapiSmartdeviceFacegroupDeviceResponseBody = {
  result?: boolean(description='操作结果：为true代表更新成功', name='result'),
  errcode?: int64(description='错误代号', name='errcode'),
  errmsg?: string(description='错误提示', name='errmsg'),
  success?: boolean(description='调用结果', name='success'),
}

model UpdateOapiSmartdeviceFacegroupDeviceResponse = {
  headers: map[string]string,
  body: UpdateOapiSmartdeviceFacegroupDeviceResponseBody,
}

/**
 * Description: 更新人脸识别组绑定是设备，如新增、移除关联的设备
 */
async function updateOapiSmartdeviceFacegroupDevice(request: UpdateOapiSmartdeviceFacegroupDeviceRequest): UpdateOapiSmartdeviceFacegroupDeviceResponse {
  var runtime = new Util.RuntimeOptions{};
  return updateOapiSmartdeviceFacegroupDeviceEx(request, runtime);
}

/**
 * Description: 更新人脸识别组绑定是设备，如新增、移除关联的设备
 */
async function updateOapiSmartdeviceFacegroupDeviceEx(request: UpdateOapiSmartdeviceFacegroupDeviceRequest, runtime: Util.RuntimeOptions): UpdateOapiSmartdeviceFacegroupDeviceResponse {
  Util.validateModel(request);
  var appParams = Util.stringifyMapValue(Util.toMap(request.params));
  return doRequestOApi('POST', '/topapi/smartdevice/facegroup/device/update', request.headers, appParams, runtime);
}

model GetOapiLiveGroupliveDetailParams = {
  req: {
    liveUuid: string(description='群直播id', name='live_uuid'),
    deptId: int64(description='直播所属群对应部门id', name='dept_id'),
  }(description='群直播详情请求', name='req'),
}

model GetOapiLiveGroupliveDetailRequest = {
  headers?: map[string]string,
  params:GetOapiLiveGroupliveDetailParams,
}

model GetOapiLiveGroupliveDetailResponseBody = {
  result?: {
    groupLiveViewers?: [
      {
        playRecordDuration?: int64(description='回放观看时长', name='play_record_duration'),
        playDuration?: int64(description='直播观看时长', name='play_duration'),
        userid?: string(description='观看用户userid', name='userid'),
      }
    ](description='查看人员列表', name='group_live_viewers'),
    liveShareUrl?: string(description='群直播分享url', name='live_share_url'),
    unviewedCount?: int64(description='未看人数', name='unviewed_count'),
    viewerCount?: int64(description='已看人数', name='viewer_count'),
    messageCount?: int64(description='消息数', name='message_count'),
    praiseCount?: int64(description='点赞数', name='praise_count'),
    pv?: int64(description='直播观看人次', name='pv'),
  }(description='直播详情', name='result'),
  errmsg?: string(description='错误描述', name='errmsg'),
  errcode?: int64(description='错误码', name='errcode'),
}

model GetOapiLiveGroupliveDetailResponse = {
  headers: map[string]string,
  body: GetOapiLiveGroupliveDetailResponseBody,
}

/**
 * Description: 查询直播详情信息
 */
async function getOapiLiveGroupliveDetail(request: GetOapiLiveGroupliveDetailRequest): GetOapiLiveGroupliveDetailResponse {
  var runtime = new Util.RuntimeOptions{};
  return getOapiLiveGroupliveDetailEx(request, runtime);
}

/**
 * Description: 查询直播详情信息
 */
async function getOapiLiveGroupliveDetailEx(request: GetOapiLiveGroupliveDetailRequest, runtime: Util.RuntimeOptions): GetOapiLiveGroupliveDetailResponse {
  Util.validateModel(request);
  var appParams = Util.stringifyMapValue(Util.toMap(request.params));
  return doRequestOApi('POST', '/topapi/live/grouplive/detail/get', request.headers, appParams, runtime);
}

model ListOapiSmartdeviceFacegroupDeviceParams = {
  bizId: string(description='业务id', maxLength=23, name='biz_id'),
  size: int64(description='分页大小', maximum=20, minimum=1, name='size'),
  mode: string(description='查询模式：all-企业所有设备；bound-本组已关联设备', name='mode'),
  type: string(description='需查询的设备类型', name='type'),
  cursor: int64(description='游标，第一次传 <=0的值，后续传本调用的返回值', name='cursor'),
}

model ListOapiSmartdeviceFacegroupDeviceRequest = {
  headers?: map[string]string,
  params:ListOapiSmartdeviceFacegroupDeviceParams,
}

model ListOapiSmartdeviceFacegroupDeviceResponseBody = {
  result?: {
    items?: [
      {
        status?: boolean(description='是否启用识别（查询已绑定记录时有效）', name='status'),
        used?: boolean(description='是否已被使用（含被本组关联）', name='used'),
        online?: boolean(description='在线是否在线', name='online'),
        type?: string(description='设备类型', name='type'),
        name?: string(description='设备名称', name='name'),
        deviceId?: int64(description='设备id', name='device_id'),
      }
    ](description='符合条件的设备', name='items'),
    cursor?: int64(description='游标，下一次请求需要传入的下一次请求时需传入的游标值', name='cursor'),
    hasMore?: boolean(description='是否还有下一页数据', name='has_more'),
  }(description='符合条件的当前页数据', name='result'),
  success?: boolean(description='调用结果', name='success'),
  errcode?: int64(description='错误代号', name='errcode'),
  errmsg?: string(description='错误提示', name='errmsg'),
}

model ListOapiSmartdeviceFacegroupDeviceResponse = {
  headers: map[string]string,
  body: ListOapiSmartdeviceFacegroupDeviceResponseBody,
}

/**
 * Description: 查询人脸设备列表，可选择查询已关联设备列表、或企业已有设备的列表
 */
async function listOapiSmartdeviceFacegroupDevice(request: ListOapiSmartdeviceFacegroupDeviceRequest): ListOapiSmartdeviceFacegroupDeviceResponse {
  var runtime = new Util.RuntimeOptions{};
  return listOapiSmartdeviceFacegroupDeviceEx(request, runtime);
}

/**
 * Description: 查询人脸设备列表，可选择查询已关联设备列表、或企业已有设备的列表
 */
async function listOapiSmartdeviceFacegroupDeviceEx(request: ListOapiSmartdeviceFacegroupDeviceRequest, runtime: Util.RuntimeOptions): ListOapiSmartdeviceFacegroupDeviceResponse {
  Util.validateModel(request);
  var appParams = Util.stringifyMapValue(Util.toMap(request.params));
  return doRequestOApi('POST', '/topapi/smartdevice/facegroup/device/list', request.headers, appParams, runtime);
}

model GetOapiSmartdeviceFacegroupParams = {
  bizId: string(description='业务id', maxLength=23, name='biz_id'),
}

model GetOapiSmartdeviceFacegroupRequest = {
  headers?: map[string]string,
  params:GetOapiSmartdeviceFacegroupParams,
}

model GetOapiSmartdeviceFacegroupResponseBody = {
  result?: {
    greetingMsg?: string(description='识别成功后的问候语', name='greeting_msg'),
    bgImgUrl?: string(description='M2上的定制UI', name='bg_img_url'),
    status?: int64(description='识别组启用状态：1-已启用；2未启用；', name='status'),
    endTime?: int64(description='结束时间', name='end_time'),
    startTime?: int64(description='开始时间', name='start_time'),
    title?: string(description='识别组的标题', name='title'),
    bizId?: string(description='业务id', name='biz_id'),
  }(description='查询结果', name='result'),
  errcode?: int64(description='错误代号', name='errcode'),
  errmsg?: string(description='错误提示', name='errmsg'),
  success?: boolean(description='API调用结果', name='success'),
}

model GetOapiSmartdeviceFacegroupResponse = {
  headers: map[string]string,
  body: GetOapiSmartdeviceFacegroupResponseBody,
}

/**
 * Description: 通过业务id查询识别组基础信息
 */
async function getOapiSmartdeviceFacegroup(request: GetOapiSmartdeviceFacegroupRequest): GetOapiSmartdeviceFacegroupResponse {
  var runtime = new Util.RuntimeOptions{};
  return getOapiSmartdeviceFacegroupEx(request, runtime);
}

/**
 * Description: 通过业务id查询识别组基础信息
 */
async function getOapiSmartdeviceFacegroupEx(request: GetOapiSmartdeviceFacegroupRequest, runtime: Util.RuntimeOptions): GetOapiSmartdeviceFacegroupResponse {
  Util.validateModel(request);
  var appParams = Util.stringifyMapValue(Util.toMap(request.params));
  return doRequestOApi('POST', '/topapi/smartdevice/facegroup/get', request.headers, appParams, runtime);
}

model CreateOapiSmartdeviceFacegroupParams = {
  bizId: string(description='业务id【不区分大小写】：调用方内保证唯一即可，可容纳23个字符，推荐前三个字符表示业务编号，留19个字符存储业务的记录id', maxLength=23, name='biz_id'),
  title: string(description='识别组的标题', maxLength=32, name='title'),
  startTime: int64(description='开始时间', name='start_time'),
  endTime: int64(description='结束时间', name='end_time'),
  status: int64(description='识别组启用状态：1-已启用；2未启用；', maximum=2, minimum=1, name='status'),
  greetingMsg?: string(description='识别成功后的问候语', maxLength=16, name='greeting_msg'),
  bgImgUrl?: string(description='M2上的定制UI', maxLength=512, name='bg_img_url'),
}

model CreateOapiSmartdeviceFacegroupRequest = {
  headers?: map[string]string,
  params:CreateOapiSmartdeviceFacegroupParams,
}

model CreateOapiSmartdeviceFacegroupResponseBody = {
  result?: boolean(description='创建结果：为true时代表创建成功', name='result'),
  errcode?: int64(description='错误代号', name='errcode'),
  errmsg?: string(description='错误提示', name='errmsg'),
  success?: boolean(description='API调用结果', name='success'),
}

model CreateOapiSmartdeviceFacegroupResponse = {
  headers: map[string]string,
  body: CreateOapiSmartdeviceFacegroupResponseBody,
}

/**
 * Description: 创建人脸识别组基础信息
 */
async function createOapiSmartdeviceFacegroup(request: CreateOapiSmartdeviceFacegroupRequest): CreateOapiSmartdeviceFacegroupResponse {
  var runtime = new Util.RuntimeOptions{};
  return createOapiSmartdeviceFacegroupEx(request, runtime);
}

/**
 * Description: 创建人脸识别组基础信息
 */
async function createOapiSmartdeviceFacegroupEx(request: CreateOapiSmartdeviceFacegroupRequest, runtime: Util.RuntimeOptions): CreateOapiSmartdeviceFacegroupResponse {
  Util.validateModel(request);
  var appParams = Util.stringifyMapValue(Util.toMap(request.params));
  return doRequestOApi('POST', '/topapi/smartdevice/facegroup/create', request.headers, appParams, runtime);
}

model UpdateOapiSmartdeviceFacegroupParams = {
  bizId: string(description='业务id', maxLength=23, name='biz_id'),
  title: string(description='识别组的标题', maxLength=32, name='title'),
  startTime: int64(description='开始时间', name='start_time'),
  endTime: int64(description='结束时间', name='end_time'),
  status: int64(description='识别组启用状态：1-已启用；2未启用；', maximum=2, minimum=1, name='status'),
  greetingMsg?: string(description='识别成功后的问候语', maxLength=16, name='greeting_msg'),
  bgImgUrl?: string(description='M2上的定制UI', maxLength=512, name='bg_img_url'),
}

model UpdateOapiSmartdeviceFacegroupRequest = {
  headers?: map[string]string,
  params:UpdateOapiSmartdeviceFacegroupParams,
}

model UpdateOapiSmartdeviceFacegroupResponseBody = {
  result?: boolean(description='更新结果：为true时代表更新成功', name='result'),
  errcode?: int64(description='错误代号', name='errcode'),
  errmsg?: string(description='错误提示', name='errmsg'),
  success?: boolean(description='API调用结果', name='success'),
}

model UpdateOapiSmartdeviceFacegroupResponse = {
  headers: map[string]string,
  body: UpdateOapiSmartdeviceFacegroupResponseBody,
}

/**
 * Description: 更新人脸识别组基础信息
 */
async function updateOapiSmartdeviceFacegroup(request: UpdateOapiSmartdeviceFacegroupRequest): UpdateOapiSmartdeviceFacegroupResponse {
  var runtime = new Util.RuntimeOptions{};
  return updateOapiSmartdeviceFacegroupEx(request, runtime);
}

/**
 * Description: 更新人脸识别组基础信息
 */
async function updateOapiSmartdeviceFacegroupEx(request: UpdateOapiSmartdeviceFacegroupRequest, runtime: Util.RuntimeOptions): UpdateOapiSmartdeviceFacegroupResponse {
  Util.validateModel(request);
  var appParams = Util.stringifyMapValue(Util.toMap(request.params));
  return doRequestOApi('POST', '/topapi/smartdevice/facegroup/update', request.headers, appParams, runtime);
}

model EnableOapiSmartdeviceFacegroupParams = {
  bizId: string(description='业务id', maxLength=23, name='biz_id'),
  enable: boolean(description='true-启用识别；false-禁用识别', name='enable'),
  deviceIds?: [ int64 ](description='设备id列表', maxItems=20, name='device_ids'),
}

model EnableOapiSmartdeviceFacegroupRequest = {
  headers?: map[string]string,
  params:EnableOapiSmartdeviceFacegroupParams,
}

model EnableOapiSmartdeviceFacegroupResponseBody = {
  result?: boolean(description='启用/禁用操作结果：为true时代表操作成功', name='result'),
  errcode?: int64(description='错误代号', name='errcode'),
  errmsg?: string(description='错误提示', name='errmsg'),
  success?: boolean(description='API调用结果', name='success'),
}

model EnableOapiSmartdeviceFacegroupResponse = {
  headers: map[string]string,
  body: EnableOapiSmartdeviceFacegroupResponseBody,
}

/**
 * Description: 启用/禁用当前识别组的人脸识别功能
 */
async function enableOapiSmartdeviceFacegroup(request: EnableOapiSmartdeviceFacegroupRequest): EnableOapiSmartdeviceFacegroupResponse {
  var runtime = new Util.RuntimeOptions{};
  return enableOapiSmartdeviceFacegroupEx(request, runtime);
}

/**
 * Description: 启用/禁用当前识别组的人脸识别功能
 */
async function enableOapiSmartdeviceFacegroupEx(request: EnableOapiSmartdeviceFacegroupRequest, runtime: Util.RuntimeOptions): EnableOapiSmartdeviceFacegroupResponse {
  Util.validateModel(request);
  var appParams = Util.stringifyMapValue(Util.toMap(request.params));
  return doRequestOApi('POST', '/topapi/smartdevice/facegroup/enable', request.headers, appParams, runtime);
}

model RemoveallOapiSmartdeviceFacegroupParams = {
  bizId: string(description='业务id', maxLength=23, name='biz_id'),
}

model RemoveallOapiSmartdeviceFacegroupRequest = {
  headers?: map[string]string,
  params:RemoveallOapiSmartdeviceFacegroupParams,
}

model RemoveallOapiSmartdeviceFacegroupResponseBody = {
  result?: boolean(description='删除结果：为true时代表操作成功', name='result'),
  errcode?: int64(description='错误代号', name='errcode'),
  errmsg?: string(description='错误提示', name='errmsg'),
  success?: boolean(description='API调用结果', name='success'),
}

model RemoveallOapiSmartdeviceFacegroupResponse = {
  headers: map[string]string,
  body: RemoveallOapiSmartdeviceFacegroupResponseBody,
}

/**
 * Description: 删除人脸识别组，并解绑关联数据（人员、M2绑定关系等）
 */
async function removeallOapiSmartdeviceFacegroup(request: RemoveallOapiSmartdeviceFacegroupRequest): RemoveallOapiSmartdeviceFacegroupResponse {
  var runtime = new Util.RuntimeOptions{};
  return removeallOapiSmartdeviceFacegroupEx(request, runtime);
}

/**
 * Description: 删除人脸识别组，并解绑关联数据（人员、M2绑定关系等）
 */
async function removeallOapiSmartdeviceFacegroupEx(request: RemoveallOapiSmartdeviceFacegroupRequest, runtime: Util.RuntimeOptions): RemoveallOapiSmartdeviceFacegroupResponse {
  Util.validateModel(request);
  var appParams = Util.stringifyMapValue(Util.toMap(request.params));
  return doRequestOApi('POST', '/topapi/smartdevice/facegroup/removeall', request.headers, appParams, runtime);
}

model CreateSmartworkBpmsProcessinstanceParams = {
  agentId?: int64(description='企业微应用标识', name='agent_id'),
  processCode: string(description='审批流的唯一码', name='process_code'),
  originatorUserId: string(description='审批实例发起人的userid', name='originator_user_id'),
  deptId: int64(description='发起人所在的部门', name='dept_id'),
  approvers: [ string ](description='审批人userid列表', maxItems=20, name='approvers'),
  ccList?: [ string ](description='抄送人userid列表', maxItems=20, name='cc_list'),
  ccPosition?: string(description='抄送时间,分为（START,FINISH,START_FINISH）', name='cc_position'),
  formComponentValues: [
    {
      name: string(description='表单每一栏的名称', name='name'),
      value: string(description='表单每一栏的值', name='value'),
      extValue?: string(description='扩展值', name='ext_value'),
    }
  ](description='审批流表单参数', maxItems=20, name='form_component_values'),
}

model CreateSmartworkBpmsProcessinstanceRequest = {
  headers?: map[string]string,
  params:CreateSmartworkBpmsProcessinstanceParams,
}

model CreateSmartworkBpmsProcessinstanceResponseBody = {
  result?: {
    dingOpenErrcode?: int64(description='dingOpenErrcode', name='ding_open_errcode'),
    errorMsg?: string(description='errorMsg', name='error_msg'),
    isSuccess?: boolean(description='success', name='is_success'),
    processInstanceId?: string(description='审批实例id', name='process_instance_id'),
  }(description='result', name='result'),
}

model CreateSmartworkBpmsProcessinstanceResponse = {
  headers: map[string]string,
  body: CreateSmartworkBpmsProcessinstanceResponseBody,
}

/**
 * Description: 企业或isv调用该api，来发起一个审批实例
 */
async function createSmartworkBpmsProcessinstance(request: CreateSmartworkBpmsProcessinstanceRequest): CreateSmartworkBpmsProcessinstanceResponse {
  var runtime = new Util.RuntimeOptions{};
  return createSmartworkBpmsProcessinstanceEx(request, runtime);
}

/**
 * Description: 企业或isv调用该api，来发起一个审批实例
 */
async function createSmartworkBpmsProcessinstanceEx(request: CreateSmartworkBpmsProcessinstanceRequest, runtime: Util.RuntimeOptions): CreateSmartworkBpmsProcessinstanceResponse {
  Util.validateModel(request);
  var appParams = Util.stringifyMapValue(Util.toMap(request.params));
  return doRequest('dingtalk.smartwork.bpms.processinstance.create', 'POST', '/router/rest', request.headers, appParams, runtime);
}

model GetroleOapiRoleParams = {
  roleId: int64(description='角色id', name='roleId'),
}

model GetroleOapiRoleRequest = {
  headers?: map[string]string,
  params:GetroleOapiRoleParams,
}

model GetroleOapiRoleResponseBody = {
  role?: {
    name?: string(description='角色名称', name='name'),
    groupId?: int64(description='角色组id', name='groupId'),
  }(description='result', name='role'),
  errcode?: int64(description='dingOpenErrcode', name='errcode'),
  errmsg?: string(description='errorMsg', name='errmsg'),
}

model GetroleOapiRoleResponse = {
  headers: map[string]string,
  body: GetroleOapiRoleResponseBody,
}

/**
 * Description: 获取角色详情
 */
async function getroleOapiRole(request: GetroleOapiRoleRequest): GetroleOapiRoleResponse {
  var runtime = new Util.RuntimeOptions{};
  return getroleOapiRoleEx(request, runtime);
}

/**
 * Description: 获取角色详情
 */
async function getroleOapiRoleEx(request: GetroleOapiRoleRequest, runtime: Util.RuntimeOptions): GetroleOapiRoleResponse {
  Util.validateModel(request);
  var appParams = Util.stringifyMapValue(Util.toMap(request.params));
  return doRequestOApi('POST', '/topapi/role/getrole', request.headers, appParams, runtime);
}

model Asyncsend_v2OapiMessageCorpconversationParams = {
  agentId: int64(description='微应用的id', name='agent_id'),
  useridList?: [ string ](description='接收者的用户userid列表', maxItems=5000, name='userid_list'),
  deptIdList?: [ int64 ](description='接收者的部门id列表', maxItems=500, name='dept_id_list'),
  toAllUser?: boolean(description='是否发送给企业全部用户', name='to_all_user'),
  msg: {
    msgtype: string(description='消息类型', name='msgtype'),
    text?: {
      content?: string(description='文本消息', name='content'),
    }(description='文本消息', name='text'),
    image?: {
      mediaId?: string(description='图片消息', name='media_id'),
    }(description='图片消息', name='image'),
    link?: {
      picUrl?: string(description='消息点击链接地址，当发送消息为小程序时支持小程序跳转链接', name='picUrl'),
      messageUrl?: string(description='图片地址', name='messageUrl'),
      text?: string(description='消息标题，建议100字符以内', name='text'),
      title?: string(description='消息描述，建议500字符以内', name='title'),
    }(description='链接消息', name='link'),
    file?: {
      mediaId?: string(description='媒体文件id。引用的媒体文件最大10MB', name='media_id'),
    }(description='文件消息', name='file'),
    voice?: {
      duration?: string(description='正整数，小于60，表示音频时长', name='duration'),
      mediaId?: string(description='媒体文件id。2MB，播放长度不超过60s，AMR格式', name='media_id'),
    }(description='语音消息', name='voice'),
    oa?: {
      body?: {
        author?: string(description='自定义的作者名字', name='author'),
        fileCount?: string(description='自定义的附件数目。此数字仅供显示，钉钉不作验证', name='file_count'),
        image?: string(description='消息体中的图片，支持图片资源@mediaId', name='image'),
        content?: string(description='消息体的内容，最多显示3行', name='content'),
        rich?: {
          unit?: string(description='单行富文本信息的单位', name='unit'),
          num?: string(description='单行富文本信息的数目', name='num'),
        }(description='单行富文本信息', name='rich'),
        form?: [
          {
            value?: string(description='消息体的关键字对应的值', name='value'),
            key?: string(description='消息体的关键字', name='key'),
          }
        ](description='消息体的表单，最多显示6个，超过会被隐藏', maxItems=20, name='form'),
        title?: string(description='消息体的标题，建议50个字符以内', name='title'),
      }(description='消息体', name='body'),
      head?: {
        bgcolor?: string(description='消息头部的背景颜色。长度限制为8个英文字符，其中前2为表示透明度，后6位表示颜色值。不要添加0x', name='bgcolor'),
        text?: string(description='消息的头部标题 (向普通会话发送时有效，向企业会话发送时会被替换为微应用的名字)，长度限制为最多10个字符', name='text'),
      }(description='消息头部内容', name='head'),
      pcMessageUrl?: string(description='PC端点击消息时跳转到的地址', name='pc_message_url'),
      messageUrl?: string(description='消息点击链接地址，当发送消息为小程序时支持小程序跳转链接', name='message_url'),
    }(description='OA消息', name='oa'),
    markdown?: {
      text?: string(description='markdown格式的消息，建议500字符以内', name='text'),
      title?: string(description='首屏会话透出的展示内容', name='title'),
    }(description='markdown消息', name='markdown'),
    actionCard?: {
      btnJsonList?: [
        {
          actionUrl?: string(description='消息点击链接地址，当发送消息为小程序时支持小程序跳转链接，最长500个字符', name='action_url'),
          title?: string(description='使用独立跳转ActionCard样式时的按钮的标题，最长20个字符', name='title'),
        }
      ](description='使用独立跳转ActionCard样式时的按钮列表；必须与btn_orientation同时设置', maxItems=20, name='btn_json_list'),
      btnOrientation?: string(description='使用独立跳转ActionCard样式时的按钮排列方式，竖直排列(0)，横向排列(1)；必须与btn_json_list同时设置', name='btn_orientation'),
      singleUrl?: string(description='消息点击链接地址，当发送消息为小程序时支持小程序跳转链接，最长500个字符', name='single_url'),
      singleTitle?: string(description='使用整体跳转ActionCard样式时的标题，必须与single_url同时设置，最长20个字符', name='single_title'),
      markdown?: string(description='消息内容，支持markdown，语法参考标准markdown语法。建议1000个字符以内', name='markdown'),
      title?: string(description='透出到会话列表和通知的文案，最长64个字符', name='title'),
    }(description='卡片消息', name='action_card'),
  }(description='消息体，具体见文档', name='msg'),
}

model Asyncsend_v2OapiMessageCorpconversationRequest = {
  headers?: map[string]string,
  params:Asyncsend_v2OapiMessageCorpconversationParams,
}

model Asyncsend_v2OapiMessageCorpconversationResponseBody = {
  errmsg?: string(description='errorMsg', name='errmsg'),
  errcode?: int64(description='错误码', name='errcode'),
  taskId?: int64(description='创建的异步发送任务id', name='task_id'),
}

model Asyncsend_v2OapiMessageCorpconversationResponse = {
  headers: map[string]string,
  body: Asyncsend_v2OapiMessageCorpconversationResponseBody,
}

/**
 * Description: 企业会话消息异步发送接口
 */
async function asyncsend_v2OapiMessageCorpconversation(request: Asyncsend_v2OapiMessageCorpconversationRequest): Asyncsend_v2OapiMessageCorpconversationResponse {
  var runtime = new Util.RuntimeOptions{};
  return asyncsend_v2OapiMessageCorpconversationEx(request, runtime);
}

/**
 * Description: 企业会话消息异步发送接口
 */
async function asyncsend_v2OapiMessageCorpconversationEx(request: Asyncsend_v2OapiMessageCorpconversationRequest, runtime: Util.RuntimeOptions): Asyncsend_v2OapiMessageCorpconversationResponse {
  Util.validateModel(request);
  var appParams = Util.stringifyMapValue(Util.toMap(request.params));
  return doRequestOApi('POST', '/topapi/message/corpconversation/asyncsend_v2', request.headers, appParams, runtime);
}

model UpdateOapiOpenencryptEncryptboxStatusParams = {
  topEncryptBoxStatus: {
    requestId: string(description='请求的id', name='request_id'),
    corpId: string(description='组织的id', name='corp_id'),
    status: int64(description='加密盒子状态，1表示盒子掉线，2表示盒子上线，3表示企业之前有盒子，现在变成了无盒子的状态', name='status'),
    appid: int64(description='微应用的id', name='appid'),
    extension?: string(description='附加信息，方便扩展', name='extension'),
  }(description='请求参数', name='top_encrypt_box_status'),
}

model UpdateOapiOpenencryptEncryptboxStatusRequest = {
  headers?: map[string]string,
  params:UpdateOapiOpenencryptEncryptboxStatusParams,
}

model UpdateOapiOpenencryptEncryptboxStatusResponseBody = {
  errmsg?: string(description='错误消息', name='errmsg'),
  errcode?: int64(description='内部错误', name='errcode'),
  success?: boolean(description='误接口状态标记', name='success'),
  result?: string(description='一般是空字符串', name='result'),
}

model UpdateOapiOpenencryptEncryptboxStatusResponse = {
  headers: map[string]string,
  body: UpdateOapiOpenencryptEncryptboxStatusResponseBody,
}

/**
 * Description: 用于更新加密盒子状态，1表示盒子掉线，2表示盒子上线，3表示企业之前有盒子，现在变成了无盒子的状态
 */
async function updateOapiOpenencryptEncryptboxStatus(request: UpdateOapiOpenencryptEncryptboxStatusRequest): UpdateOapiOpenencryptEncryptboxStatusResponse {
  var runtime = new Util.RuntimeOptions{};
  return updateOapiOpenencryptEncryptboxStatusEx(request, runtime);
}

/**
 * Description: 用于更新加密盒子状态，1表示盒子掉线，2表示盒子上线，3表示企业之前有盒子，现在变成了无盒子的状态
 */
async function updateOapiOpenencryptEncryptboxStatusEx(request: UpdateOapiOpenencryptEncryptboxStatusRequest, runtime: Util.RuntimeOptions): UpdateOapiOpenencryptEncryptboxStatusResponse {
  Util.validateModel(request);
  var appParams = Util.stringifyMapValue(Util.toMap(request.params));
  return doRequestOApi('POST', '/topapi/openencrypt/encryptbox/status/update', request.headers, appParams, runtime);
}

model CancelOapiWorkspaceTasklistHiddenParams = {
  agentid?: int64(description='微应用agentId', name='agentid'),
  operatorUserid: string(description='操作者id', name='operator_userid'),
  userid: string(description='用户id', name='userid'),
}

model CancelOapiWorkspaceTasklistHiddenRequest = {
  headers?: map[string]string,
  params:CancelOapiWorkspaceTasklistHiddenParams,
}

model CancelOapiWorkspaceTasklistHiddenResponseBody = {
  errcode?: int64(description='错误码', name='errcode'),
  errmsg?: string(description='错误描述', name='errmsg'),
}

model CancelOapiWorkspaceTasklistHiddenResponse = {
  headers: map[string]string,
  body: CancelOapiWorkspaceTasklistHiddenResponseBody,
}

/**
 * Description: 取消任务隐藏限制，将某企业下用户新参与的任务加入用户任务列表（推荐使用场景：用户重新加入企业时调用）
 */
async function cancelOapiWorkspaceTasklistHidden(request: CancelOapiWorkspaceTasklistHiddenRequest): CancelOapiWorkspaceTasklistHiddenResponse {
  var runtime = new Util.RuntimeOptions{};
  return cancelOapiWorkspaceTasklistHiddenEx(request, runtime);
}

/**
 * Description: 取消任务隐藏限制，将某企业下用户新参与的任务加入用户任务列表（推荐使用场景：用户重新加入企业时调用）
 */
async function cancelOapiWorkspaceTasklistHiddenEx(request: CancelOapiWorkspaceTasklistHiddenRequest, runtime: Util.RuntimeOptions): CancelOapiWorkspaceTasklistHiddenResponse {
  Util.validateModel(request);
  var appParams = Util.stringifyMapValue(Util.toMap(request.params));
  return doRequestOApi('POST', '/topapi/workspace/tasklist/hidden/cancel', request.headers, appParams, runtime);
}

model CancelOapiTdpTasklistHiddenParams = {
  agentid?: int64(description='微应用agentId', name='agentid'),
  operatorUserid: string(description='操作者id', name='operator_userid'),
  userid: string(description='用户id', name='userid'),
}

model CancelOapiTdpTasklistHiddenRequest = {
  headers?: map[string]string,
  params:CancelOapiTdpTasklistHiddenParams,
}

model CancelOapiTdpTasklistHiddenResponseBody = {
  errcode?: int64(description='错误码', name='errcode'),
  errmsg?: string(description='错误描述', name='errmsg'),
}

model CancelOapiTdpTasklistHiddenResponse = {
  headers: map[string]string,
  body: CancelOapiTdpTasklistHiddenResponseBody,
}

/**
 * Description: 取消任务隐藏限制，将某企业下用户新参与的任务加入用户任务列表（推荐使用场景：用户重新加入企业时调用）
 */
async function cancelOapiTdpTasklistHidden(request: CancelOapiTdpTasklistHiddenRequest): CancelOapiTdpTasklistHiddenResponse {
  var runtime = new Util.RuntimeOptions{};
  return cancelOapiTdpTasklistHiddenEx(request, runtime);
}

/**
 * Description: 取消任务隐藏限制，将某企业下用户新参与的任务加入用户任务列表（推荐使用场景：用户重新加入企业时调用）
 */
async function cancelOapiTdpTasklistHiddenEx(request: CancelOapiTdpTasklistHiddenRequest, runtime: Util.RuntimeOptions): CancelOapiTdpTasklistHiddenResponse {
  Util.validateModel(request);
  var appParams = Util.stringifyMapValue(Util.toMap(request.params));
  return doRequestOApi('POST', '/topapi/tdp/tasklist/hidden/cancel', request.headers, appParams, runtime);
}

model CancelOapiRhinoMosExecPerformParams = {
  operationPerformRecordIds: [ int64 ](description='工序执行记录ID列表', maxItems=500, name='operation_perform_record_ids'),
  tenantId: string(description='租户ID列表', name='tenant_id'),
  userid?: string(description='系统参数', name='userid'),
  context?: string(description='执行上下文', name='context'),
  orderId?: int64(description='订单ID', name='order_id'),
  stopSchedule?: boolean(description='是否停止调度', name='stop_schedule'),
}

model CancelOapiRhinoMosExecPerformRequest = {
  headers?: map[string]string,
  params:CancelOapiRhinoMosExecPerformParams,
}

model CancelOapiRhinoMosExecPerformResponseBody = {
  errmsg?: string(description='错误信息', name='errmsg'),
  model?: boolean(description='操作结果', name='model'),
  success?: boolean(description='是否成功', name='success'),
  errcode?: int64(description='错误码', name='errcode'),
}

model CancelOapiRhinoMosExecPerformResponse = {
  headers: map[string]string,
  body: CancelOapiRhinoMosExecPerformResponseBody,
}

/**
 * Description: 取消工序执行
 */
async function cancelOapiRhinoMosExecPerform(request: CancelOapiRhinoMosExecPerformRequest): CancelOapiRhinoMosExecPerformResponse {
  var runtime = new Util.RuntimeOptions{};
  return cancelOapiRhinoMosExecPerformEx(request, runtime);
}

/**
 * Description: 取消工序执行
 */
async function cancelOapiRhinoMosExecPerformEx(request: CancelOapiRhinoMosExecPerformRequest, runtime: Util.RuntimeOptions): CancelOapiRhinoMosExecPerformResponse {
  Util.validateModel(request);
  var appParams = Util.stringifyMapValue(Util.toMap(request.params));
  return doRequestOApi('POST', '/topapi/rhino/mos/exec/perform/cancel', request.headers, appParams, runtime);
}

model CloseOapiCustomerserviceSessionParams = {
  closeSession: {
    buId: string(description='客服所在bu', name='bu_id'),
    operatorId: string(description='操作者id', name='operator_id'),
    reason: string(description='关闭原因，memberIsSilent/heartBeatBreak/memberCloseTheSession', name='reason'),
    sessionSource: string(description='会话来源', name='session_source'),
    sid: string(description='会话id', name='sid'),
  }(description='关闭会话', name='close_session'),
}

model CloseOapiCustomerserviceSessionRequest = {
  headers?: map[string]string,
  params:CloseOapiCustomerserviceSessionParams,
}

model CloseOapiCustomerserviceSessionResponseBody = {
  errcode?: int64(description='错误码', name='errcode'),
  errmsg?: string(description='错误信息', name='errmsg'),
  success?: boolean(description='是否成功', name='success'),
}

model CloseOapiCustomerserviceSessionResponse = {
  headers: map[string]string,
  body: CloseOapiCustomerserviceSessionResponseBody,
}

/**
 * Description: 提供给集团的BU，调用该接口，在客户服务的场景下，由客户主动关闭会话等场景
 */
async function closeOapiCustomerserviceSession(request: CloseOapiCustomerserviceSessionRequest): CloseOapiCustomerserviceSessionResponse {
  var runtime = new Util.RuntimeOptions{};
  return closeOapiCustomerserviceSessionEx(request, runtime);
}

/**
 * Description: 提供给集团的BU，调用该接口，在客户服务的场景下，由客户主动关闭会话等场景
 */
async function closeOapiCustomerserviceSessionEx(request: CloseOapiCustomerserviceSessionRequest, runtime: Util.RuntimeOptions): CloseOapiCustomerserviceSessionResponse {
  Util.validateModel(request);
  var appParams = Util.stringifyMapValue(Util.toMap(request.params));
  return doRequestOApi('POST', '/topapi/customerservice/session/close', request.headers, appParams, runtime);
}

model SetuserworkdataCorpHrmEmployeeParams = {
  opUserid: string(description='操作人userid，必须是拥有被操作人操作权限的管理员userid', name='op_userid'),
  hrmApiUserDataModel: {
    dataDesc?: string(description='数据项描述信息', name='data_desc'),
    userid: string(description='被操作人userid', name='userid'),
    dataValue: string(description='数据值,可以为数值或者字符串', name='data_value'),
  }(description='员工信息对象，被操作人userid是必填', name='hrm_api_user_data_model'),
}

model SetuserworkdataCorpHrmEmployeeRequest = {
  headers?: map[string]string,
  params:SetuserworkdataCorpHrmEmployeeParams,
}

model SetuserworkdataCorpHrmEmployeeResponseBody = {
  result?: {
    dingOpenErrcode?: int64(description='dingOpenErrcode', name='ding_open_errcode'),
    errorMsg?: string(description='errorMsg', name='error_msg'),
    success?: boolean(description='success', name='success'),
  }(description='result', name='result'),
}

model SetuserworkdataCorpHrmEmployeeResponse = {
  headers: map[string]string,
  body: SetuserworkdataCorpHrmEmployeeResponseBody,
}

/**
 * Description: 钉钉智能人事开放接口-更新员工绩效信息
 */
async function setuserworkdataCorpHrmEmployee(request: SetuserworkdataCorpHrmEmployeeRequest): SetuserworkdataCorpHrmEmployeeResponse {
  var runtime = new Util.RuntimeOptions{};
  return setuserworkdataCorpHrmEmployeeEx(request, runtime);
}

/**
 * Description: 钉钉智能人事开放接口-更新员工绩效信息
 */
async function setuserworkdataCorpHrmEmployeeEx(request: SetuserworkdataCorpHrmEmployeeRequest, runtime: Util.RuntimeOptions): SetuserworkdataCorpHrmEmployeeResponse {
  Util.validateModel(request);
  var appParams = Util.stringifyMapValue(Util.toMap(request.params));
  return doRequest('dingtalk.corp.hrm.employee.setuserworkdata', 'POST', '/router/rest', request.headers, appParams, runtime);
}

model SendOapiCustomerserviceMessageParams = {
  message: {
    cmsId?: string(description='会员id', name='cms_id'),
    content: string(description='消息内容', name='content'),
    contentType: int64(description='/**      * 文本      */     TEXT(1),      /**      * 图片      */     IMAGE(2),      /**      * 视频      */     VIDEO(3),      /**      * 链接      */     LINK(4),      /**      * 语音      */     VOICE(5),      /**      * markdown      */     MARK_DOWN(6),      /**      * 交互式卡片      */     ACTION_CARD(7),      /**      * 富文本      */     RICH_TEXT(8),      /**      * 文件      */     FILE(9),      /**      * 消息已读      */     MSG_READ(10)', name='content_type'),
    buId: string(description='会员所属组织', name='bu_id'),
    messageCreateAt?: int64(description='消息生成时间', name='message_create_at'),
    messageId: string(description='消息id', name='message_id'),
    sessionSource: string(description='会话来源', name='session_source'),
    sid: string(description='会话id', name='sid'),
  }(description='消息对象', name='message'),
}

model SendOapiCustomerserviceMessageRequest = {
  headers?: map[string]string,
  params:SendOapiCustomerserviceMessageParams,
}

model SendOapiCustomerserviceMessageResponseBody = {
  errcode?: int64(description='错误码', name='errcode'),
  errmsg?: string(description='错误信息', name='errmsg'),
  result?: string(description='返回结果', name='result'),
  success?: boolean(description='是否成功', name='success'),
}

model SendOapiCustomerserviceMessageResponse = {
  headers: map[string]string,
  body: SendOapiCustomerserviceMessageResponseBody,
}

/**
 * Description: 提供给集团的BU，调用该接口，在客户服务的场景下，由客户向客服发送钉钉消息
 */
async function sendOapiCustomerserviceMessage(request: SendOapiCustomerserviceMessageRequest): SendOapiCustomerserviceMessageResponse {
  var runtime = new Util.RuntimeOptions{};
  return sendOapiCustomerserviceMessageEx(request, runtime);
}

/**
 * Description: 提供给集团的BU，调用该接口，在客户服务的场景下，由客户向客服发送钉钉消息
 */
async function sendOapiCustomerserviceMessageEx(request: SendOapiCustomerserviceMessageRequest, runtime: Util.RuntimeOptions): SendOapiCustomerserviceMessageResponse {
  Util.validateModel(request);
  var appParams = Util.stringifyMapValue(Util.toMap(request.params));
  return doRequestOApi('POST', '/topapi/customerservice/message/send', request.headers, appParams, runtime);
}

model AddOapiRhinoMosExecPerformContextParams = {
  context: string(description='上下文', name='context'),
  operationRecordIds: [ int64 ](description='工序执行记录ID列表', maxItems=100, name='operation_record_ids'),
  tenantId: string(description='租户ID', name='tenant_id'),
  userid?: string(description='业务参数，先预留ID', name='userid'),
  orderId?: string(description='订单ID', name='order_id'),
}

model AddOapiRhinoMosExecPerformContextRequest = {
  headers?: map[string]string,
  params:AddOapiRhinoMosExecPerformContextParams,
}

model AddOapiRhinoMosExecPerformContextResponseBody = {
  errmsg?: string(description='错误信息', name='errmsg'),
  model?: [
    {
      context?: string(description='上下文', name='context'),
      operationRecordId?: int64(description='工序执行ID', name='operation_record_id'),
    }
  ](description='执行上下文', name='model'),
  success?: boolean(description='是否成功', name='success'),
  errcode?: int64(description='错误码', name='errcode'),
}

model AddOapiRhinoMosExecPerformContextResponse = {
  headers: map[string]string,
  body: AddOapiRhinoMosExecPerformContextResponseBody,
}

/**
 * Description: 添加执行上下文
 */
async function addOapiRhinoMosExecPerformContext(request: AddOapiRhinoMosExecPerformContextRequest): AddOapiRhinoMosExecPerformContextResponse {
  var runtime = new Util.RuntimeOptions{};
  return addOapiRhinoMosExecPerformContextEx(request, runtime);
}

/**
 * Description: 添加执行上下文
 */
async function addOapiRhinoMosExecPerformContextEx(request: AddOapiRhinoMosExecPerformContextRequest, runtime: Util.RuntimeOptions): AddOapiRhinoMosExecPerformContextResponse {
  Util.validateModel(request);
  var appParams = Util.stringifyMapValue(Util.toMap(request.params));
  return doRequestOApi('POST', '/topapi/rhino/mos/exec/perform/context/add', request.headers, appParams, runtime);
}

model CreateOapiCustomerserviceSessionParams = {
  createSession: {
    source: {
      channel: string(description='/**      * H5页面      */     H5(0),     /**      * APP内嵌的链接      */     APP(1),     /**      * 微信小程序      */     WE_CHAT_APPLETS(2),     /**      * 微信公众号      */     WE_CHAT_OFFICIAL_ACCOUNTS(3)', name='channel'),
      channelAvatarUrl?: string(description='发起咨询的头像', name='channel_avatar_url'),
      channelNick?: string(description='渠道名称', name='channel_nick'),
      channelUid: string(description='渠道会员id', name='channel_uid'),
      cmsId?: string(description='会员id', name='cms_id'),
      sessionEndTime?: int64(description='会话结束时间', name='session_end_time'),
      sessionSource: string(description='会话来源', name='session_source'),
      sessionStartTime?: int64(description='会话开始时间', name='session_start_time'),
      sessionStatus?: int64(description='0会话中，1已结束', name='session_status'),
      sid: string(description='会话id', name='sid'),
      summary?: string(description='会话摘要', name='summary'),
      channelUserSource?: string(description='渠道会员所属的系统', name='channel_user_source'),
    }(description='会员来源', name='source'),
    target: {
      buId: string(description='业务单元id', name='bu_id'),
      serviceId: string(description='服务编号', name='service_id'),
      sessionSource: string(description='会话来源', name='session_source'),
    }(description='会话目标', name='target'),
  }(description='新建会话参数', name='create_session'),
}

model CreateOapiCustomerserviceSessionRequest = {
  headers?: map[string]string,
  params:CreateOapiCustomerserviceSessionParams,
}

model CreateOapiCustomerserviceSessionResponseBody = {
  errcode?: int64(description='错误码', name='errcode'),
  errmsg?: string(description='错误信息', name='errmsg'),
  result?: string(description='返回会话id', name='result'),
  success?: boolean(description='是否成功', name='success'),
}

model CreateOapiCustomerserviceSessionResponse = {
  headers: map[string]string,
  body: CreateOapiCustomerserviceSessionResponseBody,
}

/**
 * Description: 提供给集团的BU，调用该接口，在客户服务的场景下，由客户向客服发起会话请求
 */
async function createOapiCustomerserviceSession(request: CreateOapiCustomerserviceSessionRequest): CreateOapiCustomerserviceSessionResponse {
  var runtime = new Util.RuntimeOptions{};
  return createOapiCustomerserviceSessionEx(request, runtime);
}

/**
 * Description: 提供给集团的BU，调用该接口，在客户服务的场景下，由客户向客服发起会话请求
 */
async function createOapiCustomerserviceSessionEx(request: CreateOapiCustomerserviceSessionRequest, runtime: Util.RuntimeOptions): CreateOapiCustomerserviceSessionResponse {
  Util.validateModel(request);
  var appParams = Util.stringifyMapValue(Util.toMap(request.params));
  return doRequestOApi('POST', '/topapi/customerservice/session/create', request.headers, appParams, runtime);
}

model Verify_mobileOapiSnsParams = {
  mobile?: string(description='1', name='mobile'),
}

model Verify_mobileOapiSnsRequest = {
  headers?: map[string]string,
  params?:Verify_mobileOapiSnsParams,
}

model Verify_mobileOapiSnsResponseBody = {
  errmsg?: string(description='errmsg', name='errmsg'),
  errcode?: int64(description='errcode', name='errcode'),
  result?: boolean(description='1', name='result'),
}

model Verify_mobileOapiSnsResponse = {
  headers: map[string]string,
  body: Verify_mobileOapiSnsResponseBody,
}

/**
 * Description: 验证个人手机号
 */
async function verify_mobileOapiSns(request: Verify_mobileOapiSnsRequest): Verify_mobileOapiSnsResponse {
  var runtime = new Util.RuntimeOptions{};
  return verify_mobileOapiSnsEx(request, runtime);
}

/**
 * Description: 验证个人手机号
 */
async function verify_mobileOapiSnsEx(request: Verify_mobileOapiSnsRequest, runtime: Util.RuntimeOptions): Verify_mobileOapiSnsResponse {
  Util.validateModel(request);
  var appParams = Util.stringifyMapValue(Util.toMap(request.params));
  return doRequestOApi('POST', '/topapi/sns/verify_mobile', request.headers, appParams, runtime);
}

model ListbypageOapiRhinoMosExecClothesIdParams = {
  req: {
    bizTypes?: [ string ](description='业务类型', maxItems=20, name='biz_types'),
    orderId: int64(description='订单ID', name='order_id'),
    page: {
      pageSize: int64(description='每页大小', name='page_size'),
      start: int64(description='起始位置，从0开始', name='start'),
    }(description='分页', name='page'),
    sizeCode?: string(description='尺码CODE', name='size_code'),
    source?: {
      sourceId?: string(description='来源ID，创建该实体的来源业务ID，会用来源ID和来源类型一起做幂等', name='source_id'),
      sourceType?: string(description='来源类型，创建该实体的来源的类型', name='source_type'),
    }(description='来源', name='source'),
    statusList?: [ string ](description='状态列表', maxItems=20, name='status_list'),
    tenantId: string(description='租户ID', name='tenant_id'),
    userid?: string(description='预留参数', name='userid'),
  }(description='入参', name='req'),
}

model ListbypageOapiRhinoMosExecClothesIdRequest = {
  headers?: map[string]string,
  params:ListbypageOapiRhinoMosExecClothesIdParams,
}

model ListbypageOapiRhinoMosExecClothesIdResponseBody = {
  errcode?: int64(description='错误码', name='errcode'),
  errmsg?: string(description='错误信息', name='errmsg'),
  model?: [ int64 ](description='实体ID列表', name='model'),
  success?: boolean(description='是否成功', name='success'),
}

model ListbypageOapiRhinoMosExecClothesIdResponse = {
  headers: map[string]string,
  body: ListbypageOapiRhinoMosExecClothesIdResponseBody,
}

/**
 * Description: 分页查询衣服ID
 */
async function listbypageOapiRhinoMosExecClothesId(request: ListbypageOapiRhinoMosExecClothesIdRequest): ListbypageOapiRhinoMosExecClothesIdResponse {
  var runtime = new Util.RuntimeOptions{};
  return listbypageOapiRhinoMosExecClothesIdEx(request, runtime);
}

/**
 * Description: 分页查询衣服ID
 */
async function listbypageOapiRhinoMosExecClothesIdEx(request: ListbypageOapiRhinoMosExecClothesIdRequest, runtime: Util.RuntimeOptions): ListbypageOapiRhinoMosExecClothesIdResponse {
  Util.validateModel(request);
  var appParams = Util.stringifyMapValue(Util.toMap(request.params));
  return doRequestOApi('POST', '/topapi/rhino/mos/exec/clothes/id/listbypage', request.headers, appParams, runtime);
}

model GetOapiProjectInviteShareurlParams = {
  inviteInfo: {
    expireSeconds?: int64(description='该分享链接有效时间，以秒为单位。 最大不超过7776000（即90天），此字段如果不填，则默认有效期为30秒。', name='expire_seconds'),
    userid: string(description='邀请人的员工ID', name='userid'),
    sceneId: string(description='场景标志，用于区分活动场景', name='scene_id'),
    redirect?: string(description='活动生效后的承接页面标志', name='redirect'),
    termType?: string(description='期限类型：SHORT短期（默认），LONG长期（最多10万个数量限制）', name='term_type'),
    chatId?: string(description='圈子里关联的某个群ID', name='chat_id'),
  }(description='邀请信息', name='invite_info'),
}

model GetOapiProjectInviteShareurlRequest = {
  headers?: map[string]string,
  params:GetOapiProjectInviteShareurlParams,
}

model GetOapiProjectInviteShareurlResponseBody = {
  result?: {
    h5UrlGroup?: string(description='群专属链接', name='h5_url_group'),
    h5UrlCircle?: string(description='圈子专属链接', name='h5_url_circle'),
    expireSeconds?: int64(description='该二维码有效时间，以秒为单位。 最大不超过2592000（即30天）。', name='expire_seconds'),
  }(description='响应结果', name='result'),
  success?: boolean(description='是否成功', name='success'),
  errcode?: int64(description='错误码', name='errcode'),
  errmsg?: string(description='错误信息', name='errmsg'),
}

model GetOapiProjectInviteShareurlResponse = {
  headers: map[string]string,
  body: GetOapiProjectInviteShareurlResponseBody,
}

/**
 * Description: 开放式组织机构专属分享二维码链接
 */
async function getOapiProjectInviteShareurl(request: GetOapiProjectInviteShareurlRequest): GetOapiProjectInviteShareurlResponse {
  var runtime = new Util.RuntimeOptions{};
  return getOapiProjectInviteShareurlEx(request, runtime);
}

/**
 * Description: 开放式组织机构专属分享二维码链接
 */
async function getOapiProjectInviteShareurlEx(request: GetOapiProjectInviteShareurlRequest, runtime: Util.RuntimeOptions): GetOapiProjectInviteShareurlResponse {
  Util.validateModel(request);
  var appParams = Util.stringifyMapValue(Util.toMap(request.params));
  return doRequestOApi('POST', '/topapi/project/invite/shareurl/get', request.headers, appParams, runtime);
}

model QueryOapiProjectInviteDataParams = {
  inviteDataQuery: {
    cursor: int64(description='数据游标，初始传0。后续传入返回参数中的next_cursor值', name='cursor'),
    status: int64(description='状态0:无效（包括过程数据），1:有效(默认)，不传表示查询全部', name='status'),
    size: int64(description='每次查询数据量，最大100', name='size'),
  }(description='请求对象', name='invite_data_query'),
}

model QueryOapiProjectInviteDataRequest = {
  headers?: map[string]string,
  params:QueryOapiProjectInviteDataParams,
}

model QueryOapiProjectInviteDataResponseBody = {
  result?: {
    hasMore?: string(description='是否有更多数据，如果为false，这表示本次查询没有更多的数据了。', name='has_more'),
    nextCursor?: string(description='下次游标开始', name='next_cursor'),
    data?: [
      {
        extension?: string(description='结果数据，场景ID，sence_id会放在这个地方', name='extension'),
        channel?: string(description='渠道，"MARKET"表示通过营销的数据，其他是通过系统的方式进入', name='channel'),
        status?: int64(description='状态.0表示无效（包括过程数据），1:表示有效', name='status'),
        joinAt?: int64(description='加入日期，格式：yyyyMMdd', name='join_at'),
        corpId?: string(description='组织机构id', name='corp_id'),
        inviteUserid?: string(description='邀请人用户id', name='invite_userid'),
        gmtModified?: int64(description='修改时间，亦用于游标查询', name='gmt_modified'),
        userid?: string(description='被邀请人用户id', name='userid'),
      }
    ](description='结果集数据', name='data'),
  }(description='响应结果', name='result'),
  success?: boolean(description='是否成功', name='success'),
  errcode?: int64(description='错误码', name='errcode'),
  errmsg?: string(description='失败原因', name='errmsg'),
}

model QueryOapiProjectInviteDataResponse = {
  headers: map[string]string,
  body: QueryOapiProjectInviteDataResponseBody,
}

/**
 * Description: 开放式组织机构成员邀请关系查询
 */
async function queryOapiProjectInviteData(request: QueryOapiProjectInviteDataRequest): QueryOapiProjectInviteDataResponse {
  var runtime = new Util.RuntimeOptions{};
  return queryOapiProjectInviteDataEx(request, runtime);
}

/**
 * Description: 开放式组织机构成员邀请关系查询
 */
async function queryOapiProjectInviteDataEx(request: QueryOapiProjectInviteDataRequest, runtime: Util.RuntimeOptions): QueryOapiProjectInviteDataResponse {
  Util.validateModel(request);
  var appParams = Util.stringifyMapValue(Util.toMap(request.params));
  return doRequestOApi('POST', '/topapi/project/invite/data/query', request.headers, appParams, runtime);
}

model CleanOapiWorkspaceTaskParams = {
  corpId: string(description='企业corpId', name='corp_id'),
  agentid?: int64(description='微应用agentId', name='agentid'),
  operatorUserid?: string(description='操作者id', name='operator_userid'),
}

model CleanOapiWorkspaceTaskRequest = {
  headers?: map[string]string,
  params:CleanOapiWorkspaceTaskParams,
}

model CleanOapiWorkspaceTaskResponseBody = {
  errcode?: int64(description='错误码', name='errcode'),
  errmsg?: string(description='错误描述', name='errmsg'),
}

model CleanOapiWorkspaceTaskResponse = {
  headers: map[string]string,
  body: CleanOapiWorkspaceTaskResponseBody,
}

/**
 * Description: 企业解除授权后，isv按企业清理历史任务数据
 */
async function cleanOapiWorkspaceTask(request: CleanOapiWorkspaceTaskRequest): CleanOapiWorkspaceTaskResponse {
  var runtime = new Util.RuntimeOptions{};
  return cleanOapiWorkspaceTaskEx(request, runtime);
}

/**
 * Description: 企业解除授权后，isv按企业清理历史任务数据
 */
async function cleanOapiWorkspaceTaskEx(request: CleanOapiWorkspaceTaskRequest, runtime: Util.RuntimeOptions): CleanOapiWorkspaceTaskResponse {
  Util.validateModel(request);
  var appParams = Util.stringifyMapValue(Util.toMap(request.params));
  return doRequestOApi('POST', '/topapi/workspace/task/clean', request.headers, appParams, runtime);
}

model GetSmartworkCheckinRecordParams = {
  useridList: [ string ](description='需要查询的用户列表', maxItems=10, name='userid_list'),
  startTime: int64(description='起始时间,单位毫秒', name='start_time'),
  endTime: int64(description='截止时间，单位毫秒。如果是取1个人的数据，时间范围最大到10天，如果是取多个人的数据，时间范围最大1天。', name='end_time'),
  cursor: int64(description='分页查询的游标，最开始可以传0', name='cursor'),
  size: int64(description='分页查询的每页大小，最大100', name='size'),
}

model GetSmartworkCheckinRecordRequest = {
  headers?: map[string]string,
  params:GetSmartworkCheckinRecordParams,
}

model GetSmartworkCheckinRecordResponseBody = {
  result?: {
    result?: {
      nextCursor?: int64(description='表示下次查询的游标，为null代表没有更多的数据了', name='next_cursor'),
      pageList?: [
        {
          checkinTime?: int64(description='签到时间,单位毫秒', name='checkin_time'),
          imageList?: [ string ](description='签到照片url列表', name='image_list'),
          detailPlace?: string(description='签到详细地址', name='detail_place'),
          remark?: string(description='签到备注', name='remark'),
          userid?: string(description='员工唯一标识', name='userid'),
          place?: string(description='签到地址', name='place'),
          longitude?: string(description='签到位置经度（暂未开放）', name='longitude'),
          latitude?: string(description='签到位置维度（暂未开放）', name='latitude'),
          visitUser?: string(description='签到的拜访对象，可以为外部联系人的userid或者用户自己输入的名字', name='visit_user'),
        }
      ](description='分页列表', name='page_list'),
    }(description='result', name='result'),
    dingOpenErrcode?: int64(description='dingOpenErrcode', name='ding_open_errcode'),
    success?: boolean(description='success', name='success'),
    errorMsg?: string(description='errorMsg', name='error_msg'),
  }(description='result', name='result'),
}

model GetSmartworkCheckinRecordResponse = {
  headers: map[string]string,
  body: GetSmartworkCheckinRecordResponseBody,
}

/**
 * Description: 查询多个用户一段时间范围内的签到记录，只给企业调用，ISV无法调用。
接口里面的经纬度等敏感数据如需使用，请到开放平台首页通过支持中心提工单
 */
async function getSmartworkCheckinRecord(request: GetSmartworkCheckinRecordRequest): GetSmartworkCheckinRecordResponse {
  var runtime = new Util.RuntimeOptions{};
  return getSmartworkCheckinRecordEx(request, runtime);
}

/**
 * Description: 查询多个用户一段时间范围内的签到记录，只给企业调用，ISV无法调用。
接口里面的经纬度等敏感数据如需使用，请到开放平台首页通过支持中心提工单
 */
async function getSmartworkCheckinRecordEx(request: GetSmartworkCheckinRecordRequest, runtime: Util.RuntimeOptions): GetSmartworkCheckinRecordResponse {
  Util.validateModel(request);
  var appParams = Util.stringifyMapValue(Util.toMap(request.params));
  return doRequest('dingtalk.smartwork.checkin.record.get', 'POST', '/router/rest', request.headers, appParams, runtime);
}

model RecognizeOapiOcrStructuredParams = {
  type: string(description='识别图片类型, 身份证idcard，营业执照增值税发票invoice，营业执照blicense，银行卡bank_card，车牌car_no，机动车发票car_invoice，驾驶证driving_license，行驶证vehicle_license，火车票train_ticket，定额发票quota_invoice，出租车发票taxi_ticket，机票行程单air_itinerary', name='type'),
  imageUrl: string(description='识别图片地址', maxLength=1000, name='image_url'),
}

model RecognizeOapiOcrStructuredRequest = {
  headers?: map[string]string,
  params:RecognizeOapiOcrStructuredParams,
}

model RecognizeOapiOcrStructuredResponseBody = {
  errcode?: int64(description='错误码', name='errcode'),
  errmsg?: string(description='错误描述', name='errmsg'),
  result?: {
    height?: int64(description='旋转后图片高度', name='height'),
    width?: int64(description='旋转后图片宽度', name='width'),
    angle?: int64(description='旋转度', name='angle'),
    data?: string(description='图片识别内容json字符串，不同的类型有不同的字段，例如身份证{"姓名":"王xx","性别":"男","民族":"汉","出生日期":"1986年1月9日","住址":"四川省攀枝xxxx","身份证号码":"5101241988xxxxx"}', name='data'),
    originalHeight?: int64(description='原始图片高度', name='original_height'),
    originalWidth?: int64(description='原始图片宽度', name='original_width'),
  }(description='识别结果', name='result'),
}

model RecognizeOapiOcrStructuredResponse = {
  headers: map[string]string,
  body: RecognizeOapiOcrStructuredResponseBody,
}

/**
 * Description: 结构化图片识别能力接口
 */
async function recognizeOapiOcrStructured(request: RecognizeOapiOcrStructuredRequest): RecognizeOapiOcrStructuredResponse {
  var runtime = new Util.RuntimeOptions{};
  return recognizeOapiOcrStructuredEx(request, runtime);
}

/**
 * Description: 结构化图片识别能力接口
 */
async function recognizeOapiOcrStructuredEx(request: RecognizeOapiOcrStructuredRequest, runtime: Util.RuntimeOptions): RecognizeOapiOcrStructuredResponse {
  Util.validateModel(request);
  var appParams = Util.stringifyMapValue(Util.toMap(request.params));
  return doRequestOApi('POST', '/topapi/ocr/structured/recognize', request.headers, appParams, runtime);
}

model SaveOapiProcessParams = {
  saveProcessRequest?: {
    agentid?: int64(description='企业应用id', name='agentid'),
    processCode?: string(description='审批模板唯一码', name='process_code'),
    disableFormEdit?: boolean(description='废弃，请使用process_config.disable_form_edit字段', name='disable_form_edit'),
    disableStopProcessButton?: boolean(description='true', name='disable_stop_process_button'),
    name?: string(description='审批模板名称', name='name'),
    description?: string(description='审批模板描述', name='description'),
    formComponentList: [
      {
        componentName: string(description='表单名称', name='component_name'),
        props: {
          id: string(description='表单id', name='id'),
          label: string(description='表单名称', name='label'),
          required?: boolean(description='是否必填', name='required'),
          notPrint?: string(description='是否参与打印(1表示不打印, 0表示打印)', name='not_print'),
          placeholder?: string(description='占位提示（仅输入类组件）', name='placeholder'),
          notUpper?: string(description='是否需要大写 默认是需要; 1:不需要大写, 空或者0:需要大写', name='not_upper'),
          unit?: string(description='数字组件/日期区间组件单位属性', name='unit'),
          formula?: string(description='暂不需要', name='formula'),
          options?: [ string ](description='单选框或者多选框的选项', maxItems=200, name='options'),
          format?: string(description='时间格式', name='format'),
          duration?: boolean(description='是否自动计算时长', name='duration'),
          choice?: int64(description='内部联系人choice，1表示多选，0表示单选', name='choice'),
          link?: string(description='说明文案的链接地址', name='link'),
          statField?: [
            {
              id?: string(description='组件id', name='id'),
              label?: string(description='组件名称', name='label'),
              upper?: boolean(description='统计总和是否大写', name='upper'),
              unit?: string(description='单元', name='unit'),
            }
          ](description='需要计算总和的明细组件', maxItems=20, name='stat_field'),
          actionName?: string(description='增加明细动作名称', name='action_name'),
          content?: string(description='说明文字', name='content'),
        }(description='表单属性', name='props'),
        children?: [
          {
            componentName?: string(description='表单名称', name='component_name'),
            props?: {
              id?: string(description='表单id', name='id'),
              label?: string(description='表单名称', name='label'),
              required?: boolean(description='是否必填', name='required'),
              notPrint?: string(description='是否参与打印(1表示不打印, 0表示打印)', name='not_print'),
              placeholder?: string(description='占位提示（仅输入类组件）', name='placeholder'),
              notUpper?: string(description='是否需要大写 默认是需要; 1:不需要大写, 空或者0:需要大写', name='not_upper'),
              unit?: string(description='数字组件/日期区间组件单位属性', name='unit'),
              formula?: string(description='暂不需要', name='formula'),
              options?: [ string ](description='单选框或者多选框的选项', maxItems=200, name='options'),
              format?: string(description='时间格式', name='format'),
              duration?: boolean(description='是否自动计算时长', name='duration'),
              choice?: int64(description='内部联系人choice，1表示多选，0表示单选', name='choice'),
              link?: string(description='说明文案的链接地址', name='link'),
              content?: string(description='说明文字', name='content'),
            }(description='子表单属性', name='props'),
          }
        ](description='子表单列表', maxItems=20, name='children'),
      }
    ](description='表单列表', maxItems=150, name='form_component_list'),
    fakeMode?: boolean(description='true表示不带流程的模板', name='fake_mode'),
    templateEditUrl?: string(description='废弃，请使用process_config.template_edit_url字段', name='template_edit_url'),
    hidden?: boolean(description='废弃，请使用process_config.hidden字段', name='hidden'),
    processConfig?: {
      disableFormEdit?: boolean(description='是否允许表单在审批管理后台可编辑。true表示不可以', name='disable_form_edit'),
      disableStopProcessButton?: boolean(description='是否在审批后台禁用停用操作', name='disable_stop_process_button'),
      hidden?: boolean(description='设置模板是否隐藏，true表示隐藏', name='hidden'),
      templateEditUrl?: string(description='审批模板编辑跳转页。当fake_mode为true时，此参数失效。', name='template_edit_url'),
      disableDeleteProcess?: boolean(description='是否在审批后台禁用删除操作', name='disable_delete_process'),
      disableResubmit?: boolean(description='是否在审批详情页禁用再次提交操作', name='disable_resubmit'),
      disableHomepage?: boolean(description='是否在审批首页/工作台屏蔽模板', name='disable_homepage'),
    }(description='模板配置属性', name='process_config'),
  }(description='入参', name='saveProcessRequest'),
}

model SaveOapiProcessRequest = {
  headers?: map[string]string,
  params?:SaveOapiProcessParams,
}

model SaveOapiProcessResponseBody = {
  errmsg?: string(description='成功', name='errmsg'),
  errcode?: int64(description='0', name='errcode'),
  result?: {
    processCode?: string(description='审批模板唯一码', name='process_code'),
  }(description='结果', name='result'),
}

model SaveOapiProcessResponse = {
  headers: map[string]string,
  body: SaveOapiProcessResponseBody,
}

/**
 * Description: 保存审批模板
 */
async function saveOapiProcess(request: SaveOapiProcessRequest): SaveOapiProcessResponse {
  var runtime = new Util.RuntimeOptions{};
  return saveOapiProcessEx(request, runtime);
}

/**
 * Description: 保存审批模板
 */
async function saveOapiProcessEx(request: SaveOapiProcessRequest, runtime: Util.RuntimeOptions): SaveOapiProcessResponse {
  Util.validateModel(request);
  var appParams = Util.stringifyMapValue(Util.toMap(request.params));
  return doRequestOApi('POST', '/topapi/process/save', request.headers, appParams, runtime);
}

model ListOapiProcessFormConditionParams = {
  request?: {
    agentid?: int64(description='应用id', name='agentid'),
    processCode: string(description='审批模板id', name='process_code'),
  }(description='请求', name='request'),
}

model ListOapiProcessFormConditionRequest = {
  headers?: map[string]string,
  params?:ListOapiProcessFormConditionParams,
}

model ListOapiProcessFormConditionResponseBody = {
  errmsg?: string(description='成功', name='errmsg'),
  errcode?: int64(description='0', name='errcode'),
  list?: [
    {
      id?: string(description='表单id', name='id'),
      label?: string(description='表单名称', name='label'),
    }
  ](description='表单列表', name='list'),
}

model ListOapiProcessFormConditionResponse = {
  headers: map[string]string,
  body: ListOapiProcessFormConditionResponseBody,
}

/**
 * Description: 查询已设置为条件的表单组件
 */
async function listOapiProcessFormCondition(request: ListOapiProcessFormConditionRequest): ListOapiProcessFormConditionResponse {
  var runtime = new Util.RuntimeOptions{};
  return listOapiProcessFormConditionEx(request, runtime);
}

/**
 * Description: 查询已设置为条件的表单组件
 */
async function listOapiProcessFormConditionEx(request: ListOapiProcessFormConditionRequest, runtime: Util.RuntimeOptions): ListOapiProcessFormConditionResponse {
  Util.validateModel(request);
  var appParams = Util.stringifyMapValue(Util.toMap(request.params));
  return doRequestOApi('POST', '/topapi/process/form/condition/list', request.headers, appParams, runtime);
}

model CheckOapiAttendanceApproveParams = {
  userid?: string(description='员工的user_id', name='userid'),
  workDate?: string(description='要补哪一天的卡，注意这个日期不是实际要补的日期，而是班次的日期。例如用户要补卡的时间是2019-08-16 00:20，排班时间是2019-08-15 23：50，那么这里要传的日期是2019-08-15', name='work_date'),
  punchId?: int64(description='要补的排班id', name='punch_id'),
  punchCheckTime?: string(description='排班时间', name='punch_check_time'),
  userCheckTime?: string(description='用户打卡时间', name='user_check_time'),
  approveId?: string(description='审批单id，全局唯一', name='approve_id'),
  jumpUrl?: string(description='审批单跳转地址', name='jump_url'),
  tagName?: string(description='审批单名称', name='tag_name'),
}

model CheckOapiAttendanceApproveRequest = {
  headers?: map[string]string,
  params?:CheckOapiAttendanceApproveParams,
}

model CheckOapiAttendanceApproveResponseBody = {
  errcode?: int64(description='0代表成功，其他代表失败', name='errcode'),
  errmsg?: string(description='错误信息', name='errmsg'),
}

model CheckOapiAttendanceApproveResponse = {
  headers: map[string]string,
  body: CheckOapiAttendanceApproveResponseBody,
}

/**
 * Description: 该接口提供了重新为某个卡点进行打卡的能力。在某个卡点缺卡，早退，迟到等异常情况下企业内部或者isv审批单通过后，调用该接口，可以重新用审批单里指定的时间进行一次打卡
 */
async function checkOapiAttendanceApprove(request: CheckOapiAttendanceApproveRequest): CheckOapiAttendanceApproveResponse {
  var runtime = new Util.RuntimeOptions{};
  return checkOapiAttendanceApproveEx(request, runtime);
}

/**
 * Description: 该接口提供了重新为某个卡点进行打卡的能力。在某个卡点缺卡，早退，迟到等异常情况下企业内部或者isv审批单通过后，调用该接口，可以重新用审批单里指定的时间进行一次打卡
 */
async function checkOapiAttendanceApproveEx(request: CheckOapiAttendanceApproveRequest, runtime: Util.RuntimeOptions): CheckOapiAttendanceApproveResponse {
  Util.validateModel(request);
  var appParams = Util.stringifyMapValue(Util.toMap(request.params));
  return doRequestOApi('POST', '/topapi/attendance/approve/check', request.headers, appParams, runtime);
}

model GetOapiInactiveUserParams = {
  queryDate: string(description='查询日期', name='query_date'),
  offset: int64(description='获取数据偏移量，从0开始', name='offset'),
  size: int64(description='获取数据size,最大100', name='size'),
}

model GetOapiInactiveUserRequest = {
  headers?: map[string]string,
  params:GetOapiInactiveUserParams,
}

model GetOapiInactiveUserResponseBody = {
  result?: {
    hasMore?: boolean(description='是否有更多数据', name='has_more'),
    list?: [ string ](description='用户列表', name='list'),
  }(description='未登陆用户数据', name='result'),
  errmsg?: string(description='错误描述', name='errmsg'),
  errcode?: int64(description='错误码', name='errcode'),
}

model GetOapiInactiveUserResponse = {
  headers: map[string]string,
  body: GetOapiInactiveUserResponseBody,
}

/**
 * Description: 根据日期查询企业下未活跃用户列表数据
 */
async function getOapiInactiveUser(request: GetOapiInactiveUserRequest): GetOapiInactiveUserResponse {
  var runtime = new Util.RuntimeOptions{};
  return getOapiInactiveUserEx(request, runtime);
}

/**
 * Description: 根据日期查询企业下未活跃用户列表数据
 */
async function getOapiInactiveUserEx(request: GetOapiInactiveUserRequest, runtime: Util.RuntimeOptions): GetOapiInactiveUserResponse {
  Util.validateModel(request);
  var appParams = Util.stringifyMapValue(Util.toMap(request.params));
  return doRequestOApi('POST', '/topapi/inactive/user/get', request.headers, appParams, runtime);
}

model GetCorpUserPersonainfoParams = {
  userid: string(description='员工id', name='userid'),
}

model GetCorpUserPersonainfoRequest = {
  headers?: map[string]string,
  params:GetCorpUserPersonainfoParams,
}

model GetCorpUserPersonainfoResponseBody = {
  result?: {
    success?: boolean(description='success', name='success'),
    errorMsg?: string(description='errorMsg', name='error_msg'),
    dingOpenErrcode?: int64(description='dingOpenErrcode', name='ding_open_errcode'),
    result?: {
      dob?: string(description='生日', pattern='\\\\d{4}[-]\\\\d{1,2}[-]\\\\d{1,2}[T]\\\\d{2}:\\\\d{2}:\\\\d{2}[Z]', name='dob'),
      gender?: string(description='性别', name='gender'),
      workStation?: string(description='工作区域', name='work_station'),
      industry?: string(description='行业', name='industry'),
      title?: string(description='头衔', name='title'),
      umids?: [ string ](description='umids', name='umids'),
    }(description='返回结果', name='result'),
  }(description='result', name='result'),
}

model GetCorpUserPersonainfoResponse = {
  headers: map[string]string,
  body: GetCorpUserPersonainfoResponseBody,
}

/**
 * Description: 用户画像,包括用户性别，工作行业属性等
 */
async function getCorpUserPersonainfo(request: GetCorpUserPersonainfoRequest): GetCorpUserPersonainfoResponse {
  var runtime = new Util.RuntimeOptions{};
  return getCorpUserPersonainfoEx(request, runtime);
}

/**
 * Description: 用户画像,包括用户性别，工作行业属性等
 */
async function getCorpUserPersonainfoEx(request: GetCorpUserPersonainfoRequest, runtime: Util.RuntimeOptions): GetCorpUserPersonainfoResponse {
  Util.validateModel(request);
  var appParams = Util.stringifyMapValue(Util.toMap(request.params));
  return doRequest('dingtalk.corp.user.personainfo.get', 'POST', '/router/rest', request.headers, appParams, runtime);
}

model CreateOapiMcsConferenceParams = {
  title: string(description='视频会议标题', name='title'),
  bizKey: string(description='由MCS颁发给调用三方的使用凭证', name='biz_key'),
  roomValidTime: int64(description='视频会议从创建之时起的最多保留时间', name='room_valid_time'),
  isPushRecord?: boolean(description='是否推送通话记录', name='is_push_record'),
  preferenceRegion?: string(description='倾向发起地 目前支持 CN-HZ/CN-HK/CN-BJ', name='preference_region'),
}

model CreateOapiMcsConferenceRequest = {
  headers?: map[string]string,
  params:CreateOapiMcsConferenceParams,
}

model CreateOapiMcsConferenceResponseBody = {
  errmsg?: string(description='errorMsg', name='errmsg'),
  errcode?: int64(description='dingOpenErrcode', name='errcode'),
  result?: string(description='会议码', name='result'),
}

model CreateOapiMcsConferenceResponse = {
  headers: map[string]string,
  body: CreateOapiMcsConferenceResponseBody,
}

/**
 * Description: 创建MCS视频会议并获取会议码以用于钉钉入会
 */
async function createOapiMcsConference(request: CreateOapiMcsConferenceRequest): CreateOapiMcsConferenceResponse {
  var runtime = new Util.RuntimeOptions{};
  return createOapiMcsConferenceEx(request, runtime);
}

/**
 * Description: 创建MCS视频会议并获取会议码以用于钉钉入会
 */
async function createOapiMcsConferenceEx(request: CreateOapiMcsConferenceRequest, runtime: Util.RuntimeOptions): CreateOapiMcsConferenceResponse {
  Util.validateModel(request);
  var appParams = Util.stringifyMapValue(Util.toMap(request.params));
  return doRequestOApi('POST', '/topapi/mcs/conference/create', request.headers, appParams, runtime);
}

model DescribeOapiCrmObjectmetaFollowrecordRequest = {
  headers?: map[string]string,
}

model DescribeOapiCrmObjectmetaFollowrecordResponseBody = {
  result?: {
    name?: string(description='对象名称', name='name'),
    customized?: boolean(description='是否自定义对象', name='customized'),
    fields?: [
      {
        name?: string(description='字段名称', name='name'),
        customized?: boolean(description='是否自定义字段', name='customized'),
        label?: string(description='字段展示名', name='label'),
        type?: string(description='字段类型', name='type'),
        nillable?: boolean(description='是否可空', name='nillable'),
        format?: string(description='日期格式', name='format'),
        unit?: string(description='日期单位/金额单位', name='unit'),
        selectOptions?: [
          {
            key?: string(description='选项key', name='key'),
            value?: string(description='选项名', name='value'),
          }
        ](description='选项列表', name='select_options'),
        quote?: boolean(description='是否引用关联', name='quote'),
        referenceTo?: string(description='关联对象名称', name='reference_to'),
        referenceFields?: [
          {
            label?: string(description='引用的关联对象字段显示名', name='label'),
            type?: string(description='引用的关联对象字段类型', name='type'),
            nillable?: boolean(description='引用的关联对象字段是否可空', name='nillable'),
            format?: string(description='引用的关联对象字段格式', name='format'),
            unit?: string(description='引用的关联对象字段单位', name='unit'),
            selectOptions?: [
              {
                key?: string(description='引用的关联对象的字段选项key', name='key'),
                value?: string(description='引用的关联对象的字段选项值', name='value'),
              }
            ](description='引用的关联对象的字段选项列表', name='select_options'),
            name?: string(description='引用的关联对象的字段名称', name='name'),
          }
        ](description='引用的关联对象的字段列表', name='reference_fields'),
        rollUpSummaryFields?: [
          {
            name?: string(description='需要汇总的明细内字段名', name='name'),
            aggregator?: string(description='汇总方法', name='aggregator'),
          }
        ](description='对MasterDetail类型有效：roll-up summary字段列表', name='roll_up_summary_fields'),
      }
    ](description='字段列表', name='fields'),
  }(description='result', name='result'),
  errcode?: int64(description='错误码', name='errcode'),
  errmsg?: string(description='错误信息', name='errmsg'),
}

model DescribeOapiCrmObjectmetaFollowrecordResponse = {
  headers: map[string]string,
  body: DescribeOapiCrmObjectmetaFollowrecordResponseBody,
}

/**
 * Description: 读取钉钉CRM跟进记录对象的元数据描述
 */
async function describeOapiCrmObjectmetaFollowrecord(request: DescribeOapiCrmObjectmetaFollowrecordRequest): DescribeOapiCrmObjectmetaFollowrecordResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeOapiCrmObjectmetaFollowrecordEx(request, runtime);
}

/**
 * Description: 读取钉钉CRM跟进记录对象的元数据描述
 */
async function describeOapiCrmObjectmetaFollowrecordEx(request: DescribeOapiCrmObjectmetaFollowrecordRequest, runtime: Util.RuntimeOptions): DescribeOapiCrmObjectmetaFollowrecordResponse {
  Util.validateModel(request);
  var appParams : map[string]string = {};
  return doRequestOApi('POST', '/topapi/crm/objectmeta/followrecord/describe', request.headers, appParams, runtime);
}

model DescribeOapiCrmObjectmetaContactRequest = {
  headers?: map[string]string,
}

model DescribeOapiCrmObjectmetaContactResponseBody = {
  result?: {
    name?: string(description='对象名称', name='name'),
    customized?: boolean(description='是否自定义对象', name='customized'),
    fields?: [
      {
        name?: string(description='字段名称', name='name'),
        customized?: boolean(description='是否自定义字段', name='customized'),
        label?: string(description='字段展示名', name='label'),
        type?: string(description='字段类型', name='type'),
        nillable?: boolean(description='是否可空', name='nillable'),
        format?: string(description='日期格式', name='format'),
        unit?: string(description='日期单位/金额单位', name='unit'),
        selectOptions?: [
          {
            key?: string(description='选项key', name='key'),
            value?: string(description='选项名', name='value'),
          }
        ](description='选项列表', name='select_options'),
        quote?: boolean(description='是否引用关联', name='quote'),
        referenceTo?: string(description='关联对象名称', name='reference_to'),
        referenceFields?: [
          {
            label?: string(description='引用的关联对象字段显示名', name='label'),
            type?: string(description='引用的关联对象字段类型', name='type'),
            nillable?: boolean(description='引用的关联对象字段是否可空', name='nillable'),
            format?: string(description='引用的关联对象字段格式', name='format'),
            unit?: string(description='引用的关联对象字段单位', name='unit'),
            selectOptions?: [
              {
                key?: string(description='引用的关联对象的字段选项key', name='key'),
                value?: string(description='引用的关联对象的字段选项值', name='value'),
              }
            ](description='引用的关联对象的字段选项列表', name='select_options'),
            name?: string(description='引用的关联对象的字段名称', name='name'),
          }
        ](description='引用的关联对象的字段列表', name='reference_fields'),
        rollUpSummaryFields?: [
          {
            name?: string(description='需要汇总的明细内字段名', name='name'),
            aggregator?: string(description='汇总方法', name='aggregator'),
          }
        ](description='对MasterDetail类型有效：roll-up summary字段列表', name='roll_up_summary_fields'),
      }
    ](description='字段列表', name='fields'),
  }(description='result', name='result'),
  errcode?: int64(description='错误码', name='errcode'),
  errmsg?: string(description='错误信息', name='errmsg'),
}

model DescribeOapiCrmObjectmetaContactResponse = {
  headers: map[string]string,
  body: DescribeOapiCrmObjectmetaContactResponseBody,
}

/**
 * Description: 读取钉钉CRM联系人对象的元数据描述
 */
async function describeOapiCrmObjectmetaContact(request: DescribeOapiCrmObjectmetaContactRequest): DescribeOapiCrmObjectmetaContactResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeOapiCrmObjectmetaContactEx(request, runtime);
}

/**
 * Description: 读取钉钉CRM联系人对象的元数据描述
 */
async function describeOapiCrmObjectmetaContactEx(request: DescribeOapiCrmObjectmetaContactRequest, runtime: Util.RuntimeOptions): DescribeOapiCrmObjectmetaContactResponse {
  Util.validateModel(request);
  var appParams : map[string]string = {};
  return doRequestOApi('POST', '/topapi/crm/objectmeta/contact/describe', request.headers, appParams, runtime);
}

model DescribeOapiCrmObjectmetaCustomerRequest = {
  headers?: map[string]string,
}

model DescribeOapiCrmObjectmetaCustomerResponseBody = {
  result?: {
    name?: string(description='对象名称', name='name'),
    customized?: boolean(description='是否自定义对象', name='customized'),
    fields?: [
      {
        name?: string(description='字段名称', name='name'),
        customized?: boolean(description='是否自定义字段', name='customized'),
        label?: string(description='字段展示名', name='label'),
        type?: string(description='字段类型', name='type'),
        nillable?: boolean(description='是否可空', name='nillable'),
        format?: string(description='日期格式', name='format'),
        unit?: string(description='日期单位/金额单位', name='unit'),
        selectOptions?: [
          {
            key?: string(description='选项key', name='key'),
            value?: string(description='选项名', name='value'),
          }
        ](description='选项列表', name='select_options'),
        quote?: boolean(description='是否引用关联', name='quote'),
        referenceTo?: string(description='关联对象名称', name='reference_to'),
        referenceFields?: [
          {
            label?: string(description='引用的关联对象字段显示名', name='label'),
            type?: string(description='引用的关联对象字段类型', name='type'),
            nillable?: boolean(description='引用的关联对象字段是否可空', name='nillable'),
            format?: string(description='引用的关联对象字段格式', name='format'),
            unit?: string(description='引用的关联对象字段单位', name='unit'),
            selectOptions?: [
              {
                key?: string(description='引用的关联对象的字段选项key', name='key'),
                value?: string(description='引用的关联对象的字段选项值', name='value'),
              }
            ](description='引用的关联对象的字段选项列表', name='select_options'),
            name?: string(description='引用的关联对象的字段名称', name='name'),
          }
        ](description='引用的关联对象的字段列表', name='reference_fields'),
        rollUpSummaryFields?: [
          {
            name?: string(description='需要汇总的明细内字段名', name='name'),
            aggregator?: string(description='汇总方法', name='aggregator'),
          }
        ](description='对MasterDetail类型有效：roll-up summary字段列表', name='roll_up_summary_fields'),
      }
    ](description='字段列表', name='fields'),
  }(description='result', name='result'),
  errcode?: int64(description='错误码', name='errcode'),
  errmsg?: string(description='错误信息', name='errmsg'),
}

model DescribeOapiCrmObjectmetaCustomerResponse = {
  headers: map[string]string,
  body: DescribeOapiCrmObjectmetaCustomerResponseBody,
}

/**
 * Description: 读取钉钉CRM客户对象的元数据描述
 */
async function describeOapiCrmObjectmetaCustomer(request: DescribeOapiCrmObjectmetaCustomerRequest): DescribeOapiCrmObjectmetaCustomerResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeOapiCrmObjectmetaCustomerEx(request, runtime);
}

/**
 * Description: 读取钉钉CRM客户对象的元数据描述
 */
async function describeOapiCrmObjectmetaCustomerEx(request: DescribeOapiCrmObjectmetaCustomerRequest, runtime: Util.RuntimeOptions): DescribeOapiCrmObjectmetaCustomerResponse {
  Util.validateModel(request);
  var appParams : map[string]string = {};
  return doRequestOApi('POST', '/topapi/crm/objectmeta/customer/describe', request.headers, appParams, runtime);
}

model FeatureOapiSmartdeviceFaceParams = {
  modelType: int64(description='算法模型', name='model_type'),
  modelVersion: string(description='模型版本', name='model_version'),
  useridList: [ string ](description='用户id列表', maxItems=20, name='userid_list'),
}

model FeatureOapiSmartdeviceFaceRequest = {
  headers?: map[string]string,
  params:FeatureOapiSmartdeviceFaceParams,
}

model FeatureOapiSmartdeviceFaceResponseBody = {
  errcode?: int64(description='dingOpenErrcode', name='errcode'),
  errmsg?: string(description='errorMsg', name='errmsg'),
  result?: [
    {
      featureInfo?: string(description='特征值', name='feature_info'),
      userid?: string(description='用户ID', name='userid'),
    }
  ](description='父对象', name='result'),
}

model FeatureOapiSmartdeviceFaceResponse = {
  headers: map[string]string,
  body: FeatureOapiSmartdeviceFaceResponseBody,
}

/**
 * Description: ISV基于此API可获取授权企业员工在指定算法模型下的人脸特征(非照片)，供设备进行人脸识别比对
 */
async function featureOapiSmartdeviceFace(request: FeatureOapiSmartdeviceFaceRequest): FeatureOapiSmartdeviceFaceResponse {
  var runtime = new Util.RuntimeOptions{};
  return featureOapiSmartdeviceFaceEx(request, runtime);
}

/**
 * Description: ISV基于此API可获取授权企业员工在指定算法模型下的人脸特征(非照片)，供设备进行人脸识别比对
 */
async function featureOapiSmartdeviceFaceEx(request: FeatureOapiSmartdeviceFaceRequest, runtime: Util.RuntimeOptions): FeatureOapiSmartdeviceFaceResponse {
  Util.validateModel(request);
  var appParams = Util.stringifyMapValue(Util.toMap(request.params));
  return doRequestOApi('POST', '/topapi/smartdevice/face/feature', request.headers, appParams, runtime);
}

model HeartbeatOapiOpenencryptParams = {
  appid: int64(description='微应用id', name='appid'),
  extension?: string(description='xxx', name='extension'),
}

model HeartbeatOapiOpenencryptRequest = {
  headers?: map[string]string,
  params:HeartbeatOapiOpenencryptParams,
}

model HeartbeatOapiOpenencryptResponseBody = {
  result?: boolean(description='成功', name='result'),
  errmsg?: string(description='成功', name='errmsg'),
  errcode?: int64(description='0', name='errcode'),
  success?: boolean(description='true', name='success'),
}

model HeartbeatOapiOpenencryptResponse = {
  headers: map[string]string,
  body: HeartbeatOapiOpenencryptResponseBody,
}

/**
 * Description: ISV调用该心跳接口，表明自己存活状态
 */
async function heartbeatOapiOpenencrypt(request: HeartbeatOapiOpenencryptRequest): HeartbeatOapiOpenencryptResponse {
  var runtime = new Util.RuntimeOptions{};
  return heartbeatOapiOpenencryptEx(request, runtime);
}

/**
 * Description: ISV调用该心跳接口，表明自己存活状态
 */
async function heartbeatOapiOpenencryptEx(request: HeartbeatOapiOpenencryptRequest, runtime: Util.RuntimeOptions): HeartbeatOapiOpenencryptResponse {
  Util.validateModel(request);
  var appParams = Util.stringifyMapValue(Util.toMap(request.params));
  return doRequestOApi('POST', '/topapi/openencrypt/heartbeat', request.headers, appParams, runtime);
}

model ListOapiCrmAuthGroupMemberParams = {
  roleId: int64(description='权限组id', name='role_id'),
}

model ListOapiCrmAuthGroupMemberRequest = {
  headers?: map[string]string,
  params:ListOapiCrmAuthGroupMemberParams,
}

model ListOapiCrmAuthGroupMemberResponseBody = {
  errcode?: int64(description='错误码', name='errcode'),
  result?: {
    name?: string(description='权限组名称', name='name'),
    memberInfo?: {
      staff?: [
        {
          name?: string(description='员工姓名', name='name'),
          userid?: string(description='员工id', name='userid'),
        }
      ](description='员工信息', name='staff'),
      dept?: [
        {
          name?: string(description='部门名称', name='name'),
          deptId?: int64(description='部门id', name='dept_id'),
        }
      ](description='部门信息', name='dept'),
      tag?: [
        {
          name?: string(description='角色名称', name='name'),
          tagId?: int64(description='角色id', name='tag_id'),
        }
      ](description='角色', name='tag'),
      allMember?: boolean(description='是否是全员分组', name='all_member'),
    }(description='成员信息', name='member_info'),
    roleId?: int64(description='权限组id', name='role_id'),
  }(description='结果', name='result'),
  errmsg?: string(description='错误信息', name='errmsg'),
}

model ListOapiCrmAuthGroupMemberResponse = {
  headers: map[string]string,
  body: ListOapiCrmAuthGroupMemberResponseBody,
}

/**
 * Description: 获取权限组成员接口
 */
async function listOapiCrmAuthGroupMember(request: ListOapiCrmAuthGroupMemberRequest): ListOapiCrmAuthGroupMemberResponse {
  var runtime = new Util.RuntimeOptions{};
  return listOapiCrmAuthGroupMemberEx(request, runtime);
}

/**
 * Description: 获取权限组成员接口
 */
async function listOapiCrmAuthGroupMemberEx(request: ListOapiCrmAuthGroupMemberRequest, runtime: Util.RuntimeOptions): ListOapiCrmAuthGroupMemberResponse {
  Util.validateModel(request);
  var appParams = Util.stringifyMapValue(Util.toMap(request.params));
  return doRequestOApi('POST', '/topapi/crm/auth/group/member/list', request.headers, appParams, runtime);
}

model UpdatevariablesSmartworkBpmsProcessinstanceParams = {
  processInstanceId: string(description='审批实例id', name='process_instance_id'),
  remark?: string(description='评论', name='remark'),
  variables: [
    {
      bizAlias: string(description='别名，审批表单控件唯一标识', name='biz_alias'),
      value: string(description='表单值', name='value'),
      extValue?: string(description='扩展值', name='ext_value'),
    }
  ](description='表单参数列表', maxItems=5, name='variables'),
}

model UpdatevariablesSmartworkBpmsProcessinstanceRequest = {
  headers?: map[string]string,
  params:UpdatevariablesSmartworkBpmsProcessinstanceParams,
}

model UpdatevariablesSmartworkBpmsProcessinstanceResponseBody = {
  result?: {
    dingOpenErrcode?: int64(description='dingOpenErrcode', name='ding_open_errcode'),
    errorMsg?: string(description='errorMsg', name='error_msg'),
    success?: boolean(description='success', name='success'),
    result?: boolean(description='操作结果', name='result'),
  }(description='result', name='result'),
}

model UpdatevariablesSmartworkBpmsProcessinstanceResponse = {
  headers: map[string]string,
  body: UpdatevariablesSmartworkBpmsProcessinstanceResponseBody,
}

/**
 * Description: 更新审批实例的表单值
 */
async function updatevariablesSmartworkBpmsProcessinstance(request: UpdatevariablesSmartworkBpmsProcessinstanceRequest): UpdatevariablesSmartworkBpmsProcessinstanceResponse {
  var runtime = new Util.RuntimeOptions{};
  return updatevariablesSmartworkBpmsProcessinstanceEx(request, runtime);
}

/**
 * Description: 更新审批实例的表单值
 */
async function updatevariablesSmartworkBpmsProcessinstanceEx(request: UpdatevariablesSmartworkBpmsProcessinstanceRequest, runtime: Util.RuntimeOptions): UpdatevariablesSmartworkBpmsProcessinstanceResponse {
  Util.validateModel(request);
  var appParams = Util.stringifyMapValue(Util.toMap(request.params));
  return doRequest('dingtalk.smartwork.bpms.processinstance.updatevariables', 'POST', '/router/rest', request.headers, appParams, runtime);
}

model ListOapiCrmAuthGroupPermissionParams = {
  roleId: int64(description='权限组id', name='role_id'),
}

model ListOapiCrmAuthGroupPermissionRequest = {
  headers?: map[string]string,
  params:ListOapiCrmAuthGroupPermissionParams,
}

model ListOapiCrmAuthGroupPermissionResponseBody = {
  errcode?: int64(description='错误码', name='errcode'),
  result?: {
    authObjects?: [
      {
        name?: string(description='权限组名称', name='name'),
        operateScope?: [
          {
            hasAuth?: boolean(description='是否有权限', name='has_auth'),
            name?: string(description='操作名称', name='name'),
            type?: string(description='操作类型', name='type'),
          }
        ](description='操作范围', name='operate_scope'),
        label?: string(description='表单名称', name='label'),
        manageScope?: [
          {
            ext?: {
              deptInfo?: [
                {
                  deptName?: string(description='部门名称', name='dept_name'),
                  deptId?: int64(description='部门id', name='dept_id'),
                }
              ](description='管理部门信息', name='dept_info'),
              staffInfo?: [
                {
                  name?: string(description='员工名称', name='name'),
                  staffId?: string(description='员工id', name='staff_id'),
                }
              ](description='员工信息', name='staff_info'),
            }(description='扩展内容', name='ext'),
            hasAuth?: boolean(description='是否有权限', name='has_auth'),
            name?: string(description='管理范围名称', name='name'),
            type?: string(description='管理范围类型', name='type'),
          }
        ](description='管理范围', name='manage_scope'),
      }
    ](description='权限内容', name='auth_objects'),
    roleId?: int64(description='权限组id', name='role_id'),
  }(description='结果', name='result'),
  errmsg?: string(description='错误内容', name='errmsg'),
}

model ListOapiCrmAuthGroupPermissionResponse = {
  headers: map[string]string,
  body: ListOapiCrmAuthGroupPermissionResponseBody,
}

/**
 * Description: 根据权限组id获取具体权限内容
 */
async function listOapiCrmAuthGroupPermission(request: ListOapiCrmAuthGroupPermissionRequest): ListOapiCrmAuthGroupPermissionResponse {
  var runtime = new Util.RuntimeOptions{};
  return listOapiCrmAuthGroupPermissionEx(request, runtime);
}

/**
 * Description: 根据权限组id获取具体权限内容
 */
async function listOapiCrmAuthGroupPermissionEx(request: ListOapiCrmAuthGroupPermissionRequest, runtime: Util.RuntimeOptions): ListOapiCrmAuthGroupPermissionResponse {
  Util.validateModel(request);
  var appParams = Util.stringifyMapValue(Util.toMap(request.params));
  return doRequestOApi('POST', '/topapi/crm/auth/group/permission/list', request.headers, appParams, runtime);
}

model GetwithformSmartworkBpmsProcessinstanceParams = {
  processInstanceId: string(description='审批实例id', name='process_instance_id'),
}

model GetwithformSmartworkBpmsProcessinstanceRequest = {
  headers?: map[string]string,
  params:GetwithformSmartworkBpmsProcessinstanceParams,
}

model GetwithformSmartworkBpmsProcessinstanceResponseBody = {
  result?: {
    dingOpenErrcode?: int64(description='dingOpenErrcode', name='ding_open_errcode'),
    success?: boolean(description='success', name='success'),
    result?: {
      title?: string(description='审批实例标题', name='title'),
      createTime?: string(description='开始时间', pattern='\\\\d{4}[-]\\\\d{1,2}[-]\\\\d{1,2}[T]\\\\d{2}:\\\\d{2}:\\\\d{2}[Z]', name='create_time'),
      finishTime?: string(description='结束时间', pattern='\\\\d{4}[-]\\\\d{1,2}[-]\\\\d{1,2}[T]\\\\d{2}:\\\\d{2}:\\\\d{2}[Z]', name='finish_time'),
      originatorUserid?: string(description='发起人', name='originator_userid'),
      originatorDeptId?: string(description='发起部门', name='originator_dept_id'),
      status?: string(description='审批状态，分为NEW（刚创建）|RUNNING（运行中）|TERMINATED（被终止）|COMPLETED（完成）|CANCELED（取消）', name='status'),
      approverUserids?: [ string ](description='审批人', name='approver_userids'),
      ccUserids?: string(description='抄送人', name='cc_userids'),
      result?: string(description='审批结果，分为agree和refuse', name='result'),
      businessId?: string(description='审批实例业务编号', name='business_id'),
      originatorDeptName?: string(description='发起部门', name='originator_dept_name'),
      bizAction?: string(description='审批实例业务动作,MODIFY表示该审批实例是基于原来的实例修改而来，REVOKE表示该审批实例是由原来的实例撤销后重新发起的,NONE表示正常发起', name='biz_action'),
      attachedProcessInstanceIds?: [ string ](description='审批附属实例列表，当已经通过的审批实例被修改或撤销，会生成一个新的实例，作为原有审批实例的附属。如果想知道当前已经通过的审批实例的状态，可以依次遍历它的附属列表，查询里面每个实例的biz_action', name='attached_process_instance_ids'),
      processCode?: string(description='审批表单唯一标示', name='process_code'),
      operationRecords?: [
        {
          userid?: string(description='操作人', name='userid'),
          date?: string(description='时间', pattern='\\\\d{4}[-]\\\\d{1,2}[-]\\\\d{1,2}[T]\\\\d{2}:\\\\d{2}:\\\\d{2}[Z]', name='date'),
          operationType?: string(description='操作类型，分为EXECUTE_TASK_NORMAL（正常执行任务），EXECUTE_TASK_AGENT（代理人执行任务），APPEND_TASK_BEFORE（前加签任务），APPEND_TASK_AFTER（后加签任务），REDIRECT_TASK（转交任务），START_PROCESS_INSTANCE（发起流程实例），TERMINATE_PROCESS_INSTANCE（终止(撤销)流程实例），FINISH_PROCESS_INSTANCE（结束流程实例），ADD_REMARK（添加评论）', name='operation_type'),
          operationResult?: string(description='操作结果，分为AGREE（同意），REFUSE（拒绝）', name='operation_result'),
          remark?: string(description='评论', name='remark'),
        }
      ](description='operationRecords', name='operation_records'),
      tasks?: [
        {
          userid?: string(description='任务处理人', name='userid'),
          taskStatus?: string(description='任务状态，分为NEW（未启动），RUNNING（处理中），PAUSED（暂停），CANCELED（取消），COMPLETED（完成），TERMINATED（终止）', name='task_status'),
          taskResult?: string(description='结果，分为AGREE（同意），REFUSE（拒绝），REDIRECTED（转交）', name='task_result'),
          createTime?: string(description='开始时间', pattern='\\\\d{4}[-]\\\\d{1,2}[-]\\\\d{1,2}[T]\\\\d{2}:\\\\d{2}:\\\\d{2}[Z]', name='create_time'),
          finishTime?: string(description='结束时间', pattern='\\\\d{4}[-]\\\\d{1,2}[-]\\\\d{1,2}[T]\\\\d{2}:\\\\d{2}:\\\\d{2}[Z]', name='finish_time'),
          taskId?: string(description='任务节点id', name='task_id'),
        }
      ](description='tasks', name='tasks'),
      formValues?: [
        {
          formId?: string(description='表单控件id', name='form_id'),
          bizAlias?: string(description='表单别名', name='biz_alias'),
          name?: string(description='表单名称', name='name'),
          value?: string(description='表单值', name='value'),
          extValue?: string(description='扩展值', name='ext_value'),
          details?: [
            {
              detailFormValues?: [
                {
                  detailFormId?: string(description='明细表单控件id', name='detail_form_id'),
                  detailFormBizAlias?: string(description='明细表单别名', name='detail_form_biz_alias'),
                  detailFormName?: string(description='明细表单名称', name='detail_form_name'),
                  detailFormValue?: string(description='明细表单值', name='detail_form_value'),
                  detailFormExtValue?: string(description='明细扩展值', name='detail_form_ext_value'),
                  detailComponentType?: string(description='组件类型', name='detail_component_type'),
                }
              ](description='details', name='detail_form_values'),
            }
          ](description='明细列表', name='details'),
          componentType?: string(description='组件类型', name='component_type'),
        }
      ](description='formValueVOS', name='form_values'),
    }(description='result', name='result'),
    errorMsg?: string(description='errorMsg', name='error_msg'),
  }(description='result', name='result'),
}

model GetwithformSmartworkBpmsProcessinstanceResponse = {
  headers: map[string]string,
  body: GetwithformSmartworkBpmsProcessinstanceResponseBody,
}

/**
 * Description: 获取审批实例的详情和表单信息
 */
async function getwithformSmartworkBpmsProcessinstance(request: GetwithformSmartworkBpmsProcessinstanceRequest): GetwithformSmartworkBpmsProcessinstanceResponse {
  var runtime = new Util.RuntimeOptions{};
  return getwithformSmartworkBpmsProcessinstanceEx(request, runtime);
}

/**
 * Description: 获取审批实例的详情和表单信息
 */
async function getwithformSmartworkBpmsProcessinstanceEx(request: GetwithformSmartworkBpmsProcessinstanceRequest, runtime: Util.RuntimeOptions): GetwithformSmartworkBpmsProcessinstanceResponse {
  Util.validateModel(request);
  var appParams = Util.stringifyMapValue(Util.toMap(request.params));
  return doRequest('dingtalk.smartwork.bpms.processinstance.getwithform', 'POST', '/router/rest', request.headers, appParams, runtime);
}

model ListOapiCrmAuthGroupRequest = {
  headers?: map[string]string,
}

model ListOapiCrmAuthGroupResponseBody = {
  errcode?: int64(description='错误码', name='errcode'),
  errmsg?: string(description='错误信息', name='errmsg'),
  result?: [
    {
      roleId?: int64(description='角色组id', name='role_id'),
      name?: string(description='角色组名称', name='name'),
    }
  ](description='结果', name='result'),
}

model ListOapiCrmAuthGroupResponse = {
  headers: map[string]string,
  body: ListOapiCrmAuthGroupResponseBody,
}

/**
 * Description: 在开通高级版之后，通过该接口获取一个企业的crm权限组id列表。不涉及业务数据和权限组详情
 */
async function listOapiCrmAuthGroup(request: ListOapiCrmAuthGroupRequest): ListOapiCrmAuthGroupResponse {
  var runtime = new Util.RuntimeOptions{};
  return listOapiCrmAuthGroupEx(request, runtime);
}

/**
 * Description: 在开通高级版之后，通过该接口获取一个企业的crm权限组id列表。不涉及业务数据和权限组详情
 */
async function listOapiCrmAuthGroupEx(request: ListOapiCrmAuthGroupRequest, runtime: Util.RuntimeOptions): ListOapiCrmAuthGroupResponse {
  Util.validateModel(request);
  var appParams : map[string]string = {};
  return doRequestOApi('POST', '/topapi/crm/auth/group/list', request.headers, appParams, runtime);
}

model CreateCorpDingTaskParams = {
  taskSendVO: {
    sendUserid: string(description='发送者ID', name='send_userid'),
    contentType: int64(description='任务内容类型；1-文本；目前只支持文本；', name='content_type'),
    content: string(description='任务内容', maxLength=256, name='content'),
    remindType: int64(description='提醒方式；1-应用内；目前只支持应用内；', name='remind_type'),
    remindTime?: int64(description='提醒时间（单位：毫秒），datetime转成long', name='remind_time'),
    receiverUserid: string(description='任务执行人', name='receiver_userid'),
    deadLine: int64(description='任务截止时间（单位：毫秒），datetime转成long', name='dead_line'),
  }(description='任务对外接口', name='task_send_v_o'),
}

model CreateCorpDingTaskRequest = {
  headers?: map[string]string,
  params:CreateCorpDingTaskParams,
}

model CreateCorpDingTaskResponseBody = {
  result?: {
    success?: boolean(description='success', name='success'),
    dingOpenErrcode?: int64(description='dingOpenErrcode', name='ding_open_errcode'),
    errorMsg?: string(description='errorMsg', name='error_msg'),
    result?: {
      dingId?: string(description='dingId', name='ding_id'),
    }(description='result', name='result'),
  }(description='result', name='result'),
}

model CreateCorpDingTaskResponse = {
  headers: map[string]string,
  body: CreateCorpDingTaskResponseBody,
}

/**
 * Description: ding任务创建。不过会有一些限制，只能发送文本任务，不能设置抄送人，只能有一个任务执行人。
 */
async function createCorpDingTask(request: CreateCorpDingTaskRequest): CreateCorpDingTaskResponse {
  var runtime = new Util.RuntimeOptions{};
  return createCorpDingTaskEx(request, runtime);
}

/**
 * Description: ding任务创建。不过会有一些限制，只能发送文本任务，不能设置抄送人，只能有一个任务执行人。
 */
async function createCorpDingTaskEx(request: CreateCorpDingTaskRequest, runtime: Util.RuntimeOptions): CreateCorpDingTaskResponse {
  Util.validateModel(request);
  var appParams = Util.stringifyMapValue(Util.toMap(request.params));
  return doRequest('dingtalk.corp.ding.task.create', 'POST', '/router/rest', request.headers, appParams, runtime);
}

model CreateOapiCrmGroupParams = {
  contactIdList?: [ string ](description='联系人userId列表', maxItems=20, name='contact_id_list'),
  groupOwner: string(description='群主userId', name='group_owner'),
  customerId: string(description='客户id', name='customer_id'),
  colleagueUseridList?: [ string ](description='需要入群的同事userId列表', maxItems=20, name='colleague_userid_list'),
  customerCorpid: string(description='客户归属的企业id', name='customer_corpid'),
}

model CreateOapiCrmGroupRequest = {
  headers?: map[string]string,
  params:CreateOapiCrmGroupParams,
}

model CreateOapiCrmGroupResponseBody = {
  result?: {
    cid?: string(description='加密的群cid', name='cid'),
  }(description='群cid信息', name='result'),
  errcode?: int64(description='错误码', name='errcode'),
  errmsg?: string(description='错误信息', name='errmsg'),
}

model CreateOapiCrmGroupResponse = {
  headers: map[string]string,
  body: CreateOapiCrmGroupResponseBody,
}

/**
 * Description: 创建CRM客户群，并将企业员工以及客户联系人拉到客户群。
 */
async function createOapiCrmGroup(request: CreateOapiCrmGroupRequest): CreateOapiCrmGroupResponse {
  var runtime = new Util.RuntimeOptions{};
  return createOapiCrmGroupEx(request, runtime);
}

/**
 * Description: 创建CRM客户群，并将企业员工以及客户联系人拉到客户群。
 */
async function createOapiCrmGroupEx(request: CreateOapiCrmGroupRequest, runtime: Util.RuntimeOptions): CreateOapiCrmGroupResponse {
  Util.validateModel(request);
  var appParams = Util.stringifyMapValue(Util.toMap(request.params));
  return doRequestOApi('POST', '/topapi/crm/group/create', request.headers, appParams, runtime);
}

model ExecuteOapiProcessinstanceParams = {
  actionerUserid: string(description='操作人id，通过dingtalk.smartwork.bpms.processinstance.get这个接口可以获取', name='actioner_userid'),
  processInstanceId: string(description='审批实例id', name='process_instance_id'),
  taskId: int64(description='任务节点id，dingtalk.smartwork.bpms.processinstance.get接口可获取', name='task_id'),
  result: string(description='审批操作，同意-agree，拒绝-refuse', name='result'),
  remark?: string(description='操作评论，可为空', maxLength=2000, name='remark'),
}

model ExecuteOapiProcessinstanceRequest = {
  headers?: map[string]string,
  params:ExecuteOapiProcessinstanceParams,
}

model ExecuteOapiProcessinstanceResponseBody = {
  result?: boolean(description='操作结果，true为通过，false为失败', name='result'),
  errcode?: int64(description='dingOpenErrcode', name='errcode'),
  errmsg?: string(description='errorMsg', name='errmsg'),
}

model ExecuteOapiProcessinstanceResponse = {
  headers: map[string]string,
  body: ExecuteOapiProcessinstanceResponseBody,
}

/**
 * Description: 指定模板、实例、节点id和审批人，对某个审批节点进行审批。 模板是企业在审批后台编辑好的，审批实例通过开放平台回调获取到，并可通过开放接口读取到审批节点id和审批人
 */
async function executeOapiProcessinstance(request: ExecuteOapiProcessinstanceRequest): ExecuteOapiProcessinstanceResponse {
  var runtime = new Util.RuntimeOptions{};
  return executeOapiProcessinstanceEx(request, runtime);
}

/**
 * Description: 指定模板、实例、节点id和审批人，对某个审批节点进行审批。 模板是企业在审批后台编辑好的，审批实例通过开放平台回调获取到，并可通过开放接口读取到审批节点id和审批人
 */
async function executeOapiProcessinstanceEx(request: ExecuteOapiProcessinstanceRequest, runtime: Util.RuntimeOptions): ExecuteOapiProcessinstanceResponse {
  Util.validateModel(request);
  var appParams = Util.stringifyMapValue(Util.toMap(request.params));
  return doRequestOApi('POST', '/topapi/processinstance/execute', request.headers, appParams, runtime);
}

model ListOapiCrmObjectdataContactParams = {
  currentOperatorUserid?: string(description='操作人用户ID', name='current_operator_userid'),
  dataIdList: [ string ](description='数据ID列表', maxItems=100, name='data_id_list'),
}

model ListOapiCrmObjectdataContactRequest = {
  headers?: map[string]string,
  params:ListOapiCrmObjectdataContactParams,
}

model ListOapiCrmObjectdataContactResponseBody = {
  resultList?: [
    {
      creatorNick?: string(description='记录创建人的昵称', name='creator_nick'),
      gmtModified?: string(description='记录修改时间', name='gmt_modified'),
      creatorUserid?: string(description='记录创建人的用户ID', name='creator_userid'),
      instanceId?: string(description='数据ID', name='instance_id'),
      data?: string(description='数据内容', name='data'),
      extendData?: string(description='扩展数据内容', name='extend_data'),
      gmtCreate?: string(description='记录创建时间', name='gmt_create'),
      objectType?: string(description='数据类型', name='object_type'),
      permission?: {
        participantUseridList?: [ string ](description='协同人用户ID列表', name='participant_userid_list'),
        ownerUseridList?: [ string ](description='负责人用户ID列表', name='owner_userid_list'),
      }(description='数据权限信息', name='permission'),
      procInstStatus?: string(description='审批状态', name='proc_inst_status'),
      procOutResult?: string(description='审批结果', name='proc_out_result'),
    }
  ](description='实例数据', name='result_list'),
  errcode?: int64(description='错误码', name='errcode'),
  errmsg?: string(description='错误信息', name='errmsg'),
}

model ListOapiCrmObjectdataContactResponse = {
  headers: map[string]string,
  body: ListOapiCrmObjectdataContactResponseBody,
}

/**
 * Description: 根据联系人实例id列表批量获取联系人数据，最多可一次获取200条数据
 */
async function listOapiCrmObjectdataContact(request: ListOapiCrmObjectdataContactRequest): ListOapiCrmObjectdataContactResponse {
  var runtime = new Util.RuntimeOptions{};
  return listOapiCrmObjectdataContactEx(request, runtime);
}

/**
 * Description: 根据联系人实例id列表批量获取联系人数据，最多可一次获取200条数据
 */
async function listOapiCrmObjectdataContactEx(request: ListOapiCrmObjectdataContactRequest, runtime: Util.RuntimeOptions): ListOapiCrmObjectdataContactResponse {
  Util.validateModel(request);
  var appParams = Util.stringifyMapValue(Util.toMap(request.params));
  return doRequestOApi('POST', '/topapi/crm/objectdata/contact/list', request.headers, appParams, runtime);
}

model QueryOapiCrmObjectdataFollowrecordParams = {
  currentOperatorUserid?: string(description='用户ID', name='current_operator_userid'),
  cursor?: string(description='分页游标', name='cursor'),
  pageSize: int64(description='分页大小', name='page_size'),
}

model QueryOapiCrmObjectdataFollowrecordRequest = {
  headers?: map[string]string,
  params:QueryOapiCrmObjectdataFollowrecordParams,
}

model QueryOapiCrmObjectdataFollowrecordResponseBody = {
  result?: {
    nextCursor?: string(description='下一页的游标', name='next_cursor'),
    values?: [
      {
        creatorNick?: string(description='创建记录的用户昵称', name='creator_nick'),
        gmtModified?: string(description='记录修改时间', name='gmt_modified'),
        creatorUserid?: string(description='创建记录的用户ID', name='creator_userid'),
        instanceId?: string(description='数据ID', name='instance_id'),
        data?: string(description='数据内容', name='data'),
        extendData?: string(description='扩展数据内容', name='extend_data'),
        gmtCreate?: string(description='记录创建时间', name='gmt_create'),
        objectType?: string(description='数据类型', name='object_type'),
        permission?: {
          ownerUseridList?: [ string ](description='负责人用户ID列表', name='owner_userid_list'),
          participantUseridList?: [ string ](description='协同人用户ID列表', name='participant_userid_list'),
        }(description='数据权限信息', name='permission'),
        procOutResult?: string(description='审批结果', name='proc_out_result'),
        procInstStatus?: string(description='审批状态', name='proc_inst_status'),
      }
    ](description='数据列表', name='values'),
    hasMore?: boolean(description='是否有下一页', name='has_more'),
    pageSize?: int64(description='分页大小', name='page_size'),
  }(description='分页结果', name='result'),
  errcode?: int64(description='错误码', name='errcode'),
  errmsg?: string(description='错误信息', name='errmsg'),
}

model QueryOapiCrmObjectdataFollowrecordResponse = {
  headers: map[string]string,
  body: QueryOapiCrmObjectdataFollowrecordResponseBody,
}

/**
 * Description: 根据指定查询条件批量获取跟进记录数据，最多可一次获取200条数据
 */
async function queryOapiCrmObjectdataFollowrecord(request: QueryOapiCrmObjectdataFollowrecordRequest): QueryOapiCrmObjectdataFollowrecordResponse {
  var runtime = new Util.RuntimeOptions{};
  return queryOapiCrmObjectdataFollowrecordEx(request, runtime);
}

/**
 * Description: 根据指定查询条件批量获取跟进记录数据，最多可一次获取200条数据
 */
async function queryOapiCrmObjectdataFollowrecordEx(request: QueryOapiCrmObjectdataFollowrecordRequest, runtime: Util.RuntimeOptions): QueryOapiCrmObjectdataFollowrecordResponse {
  Util.validateModel(request);
  var appParams = Util.stringifyMapValue(Util.toMap(request.params));
  return doRequestOApi('POST', '/topapi/crm/objectdata/followrecord/query', request.headers, appParams, runtime);
}

model ListOapiCrmObjectdataCustomerParams = {
  currentOperatorUserid?: string(description='操作人用户ID', name='current_operator_userid'),
  dataIdList: [ string ](description='数据ID列表', maxItems=100, name='data_id_list'),
}

model ListOapiCrmObjectdataCustomerRequest = {
  headers?: map[string]string,
  params:ListOapiCrmObjectdataCustomerParams,
}

model ListOapiCrmObjectdataCustomerResponseBody = {
  resultList?: [
    {
      creatorNick?: string(description='记录创建人的昵称', name='creator_nick'),
      gmtModified?: string(description='记录修改时间', name='gmt_modified'),
      creatorUserid?: string(description='记录创建人的用户ID', name='creator_userid'),
      instanceId?: string(description='数据ID', name='instance_id'),
      data?: string(description='数据内容', name='data'),
      extendData?: string(description='扩展数据内容', name='extend_data'),
      gmtCreate?: string(description='记录创建时间', name='gmt_create'),
      objectType?: string(description='数据类型', name='object_type'),
      permission?: {
        participantUseridList?: [ string ](description='协同人用户ID列表', name='participant_userid_list'),
        ownerUseridList?: [ string ](description='负责人用户ID列表', name='owner_userid_list'),
      }(description='数据权限信息', name='permission'),
      procInstStatus?: string(description='审批状态', name='proc_inst_status'),
      procOutResult?: string(description='审批结果', name='proc_out_result'),
    }
  ](description='实例数据', name='result_list'),
  errcode?: int64(description='错误码', name='errcode'),
  errmsg?: string(description='错误信息', name='errmsg'),
}

model ListOapiCrmObjectdataCustomerResponse = {
  headers: map[string]string,
  body: ListOapiCrmObjectdataCustomerResponseBody,
}

/**
 * Description: 根据实例ID列表批量获取客户记录数据，最多可一次获取200条数据
 */
async function listOapiCrmObjectdataCustomer(request: ListOapiCrmObjectdataCustomerRequest): ListOapiCrmObjectdataCustomerResponse {
  var runtime = new Util.RuntimeOptions{};
  return listOapiCrmObjectdataCustomerEx(request, runtime);
}

/**
 * Description: 根据实例ID列表批量获取客户记录数据，最多可一次获取200条数据
 */
async function listOapiCrmObjectdataCustomerEx(request: ListOapiCrmObjectdataCustomerRequest, runtime: Util.RuntimeOptions): ListOapiCrmObjectdataCustomerResponse {
  Util.validateModel(request);
  var appParams = Util.stringifyMapValue(Util.toMap(request.params));
  return doRequestOApi('POST', '/topapi/crm/objectdata/customer/list', request.headers, appParams, runtime);
}

model QueryOapiCrmObjectdataCustomerParams = {
  currentOperatorUserid?: string(description='用户ID', name='current_operator_userid'),
  cursor?: string(description='分页游标', name='cursor'),
  pageSize: int64(description='分页大小', name='page_size'),
}

model QueryOapiCrmObjectdataCustomerRequest = {
  headers?: map[string]string,
  params:QueryOapiCrmObjectdataCustomerParams,
}

model QueryOapiCrmObjectdataCustomerResponseBody = {
  result?: {
    nextCursor?: string(description='下一页的游标', name='next_cursor'),
    values?: [
      {
        creatorNick?: string(description='创建记录的用户昵称', name='creator_nick'),
        gmtModified?: string(description='记录修改时间', name='gmt_modified'),
        creatorUserid?: string(description='创建记录的用户ID', name='creator_userid'),
        instanceId?: string(description='数据ID', name='instance_id'),
        data?: string(description='数据内容', name='data'),
        extendData?: string(description='扩展数据内容', name='extend_data'),
        gmtCreate?: string(description='记录创建时间', name='gmt_create'),
        objectType?: string(description='数据类型', name='object_type'),
        permission?: {
          ownerUseridList?: [ string ](description='负责人用户ID列表', name='owner_userid_list'),
          participantUseridList?: [ string ](description='协同人用户ID列表', name='participant_userid_list'),
        }(description='数据权限信息', name='permission'),
        procOutResult?: string(description='审批结果', name='proc_out_result'),
        procInstStatus?: string(description='审批状态', name='proc_inst_status'),
      }
    ](description='数据列表', name='values'),
    hasMore?: boolean(description='是否有下一页', name='has_more'),
    pageSize?: int64(description='分页大小', name='page_size'),
  }(description='分页结果', name='result'),
  errcode?: int64(description='错误码', name='errcode'),
  errmsg?: string(description='错误信息', name='errmsg'),
}

model QueryOapiCrmObjectdataCustomerResponse = {
  headers: map[string]string,
  body: QueryOapiCrmObjectdataCustomerResponseBody,
}

/**
 * Description: 根据指定查询条件批量获取客户数据，最多可一次获取200条数据
 */
async function queryOapiCrmObjectdataCustomer(request: QueryOapiCrmObjectdataCustomerRequest): QueryOapiCrmObjectdataCustomerResponse {
  var runtime = new Util.RuntimeOptions{};
  return queryOapiCrmObjectdataCustomerEx(request, runtime);
}

/**
 * Description: 根据指定查询条件批量获取客户数据，最多可一次获取200条数据
 */
async function queryOapiCrmObjectdataCustomerEx(request: QueryOapiCrmObjectdataCustomerRequest, runtime: Util.RuntimeOptions): QueryOapiCrmObjectdataCustomerResponse {
  Util.validateModel(request);
  var appParams = Util.stringifyMapValue(Util.toMap(request.params));
  return doRequestOApi('POST', '/topapi/crm/objectdata/customer/query', request.headers, appParams, runtime);
}

model QueryOapiCrmObjectdataContanctParams = {
  currentOperatorUserid?: string(description='用户ID', name='current_operator_userid'),
  cursor?: string(description='分页游标', name='cursor'),
  pageSize: int64(description='分页大小', name='page_size'),
}

model QueryOapiCrmObjectdataContanctRequest = {
  headers?: map[string]string,
  params:QueryOapiCrmObjectdataContanctParams,
}

model QueryOapiCrmObjectdataContanctResponseBody = {
  result?: {
    nextCursor?: string(description='下一页的游标', name='next_cursor'),
    values?: [
      {
        creatorNick?: string(description='创建记录的用户昵称', name='creator_nick'),
        gmtModified?: string(description='记录修改时间', name='gmt_modified'),
        creatorUserid?: string(description='创建记录的用户ID', name='creator_userid'),
        instanceId?: string(description='数据ID', name='instance_id'),
        data?: string(description='数据内容', name='data'),
        extendData?: string(description='扩展数据内容', name='extend_data'),
        gmtCreate?: string(description='记录创建时间', name='gmt_create'),
        objectType?: string(description='数据类型', name='object_type'),
      }
    ](description='数据列表', name='values'),
    hasMore?: boolean(description='是否有下一页', name='has_more'),
    pageSize?: int64(description='分页大小', name='page_size'),
  }(description='分页结果', name='result'),
  errcode?: int64(description='错误码', name='errcode'),
  errmsg?: string(description='错误信息', name='errmsg'),
}

model QueryOapiCrmObjectdataContanctResponse = {
  headers: map[string]string,
  body: QueryOapiCrmObjectdataContanctResponseBody,
}

/**
 * Description: 根据指定查询条件批量获取联系人数据，最多可一次获取200条数据
 */
async function queryOapiCrmObjectdataContanct(request: QueryOapiCrmObjectdataContanctRequest): QueryOapiCrmObjectdataContanctResponse {
  var runtime = new Util.RuntimeOptions{};
  return queryOapiCrmObjectdataContanctEx(request, runtime);
}

/**
 * Description: 根据指定查询条件批量获取联系人数据，最多可一次获取200条数据
 */
async function queryOapiCrmObjectdataContanctEx(request: QueryOapiCrmObjectdataContanctRequest, runtime: Util.RuntimeOptions): QueryOapiCrmObjectdataContanctResponse {
  Util.validateModel(request);
  var appParams = Util.stringifyMapValue(Util.toMap(request.params));
  return doRequestOApi('POST', '/topapi/crm/objectdata/contanct/query', request.headers, appParams, runtime);
}

model ListOapiCrmObjectdataFollowrecordParams = {
  currentOperatorUserid?: string(description='操作人用户ID', name='current_operator_userid'),
  dataIdList: [ string ](description='数据ID列表', maxItems=100, name='data_id_list'),
}

model ListOapiCrmObjectdataFollowrecordRequest = {
  headers?: map[string]string,
  params:ListOapiCrmObjectdataFollowrecordParams,
}

model ListOapiCrmObjectdataFollowrecordResponseBody = {
  resultList?: [
    {
      creatorNick?: string(description='记录创建人的昵称', name='creator_nick'),
      gmtModified?: string(description='记录修改时间', name='gmt_modified'),
      creatorUserid?: string(description='记录创建人的用户ID', name='creator_userid'),
      instanceId?: string(description='数据ID', name='instance_id'),
      data?: string(description='数据内容', name='data'),
      extendData?: string(description='扩展数据内容', name='extend_data'),
      gmtCreate?: string(description='记录创建时间', name='gmt_create'),
      objectType?: string(description='数据类型', name='object_type'),
      permission?: {
        participantUseridList?: [ string ](description='协同人用户ID列表', name='participant_userid_list'),
        ownerUseridList?: [ string ](description='负责人用户ID列表', name='owner_userid_list'),
      }(description='数据权限信息', name='permission'),
      procInstStatus?: string(description='审批状态', name='proc_inst_status'),
      procOutResult?: string(description='审批结果', name='proc_out_result'),
    }
  ](description='实例数据', name='result_list'),
  errcode?: int64(description='错误码', name='errcode'),
  errmsg?: string(description='错误信息', name='errmsg'),
}

model ListOapiCrmObjectdataFollowrecordResponse = {
  headers: map[string]string,
  body: ListOapiCrmObjectdataFollowrecordResponseBody,
}

/**
 * Description: 根据实例ID列表批量获取跟进记录数据，最多可一次获取200条数据
 */
async function listOapiCrmObjectdataFollowrecord(request: ListOapiCrmObjectdataFollowrecordRequest): ListOapiCrmObjectdataFollowrecordResponse {
  var runtime = new Util.RuntimeOptions{};
  return listOapiCrmObjectdataFollowrecordEx(request, runtime);
}

/**
 * Description: 根据实例ID列表批量获取跟进记录数据，最多可一次获取200条数据
 */
async function listOapiCrmObjectdataFollowrecordEx(request: ListOapiCrmObjectdataFollowrecordRequest, runtime: Util.RuntimeOptions): ListOapiCrmObjectdataFollowrecordResponse {
  Util.validateModel(request);
  var appParams = Util.stringifyMapValue(Util.toMap(request.params));
  return doRequestOApi('POST', '/topapi/crm/objectdata/followrecord/list', request.headers, appParams, runtime);
}

model QueryOapiCrmObjectdataContactParams = {
  currentOperatorUserid?: string(description='用户ID', name='current_operator_userid'),
  cursor?: string(description='分页游标', name='cursor'),
  pageSize: int64(description='分页大小', name='page_size'),
}

model QueryOapiCrmObjectdataContactRequest = {
  headers?: map[string]string,
  params:QueryOapiCrmObjectdataContactParams,
}

model QueryOapiCrmObjectdataContactResponseBody = {
  result?: {
    nextCursor?: string(description='下一页的游标', name='next_cursor'),
    values?: [
      {
        creatorNick?: string(description='创建记录的用户昵称', name='creator_nick'),
        gmtModified?: string(description='记录修改时间', name='gmt_modified'),
        creatorUserid?: string(description='创建记录的用户ID', name='creator_userid'),
        instanceId?: string(description='数据ID', name='instance_id'),
        data?: string(description='数据内容', name='data'),
        extendData?: string(description='扩展数据内容', name='extend_data'),
        gmtCreate?: string(description='记录创建时间', name='gmt_create'),
        objectType?: string(description='数据类型', name='object_type'),
        permission?: {
          participantUseridList?: [ string ](description='协同人用户ID列表', name='participant_userid_list'),
          ownerUseridList?: [ string ](description='负责人用户ID列表', name='owner_userid_list'),
        }(description='数据权限信息', name='permission'),
        procOutResult?: string(description='审批结果', name='proc_out_result'),
        procInstStatus?: string(description='审批状态', name='proc_inst_status'),
      }
    ](description='数据列表', name='values'),
    hasMore?: boolean(description='是否有下一页', name='has_more'),
    pageSize?: int64(description='分页大小', name='page_size'),
  }(description='分页结果', name='result'),
  errcode?: int64(description='错误码', name='errcode'),
  errmsg?: string(description='错误信息', name='errmsg'),
}

model QueryOapiCrmObjectdataContactResponse = {
  headers: map[string]string,
  body: QueryOapiCrmObjectdataContactResponseBody,
}

/**
 * Description: 根据指定查询条件批量获取联系人数据，最多可一次获取200条数据
 */
async function queryOapiCrmObjectdataContact(request: QueryOapiCrmObjectdataContactRequest): QueryOapiCrmObjectdataContactResponse {
  var runtime = new Util.RuntimeOptions{};
  return queryOapiCrmObjectdataContactEx(request, runtime);
}

/**
 * Description: 根据指定查询条件批量获取联系人数据，最多可一次获取200条数据
 */
async function queryOapiCrmObjectdataContactEx(request: QueryOapiCrmObjectdataContactRequest, runtime: Util.RuntimeOptions): QueryOapiCrmObjectdataContactResponse {
  Util.validateModel(request);
  var appParams = Util.stringifyMapValue(Util.toMap(request.params));
  return doRequestOApi('POST', '/topapi/crm/objectdata/contact/query', request.headers, appParams, runtime);
}

model UpdateOapiSmartworkHrmEmployeeParams = {
  param: {
    userid?: string(description='staff_id or userId用户在企业的唯一标识', name='userid'),
    groups?: [
      {
        groupId?: string(description='需改的字段所在组ID', name='group_id'),
        sections?: [
          {
            section?: [
              {
                value?: string(description='更新的字段值', name='value'),
                fieldCode?: string(description='更新的字段code', name='field_code'),
              }
            ](description='单个组所有字段', maxItems=100, name='section'),
          }
        ](description='同类型组明细', maxItems=100, name='sections'),
      }
    ](description='所有组明细', maxItems=20, name='groups'),
  }(description='添加待入职入参', name='param'),
  agentid: int64(description='微应用在企业的AgentId', name='agentid'),
}

model UpdateOapiSmartworkHrmEmployeeRequest = {
  headers?: map[string]string,
  params:UpdateOapiSmartworkHrmEmployeeParams,
}

model UpdateOapiSmartworkHrmEmployeeResponseBody = {
  result?: boolean(description='业务处理是否成功', name='result'),
  errcode?: int64(description='错误码', name='errcode'),
  errmsg?: string(description='错误信息', name='errmsg'),
  success?: boolean(description='调用结果', name='success'),
}

model UpdateOapiSmartworkHrmEmployeeResponse = {
  headers: map[string]string,
  body: UpdateOapiSmartworkHrmEmployeeResponseBody,
}

/**
 * Description: 智能人事更新员工档案员工信息
 */
async function updateOapiSmartworkHrmEmployee(request: UpdateOapiSmartworkHrmEmployeeRequest): UpdateOapiSmartworkHrmEmployeeResponse {
  var runtime = new Util.RuntimeOptions{};
  return updateOapiSmartworkHrmEmployeeEx(request, runtime);
}

/**
 * Description: 智能人事更新员工档案员工信息
 */
async function updateOapiSmartworkHrmEmployeeEx(request: UpdateOapiSmartworkHrmEmployeeRequest, runtime: Util.RuntimeOptions): UpdateOapiSmartworkHrmEmployeeResponse {
  Util.validateModel(request);
  var appParams = Util.stringifyMapValue(Util.toMap(request.params));
  return doRequestOApi('POST', '/topapi/smartwork/hrm/employee/update', request.headers, appParams, runtime);
}

model DeleteOapiImChatbotParams = {
  openConversationId: string(description='开放的会话conversationId', maxLength=128, name='open_conversation_id'),
  chatbotUserId: string(description='开放的机器人userId', maxLength=128, name='chatbot_user_id'),
}

model DeleteOapiImChatbotRequest = {
  headers?: map[string]string,
  params:DeleteOapiImChatbotParams,
}

model DeleteOapiImChatbotResponseBody = {
  result?: string(description='删除成功的机器人userId', name='result'),
  errmsg?: string(description='错误描述', name='errmsg'),
  errcode?: int64(description='错误代码', name='errcode'),
}

model DeleteOapiImChatbotResponse = {
  headers: map[string]string,
  body: DeleteOapiImChatbotResponseBody,
}

/**
 * Description: 根据开放的conversationId和机器人示例userId，删除会话内机器人实例
 */
async function deleteOapiImChatbot(request: DeleteOapiImChatbotRequest): DeleteOapiImChatbotResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteOapiImChatbotEx(request, runtime);
}

/**
 * Description: 根据开放的conversationId和机器人示例userId，删除会话内机器人实例
 */
async function deleteOapiImChatbotEx(request: DeleteOapiImChatbotRequest, runtime: Util.RuntimeOptions): DeleteOapiImChatbotResponse {
  Util.validateModel(request);
  var appParams = Util.stringifyMapValue(Util.toMap(request.params));
  return doRequestOApi('POST', '/topapi/im/chatbot/delete', request.headers, appParams, runtime);
}

model GetOapiImChatbotParams = {
  openConversationId: string(description='开放的会话conversationId', name='open_conversation_id'),
}

model GetOapiImChatbotRequest = {
  headers?: map[string]string,
  params:GetOapiImChatbotParams,
}

model GetOapiImChatbotResponseBody = {
  result?: [
    {
      chatbotUserId?: string(description='机器人userId', name='chatbot_user_id'),
    }
  ](description='开放的机器人实例列表', name='result'),
  errmsg?: string(description='错误描述', name='errmsg'),
  errcode?: int64(description='错误代码', name='errcode'),
}

model GetOapiImChatbotResponse = {
  headers: map[string]string,
  body: GetOapiImChatbotResponseBody,
}

/**
 * Description: 根据开放的conversationId，获取该会话内机器人实例列表
 */
async function getOapiImChatbot(request: GetOapiImChatbotRequest): GetOapiImChatbotResponse {
  var runtime = new Util.RuntimeOptions{};
  return getOapiImChatbotEx(request, runtime);
}

/**
 * Description: 根据开放的conversationId，获取该会话内机器人实例列表
 */
async function getOapiImChatbotEx(request: GetOapiImChatbotRequest, runtime: Util.RuntimeOptions): GetOapiImChatbotResponse {
  Util.validateModel(request);
  var appParams = Util.stringifyMapValue(Util.toMap(request.params));
  return doRequestOApi('POST', '/topapi/im/chatbot/get', request.headers, appParams, runtime);
}

model ConvertOapiImChatCidParams = {
  chatId: string(description='开放的chatId', maxLength=128, name='chat_id'),
}

model ConvertOapiImChatCidRequest = {
  headers?: map[string]string,
  params:ConvertOapiImChatCidParams,
}

model ConvertOapiImChatCidResponseBody = {
  errcode?: int64(description='错误代码', name='errcode'),
  errmsg?: string(description='错误描述', name='errmsg'),
  result?: string(description='开放的conversationId', name='result'),
}

model ConvertOapiImChatCidResponse = {
  headers: map[string]string,
  body: ConvertOapiImChatCidResponseBody,
}

/**
 * Description: 根据会话chatId，查询其对应的conversationId
 */
async function convertOapiImChatCid(request: ConvertOapiImChatCidRequest): ConvertOapiImChatCidResponse {
  var runtime = new Util.RuntimeOptions{};
  return convertOapiImChatCidEx(request, runtime);
}

/**
 * Description: 根据会话chatId，查询其对应的conversationId
 */
async function convertOapiImChatCidEx(request: ConvertOapiImChatCidRequest, runtime: Util.RuntimeOptions): ConvertOapiImChatCidResponse {
  Util.validateModel(request);
  var appParams = Util.stringifyMapValue(Util.toMap(request.params));
  return doRequestOApi('POST', '/topapi/im/chat/cid/convert', request.headers, appParams, runtime);
}

model GetbybiztypeSmartworkBpmsProcessParams = {
  bizType: string(description='套件开发时与审批约定的业务标识', name='biz_type'),
}

model GetbybiztypeSmartworkBpmsProcessRequest = {
  headers?: map[string]string,
  params:GetbybiztypeSmartworkBpmsProcessParams,
}

model GetbybiztypeSmartworkBpmsProcessResponseBody = {
  result?: {
    dingOpenErrcode?: int64(description='错误码', name='ding_open_errcode'),
    errorMsg?: string(description='错误信息', name='error_msg'),
    success?: boolean(description='success', name='success'),
    processList?: [
      {
        processCode?: string(description='流程模板唯一标识', name='process_code'),
        processName?: string(description='流程模板名称', name='process_name'),
      }
    ](description='返回数据', name='process_list'),
  }(description='result', name='result'),
}

model GetbybiztypeSmartworkBpmsProcessResponse = {
  headers: map[string]string,
  body: GetbybiztypeSmartworkBpmsProcessResponseBody,
}

/**
 * Description: 根据审批套件标识获取审批模板
 */
async function getbybiztypeSmartworkBpmsProcess(request: GetbybiztypeSmartworkBpmsProcessRequest): GetbybiztypeSmartworkBpmsProcessResponse {
  var runtime = new Util.RuntimeOptions{};
  return getbybiztypeSmartworkBpmsProcessEx(request, runtime);
}

/**
 * Description: 根据审批套件标识获取审批模板
 */
async function getbybiztypeSmartworkBpmsProcessEx(request: GetbybiztypeSmartworkBpmsProcessRequest, runtime: Util.RuntimeOptions): GetbybiztypeSmartworkBpmsProcessResponse {
  Util.validateModel(request);
  var appParams = Util.stringifyMapValue(Util.toMap(request.params));
  return doRequest('dingtalk.smartwork.bpms.process.getbybiztype', 'POST', '/router/rest', request.headers, appParams, runtime);
}

model GetvisibleSmartworkBpmsProcessParams = {
  userid: string(description='员工ID', name='userid'),
  processCodeList: [ string ](description='流程模板唯一标识，可在oa后台编辑审批表单部分查询', maxItems=20, name='process_code_list'),
}

model GetvisibleSmartworkBpmsProcessRequest = {
  headers?: map[string]string,
  params:GetvisibleSmartworkBpmsProcessParams,
}

model GetvisibleSmartworkBpmsProcessResponseBody = {
  result?: {
    success?: boolean(description='请求状态', name='success'),
    processes?: [
      {
        processCode?: string(description='可见的流程模板唯一标识，最多20条', name='process_code'),
      }
    ](description='返回的业务数据', name='processes'),
    errorMsg?: string(description='错误信息', name='error_msg'),
    dingOpenErrcode?: int64(description='错误码', name='ding_open_errcode'),
  }(description='返回数据', name='result'),
}

model GetvisibleSmartworkBpmsProcessResponse = {
  headers: map[string]string,
  body: GetvisibleSmartworkBpmsProcessResponseBody,
}

/**
 * Description: 检测用户是否有审批模板的可用权限
 */
async function getvisibleSmartworkBpmsProcess(request: GetvisibleSmartworkBpmsProcessRequest): GetvisibleSmartworkBpmsProcessResponse {
  var runtime = new Util.RuntimeOptions{};
  return getvisibleSmartworkBpmsProcessEx(request, runtime);
}

/**
 * Description: 检测用户是否有审批模板的可用权限
 */
async function getvisibleSmartworkBpmsProcessEx(request: GetvisibleSmartworkBpmsProcessRequest, runtime: Util.RuntimeOptions): GetvisibleSmartworkBpmsProcessResponse {
  Util.validateModel(request);
  var appParams = Util.stringifyMapValue(Util.toMap(request.params));
  return doRequest('dingtalk.smartwork.bpms.process.getvisible', 'POST', '/router/rest', request.headers, appParams, runtime);
}

model ListOapiInspectTaskParams = {
  param: {
    size: int64(description='分页请求数量，最大值50', maxLength=50, name='size'),
    cursor?: int64(description='游标，从返回结果中获取，第一次请求可为空', name='cursor'),
    status: [ int64 ](description='请求的状态列表，1已签到，2已正常签退，3已异常签退', maxItems=20, name='status'),
    endDate: int64(description='请求开始时间，时间戳，单位毫秒', name='end_date'),
    startDate: int64(description='请求结束时间，时间戳，单位毫秒', name='start_date'),
    deptId: string(description='部门id，从通讯录接口获取', name='dept_id'),
  }(description='请求入参', name='param'),
}

model ListOapiInspectTaskRequest = {
  headers?: map[string]string,
  params:ListOapiInspectTaskParams,
}

model ListOapiInspectTaskResponseBody = {
  result?: {
    nextCursor?: int64(description='游标，下次分页请求使用', name='next_cursor'),
    hasMore?: boolean(description='是否还有数据', name='has_more'),
    list?: [
      {
        duration?: string(description='巡店时间，单位秒', name='duration'),
        status?: string(description='任务状态，1已签到，2已正常签退，3已异常签退', name='status'),
        checkOutTime?: int64(description='签退时间戳，单位毫秒', name='check_out_time'),
        checkInTime?: int64(description='签到时间戳，单位毫秒', name='check_in_time'),
        userid?: string(description='员工id', name='userid'),
        workDate?: int64(description='工作日期时间戳，单位毫秒', name='work_date'),
        taskId?: string(description='任务id 唯一标识一个任务', name='task_id'),
        positionId?: string(description='位置唯一标识，如果是B1等硬件设备则为设备唯一标识', name='position_id'),
        positionName?: string(description='位置名称', name='position_name'),
      }
    ](description='巡店任务列表', name='list'),
  }(description='分页结果', name='result'),
  errcode?: int64(description='错误码', name='errcode'),
  errmsg?: string(description='错误信息', name='errmsg'),
}

model ListOapiInspectTaskResponse = {
  headers: map[string]string,
  body: ListOapiInspectTaskResponseBody,
}

/**
 * Description: 钉钉巡店应用，巡店任务查询接口，按照部门分页查询一定时间范围的巡店任务详情。
 */
async function listOapiInspectTask(request: ListOapiInspectTaskRequest): ListOapiInspectTaskResponse {
  var runtime = new Util.RuntimeOptions{};
  return listOapiInspectTaskEx(request, runtime);
}

/**
 * Description: 钉钉巡店应用，巡店任务查询接口，按照部门分页查询一定时间范围的巡店任务详情。
 */
async function listOapiInspectTaskEx(request: ListOapiInspectTaskRequest, runtime: Util.RuntimeOptions): ListOapiInspectTaskResponse {
  Util.validateModel(request);
  var appParams = Util.stringifyMapValue(Util.toMap(request.params));
  return doRequestOApi('POST', '/topapi/inspect/task/list', request.headers, appParams, runtime);
}

model QueryOapiCustomerserviceTicketParams = {
  ticketPageQueryDto: {
    sourceId: string(description='三方账号标识', name='source_id'),
    foreignId: string(description='三方账号id', name='foreign_id'),
    ticketTemplateId: string(description='工单类型id', name='ticket_template_id'),
    foreignName: string(description='三方账号姓名', name='foreign_name'),
    endDate?: string(description='结束时间', pattern='\\\\d{4}[-]\\\\d{1,2}[-]\\\\d{1,2}[T]\\\\d{2}:\\\\d{2}:\\\\d{2}[Z]', name='end_date'),
    ticketStatus?: string(description='待受理', name='ticket_status'),
    startDate?: string(description='开始时间', pattern='\\\\d{4}[-]\\\\d{1,2}[-]\\\\d{1,2}[T]\\\\d{2}:\\\\d{2}:\\\\d{2}[Z]', name='start_date'),
    ticketId?: string(description='工单id', name='ticket_id'),
    size: int64(description='分页大小', name='size'),
    cursor: int64(description='游标', name='cursor'),
  }(description='查询对象', name='ticket_page_query_dto'),
}

model QueryOapiCustomerserviceTicketRequest = {
  headers?: map[string]string,
  params:QueryOapiCustomerserviceTicketParams,
}

model QueryOapiCustomerserviceTicketResponseBody = {
  result?: {
    result?: {
      total?: int64(description='总数', name='total'),
      ticketList?: [
        {
          gmtModified?: string(description='最新修改时间', pattern='\\\\d{4}[-]\\\\d{1,2}[-]\\\\d{1,2}[T]\\\\d{2}:\\\\d{2}:\\\\d{2}[Z]', name='gmt_modified'),
          ticketId?: string(description='工单id', name='ticket_id'),
          title?: string(description='工单标题', name='title'),
          templateId?: string(description='模板id', name='template_id'),
          gmtCreate?: string(description='新建时间', pattern='\\\\d{4}[-]\\\\d{1,2}[-]\\\\d{1,2}[T]\\\\d{2}:\\\\d{2}:\\\\d{2}[Z]', name='gmt_create'),
          ticketStatus?: string(description='工单状态', name='ticket_status'),
        }
      ](description='工单列表', name='ticket_list'),
      nextCursor?: int64(description='下一次分页的游标', name='next_cursor'),
      hasMore?: boolean(description='是否有更多数据', name='has_more'),
    }(description='分页结果对象', name='result'),
    success?: boolean(description='是否成功', name='success'),
    errcode?: int64(description='错误吗', name='errcode'),
    errmsg?: string(description='错误消息', name='errmsg'),
  }(description='返回结果', name='result'),
}

model QueryOapiCustomerserviceTicketResponse = {
  headers: map[string]string,
  body: QueryOapiCustomerserviceTicketResponseBody,
}

/**
 * Description: 企业的会员查询其提交的工单列表
 */
async function queryOapiCustomerserviceTicket(request: QueryOapiCustomerserviceTicketRequest): QueryOapiCustomerserviceTicketResponse {
  var runtime = new Util.RuntimeOptions{};
  return queryOapiCustomerserviceTicketEx(request, runtime);
}

/**
 * Description: 企业的会员查询其提交的工单列表
 */
async function queryOapiCustomerserviceTicketEx(request: QueryOapiCustomerserviceTicketRequest, runtime: Util.RuntimeOptions): QueryOapiCustomerserviceTicketResponse {
  Util.validateModel(request);
  var appParams = Util.stringifyMapValue(Util.toMap(request.params));
  return doRequestOApi('POST', '/topapi/customerservice/ticket/query', request.headers, appParams, runtime);
}

model QueryOapiCustomerserviceActionParams = {
  ticketActionPageQuery: {
    ticketId: string(description='工单id', name='ticket_id'),
    size: int64(description='分页大小', name='size'),
    cursor: int64(description='查询游标', name='cursor'),
  }(description='分页查询条件', name='ticket_action_page_query'),
}

model QueryOapiCustomerserviceActionRequest = {
  headers?: map[string]string,
  params:QueryOapiCustomerserviceActionParams,
}

model QueryOapiCustomerserviceActionResponseBody = {
  result?: {
    result?: {
      total?: int64(description='总数', name='total'),
      actionList?: [
        {
          actionContent?: [
            {
              value?: string(description='值', name='value'),
              name?: string(description='键', name='name'),
              displayName?: string(description='标签名', name='display_name'),
              displayValue?: string(description='标签值', name='display_value'),
            }
          ](description='动作表单字段列表', name='action_content'),
          operator?: string(description='执行人', name='operator'),
          operatorRole?: string(description='创建者1；客服 4；', name='operator_role'),
        }
      ](description='动作列表', name='action_list'),
      hasMore?: boolean(description='还有数据', name='has_more'),
      nextCursor?: int64(description='下一页的游标', name='next_cursor'),
    }(description='分页查询结果', name='result'),
    success?: boolean(description='是否成功', name='success'),
    errcode?: int64(description='错误码', name='errcode'),
    errmsg?: string(description='文案', name='errmsg'),
  }(description='返回值', name='result'),
}

model QueryOapiCustomerserviceActionResponse = {
  headers: map[string]string,
  body: QueryOapiCustomerserviceActionResponseBody,
}

/**
 * Description: 会员查询客服和自己的对话
 */
async function queryOapiCustomerserviceAction(request: QueryOapiCustomerserviceActionRequest): QueryOapiCustomerserviceActionResponse {
  var runtime = new Util.RuntimeOptions{};
  return queryOapiCustomerserviceActionEx(request, runtime);
}

/**
 * Description: 会员查询客服和自己的对话
 */
async function queryOapiCustomerserviceActionEx(request: QueryOapiCustomerserviceActionRequest, runtime: Util.RuntimeOptions): QueryOapiCustomerserviceActionResponse {
  Util.validateModel(request);
  var appParams = Util.stringifyMapValue(Util.toMap(request.params));
  return doRequestOApi('POST', '/topapi/customerservice/action/query', request.headers, appParams, runtime);
}

model ExecuteOapiCustomerserviceActivityParams = {
  ticketActivity: {
    sourceId: string(description='第三方会员来源', name='source_id'),
    foreignId: string(description='第三方会员id', name='foreign_id'),
    activityCode: string(description='活动code', name='activity_code'),
    foreignName: string(description='第三方会员名字', name='foreign_name'),
    ticketId: string(description='工单id', name='ticket_id'),
    properties: [
      {
        name: string(description='key', name='name'),
        value: string(description='value', name='value'),
      }
    ](description='表单的数据', maxItems=20, name='properties'),
  }(description='活动', name='ticket_activity'),
}

model ExecuteOapiCustomerserviceActivityRequest = {
  headers?: map[string]string,
  params:ExecuteOapiCustomerserviceActivityParams,
}

model ExecuteOapiCustomerserviceActivityResponseBody = {
  success?: boolean(description='是否成功', name='success'),
  errcode?: int64(description='异常码', name='errcode'),
  errmsg?: string(description='消息', name='errmsg'),
}

model ExecuteOapiCustomerserviceActivityResponse = {
  headers: map[string]string,
  body: ExecuteOapiCustomerserviceActivityResponseBody,
}

/**
 * Description: 会员执行工单上的活动，如回复、评论
 */
async function executeOapiCustomerserviceActivity(request: ExecuteOapiCustomerserviceActivityRequest): ExecuteOapiCustomerserviceActivityResponse {
  var runtime = new Util.RuntimeOptions{};
  return executeOapiCustomerserviceActivityEx(request, runtime);
}

/**
 * Description: 会员执行工单上的活动，如回复、评论
 */
async function executeOapiCustomerserviceActivityEx(request: ExecuteOapiCustomerserviceActivityRequest, runtime: Util.RuntimeOptions): ExecuteOapiCustomerserviceActivityResponse {
  Util.validateModel(request);
  var appParams = Util.stringifyMapValue(Util.toMap(request.params));
  return doRequestOApi('POST', '/topapi/customerservice/activity/execute', request.headers, appParams, runtime);
}

model CreateOapiCustomerserviceTicketParams = {
  ticketCreate: {
    sourceId: string(description='会员标识', name='source_id'),
    foreignId: string(description='第三方会员id', name='foreign_id'),
    foreignName: string(description='第三方会员名', name='foreign_name'),
    templateId: string(description='工单模板id', name='template_id'),
    title: string(description='工单标题', name='title'),
    properties: [
      {
        value: string(description='字段key', name='value'),
        name: string(description='字段值', name='name'),
      }
    ](description='工单表单', maxItems=20, name='properties'),
  }(description='工单对象', name='ticket_create'),
}

model CreateOapiCustomerserviceTicketRequest = {
  headers?: map[string]string,
  params:CreateOapiCustomerserviceTicketParams,
}

model CreateOapiCustomerserviceTicketResponseBody = {
  result?: {
    ticketId?: string(description='工单id', name='ticket_id'),
  }(description='结果对象', name='result'),
  success?: boolean(description='是否成功', name='success'),
  errcode?: int64(description='异常码', name='errcode'),
  errmsg?: string(description='异常消息', name='errmsg'),
}

model CreateOapiCustomerserviceTicketResponse = {
  headers: map[string]string,
  body: CreateOapiCustomerserviceTicketResponseBody,
}

/**
 * Description: 用于第三方企业的用户给其客服新建工单使用
 */
async function createOapiCustomerserviceTicket(request: CreateOapiCustomerserviceTicketRequest): CreateOapiCustomerserviceTicketResponse {
  var runtime = new Util.RuntimeOptions{};
  return createOapiCustomerserviceTicketEx(request, runtime);
}

/**
 * Description: 用于第三方企业的用户给其客服新建工单使用
 */
async function createOapiCustomerserviceTicketEx(request: CreateOapiCustomerserviceTicketRequest, runtime: Util.RuntimeOptions): CreateOapiCustomerserviceTicketResponse {
  Util.validateModel(request);
  var appParams = Util.stringifyMapValue(Util.toMap(request.params));
  return doRequestOApi('POST', '/topapi/customerservice/ticket/create', request.headers, appParams, runtime);
}

model UpdateOapiRoleScopeParams = {
  userid: string(description='员工在企业中的ID', name='userid'),
  roleId: int64(description='角色ID', name='role_id'),
  deptIds?: [ int64 ](description='部门ID列表数', maxItems=200, name='dept_ids'),
}

model UpdateOapiRoleScopeRequest = {
  headers?: map[string]string,
  params:UpdateOapiRoleScopeParams,
}

model UpdateOapiRoleScopeResponseBody = {
  errcode?: int64(description='错误码，0为成功', name='errcode'),
  errmsg?: string(description='错误信息', name='errmsg'),
}

model UpdateOapiRoleScopeResponse = {
  headers: map[string]string,
  body: UpdateOapiRoleScopeResponseBody,
}

/**
 * Description: 更新角色成员管理范围，指定企业成员在角色下管理部门的范围
 */
async function updateOapiRoleScope(request: UpdateOapiRoleScopeRequest): UpdateOapiRoleScopeResponse {
  var runtime = new Util.RuntimeOptions{};
  return updateOapiRoleScopeEx(request, runtime);
}

/**
 * Description: 更新角色成员管理范围，指定企业成员在角色下管理部门的范围
 */
async function updateOapiRoleScopeEx(request: UpdateOapiRoleScopeRequest, runtime: Util.RuntimeOptions): UpdateOapiRoleScopeResponse {
  Util.validateModel(request);
  var appParams = Util.stringifyMapValue(Util.toMap(request.params));
  return doRequestOApi('POST', '/topapi/role/scope/update', request.headers, appParams, runtime);
}

model GetpushidOapiRobotMessageRequest = {
  headers?: map[string]string,
}

model GetpushidOapiRobotMessageResponseBody = {
  result?: string(description='批量消息推送Id', name='result'),
  success?: boolean(description='是否调用成功', name='success'),
  errcode?: int64(description='dingOpenErrcode', name='errcode'),
  errmsg?: string(description='errorMsg', name='errmsg'),
}

model GetpushidOapiRobotMessageResponse = {
  headers: map[string]string,
  body: GetpushidOapiRobotMessageResponseBody,
}

/**
 * Description: 颁发给isv机器人消息批量推送id
 */
async function getpushidOapiRobotMessage(request: GetpushidOapiRobotMessageRequest): GetpushidOapiRobotMessageResponse {
  var runtime = new Util.RuntimeOptions{};
  return getpushidOapiRobotMessageEx(request, runtime);
}

/**
 * Description: 颁发给isv机器人消息批量推送id
 */
async function getpushidOapiRobotMessageEx(request: GetpushidOapiRobotMessageRequest, runtime: Util.RuntimeOptions): GetpushidOapiRobotMessageResponse {
  Util.validateModel(request);
  var appParams : map[string]string = {};
  return doRequestOApi('POST', '/topapi/robot/message/getpushid', request.headers, appParams, runtime);
}

model GetOapiEduRolesParams = {
  userid: string(description='员工id', name='userid'),
}

model GetOapiEduRolesRequest = {
  headers?: map[string]string,
  params:GetOapiEduRolesParams,
}

model GetOapiEduRolesResponseBody = {
  result?: {
    advisor?: [ int64 ](description='非NULL列表;此员工在当前家校通讯录中的是班主任角色的班级列表', name='advisor'),
    teacher?: [ int64 ](description='非NULL列表;此员工在当前家校通讯录中的是老师角色的班级列表', name='teacher'),
    student?: [ int64 ](description='非NULL列表;此员工在当前家校通讯录中的是学生角色的班级列表', name='student'),
    guardian?: [ int64 ](description='非NULL列表;此员工在当前家校通讯录中的是监护人角色的班级列表', name='guardian'),
    userid?: string(description='员工id', name='userid'),
  }(description='请求数据块', name='result'),
  success?: boolean(description='请求是否成功', name='success'),
  errcode?: int64(description='错误码', name='errcode'),
  errmsg?: string(description='错误信息', name='errmsg'),
}

model GetOapiEduRolesResponse = {
  headers: map[string]string,
  body: GetOapiEduRolesResponseBody,
}

/**
 * Description: 查询家校用户角色班级对应关系
 */
async function getOapiEduRoles(request: GetOapiEduRolesRequest): GetOapiEduRolesResponse {
  var runtime = new Util.RuntimeOptions{};
  return getOapiEduRolesEx(request, runtime);
}

/**
 * Description: 查询家校用户角色班级对应关系
 */
async function getOapiEduRolesEx(request: GetOapiEduRolesRequest, runtime: Util.RuntimeOptions): GetOapiEduRolesResponse {
  Util.validateModel(request);
  var appParams = Util.stringifyMapValue(Util.toMap(request.params));
  return doRequestOApi('POST', '/topapi/edu/roles/get', request.headers, appParams, runtime);
}

model ListOapiCspaceAuditlogParams = {
  startDate: int64(description='操作日志起始时间，unix时间戳，单位ms', name='start_date'),
  endDate: int64(description='操作日志截止时间，unix时间戳，单位ms', name='end_date'),
  pageSize: int64(description='操作列表长度，最大500', name='page_size'),
  loadMoreGmtCreate?: int64(description='操作记录生成时间，作为分页偏移量，分页查询时必传，unix时间戳，单位ms', name='load_more_gmt_create'),
  loadMoreBizId?: int64(description='操作记录文件id，作为分页偏移量，与load_more_gmt_create一起使用，返回记录的biz_id为load_more_biz_id且gmt_create为load_more_gmt_create之后的操作列表，分页查询获取下一页时，传最后一条记录的biz_id和gmt_create。', name='load_more_biz_id'),
}

model ListOapiCspaceAuditlogRequest = {
  headers?: map[string]string,
  params:ListOapiCspaceAuditlogParams,
}

model ListOapiCspaceAuditlogResponseBody = {
  result?: {
    list?: [
      {
        gmtModified?: int64(description='记录修改时间，unix时间戳，单位ms', name='gmt_modified'),
        operateModule?: int64(description='操作来源空间', name='operate_module'),
        operateModuleView?: string(description='操作来源翻译值', name='operate_module_view'),
        bizId?: string(description='文件id', name='biz_id'),
        operatorName?: string(description='用户名字', name='operator_name'),
        platform?: int64(description='操作端', name='platform'),
        platformView?: string(description='操作端翻译值', name='platform_view'),
        status?: int64(description='记录状态', name='status'),
        action?: int64(description='操作类型', name='action'),
        actionView?: string(description='操作类型翻译值', name='action_view'),
        resource?: string(description='文件名', name='resource'),
        gmtCreate?: int64(description='记录生成时间，unix时间戳，单位ms', name='gmt_create'),
        userid?: string(description='员工的userId', name='userid'),
      }
    ](description='记录列表', name='list'),
  }(description='结果', name='result'),
  success?: boolean(description='请求结果', name='success'),
  errcode?: int64(description='错误码', name='errcode'),
  errmsg?: string(description='错误信息', name='errmsg'),
}

model ListOapiCspaceAuditlogResponse = {
  headers: map[string]string,
  body: ListOapiCspaceAuditlogResponseBody,
}

/**
 * Description: 获取企业下文件操作日志列表
 */
async function listOapiCspaceAuditlog(request: ListOapiCspaceAuditlogRequest): ListOapiCspaceAuditlogResponse {
  var runtime = new Util.RuntimeOptions{};
  return listOapiCspaceAuditlogEx(request, runtime);
}

/**
 * Description: 获取企业下文件操作日志列表
 */
async function listOapiCspaceAuditlogEx(request: ListOapiCspaceAuditlogRequest, runtime: Util.RuntimeOptions): ListOapiCspaceAuditlogResponse {
  Util.validateModel(request);
  var appParams = Util.stringifyMapValue(Util.toMap(request.params));
  return doRequestOApi('POST', '/topapi/cspace/auditlog/list', request.headers, appParams, runtime);
}

model ListSmartworkBpmsProcessinstanceidParams = {
  processCode: string(description='流程模板唯一标识，可在oa后台编辑审批表单部分查询', name='process_code'),
  startTime: int64(description='审批实例开始时间，毫秒级', name='start_time'),
  endTime?: int64(description='审批实例结束时间，毫秒级，默认取当前值', name='end_time'),
  cursor?: int64(description='分页查询的游标，最开始传0，后续传返回参数中的next_cursor值', name='cursor'),
  size?: int64(description='分页参数，每页大小，最多传20', name='size'),
  useridList?: [ string ](description='发起人用户id列表', maxItems=20, name='userid_list'),
}

model ListSmartworkBpmsProcessinstanceidRequest = {
  headers?: map[string]string,
  params:ListSmartworkBpmsProcessinstanceidParams,
}

model ListSmartworkBpmsProcessinstanceidResponseBody = {
  result?: {
    result?: {
      list?: [
        {
          processInstanceId?: string(description='审批实例id', name='process_instance_id'),
        }
      ](description='list', name='list'),
      nextCursor?: int64(description='表示下次查询的游标，当返回结果没有该字段时表示没有更多数据了', name='next_cursor'),
    }(description='result', name='result'),
    errorMsg?: string(description='错误信息', name='error_msg'),
    dingOpenErrcode?: int64(description='错误码', name='ding_open_errcode'),
    success?: boolean(description='success', name='success'),
  }(description='DingOpenResult', name='result'),
}

model ListSmartworkBpmsProcessinstanceidResponse = {
  headers: map[string]string,
  body: ListSmartworkBpmsProcessinstanceidResponseBody,
}

/**
 * Description: 获取审批实例ID列表
 */
async function listSmartworkBpmsProcessinstanceid(request: ListSmartworkBpmsProcessinstanceidRequest): ListSmartworkBpmsProcessinstanceidResponse {
  var runtime = new Util.RuntimeOptions{};
  return listSmartworkBpmsProcessinstanceidEx(request, runtime);
}

/**
 * Description: 获取审批实例ID列表
 */
async function listSmartworkBpmsProcessinstanceidEx(request: ListSmartworkBpmsProcessinstanceidRequest, runtime: Util.RuntimeOptions): ListSmartworkBpmsProcessinstanceidResponse {
  Util.validateModel(request);
  var appParams = Util.stringifyMapValue(Util.toMap(request.params));
  return doRequest('dingtalk.smartwork.bpms.processinstanceid.list', 'POST', '/router/rest', request.headers, appParams, runtime);
}

model ListcontactOapiSmartworkHrmEmployeeParams = {
  useridList: [ string ](description='员工id列表', maxItems=50, name='userid_list'),
}

model ListcontactOapiSmartworkHrmEmployeeRequest = {
  headers?: map[string]string,
  params:ListcontactOapiSmartworkHrmEmployeeParams,
}

model ListcontactOapiSmartworkHrmEmployeeResponseBody = {
  result?: [
    {
      userid?: string(description='员工id', name='userid'),
      fieldList?: [
        {
          groupId?: string(description='字段业务分组', name='group_id'),
          value?: string(description='字段值', name='value'),
          fieldCode?: string(description='字段编码', name='field_code'),
          fieldName?: string(description='字段名称', name='field_name'),
          label?: string(description='字段值文本说明', name='label'),
        }
      ](description='字段信息列表', name='field_list'),
    }
  ](description='返回结果', name='result'),
  errcode?: int64(description='错误码', name='errcode'),
  errmsg?: string(description='错误信息', name='errmsg'),
  success?: boolean(description='调用是否成功', name='success'),
}

model ListcontactOapiSmartworkHrmEmployeeResponse = {
  headers: map[string]string,
  body: ListcontactOapiSmartworkHrmEmployeeResponseBody,
}

/**
 * Description: ISV批量获取离职员工的通讯录花名册字段信息
 */
async function listcontactOapiSmartworkHrmEmployee(request: ListcontactOapiSmartworkHrmEmployeeRequest): ListcontactOapiSmartworkHrmEmployeeResponse {
  var runtime = new Util.RuntimeOptions{};
  return listcontactOapiSmartworkHrmEmployeeEx(request, runtime);
}

/**
 * Description: ISV批量获取离职员工的通讯录花名册字段信息
 */
async function listcontactOapiSmartworkHrmEmployeeEx(request: ListcontactOapiSmartworkHrmEmployeeRequest, runtime: Util.RuntimeOptions): ListcontactOapiSmartworkHrmEmployeeResponse {
  Util.validateModel(request);
  var appParams = Util.stringifyMapValue(Util.toMap(request.params));
  return doRequestOApi('POST', '/topapi/smartwork/hrm/employee/listcontact', request.headers, appParams, runtime);
}

model GetOapiCcoserviceServicegroupParams = {
  openGroupId: string(description='服务群id', name='open_group_id'),
}

model GetOapiCcoserviceServicegroupRequest = {
  headers?: map[string]string,
  params:GetOapiCcoserviceServicegroupParams,
}

model GetOapiCcoserviceServicegroupResponseBody = {
  result?: {
    title?: string(description='title', name='title'),
    ownerName?: string(description='ownerName', name='owner_name'),
    ownerNick?: string(description='ownerNick', name='owner_nick'),
    ownerDingtalkId?: string(description='ownerDingtalkId', name='owner_dingtalk_id'),
    ownerUserid?: string(description='ownerUserid', name='owner_userid'),
    type?: int64(description='type', name='type'),
    conversationType?: int64(description='conversationType', name='conversation_type'),
  }(description='result', name='result'),
  errmsg?: string(description='errorMsg', name='errmsg'),
  errcode?: int64(description='dingOpenErrcode', name='errcode'),
}

model GetOapiCcoserviceServicegroupResponse = {
  headers: map[string]string,
  body: GetOapiCcoserviceServicegroupResponseBody,
}

/**
 * Description: 企业查询自己企业内服务群的信息，会把服务群的群主信息，dingtalkid，nick，真实姓名和群名称返回。
 */
async function getOapiCcoserviceServicegroup(request: GetOapiCcoserviceServicegroupRequest): GetOapiCcoserviceServicegroupResponse {
  var runtime = new Util.RuntimeOptions{};
  return getOapiCcoserviceServicegroupEx(request, runtime);
}

/**
 * Description: 企业查询自己企业内服务群的信息，会把服务群的群主信息，dingtalkid，nick，真实姓名和群名称返回。
 */
async function getOapiCcoserviceServicegroupEx(request: GetOapiCcoserviceServicegroupRequest, runtime: Util.RuntimeOptions): GetOapiCcoserviceServicegroupResponse {
  Util.validateModel(request);
  var appParams = Util.stringifyMapValue(Util.toMap(request.params));
  return doRequestOApi('POST', '/topapi/ccoservice/servicegroup/get', request.headers, appParams, runtime);
}

model ListbypushidOapiRobotMessageStatisticsParams = {
  pageSize: int64(description='分页大小', name='page_size'),
  page: int64(description='当前页码', name='page'),
  pushId: string(description='机器人消息推送Id', name='push_id'),
  conversationIds: [ string ](description='群Id列表', maxItems=20, name='conversation_ids'),
}

model ListbypushidOapiRobotMessageStatisticsRequest = {
  headers?: map[string]string,
  params:ListbypushidOapiRobotMessageStatisticsParams,
}

model ListbypushidOapiRobotMessageStatisticsResponseBody = {
  result?: {
    pagination?: {
      currentPage?: int64(description='当前页数', name='current_page'),
      totalPage?: int64(description='总页数', name='total_page'),
      totalRecordNum?: int64(description='总记录数', name='total_record_num'),
    }(description='pagination', name='pagination'),
    list?: [
      {
        groupMemberUnreadCount?: int64(description='群成员未读数量', name='group_member_unread_count'),
        groupMemberCount?: int64(description='群成员数量', name='group_member_count'),
        conversationId?: string(description='群Id', name='conversation_id'),
        pushId?: string(description='机器人消息推送Id', name='push_id'),
      }
    ](description='list', name='list'),
  }(description='result', name='result'),
  success?: boolean(description='是否调用成功', name='success'),
  errcode?: int64(description='错误码', name='errcode'),
  errmsg?: string(description='错误值', name='errmsg'),
}

model ListbypushidOapiRobotMessageStatisticsResponse = {
  headers: map[string]string,
  body: ListbypushidOapiRobotMessageStatisticsResponseBody,
}

/**
 * Description: ISV通过该接口可以获取pushid维度的机器人消息批量推送统计数据
 */
async function listbypushidOapiRobotMessageStatistics(request: ListbypushidOapiRobotMessageStatisticsRequest): ListbypushidOapiRobotMessageStatisticsResponse {
  var runtime = new Util.RuntimeOptions{};
  return listbypushidOapiRobotMessageStatisticsEx(request, runtime);
}

/**
 * Description: ISV通过该接口可以获取pushid维度的机器人消息批量推送统计数据
 */
async function listbypushidOapiRobotMessageStatisticsEx(request: ListbypushidOapiRobotMessageStatisticsRequest, runtime: Util.RuntimeOptions): ListbypushidOapiRobotMessageStatisticsResponse {
  Util.validateModel(request);
  var appParams = Util.stringifyMapValue(Util.toMap(request.params));
  return doRequestOApi('POST', '/topapi/robot/message/statistics/listbypushid', request.headers, appParams, runtime);
}

model ListOapiRobotMessageStatisticsParams = {
  pageSize: int64(description='分页大小', name='page_size'),
  page: int64(description='当前页码', name='page'),
  pushIds: [ string ](description='机器人消息推送Id列表', maxItems=20, name='push_ids'),
}

model ListOapiRobotMessageStatisticsRequest = {
  headers?: map[string]string,
  params:ListOapiRobotMessageStatisticsParams,
}

model ListOapiRobotMessageStatisticsResponseBody = {
  result?: {
    list?: [
      {
        reachGroupMemberUnreadCount?: int64(description='触达群成员未读数量', name='reach_group_member_unread_count'),
        reachGroupMemberCount?: int64(description='触达群成员数量', name='reach_group_member_count'),
        reachGroupCount?: int64(description='触达群数量', name='reach_group_count'),
        pushId?: string(description='机器人消息推送Id', name='push_id'),
      }
    ](description='list', name='list'),
    pagination?: {
      totalRecordNum?: int64(description='总记录数', name='total_record_num'),
      totalPage?: int64(description='总页数', name='total_page'),
      currentPage?: int64(description='当前页数', name='current_page'),
    }(description='pagination', name='pagination'),
  }(description='result', name='result'),
  success?: boolean(description='是否成功', name='success'),
  errcode?: int64(description='错误码', name='errcode'),
  errmsg?: string(description='错误值', name='errmsg'),
}

model ListOapiRobotMessageStatisticsResponse = {
  headers: map[string]string,
  body: ListOapiRobotMessageStatisticsResponseBody,
}

/**
 * Description: ISV通过该接口可以获取机器人消息批量推送统计数据
 */
async function listOapiRobotMessageStatistics(request: ListOapiRobotMessageStatisticsRequest): ListOapiRobotMessageStatisticsResponse {
  var runtime = new Util.RuntimeOptions{};
  return listOapiRobotMessageStatisticsEx(request, runtime);
}

/**
 * Description: ISV通过该接口可以获取机器人消息批量推送统计数据
 */
async function listOapiRobotMessageStatisticsEx(request: ListOapiRobotMessageStatisticsRequest, runtime: Util.RuntimeOptions): ListOapiRobotMessageStatisticsResponse {
  Util.validateModel(request);
  var appParams = Util.stringifyMapValue(Util.toMap(request.params));
  return doRequestOApi('POST', '/topapi/robot/message/statistics/list', request.headers, appParams, runtime);
}

model ExecuteSmartworkBpmsProcessinstanceParams = {
  actionerUserid: string(description='操作人id，通过dingtalk.smartwork.bpms.processinstance.get这个接口可以获取', name='actioner_userid'),
  processInstanceId: string(description='审批实例id', name='process_instance_id'),
  taskId: int64(description='任务节点id，dingtalk.smartwork.bpms.processinstance.get接口可获取', name='task_id'),
  result: string(description='审批操作，同意-agree，拒绝-refuse', name='result'),
  remark?: string(description='操作评论，可为空', maxLength=2000, name='remark'),
}

model ExecuteSmartworkBpmsProcessinstanceRequest = {
  headers?: map[string]string,
  params:ExecuteSmartworkBpmsProcessinstanceParams,
}

model ExecuteSmartworkBpmsProcessinstanceResponseBody = {
  result?: {
    result?: boolean(description='操作结果，true为通过，false为失败', name='result'),
    dingOpenErrcode?: int64(description='dingOpenErrcode', name='ding_open_errcode'),
    errorMsg?: string(description='errorMsg', name='error_msg'),
    isSuccess?: boolean(description='success', name='is_success'),
  }(description='result', name='result'),
}

model ExecuteSmartworkBpmsProcessinstanceResponse = {
  headers: map[string]string,
  body: ExecuteSmartworkBpmsProcessinstanceResponseBody,
}

/**
 * Description: 指定模板、实例、节点id和审批人，对某个审批节点进行审批。 模板是企业在审批后台编辑好的，审批实例通过开放平台回调获取到，并可通过开放接口读取到审批节点id和审批人
 */
async function executeSmartworkBpmsProcessinstance(request: ExecuteSmartworkBpmsProcessinstanceRequest): ExecuteSmartworkBpmsProcessinstanceResponse {
  var runtime = new Util.RuntimeOptions{};
  return executeSmartworkBpmsProcessinstanceEx(request, runtime);
}

/**
 * Description: 指定模板、实例、节点id和审批人，对某个审批节点进行审批。 模板是企业在审批后台编辑好的，审批实例通过开放平台回调获取到，并可通过开放接口读取到审批节点id和审批人
 */
async function executeSmartworkBpmsProcessinstanceEx(request: ExecuteSmartworkBpmsProcessinstanceRequest, runtime: Util.RuntimeOptions): ExecuteSmartworkBpmsProcessinstanceResponse {
  Util.validateModel(request);
  var appParams = Util.stringifyMapValue(Util.toMap(request.params));
  return doRequest('dingtalk.smartwork.bpms.processinstance.execute', 'POST', '/router/rest', request.headers, appParams, runtime);
}

model CreateOapiImChatServicegroupParams = {
  title: string(description='群标题', maxLength=256, name='title'),
  ownerUserid: string(description='群主在钉钉组织内的userid', name='owner_userid'),
  orgInnerGroup?: boolean(description='是否企业内部服务群', name='org_inner_group'),
  groupUniqId?: string(description='建群去重的业务id', name='group_uniq_id'),
}

model CreateOapiImChatServicegroupRequest = {
  headers?: map[string]string,
  params:CreateOapiImChatServicegroupParams,
}

model CreateOapiImChatServicegroupResponseBody = {
  result?: {
    url?: string(description='群链接', name='url'),
    openConversationId?: string(description='开放的会话ID', name='open_conversation_id'),
    chatId?: string(description='开放的会话chatId', name='chat_id'),
  }(description='结果', name='result'),
  errcode?: int64(description='错误代码', name='errcode'),
  errmsg?: string(description='错误描述', name='errmsg'),
  success?: boolean(description='是否成功', name='success'),
}

model CreateOapiImChatServicegroupResponse = {
  headers: map[string]string,
  body: CreateOapiImChatServicegroupResponseBody,
}

/**
 * Description: 创建一个服务群
 */
async function createOapiImChatServicegroup(request: CreateOapiImChatServicegroupRequest): CreateOapiImChatServicegroupResponse {
  var runtime = new Util.RuntimeOptions{};
  return createOapiImChatServicegroupEx(request, runtime);
}

/**
 * Description: 创建一个服务群
 */
async function createOapiImChatServicegroupEx(request: CreateOapiImChatServicegroupRequest, runtime: Util.RuntimeOptions): CreateOapiImChatServicegroupResponse {
  Util.validateModel(request);
  var appParams = Util.stringifyMapValue(Util.toMap(request.params));
  return doRequestOApi('POST', '/topapi/im/chat/servicegroup/create', request.headers, appParams, runtime);
}

model DisbandOapiImChatServicegroupParams = {
  chatId: string(description='开放的chatId', maxLength=128, name='chat_id'),
}

model DisbandOapiImChatServicegroupRequest = {
  headers?: map[string]string,
  params:DisbandOapiImChatServicegroupParams,
}

model DisbandOapiImChatServicegroupResponseBody = {
  errcode?: int64(description='错误代码', name='errcode'),
  errmsg?: string(description='错误文案', name='errmsg'),
  success?: boolean(description='是否成功', name='success'),
}

model DisbandOapiImChatServicegroupResponse = {
  headers: map[string]string,
  body: DisbandOapiImChatServicegroupResponseBody,
}

/**
 * Description: 解散一个服务群
 */
async function disbandOapiImChatServicegroup(request: DisbandOapiImChatServicegroupRequest): DisbandOapiImChatServicegroupResponse {
  var runtime = new Util.RuntimeOptions{};
  return disbandOapiImChatServicegroupEx(request, runtime);
}

/**
 * Description: 解散一个服务群
 */
async function disbandOapiImChatServicegroupEx(request: DisbandOapiImChatServicegroupRequest, runtime: Util.RuntimeOptions): DisbandOapiImChatServicegroupResponse {
  Util.validateModel(request);
  var appParams = Util.stringifyMapValue(Util.toMap(request.params));
  return doRequestOApi('POST', '/topapi/im/chat/servicegroup/disband', request.headers, appParams, runtime);
}

model QueryOapiImChatServicegroupMemberParams = {
  chatId: string(description='开放的chatId', maxLength=128, name='chat_id'),
  pageSize: int64(description='每页大小，最大100', maximum=100, minimum=1, name='page_size'),
  pageNum: int64(description='页码，从1开始', minimum=1, name='page_num'),
  includeOwner?: int64(description='0- 不包含群主，1-包含群主', name='include_owner'),
}

model QueryOapiImChatServicegroupMemberRequest = {
  headers?: map[string]string,
  params:QueryOapiImChatServicegroupMemberParams,
}

model QueryOapiImChatServicegroupMemberResponseBody = {
  result?: {
    members?: [
      {
        dingtalkId?: string(description='成员的ID', name='dingtalk_id'),
        role?: string(description='角色，2-管理员、3-普通成员', name='role'),
        nickName?: string(description='昵称', name='nick_name'),
        groupNickName?: string(description='群昵称', name='group_nick_name'),
        userid?: string(description='员工Id', name='userid'),
      }
    ](description='成员列表', name='members'),
    totalCount?: int64(description='成员总数', name='total_count'),
  }(description='结果', name='result'),
  errcode?: int64(description='错误代码', name='errcode'),
  errmsg?: string(description='错误描述', name='errmsg'),
  success?: boolean(description='是否成功', name='success'),
}

model QueryOapiImChatServicegroupMemberResponse = {
  headers: map[string]string,
  body: QueryOapiImChatServicegroupMemberResponseBody,
}

/**
 * Description: 获取服务群成员列表
 */
async function queryOapiImChatServicegroupMember(request: QueryOapiImChatServicegroupMemberRequest): QueryOapiImChatServicegroupMemberResponse {
  var runtime = new Util.RuntimeOptions{};
  return queryOapiImChatServicegroupMemberEx(request, runtime);
}

/**
 * Description: 获取服务群成员列表
 */
async function queryOapiImChatServicegroupMemberEx(request: QueryOapiImChatServicegroupMemberRequest, runtime: Util.RuntimeOptions): QueryOapiImChatServicegroupMemberResponse {
  Util.validateModel(request);
  var appParams = Util.stringifyMapValue(Util.toMap(request.params));
  return doRequestOApi('POST', '/topapi/im/chat/servicegroup/member/query', request.headers, appParams, runtime);
}

model QueryOapiImChatServicegroupParams = {
  chatId: string(description='开放的chatId', name='chat_id'),
}

model QueryOapiImChatServicegroupRequest = {
  headers?: map[string]string,
  params:QueryOapiImChatServicegroupParams,
}

model QueryOapiImChatServicegroupResponseBody = {
  result?: {
    url?: string(description='群链接', name='url'),
    title?: string(description='群标题', name='title'),
    openConversationId?: string(description='开放的会话id', name='open_conversation_id'),
    memberCount?: int64(description='全部成员数量', name='member_count'),
    adminCount?: int64(description='管理员数量', name='admin_count'),
  }(description='结果', name='result'),
  errcode?: int64(description='错误代码', name='errcode'),
  errmsg?: string(description='错误描述', name='errmsg'),
  success?: boolean(description='是否成功', name='success'),
}

model QueryOapiImChatServicegroupResponse = {
  headers: map[string]string,
  body: QueryOapiImChatServicegroupResponseBody,
}

/**
 * Description: 获取服务群基本信息
 */
async function queryOapiImChatServicegroup(request: QueryOapiImChatServicegroupRequest): QueryOapiImChatServicegroupResponse {
  var runtime = new Util.RuntimeOptions{};
  return queryOapiImChatServicegroupEx(request, runtime);
}

/**
 * Description: 获取服务群基本信息
 */
async function queryOapiImChatServicegroupEx(request: QueryOapiImChatServicegroupRequest, runtime: Util.RuntimeOptions): QueryOapiImChatServicegroupResponse {
  Util.validateModel(request);
  var appParams = Util.stringifyMapValue(Util.toMap(request.params));
  return doRequestOApi('POST', '/topapi/im/chat/servicegroup/query', request.headers, appParams, runtime);
}

model ListbyconversationidOapiRobotMessageStatisticsParams = {
  readStatus?: boolean(description='已读状态', name='read_status'),
  pushId: string(description='机器人消息推送Id', name='push_id'),
  conversationIds: [ string ](description='群Id列表', maxItems=20, name='conversation_ids'),
  pageSize: int64(description='分页大小', name='page_size'),
  page: int64(description='当前页码', name='page'),
}

model ListbyconversationidOapiRobotMessageStatisticsRequest = {
  headers?: map[string]string,
  params:ListbyconversationidOapiRobotMessageStatisticsParams,
}

model ListbyconversationidOapiRobotMessageStatisticsResponseBody = {
  result?: {
    list?: [
      {
        name?: string(description='成员名称', name='name'),
        conversationId?: string(description='群Id', name='conversation_id'),
        pushId?: string(description='机器人消息推送Id', name='push_id'),
        readStatus?: boolean(description='是否已读', name='read_status'),
        dingtalkId?: string(description='钉钉id', name='dingtalk_id'),
      }
    ](description='list', name='list'),
    pagination?: {
      totalRecordNum?: int64(description='总记录数', name='total_record_num'),
      totalPage?: int64(description='总页数', name='total_page'),
      currentPage?: int64(description='当前页数', name='current_page'),
    }(description='pagination', name='pagination'),
  }(description='result', name='result'),
  success?: boolean(description='是否调用成功', name='success'),
  errcode?: int64(description='错误码', name='errcode'),
  errmsg?: string(description='错误值', name='errmsg'),
}

model ListbyconversationidOapiRobotMessageStatisticsResponse = {
  headers: map[string]string,
  body: ListbyconversationidOapiRobotMessageStatisticsResponseBody,
}

/**
 * Description: ISV通过该接口可以获取conversationid维度的机器人消息批量推送统计数据
 */
async function listbyconversationidOapiRobotMessageStatistics(request: ListbyconversationidOapiRobotMessageStatisticsRequest): ListbyconversationidOapiRobotMessageStatisticsResponse {
  var runtime = new Util.RuntimeOptions{};
  return listbyconversationidOapiRobotMessageStatisticsEx(request, runtime);
}

/**
 * Description: ISV通过该接口可以获取conversationid维度的机器人消息批量推送统计数据
 */
async function listbyconversationidOapiRobotMessageStatisticsEx(request: ListbyconversationidOapiRobotMessageStatisticsRequest, runtime: Util.RuntimeOptions): ListbyconversationidOapiRobotMessageStatisticsResponse {
  Util.validateModel(request);
  var appParams = Util.stringifyMapValue(Util.toMap(request.params));
  return doRequestOApi('POST', '/topapi/robot/message/statistics/listbyconversationid', request.headers, appParams, runtime);
}

model UpdateOapiImChatServicegroupMemberParams = {
  memberDingtalkIds: [ string ](description='成员的ID列表，英文逗号分隔', maxItems=20, name='member_dingtalk_ids'),
  action: string(description='更新类型，REMOVE 移除、SET_ADMIN设为管理员、SET_NORMAL 设为普通成员', name='action'),
  chatId: string(description='开放的chatId', name='chat_id'),
}

model UpdateOapiImChatServicegroupMemberRequest = {
  headers?: map[string]string,
  params:UpdateOapiImChatServicegroupMemberParams,
}

model UpdateOapiImChatServicegroupMemberResponseBody = {
  errcode?: int64(description='错误代码', name='errcode'),
  errmsg?: string(description='错误描述', name='errmsg'),
  success?: boolean(description='是否成功', name='success'),
}

model UpdateOapiImChatServicegroupMemberResponse = {
  headers: map[string]string,
  body: UpdateOapiImChatServicegroupMemberResponseBody,
}

/**
 * Description: 更新群成员（移除、设为管理员）
 */
async function updateOapiImChatServicegroupMember(request: UpdateOapiImChatServicegroupMemberRequest): UpdateOapiImChatServicegroupMemberResponse {
  var runtime = new Util.RuntimeOptions{};
  return updateOapiImChatServicegroupMemberEx(request, runtime);
}

/**
 * Description: 更新群成员（移除、设为管理员）
 */
async function updateOapiImChatServicegroupMemberEx(request: UpdateOapiImChatServicegroupMemberRequest, runtime: Util.RuntimeOptions): UpdateOapiImChatServicegroupMemberResponse {
  Util.validateModel(request);
  var appParams = Util.stringifyMapValue(Util.toMap(request.params));
  return doRequestOApi('POST', '/topapi/im/chat/servicegroup/member/update', request.headers, appParams, runtime);
}

model Get_by_deptidOapiSmartdeviceAtmachineParams = {
  param: {
    offset: int64(description='偏移值', name='offset'),
    size: int64(description='每页大小', maximum=50, minimum=1, name='size'),
    deptid: int64(description='部门id', name='deptid'),
  }(description='查询智能考勤机列表参数模型', name='param'),
}

model Get_by_deptidOapiSmartdeviceAtmachineRequest = {
  headers?: map[string]string,
  params:Get_by_deptidOapiSmartdeviceAtmachineParams,
}

model Get_by_deptidOapiSmartdeviceAtmachineResponseBody = {
  result?: {
    hasMore?: boolean(description='分页查询中，后页是否还有数据', name='has_more'),
    machineList?: [
      {
        deviceid?: string(description='考勤机唯一标识id，字符串类型', name='deviceid'),
        deviceName?: string(description='考勤机名称', name='device_name'),
        productName?: string(description='考勤机类型名称', name='product_name'),
        devid?: int64(description='考勤机唯一标识id，Long类型', name='devid'),
      }
    ](description='考勤机列表', name='machine_list'),
  }(description='查询智能考勤机列表结果模型', name='result'),
  errcode?: int64(description='服务调用结果码', name='errcode'),
  errmsg?: string(description='服务调用结果码描述', name='errmsg'),
}

model Get_by_deptidOapiSmartdeviceAtmachineResponse = {
  headers: map[string]string,
  body: Get_by_deptidOapiSmartdeviceAtmachineResponseBody,
}

/**
 * Description: 查询考勤机设备列表，可选择查询部门已关联的考勤机设备列表
 */
async function get_by_deptidOapiSmartdeviceAtmachine(request: Get_by_deptidOapiSmartdeviceAtmachineRequest): Get_by_deptidOapiSmartdeviceAtmachineResponse {
  var runtime = new Util.RuntimeOptions{};
  return get_by_deptidOapiSmartdeviceAtmachineEx(request, runtime);
}

/**
 * Description: 查询考勤机设备列表，可选择查询部门已关联的考勤机设备列表
 */
async function get_by_deptidOapiSmartdeviceAtmachineEx(request: Get_by_deptidOapiSmartdeviceAtmachineRequest, runtime: Util.RuntimeOptions): Get_by_deptidOapiSmartdeviceAtmachineResponse {
  Util.validateModel(request);
  var appParams = Util.stringifyMapValue(Util.toMap(request.params));
  return doRequestOApi('POST', '/topapi/smartdevice/atmachine/get_by_deptid', request.headers, appParams, runtime);
}

model Get_by_useridOapiSmartdeviceAtmachineParams = {
  param?: {
    offset: int64(description='偏移值', name='offset'),
    size: int64(description='每页大小', maximum=50, minimum=1, name='size'),
    userid: string(description='员工id', name='userid'),
  }(description='查询智能考勤机列表参数模型', name='param'),
}

model Get_by_useridOapiSmartdeviceAtmachineRequest = {
  headers?: map[string]string,
  params?:Get_by_useridOapiSmartdeviceAtmachineParams,
}

model Get_by_useridOapiSmartdeviceAtmachineResponseBody = {
  result?: {
    machineList?: [
      {
        deviceid?: string(description='考勤机唯一id，字符串类型', name='deviceid'),
        deviceName?: string(description='考勤机名称', name='device_name'),
        productName?: string(description='考勤机类型名称', name='product_name'),
        devid?: int64(description='考勤机唯一id，Long类型', name='devid'),
      }
    ](description='考勤机列表', name='machine_list'),
    hasMore?: boolean(description='分页查询中，后页是否还有数据', name='has_more'),
  }(description='查询智能考勤机列表结果模型', name='result'),
  errcode?: int64(description='服务调用结果码', name='errcode'),
  errmsg?: string(description='服务调用结果码描述', name='errmsg'),
}

model Get_by_useridOapiSmartdeviceAtmachineResponse = {
  headers: map[string]string,
  body: Get_by_useridOapiSmartdeviceAtmachineResponseBody,
}

/**
 * Description: 允许isv查询员工智能考勤机列表
 */
async function get_by_useridOapiSmartdeviceAtmachine(request: Get_by_useridOapiSmartdeviceAtmachineRequest): Get_by_useridOapiSmartdeviceAtmachineResponse {
  var runtime = new Util.RuntimeOptions{};
  return get_by_useridOapiSmartdeviceAtmachineEx(request, runtime);
}

/**
 * Description: 允许isv查询员工智能考勤机列表
 */
async function get_by_useridOapiSmartdeviceAtmachineEx(request: Get_by_useridOapiSmartdeviceAtmachineRequest, runtime: Util.RuntimeOptions): Get_by_useridOapiSmartdeviceAtmachineResponse {
  Util.validateModel(request);
  var appParams = Util.stringifyMapValue(Util.toMap(request.params));
  return doRequestOApi('POST', '/topapi/smartdevice/atmachine/get_by_userid', request.headers, appParams, runtime);
}

model GetOapiInactiveUserV2Params = {
  isActive: boolean(description='是否活跃 false不活跃 true 活跃', name='is_active'),
  deptIds?: [ int64 ](description='过滤部门id列表，不传表示查询整个企业', maxItems=100, name='dept_ids'),
  offset: int64(description='获取数据偏移量，第一页使用0，后面页使用接口返回的nextCursor', name='offset'),
  size: int64(description='获取数据size,最大100', name='size'),
  queryDate: string(description='查询日期, 日期格式yyyyMMdd', name='query_date'),
}

model GetOapiInactiveUserV2Request = {
  headers?: map[string]string,
  params:GetOapiInactiveUserV2Params,
}

model GetOapiInactiveUserV2ResponseBody = {
  result?: {
    nextCursor?: int64(description='下一页的偏移量', name='next_cursor'),
    list?: [ string ](description='用户列表', name='list'),
    hasMore?: boolean(description='是否有更多数据', name='has_more'),
  }(description='未活跃用户数据', name='result'),
  errmsg?: string(description='错误描述', name='errmsg'),
  errcode?: int64(description='错误码', name='errcode'),
}

model GetOapiInactiveUserV2Response = {
  headers: map[string]string,
  body: GetOapiInactiveUserV2ResponseBody,
}

/**
 * Description: 根据日期查询企业下未活跃用户或活跃用户列表数据
 */
async function getOapiInactiveUserV2(request: GetOapiInactiveUserV2Request): GetOapiInactiveUserV2Response {
  var runtime = new Util.RuntimeOptions{};
  return getOapiInactiveUserV2Ex(request, runtime);
}

/**
 * Description: 根据日期查询企业下未活跃用户或活跃用户列表数据
 */
async function getOapiInactiveUserV2Ex(request: GetOapiInactiveUserV2Request, runtime: Util.RuntimeOptions): GetOapiInactiveUserV2Response {
  Util.validateModel(request);
  var appParams = Util.stringifyMapValue(Util.toMap(request.params));
  return doRequestOApi('POST', '/topapi/inactive/user/v2/get', request.headers, appParams, runtime);
}

model UpdateOapiSmartdeviceAtmachineUserParams = {
  param?: {
    delUseridList?: [ string ](description='移除的员工id列表', maxItems=500, name='del_userid_list'),
    deviceidList?: [ string ](description='设备唯一标识id列表，字符串数组', maxItems=50, name='deviceid_list'),
    addUseridList?: [ string ](description='新增的员工id列表', maxItems=500, name='add_userid_list'),
    devidList?: [ int64 ](description='设备唯一标识id列表，Long数组', maxItems=999, name='devid_list'),
  }(description='变更智能考勤机员工参数模型', name='param'),
}

model UpdateOapiSmartdeviceAtmachineUserRequest = {
  headers?: map[string]string,
  params?:UpdateOapiSmartdeviceAtmachineUserParams,
}

model UpdateOapiSmartdeviceAtmachineUserResponseBody = {
  errcode?: int64(description='服务调用结果码', name='errcode'),
  errmsg?: string(description='服务调用结果码描述', name='errmsg'),
}

model UpdateOapiSmartdeviceAtmachineUserResponse = {
  headers: map[string]string,
  body: UpdateOapiSmartdeviceAtmachineUserResponseBody,
}

/**
 * Description: 提供变更智能考勤机员工功能
 */
async function updateOapiSmartdeviceAtmachineUser(request: UpdateOapiSmartdeviceAtmachineUserRequest): UpdateOapiSmartdeviceAtmachineUserResponse {
  var runtime = new Util.RuntimeOptions{};
  return updateOapiSmartdeviceAtmachineUserEx(request, runtime);
}

/**
 * Description: 提供变更智能考勤机员工功能
 */
async function updateOapiSmartdeviceAtmachineUserEx(request: UpdateOapiSmartdeviceAtmachineUserRequest, runtime: Util.RuntimeOptions): UpdateOapiSmartdeviceAtmachineUserResponse {
  Util.validateModel(request);
  var appParams = Util.stringifyMapValue(Util.toMap(request.params));
  return doRequestOApi('POST', '/topapi/smartdevice/atmachine/user/update', request.headers, appParams, runtime);
}

model SyncSmartworkBpmsProcessParams = {
  agentId: int64(description='企业微应用标识', name='agent_id'),
  srcProcessCode: string(description='源审批流的唯一码', name='src_process_code'),
  targetProcessCode: string(description='目标审批流的唯一码', name='target_process_code'),
  bizCategoryId?: string(description='业务分类标识（建议采用JAVA包名的命名方式,如:com.alibaba）', maxLength=64, name='biz_category_id'),
  processName?: string(description='审批流名称', maxLength=64, name='process_name'),
}

model SyncSmartworkBpmsProcessRequest = {
  headers?: map[string]string,
  params:SyncSmartworkBpmsProcessParams,
}

model SyncSmartworkBpmsProcessResponseBody = {
  result?: {
    dingOpenErrcode?: int64(description='dingOpenErrcode', name='ding_open_errcode'),
    errorMsg?: string(description='errorMsg', name='error_msg'),
    success?: boolean(description='success', name='success'),
  }(description='result', name='result'),
}

model SyncSmartworkBpmsProcessResponse = {
  headers: map[string]string,
  body: SyncSmartworkBpmsProcessResponseBody,
}

/**
 * Description: ISV调用该接口，可以更新对应授权企业的审批单
 */
async function syncSmartworkBpmsProcess(request: SyncSmartworkBpmsProcessRequest): SyncSmartworkBpmsProcessResponse {
  var runtime = new Util.RuntimeOptions{};
  return syncSmartworkBpmsProcessEx(request, runtime);
}

/**
 * Description: ISV调用该接口，可以更新对应授权企业的审批单
 */
async function syncSmartworkBpmsProcessEx(request: SyncSmartworkBpmsProcessRequest, runtime: Util.RuntimeOptions): SyncSmartworkBpmsProcessResponse {
  Util.validateModel(request);
  var appParams = Util.stringifyMapValue(Util.toMap(request.params));
  return doRequest('dingtalk.smartwork.bpms.process.sync', 'POST', '/router/rest', request.headers, appParams, runtime);
}

model SendOapiWorkspaceProjectNoticeParams = {
  sendNoticeReq: {
    agentid?: int64(description='圈子corpId+secret方式调用接口，没有agentId可以不传此时透出给用户是以圈子名字发通知。如果是isv方式的圈子应用，在圈子开通时会推送给isv agentID，必须传入agentId，会以圈子内应用的身份发通知', name='agentid'),
    mobileUrl: string(description='通知点击跳转的手机链接', name='mobile_url'),
    msgContent: string(description='通知文本内容 1-512字符', name='msg_content'),
    pcUrl: string(description='通知点击跳转的pc链接', name='pc_url'),
    receiverUserids: [ string ](description='接收人在圈子组织内的userid', maxItems=999, name='receiver_userids'),
    showRedPoint?: boolean(description='是否在圈子入口展示数字红点+1，默认情况只是点进圈子在通知那一栏有数字红点，该值设为true后会在圈子入口也展示数字红点', name='show_red_point'),
    uuid: string(description='防重复，如果2个请求传入同样的uuid，第二个请求会返回成功', name='uuid'),
    msgButton?: string(description='通知的下方按钮文案', name='msg_button'),
  }(description='发送通知入参', name='send_notice_req'),
}

model SendOapiWorkspaceProjectNoticeRequest = {
  headers?: map[string]string,
  params:SendOapiWorkspaceProjectNoticeParams,
}

model SendOapiWorkspaceProjectNoticeResponseBody = {
  errcode?: int64(description='错误码', name='errcode'),
  errmsg?: string(description='错误信息', name='errmsg'),
  result?: {
    limitUserids?: [ string ](description='被发送额度控制的userids', name='limit_userids'),
  }(description='发送结果', name='result'),
  success?: boolean(description='请求成功', name='success'),
}

model SendOapiWorkspaceProjectNoticeResponse = {
  headers: map[string]string,
  body: SendOapiWorkspaceProjectNoticeResponseBody,
}

/**
 * Description: 发送圈子通知
 */
async function sendOapiWorkspaceProjectNotice(request: SendOapiWorkspaceProjectNoticeRequest): SendOapiWorkspaceProjectNoticeResponse {
  var runtime = new Util.RuntimeOptions{};
  return sendOapiWorkspaceProjectNoticeEx(request, runtime);
}

/**
 * Description: 发送圈子通知
 */
async function sendOapiWorkspaceProjectNoticeEx(request: SendOapiWorkspaceProjectNoticeRequest, runtime: Util.RuntimeOptions): SendOapiWorkspaceProjectNoticeResponse {
  Util.validateModel(request);
  var appParams = Util.stringifyMapValue(Util.toMap(request.params));
  return doRequestOApi('POST', '/topapi/workspace/project/notice/send', request.headers, appParams, runtime);
}

model ListOapiKacDatavMicroappDetailParams = {
  request: {
    dataId: string(description='日期标识', name='data_id'),
    size: int64(description='分页大小;不超过100', name='size'),
    cursor: int64(description='分页游标；首页请使用0，之后直接使用返回结果中的next_cursor', name='cursor'),
  }(description='请求参数对象', name='request'),
}

model ListOapiKacDatavMicroappDetailRequest = {
  headers?: map[string]string,
  params:ListOapiKacDatavMicroappDetailParams,
}

model ListOapiKacDatavMicroappDetailResponseBody = {
  errcode?: int64(description='结果码', name='errcode'),
  errmsg?: string(description='提示信息', name='errmsg'),
  result?: {
    data?: [
      {
        microAppName?: string(description='微应用名', name='micro_app_name'),
        microAppType?: int64(description='微应用类型', name='micro_app_type'),
        microAppUserCount?: int64(description='访问用户数', name='micro_app_user_count'),
      }
    ](description='数据列表', name='data'),
    hasMore?: boolean(description='是否有下一页；true则存在更多分页', name='has_more'),
    nextCursor?: int64(description='下一次请求的分页游标', name='next_cursor'),
  }(description='结果对象', name='result'),
}

model ListOapiKacDatavMicroappDetailResponse = {
  headers: map[string]string,
  body: ListOapiKacDatavMicroappDetailResponseBody,
}

/**
 * Description: 大客户钉钉数据：查询当前企业每天的聊天汇总数据
 */
async function listOapiKacDatavMicroappDetail(request: ListOapiKacDatavMicroappDetailRequest): ListOapiKacDatavMicroappDetailResponse {
  var runtime = new Util.RuntimeOptions{};
  return listOapiKacDatavMicroappDetailEx(request, runtime);
}

/**
 * Description: 大客户钉钉数据：查询当前企业每天的聊天汇总数据
 */
async function listOapiKacDatavMicroappDetailEx(request: ListOapiKacDatavMicroappDetailRequest, runtime: Util.RuntimeOptions): ListOapiKacDatavMicroappDetailResponse {
  Util.validateModel(request);
  var appParams = Util.stringifyMapValue(Util.toMap(request.params));
  return doRequestOApi('POST', '/topapi/kac/datav/microapp/detail/list', request.headers, appParams, runtime);
}

model GetOapiKacDatavTelconfParams = {
  request: {
    dataId: string(description='日期标识', name='data_id'),
  }(description='请求参数对象', name='request'),
}

model GetOapiKacDatavTelconfRequest = {
  headers?: map[string]string,
  params:GetOapiKacDatavTelconfParams,
}

model GetOapiKacDatavTelconfResponseBody = {
  errcode?: int64(description='结果码', name='errcode'),
  errmsg?: string(description='提示信息', name='errmsg'),
  result?: {
    callCount?: int64(description='呼叫成功次数', name='call_count'),
    callDuration?: string(description='呼叫成功时长(秒)', name='call_duration'),
    callJoinPv?: int64(description='呼叫参与人次', name='call_join_pv'),
    callDurationMin?: string(description='呼叫成功时长(分钟)', name='call_duration_min'),
  }(description='结果', name='result'),
}

model GetOapiKacDatavTelconfResponse = {
  headers: map[string]string,
  body: GetOapiKacDatavTelconfResponseBody,
}

/**
 * Description: 大客户钉钉数据：查询大客户部门维度的电话会议统计数据
 */
async function getOapiKacDatavTelconf(request: GetOapiKacDatavTelconfRequest): GetOapiKacDatavTelconfResponse {
  var runtime = new Util.RuntimeOptions{};
  return getOapiKacDatavTelconfEx(request, runtime);
}

/**
 * Description: 大客户钉钉数据：查询大客户部门维度的电话会议统计数据
 */
async function getOapiKacDatavTelconfEx(request: GetOapiKacDatavTelconfRequest, runtime: Util.RuntimeOptions): GetOapiKacDatavTelconfResponse {
  Util.validateModel(request);
  var appParams = Util.stringifyMapValue(Util.toMap(request.params));
  return doRequestOApi('POST', '/topapi/kac/datav/telconf/get', request.headers, appParams, runtime);
}

model SyncuserCorpDeptgroupParams = {
  userid?: string(description='用户id', name='userid'),
  deptId?: int64(description='部门id', name='dept_id'),
}

model SyncuserCorpDeptgroupRequest = {
  headers?: map[string]string,
  params?:SyncuserCorpDeptgroupParams,
}

model SyncuserCorpDeptgroupResponseBody = {
  result?: {
    dingOpenErrcode?: int64(description='dingOpenErrcode', name='ding_open_errcode'),
    errorMsg?: string(description='errorMsg', name='error_msg'),
    success?: boolean(description='success', name='success'),
  }(description='result', name='result'),
}

model SyncuserCorpDeptgroupResponse = {
  headers: map[string]string,
  body: SyncuserCorpDeptgroupResponseBody,
}

/**
 * Description: 从部门成员同步到部门群
 */
async function syncuserCorpDeptgroup(request: SyncuserCorpDeptgroupRequest): SyncuserCorpDeptgroupResponse {
  var runtime = new Util.RuntimeOptions{};
  return syncuserCorpDeptgroupEx(request, runtime);
}

/**
 * Description: 从部门成员同步到部门群
 */
async function syncuserCorpDeptgroupEx(request: SyncuserCorpDeptgroupRequest, runtime: Util.RuntimeOptions): SyncuserCorpDeptgroupResponse {
  Util.validateModel(request);
  var appParams = Util.stringifyMapValue(Util.toMap(request.params));
  return doRequest('dingtalk.corp.deptgroup.syncuser', 'POST', '/router/rest', request.headers, appParams, runtime);
}

model QuerybyidOapiSmartdeviceDeviceParams = {
  deviceQueryVo: {
    deviceId: string(description='设备id', name='device_id'),
  }(description='设备查询对象', name='device_query_vo'),
}

model QuerybyidOapiSmartdeviceDeviceRequest = {
  headers?: map[string]string,
  params:QuerybyidOapiSmartdeviceDeviceParams,
}

model QuerybyidOapiSmartdeviceDeviceResponseBody = {
  result?: {
    deviceMac?: string(description='设备mac', name='device_mac'),
    corpId?: string(description='企业id', name='corp_id'),
    nick?: string(description='设备nick', name='nick'),
    deviceId?: string(description='设备id', name='device_id'),
    deviceName?: string(description='设备名称', name='device_name'),
    pk?: string(description='产品标识', name='pk'),
    userid?: string(description='员工id', name='userid'),
    ext?: string(description='备注信息', name='ext'),
    sn?: string(description='设备序列号', name='sn'),
  }(description='返回结果', name='result'),
  success?: boolean(description='是否成功', name='success'),
  errcode?: int64(description='错误代码', name='errcode'),
  errmsg?: string(description='错误信息', name='errmsg'),
}

model QuerybyidOapiSmartdeviceDeviceResponse = {
  headers: map[string]string,
  body: QuerybyidOapiSmartdeviceDeviceResponseBody,
}

/**
 * Description: 查询企业下的智能硬件设备详情
 */
async function querybyidOapiSmartdeviceDevice(request: QuerybyidOapiSmartdeviceDeviceRequest): QuerybyidOapiSmartdeviceDeviceResponse {
  var runtime = new Util.RuntimeOptions{};
  return querybyidOapiSmartdeviceDeviceEx(request, runtime);
}

/**
 * Description: 查询企业下的智能硬件设备详情
 */
async function querybyidOapiSmartdeviceDeviceEx(request: QuerybyidOapiSmartdeviceDeviceRequest, runtime: Util.RuntimeOptions): QuerybyidOapiSmartdeviceDeviceResponse {
  Util.validateModel(request);
  var appParams = Util.stringifyMapValue(Util.toMap(request.params));
  return doRequestOApi('POST', '/topapi/smartdevice/device/querybyid', request.headers, appParams, runtime);
}

model QueryOapiDdpaasObjectdataParams = {
  currentOperatorUserid?: string(description='用户ID', name='current_operator_userid'),
  cursor?: string(description='查询游标', name='cursor'),
  size?: int64(description='分页限制', name='size'),
  queryDsl?: string(description='查询条件DSL', name='query_dsl'),
  appUuid: string(description='钉钉PaaS 应用 ID', name='app_uuid'),
  formCode: string(description='钉钉 PaaS 表单编号', name='form_code'),
}

model QueryOapiDdpaasObjectdataRequest = {
  headers?: map[string]string,
  params:QueryOapiDdpaasObjectdataParams,
}

model QueryOapiDdpaasObjectdataResponseBody = {
  result?: {
    nextCursor?: string(description='下一页的游标', name='next_cursor'),
    values?: [
      {
        creatorNick?: string(description='创建记录的用户昵称', name='creator_nick'),
        gmtModified?: string(description='记录修改时间', name='gmt_modified'),
        creatorUserid?: string(description='创建记录的用户ID', name='creator_userid'),
        instanceId?: string(description='数据ID', name='instance_id'),
        data?: string(description='数据内容', name='data'),
        extendData?: string(description='扩展数据内容', name='extend_data'),
        gmtCreate?: string(description='记录创建时间', name='gmt_create'),
        permission?: {
          ownerUseridList?: [ string ](description='负责人用户ID列表', name='owner_userid_list'),
          participantUseridList?: [ string ](description='协同人用户ID列表', name='participant_userid_list'),
        }(description='数据权限信息', name='permission'),
        procOutResult?: string(description='审批结果', name='proc_out_result'),
        procInstStatus?: string(description='审批状态', name='proc_inst_status'),
      }
    ](description='列表', name='values'),
    hasMore?: boolean(description='是否有下一页', name='has_more'),
    pageSize?: int64(description='分页大小', name='page_size'),
  }(description='分页结果', name='result'),
  errcode?: int64(description='错误码', name='errcode'),
  errmsg?: string(description='错误信息', name='errmsg'),
}

model QueryOapiDdpaasObjectdataResponse = {
  headers: map[string]string,
  body: QueryOapiDdpaasObjectdataResponseBody,
}

/**
 * Description: 开放钉钉PaaS里应用搭建出的表单数据
 */
async function queryOapiDdpaasObjectdata(request: QueryOapiDdpaasObjectdataRequest): QueryOapiDdpaasObjectdataResponse {
  var runtime = new Util.RuntimeOptions{};
  return queryOapiDdpaasObjectdataEx(request, runtime);
}

/**
 * Description: 开放钉钉PaaS里应用搭建出的表单数据
 */
async function queryOapiDdpaasObjectdataEx(request: QueryOapiDdpaasObjectdataRequest, runtime: Util.RuntimeOptions): QueryOapiDdpaasObjectdataResponse {
  Util.validateModel(request);
  var appParams = Util.stringifyMapValue(Util.toMap(request.params));
  return doRequestOApi('POST', '/topapi/ddpaas/objectdata/query', request.headers, appParams, runtime);
}

model CreateOapiSmartdeviceBindParams = {
  deviceBindReqVo: {
    deviceServiceId: int64(description='产品型号ID', name='device_service_id'),
    nick?: string(description='设备昵称', name='nick'),
    deviceSn: string(description='设备SN', name='device_sn'),
    bizDeviceIdentity?: string(description='设备在3方的唯一标识', name='biz_device_identity'),
    deviceMac: string(description='设备MAC', name='device_mac'),
  }(description='设备请求信息', name='device_bind_req_vo'),
}

model CreateOapiSmartdeviceBindRequest = {
  headers?: map[string]string,
  params:CreateOapiSmartdeviceBindParams,
}

model CreateOapiSmartdeviceBindResponseBody = {
  result?: {
    deviceId?: string(description='设备ID', name='device_id'),
  }(description='返回结果', name='result'),
  success?: boolean(description='是否成功', name='success'),
  errcode?: int64(description='错误代码', name='errcode'),
  errmsg?: string(description='错误信息', name='errmsg'),
}

model CreateOapiSmartdeviceBindResponse = {
  headers: map[string]string,
  body: CreateOapiSmartdeviceBindResponseBody,
}

/**
 * Description: 智能设备接入钉钉时，需要和组织建立绑定关系，此接口用于创建绑定关系。
 */
async function createOapiSmartdeviceBind(request: CreateOapiSmartdeviceBindRequest): CreateOapiSmartdeviceBindResponse {
  var runtime = new Util.RuntimeOptions{};
  return createOapiSmartdeviceBindEx(request, runtime);
}

/**
 * Description: 智能设备接入钉钉时，需要和组织建立绑定关系，此接口用于创建绑定关系。
 */
async function createOapiSmartdeviceBindEx(request: CreateOapiSmartdeviceBindRequest, runtime: Util.RuntimeOptions): CreateOapiSmartdeviceBindResponse {
  Util.validateModel(request);
  var appParams = Util.stringifyMapValue(Util.toMap(request.params));
  return doRequestOApi('POST', '/topapi/smartdevice/bind/create', request.headers, appParams, runtime);
}

model DetailsOapiStatisticsParams = {
  type?: string(description='业务类型，目前有employee,group, live', name='type'),
}

model DetailsOapiStatisticsRequest = {
  headers?: map[string]string,
  params?:DetailsOapiStatisticsParams,
}

model DetailsOapiStatisticsResponseBody = {
  result?: [
    {
      type?: string(description='业务类型', name='type'),
      returnFields?: string(description='返回的数据列', name='return_fields'),
      date?: string(description='数据的日期,格式为yyyy-MM-dd', name='date'),
      url?: string(description='数据的下载地址', name='url'),
    }
  ](description='企业具体数据', name='result'),
  errcode?: int64(description='dingOpenErrcode', name='errcode'),
  errmsg?: string(description='errorMsg', name='errmsg'),
}

model DetailsOapiStatisticsResponse = {
  headers: map[string]string,
  body: DetailsOapiStatisticsResponseBody,
}

/**
 * Description: 对大客户开放其企业BI数据
 */
async function detailsOapiStatistics(request: DetailsOapiStatisticsRequest): DetailsOapiStatisticsResponse {
  var runtime = new Util.RuntimeOptions{};
  return detailsOapiStatisticsEx(request, runtime);
}

/**
 * Description: 对大客户开放其企业BI数据
 */
async function detailsOapiStatisticsEx(request: DetailsOapiStatisticsRequest, runtime: Util.RuntimeOptions): DetailsOapiStatisticsResponse {
  Util.validateModel(request);
  var appParams = Util.stringifyMapValue(Util.toMap(request.params));
  return doRequestOApi('POST', '/topapi/statistics/details', request.headers, appParams, runtime);
}

model CheckuidOapiMicroappParams = {
  agentid: int64(description='企业微应用id', name='agentid'),
  userid: string(description='员工id', name='userid'),
}

model CheckuidOapiMicroappRequest = {
  headers?: map[string]string,
  params:CheckuidOapiMicroappParams,
}

model CheckuidOapiMicroappResponseBody = {
  errcode?: int64(description='dingOpenErrcode', name='errcode'),
  errmsg?: string(description='errorMsg', name='errmsg'),
  result?: boolean(description='result', name='result'),
}

model CheckuidOapiMicroappResponse = {
  headers: map[string]string,
  body: CheckuidOapiMicroappResponseBody,
}

/**
 * Description: 查询员工是否在可见范围中
 */
async function checkuidOapiMicroapp(request: CheckuidOapiMicroappRequest): CheckuidOapiMicroappResponse {
  var runtime = new Util.RuntimeOptions{};
  return checkuidOapiMicroappEx(request, runtime);
}

/**
 * Description: 查询员工是否在可见范围中
 */
async function checkuidOapiMicroappEx(request: CheckuidOapiMicroappRequest, runtime: Util.RuntimeOptions): CheckuidOapiMicroappResponse {
  Util.validateModel(request);
  var appParams = Util.stringifyMapValue(Util.toMap(request.params));
  return doRequestOApi('POST', '/topapi/microapp/checkuid', request.headers, appParams, runtime);
}

model UnbindOapiRetailUserParams = {
  channel?: string(description='业务身份', name='channel'),
  outerId?: string(description='主帐号ID', name='outer_id'),
  subOuterId?: string(description='子帐号ID', name='sub_outer_id'),
  associateUnionId?: string(description='中心组织下唯一Id', name='associate_union_id'),
}

model UnbindOapiRetailUserRequest = {
  headers?: map[string]string,
  params?:UnbindOapiRetailUserParams,
}

model UnbindOapiRetailUserResponseBody = {
  result?: boolean(description='用户绑定删除成功或失败', name='result'),
  success?: boolean(description='成功或失败', name='success'),
  errcode?: int64(description='错误码', name='errcode'),
  errmsg?: string(description='错误信息', name='errmsg'),
}

model UnbindOapiRetailUserResponse = {
  headers: map[string]string,
  body: UnbindOapiRetailUserResponseBody,
}

/**
 * Description: 认证用户解除绑定接口
 */
async function unbindOapiRetailUser(request: UnbindOapiRetailUserRequest): UnbindOapiRetailUserResponse {
  var runtime = new Util.RuntimeOptions{};
  return unbindOapiRetailUserEx(request, runtime);
}

/**
 * Description: 认证用户解除绑定接口
 */
async function unbindOapiRetailUserEx(request: UnbindOapiRetailUserRequest, runtime: Util.RuntimeOptions): UnbindOapiRetailUserResponse {
  Util.validateModel(request);
  var appParams = Util.stringifyMapValue(Util.toMap(request.params));
  return doRequestOApi('POST', '/topapi/retail/user/unbind', request.headers, appParams, runtime);
}

model BindapplyOapiRetailUserParams = {
  channel?: string(description='业务身份', name='channel'),
  request?: {
    subOuterNick?: string(description='子帐号名称', name='sub_outer_nick'),
    extension?: string(description='扩展字段', name='extension'),
    outerNick?: string(description='主帐号名称', name='outer_nick'),
    outerId?: string(description='主帐号ID', name='outer_id'),
    subOuterId?: string(description='子帐号ID', name='sub_outer_id'),
    token?: string(description='token', name='token'),
  }(description='请求业务对象', name='request'),
}

model BindapplyOapiRetailUserRequest = {
  headers?: map[string]string,
  params?:BindapplyOapiRetailUserParams,
}

model BindapplyOapiRetailUserResponseBody = {
  success?: boolean(description='成功失败', name='success'),
  errcode?: int64(description='错误码', name='errcode'),
  errmsg?: string(description='错误信息', name='errmsg'),
  result?: {
    extension?: string(description='扩展字段Map json', name='extension'),
    associateUnionId?: string(description='中心组织唯一ID', name='associate_union_id'),
  }(description='返回结果对象', name='result'),
}

model BindapplyOapiRetailUserResponse = {
  headers: map[string]string,
  body: BindapplyOapiRetailUserResponseBody,
}

/**
 * Description: 阿里云调用钉钉接口，把阿里云和钉钉的账户绑定关系，把绑定关系回写到钉钉。
 */
async function bindapplyOapiRetailUser(request: BindapplyOapiRetailUserRequest): BindapplyOapiRetailUserResponse {
  var runtime = new Util.RuntimeOptions{};
  return bindapplyOapiRetailUserEx(request, runtime);
}

/**
 * Description: 阿里云调用钉钉接口，把阿里云和钉钉的账户绑定关系，把绑定关系回写到钉钉。
 */
async function bindapplyOapiRetailUserEx(request: BindapplyOapiRetailUserRequest, runtime: Util.RuntimeOptions): BindapplyOapiRetailUserResponse {
  Util.validateModel(request);
  var appParams = Util.stringifyMapValue(Util.toMap(request.params));
  return doRequestOApi('POST', '/topapi/retail/user/bindapply', request.headers, appParams, runtime);
}

model GenerateOapiRetailUserTokenParams = {
  channel?: string(description='业务身份', name='channel'),
  request?: {
    subOuterNick?: string(description='子帐号名称', name='sub_outer_nick'),
    extension?: string(description='扩展字段', name='extension'),
    outerNick?: string(description='主帐号名称', name='outer_nick'),
    outerId?: string(description='主帐号ID', name='outer_id'),
    subOuterId?: string(description='子帐号ID', name='sub_outer_id'),
  }(description='xx', name='request'),
}

model GenerateOapiRetailUserTokenRequest = {
  headers?: map[string]string,
  params?:GenerateOapiRetailUserTokenParams,
}

model GenerateOapiRetailUserTokenResponseBody = {
  success?: boolean(description='成功失败', name='success'),
  errcode?: int64(description='错误码', name='errcode'),
  errmsg?: string(description='错误信息', name='errmsg'),
  result?: {
    token?: string(description='token', name='token'),
  }(description='xx', name='result'),
}

model GenerateOapiRetailUserTokenResponse = {
  headers: map[string]string,
  body: GenerateOapiRetailUserTokenResponseBody,
}

/**
 * Description: 传入外部数据，生成一次性token
 */
async function generateOapiRetailUserToken(request: GenerateOapiRetailUserTokenRequest): GenerateOapiRetailUserTokenResponse {
  var runtime = new Util.RuntimeOptions{};
  return generateOapiRetailUserTokenEx(request, runtime);
}

/**
 * Description: 传入外部数据，生成一次性token
 */
async function generateOapiRetailUserTokenEx(request: GenerateOapiRetailUserTokenRequest, runtime: Util.RuntimeOptions): GenerateOapiRetailUserTokenResponse {
  Util.validateModel(request);
  var appParams = Util.stringifyMapValue(Util.toMap(request.params));
  return doRequestOApi('POST', '/topapi/retail/user/token/generate', request.headers, appParams, runtime);
}

model GetOapiInspectFeedbackParams = {
  taskId: string(description='巡店任务唯一标识', name='task_id'),
  formId?: string(description='表单标识（传空值，暂时保留）', name='form_id'),
}

model GetOapiInspectFeedbackRequest = {
  headers?: map[string]string,
  params:GetOapiInspectFeedbackParams,
}

model GetOapiInspectFeedbackResponseBody = {
  errmsg?: string(description='错误描述', name='errmsg'),
  errcode?: int64(description='错误码', name='errcode'),
  feedbackForm?: {
    formInstId?: string(description='表单唯一标识', name='form_inst_id'),
    title?: string(description='表单标题', name='title'),
    content?: [
      {
        label?: string(description='表单项标题', name='label'),
        value?: string(description='表单项的值', name='value'),
        type?: string(description='表单项的类型', name='type'),
        id?: string(description='表单项的唯一标识', name='id'),
        bizAlias?: string(description='表单项的业务别名', name='biz_alias'),
      }
    ](description='表单内容', name='content'),
  }(description='反馈表单', name='feedback_form'),
}

model GetOapiInspectFeedbackResponse = {
  headers: map[string]string,
  body: GetOapiInspectFeedbackResponseBody,
}

/**
 * Description: 根据巡店任务标识获取反馈表单内容
 */
async function getOapiInspectFeedback(request: GetOapiInspectFeedbackRequest): GetOapiInspectFeedbackResponse {
  var runtime = new Util.RuntimeOptions{};
  return getOapiInspectFeedbackEx(request, runtime);
}

/**
 * Description: 根据巡店任务标识获取反馈表单内容
 */
async function getOapiInspectFeedbackEx(request: GetOapiInspectFeedbackRequest, runtime: Util.RuntimeOptions): GetOapiInspectFeedbackResponse {
  Util.validateModel(request);
  var appParams = Util.stringifyMapValue(Util.toMap(request.params));
  return doRequestOApi('POST', '/topapi/inspect/feedback/get', request.headers, appParams, runtime);
}

model CreateOapiAttendanceGroupParams = {
  group: {
    name: string(description='考勤组名称', name='name'),
    ext?: string(description='扩展字段，JSON格式', name='ext'),
    locationOffset: int64(description='打卡范围，单位：米', name='location_offset'),
    enableFaceCheck?: boolean(description='是否开启笑脸打卡(若开启笑脸则默认开启拍照打卡)，默认false', name='enable_face_check'),
    enableFaceBeauty?: boolean(description='是否开启美颜，默认false', name='enable_face_beauty'),
    enableCameraCheck?: boolean(description='是否开启拍照打卡，默认false', name='enable_camera_check'),
  }(description='考勤组', name='group'),
  opUserid?: string(description='操作人userId', name='op_userid'),
}

model CreateOapiAttendanceGroupRequest = {
  headers?: map[string]string,
  params:CreateOapiAttendanceGroupParams,
}

model CreateOapiAttendanceGroupResponseBody = {
  result?: {
    name?: string(description='考勤组名称', name='name'),
    locationOffset?: int64(description='打卡范围，单位：米', name='location_offset'),
    ext?: string(description='扩展字段，JSON格式', name='ext'),
    groupKey?: string(description='考勤组id', name='group_key'),
    enableFaceCheck?: boolean(description='是否开启笑脸打卡(若开启笑脸则默认开启拍照打卡)，默认false', name='enable_face_check'),
    enableFaceBeauty?: boolean(description='是否开启美颜，默认false', name='enable_face_beauty'),
    enableCameraCheck?: boolean(description='是否开启拍照打卡，默认false', name='enable_camera_check'),
  }(description='考勤组', name='result'),
  success?: boolean(description='是否成功', name='success'),
  errcode?: int64(description='错误码', name='errcode'),
  errmsg?: string(description='错误描述', name='errmsg'),
}

model CreateOapiAttendanceGroupResponse = {
  headers: map[string]string,
  body: CreateOapiAttendanceGroupResponseBody,
}

/**
 * Description: 新建考勤组
 */
async function createOapiAttendanceGroup(request: CreateOapiAttendanceGroupRequest): CreateOapiAttendanceGroupResponse {
  var runtime = new Util.RuntimeOptions{};
  return createOapiAttendanceGroupEx(request, runtime);
}

/**
 * Description: 新建考勤组
 */
async function createOapiAttendanceGroupEx(request: CreateOapiAttendanceGroupRequest, runtime: Util.RuntimeOptions): CreateOapiAttendanceGroupResponse {
  Util.validateModel(request);
  var appParams = Util.stringifyMapValue(Util.toMap(request.params));
  return doRequestOApi('POST', '/topapi/attendance/group/create', request.headers, appParams, runtime);
}

model GetOapiAttendanceGroupParams = {
  opUserid?: string(description='操作人userId', name='op_userid'),
  groupKey: string(description='考勤组id', name='group_key'),
}

model GetOapiAttendanceGroupRequest = {
  headers?: map[string]string,
  params:GetOapiAttendanceGroupParams,
}

model GetOapiAttendanceGroupResponseBody = {
  result?: {
    name?: string(description='考勤组名称', name='name'),
    ext?: string(description='扩展字段，JSON格式', name='ext'),
    locationOffset?: int64(description='打卡范围，单位：米', name='location_offset'),
    groupKey?: string(description='考勤组id', name='group_key'),
    enableFaceCheck?: boolean(description='是否开启笑脸打卡(若开启笑脸则默认开启拍照打卡)，默认false', name='enable_face_check'),
    enableFaceBeauty?: boolean(description='是否开启美颜，默认false', name='enable_face_beauty'),
    enableCameraCheck?: boolean(description='是否开启拍照打卡，默认false', name='enable_camera_check'),
  }(description='考勤组', name='result'),
  errmsg?: string(description='错误描述', name='errmsg'),
  success?: boolean(description='是否成功', name='success'),
  errcode?: int64(description='错误码', name='errcode'),
}

model GetOapiAttendanceGroupResponse = {
  headers: map[string]string,
  body: GetOapiAttendanceGroupResponseBody,
}

/**
 * Description: 根据id查询考勤组信息
 */
async function getOapiAttendanceGroup(request: GetOapiAttendanceGroupRequest): GetOapiAttendanceGroupResponse {
  var runtime = new Util.RuntimeOptions{};
  return getOapiAttendanceGroupEx(request, runtime);
}

/**
 * Description: 根据id查询考勤组信息
 */
async function getOapiAttendanceGroupEx(request: GetOapiAttendanceGroupRequest, runtime: Util.RuntimeOptions): GetOapiAttendanceGroupResponse {
  Util.validateModel(request);
  var appParams = Util.stringifyMapValue(Util.toMap(request.params));
  return doRequestOApi('POST', '/topapi/attendance/group/get', request.headers, appParams, runtime);
}

model UpdateOapiAttendanceGroupParams = {
  group: {
    name: string(description='考勤组名称', name='name'),
    ext?: string(description='扩展字段，JSON格式', name='ext'),
    locationOffset: int64(description='打卡范围，单位：米', name='location_offset'),
    groupKey: string(description='考勤组id', name='group_key'),
    enableFaceCheck?: boolean(description='是否开启笑脸打卡(若开启笑脸则默认开启拍照打卡)，默认false', name='enable_face_check'),
    enableFaceBeauty?: boolean(description='是否开启美颜，默认false', name='enable_face_beauty'),
    enableCameraCheck?: boolean(description='是否开启拍照打卡，默认false', name='enable_camera_check'),
  }(description='考勤组', name='group'),
  opUserid?: string(description='操作人userId', name='op_userid'),
}

model UpdateOapiAttendanceGroupRequest = {
  headers?: map[string]string,
  params:UpdateOapiAttendanceGroupParams,
}

model UpdateOapiAttendanceGroupResponseBody = {
  result?: {
    ext?: string(description='扩展字段，JSON格式', name='ext'),
    locationOffset?: int64(description='打卡范围，单位：米', name='location_offset'),
    name?: string(description='考勤组名称', name='name'),
    groupKey?: string(description='考勤组id', name='group_key'),
    enableFaceCheck?: boolean(description='是否开启笑脸打卡(若开启笑脸则默认开启拍照打卡)，默认false', name='enable_face_check'),
    enableFaceBeauty?: boolean(description='是否开启美颜，默认false', name='enable_face_beauty'),
    enableCameraCheck?: boolean(description='是否开启拍照打卡，默认false', name='enable_camera_check'),
  }(description='考勤组', name='result'),
  success?: boolean(description='是否成功', name='success'),
  errcode?: int64(description='错误码', name='errcode'),
  errmsg?: string(description='错误描述', name='errmsg'),
}

model UpdateOapiAttendanceGroupResponse = {
  headers: map[string]string,
  body: UpdateOapiAttendanceGroupResponseBody,
}

/**
 * Description: 根据考勤组id更新考勤组
 */
async function updateOapiAttendanceGroup(request: UpdateOapiAttendanceGroupRequest): UpdateOapiAttendanceGroupResponse {
  var runtime = new Util.RuntimeOptions{};
  return updateOapiAttendanceGroupEx(request, runtime);
}

/**
 * Description: 根据考勤组id更新考勤组
 */
async function updateOapiAttendanceGroupEx(request: UpdateOapiAttendanceGroupRequest, runtime: Util.RuntimeOptions): UpdateOapiAttendanceGroupResponse {
  Util.validateModel(request);
  var appParams = Util.stringifyMapValue(Util.toMap(request.params));
  return doRequestOApi('POST', '/topapi/attendance/group/update', request.headers, appParams, runtime);
}

model CheckOapiRetailUserTokenParams = {
  channel?: string(description='业务身份', name='channel'),
  token?: string(description='token信息', name='token'),
}

model CheckOapiRetailUserTokenRequest = {
  headers?: map[string]string,
  params?:CheckOapiRetailUserTokenParams,
}

model CheckOapiRetailUserTokenResponseBody = {
  success?: boolean(description='成功失败', name='success'),
  errcode?: int64(description='错误码', name='errcode'),
  errmsg?: string(description='错误信息', name='errmsg'),
  result?: {
    extension?: string(description='扩展字段', name='extension'),
    associateUnionId?: string(description='中心组织唯一ID', name='associate_union_id'),
  }(description='xx', name='result'),
}

model CheckOapiRetailUserTokenResponse = {
  headers: map[string]string,
  body: CheckOapiRetailUserTokenResponseBody,
}

/**
 * Description: 传入授权码，获取Token
 */
async function checkOapiRetailUserToken(request: CheckOapiRetailUserTokenRequest): CheckOapiRetailUserTokenResponse {
  var runtime = new Util.RuntimeOptions{};
  return checkOapiRetailUserTokenEx(request, runtime);
}

/**
 * Description: 传入授权码，获取Token
 */
async function checkOapiRetailUserTokenEx(request: CheckOapiRetailUserTokenRequest, runtime: Util.RuntimeOptions): CheckOapiRetailUserTokenResponse {
  Util.validateModel(request);
  var appParams = Util.stringifyMapValue(Util.toMap(request.params));
  return doRequestOApi('POST', '/topapi/retail/user/token/check', request.headers, appParams, runtime);
}

model DeleteOapiAttendanceGroupParams = {
  opUserid?: string(description='操作人userId', name='op_userid'),
  groupKey: string(description='考勤组id', name='group_key'),
}

model DeleteOapiAttendanceGroupRequest = {
  headers?: map[string]string,
  params:DeleteOapiAttendanceGroupParams,
}

model DeleteOapiAttendanceGroupResponseBody = {
  result?: string(description='考勤组id', name='result'),
  success?: boolean(description='是否成功', name='success'),
  errmsg?: string(description='错误信息', name='errmsg'),
  errcode?: int64(description='错误码', name='errcode'),
}

model DeleteOapiAttendanceGroupResponse = {
  headers: map[string]string,
  body: DeleteOapiAttendanceGroupResponseBody,
}

/**
 * Description: 批量删除考勤组
 */
async function deleteOapiAttendanceGroup(request: DeleteOapiAttendanceGroupRequest): DeleteOapiAttendanceGroupResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteOapiAttendanceGroupEx(request, runtime);
}

/**
 * Description: 批量删除考勤组
 */
async function deleteOapiAttendanceGroupEx(request: DeleteOapiAttendanceGroupRequest, runtime: Util.RuntimeOptions): DeleteOapiAttendanceGroupResponse {
  Util.validateModel(request);
  var appParams = Util.stringifyMapValue(Util.toMap(request.params));
  return doRequestOApi('POST', '/topapi/attendance/group/delete', request.headers, appParams, runtime);
}

model BindqueryOapiRetailUserParams = {
  channel?: string(description='业务身份', name='channel'),
  associateUnionId?: string(description='虚拟组织下的唯一ID', name='associate_union_id'),
}

model BindqueryOapiRetailUserRequest = {
  headers?: map[string]string,
  params?:BindqueryOapiRetailUserParams,
}

model BindqueryOapiRetailUserResponseBody = {
  success?: boolean(description='成功失败', name='success'),
  errcode?: int64(description='错误码', name='errcode'),
  errmsg?: string(description='错误信息', name='errmsg'),
  result?: {
    token?: string(description='token', name='token'),
    extension?: string(description='扩展字段', name='extension'),
    outerList?: [
      {
        channel?: string(description='业务渠道', name='channel'),
        outerId?: string(description='主帐号ID', name='outer_id'),
        outerSubId?: string(description='子帐号ID', name='outer_sub_id'),
        outerNick?: string(description='主帐号名称', name='outer_nick'),
        outerSubNick?: string(description='子帐号名称', name='outer_sub_nick'),
        extension?: string(description='扩展字段', name='extension'),
      }
    ](description='帐号列表', name='outer_list'),
    associateUnionId?: string(description='中心组织唯一ID', name='associate_union_id'),
  }(description='xx', name='result'),
}

model BindqueryOapiRetailUserResponse = {
  headers: map[string]string,
  body: BindqueryOapiRetailUserResponseBody,
}

/**
 * Description: 通过AssociateUnionId查询已绑定的帐号列表
 */
async function bindqueryOapiRetailUser(request: BindqueryOapiRetailUserRequest): BindqueryOapiRetailUserResponse {
  var runtime = new Util.RuntimeOptions{};
  return bindqueryOapiRetailUserEx(request, runtime);
}

/**
 * Description: 通过AssociateUnionId查询已绑定的帐号列表
 */
async function bindqueryOapiRetailUserEx(request: BindqueryOapiRetailUserRequest, runtime: Util.RuntimeOptions): BindqueryOapiRetailUserResponse {
  Util.validateModel(request);
  var appParams = Util.stringifyMapValue(Util.toMap(request.params));
  return doRequestOApi('POST', '/topapi/retail/user/bindquery', request.headers, appParams, runtime);
}

model QueryOapiAttendanceGroupsParams = {
  size?: int64(description='分页大小', name='size'),
  cursor?: string(description='上一批次最后一个id，默认空', name='cursor'),
  opUserid?: string(description='操作人userId', name='op_userid'),
}

model QueryOapiAttendanceGroupsRequest = {
  headers?: map[string]string,
  params?:QueryOapiAttendanceGroupsParams,
}

model QueryOapiAttendanceGroupsResponseBody = {
  result?: {
    hasMore?: boolean(description='是否更多', name='has_more'),
    groupList?: [
      {
        ext?: string(description='扩展字段，JSON格式', name='ext'),
        locationOffset?: int64(description='打卡范围，单位：米', name='location_offset'),
        name?: string(description='考勤组名称', name='name'),
        groupKey?: string(description='考勤组id', name='group_key'),
        enableFaceCheck?: boolean(description='是否开启笑脸打卡(若开启笑脸则默认开启拍照打卡)，默认false', name='enable_face_check'),
        enableFaceBeauty?: boolean(description='是否开启美颜，默认false', name='enable_face_beauty'),
        enableCameraCheck?: boolean(description='是否开启拍照打卡，默认false', name='enable_camera_check'),
      }
    ](description='考勤组', name='group_list'),
  }(description='考勤组列表', name='result'),
  success?: boolean(description='是否成功', name='success'),
  errcode?: int64(description='错误码', name='errcode'),
  errmsg?: string(description='错误描述', name='errmsg'),
}

model QueryOapiAttendanceGroupsResponse = {
  headers: map[string]string,
  body: QueryOapiAttendanceGroupsResponseBody,
}

/**
 * Description: 分页查询考勤组
 */
async function queryOapiAttendanceGroups(request: QueryOapiAttendanceGroupsRequest): QueryOapiAttendanceGroupsResponse {
  var runtime = new Util.RuntimeOptions{};
  return queryOapiAttendanceGroupsEx(request, runtime);
}

/**
 * Description: 分页查询考勤组
 */
async function queryOapiAttendanceGroupsEx(request: QueryOapiAttendanceGroupsRequest, runtime: Util.RuntimeOptions): QueryOapiAttendanceGroupsResponse {
  Util.validateModel(request);
  var appParams = Util.stringifyMapValue(Util.toMap(request.params));
  return doRequestOApi('POST', '/topapi/attendance/groups/query', request.headers, appParams, runtime);
}

model GrouplistOapiSmartworkHrmEmployeeFieldParams = {
  agentid?: int64(description='微应用在企业的AgentId，不需要自定义字段可不传', name='agentid'),
}

model GrouplistOapiSmartworkHrmEmployeeFieldRequest = {
  headers?: map[string]string,
  params?:GrouplistOapiSmartworkHrmEmployeeFieldParams,
}

model GrouplistOapiSmartworkHrmEmployeeFieldResponseBody = {
  errmsg?: string(description='错误描述', name='errmsg'),
  errcode?: int64(description='错误码', name='errcode'),
  success?: boolean(description='成功标记', name='success'),
  result?: [
    {
      groupId?: string(description='字段组ID', name='group_id'),
      hasDetail?: boolean(description='是否支持明细', name='has_detail'),
      fieldList?: [
        {
          fieldType?: string(description='字段类型', name='field_type'),
          fieldName?: string(description='字段描述', name='field_name'),
          fieldCode?: string(description='字段code', name='field_code'),
          optionText?: string(description='选择字段值', name='option_text'),
        }
      ](description='组里面的字段集合', name='field_list'),
    }
  ](description='结果集', name='result'),
}

model GrouplistOapiSmartworkHrmEmployeeFieldResponse = {
  headers: map[string]string,
  body: GrouplistOapiSmartworkHrmEmployeeFieldResponseBody,
}

/**
 * Description: 提供给ISV查询花名册的员工档案信息中有权限的字段列表
 */
async function grouplistOapiSmartworkHrmEmployeeField(request: GrouplistOapiSmartworkHrmEmployeeFieldRequest): GrouplistOapiSmartworkHrmEmployeeFieldResponse {
  var runtime = new Util.RuntimeOptions{};
  return grouplistOapiSmartworkHrmEmployeeFieldEx(request, runtime);
}

/**
 * Description: 提供给ISV查询花名册的员工档案信息中有权限的字段列表
 */
async function grouplistOapiSmartworkHrmEmployeeFieldEx(request: GrouplistOapiSmartworkHrmEmployeeFieldRequest, runtime: Util.RuntimeOptions): GrouplistOapiSmartworkHrmEmployeeFieldResponse {
  Util.validateModel(request);
  var appParams = Util.stringifyMapValue(Util.toMap(request.params));
  return doRequestOApi('POST', '/topapi/smartwork/hrm/employee/field/grouplist', request.headers, appParams, runtime);
}

model AddOapiAttendanceGroupWifisParams = {
  opUserid?: string(description='操作人userId', name='op_userid'),
  groupKey: string(description='考勤组id', name='group_key'),
  wifiList: [
    {
      foreignId: string(description='业务方wifiId', name='foreign_id'),
      macAddr: string(description='mac地址', name='mac_addr'),
      ssid: string(description='mac名称', name='ssid'),
    }
  ](description='wifi列表', maxItems=100, name='wifi_list'),
}

model AddOapiAttendanceGroupWifisRequest = {
  headers?: map[string]string,
  params:AddOapiAttendanceGroupWifisParams,
}

model AddOapiAttendanceGroupWifisResponseBody = {
  result?: {
    result?: {
      errorInfoList?: [
        {
          failureList?: [
            {
              foreignId?: string(description='业务方wifiId', name='foreign_id'),
              macAddr?: string(description='mac地址', name='mac_addr'),
              ssid?: string(description='mac名称', name='ssid'),
              wifiKey?: string(description='wifiKey', name='wifi_key'),
            }
          ](description='失败列表', name='failure_list'),
          msg?: string(description='错误描述', name='msg'),
          code?: string(description='错误码', name='code'),
        }
      ](description='错误列表', name='error_info_list'),
      successList?: [
        {
          foreignId?: string(description='业务方wifiId', name='foreign_id'),
          macAddr?: string(description='mac地址', name='mac_addr'),
          ssid?: string(description='mac名称', name='ssid'),
          wifiKey?: string(description='wifiKey', name='wifi_key'),
        }
      ](description='成功列表', name='success_list'),
    }(description='添加wifi结果', name='result'),
    errcode?: int64(description='错误码', name='errcode'),
    errmsg?: string(description='错误信息', name='errmsg'),
    success?: boolean(description='是否成功', name='success'),
  }(description='出参', name='result'),
}

model AddOapiAttendanceGroupWifisResponse = {
  headers: map[string]string,
  body: AddOapiAttendanceGroupWifisResponseBody,
}

/**
 * Description: 考勤组下批量新增wifi
 */
async function addOapiAttendanceGroupWifis(request: AddOapiAttendanceGroupWifisRequest): AddOapiAttendanceGroupWifisResponse {
  var runtime = new Util.RuntimeOptions{};
  return addOapiAttendanceGroupWifisEx(request, runtime);
}

/**
 * Description: 考勤组下批量新增wifi
 */
async function addOapiAttendanceGroupWifisEx(request: AddOapiAttendanceGroupWifisRequest, runtime: Util.RuntimeOptions): AddOapiAttendanceGroupWifisResponse {
  Util.validateModel(request);
  var appParams = Util.stringifyMapValue(Util.toMap(request.params));
  return doRequestOApi('POST', '/topapi/attendance/group/wifis/add', request.headers, appParams, runtime);
}

model RemoveOapiAttendanceGroupWifisParams = {
  opUserid?: string(description='操作人userId', name='op_userid'),
  groupKey: string(description='考勤组id', name='group_key'),
  wifiKeyList: [ string ](description='wifiKeyList', maxItems=100, name='wifi_key_list'),
}

model RemoveOapiAttendanceGroupWifisRequest = {
  headers?: map[string]string,
  params:RemoveOapiAttendanceGroupWifisParams,
}

model RemoveOapiAttendanceGroupWifisResponseBody = {
  result?: {
    errorInfoList?: [
      {
        failureList?: [ string ](description='错误列表', name='failure_list'),
        msg?: string(description='错误描述', name='msg'),
        code?: string(description='错误码', name='code'),
      }
    ](description='失败列表', name='error_info_list'),
    successList?: [ string ](description='成功列表', name='success_list'),
  }(description='删除成功的wifiId列表', name='result'),
  errcode?: int64(description='错误码', name='errcode'),
  errmsg?: string(description='错误信息', name='errmsg'),
  success?: boolean(description='是否成功', name='success'),
}

model RemoveOapiAttendanceGroupWifisResponse = {
  headers: map[string]string,
  body: RemoveOapiAttendanceGroupWifisResponseBody,
}

/**
 * Description: 考勤组下批量移除wifi
 */
async function removeOapiAttendanceGroupWifis(request: RemoveOapiAttendanceGroupWifisRequest): RemoveOapiAttendanceGroupWifisResponse {
  var runtime = new Util.RuntimeOptions{};
  return removeOapiAttendanceGroupWifisEx(request, runtime);
}

/**
 * Description: 考勤组下批量移除wifi
 */
async function removeOapiAttendanceGroupWifisEx(request: RemoveOapiAttendanceGroupWifisRequest, runtime: Util.RuntimeOptions): RemoveOapiAttendanceGroupWifisResponse {
  Util.validateModel(request);
  var appParams = Util.stringifyMapValue(Util.toMap(request.params));
  return doRequestOApi('POST', '/topapi/attendance/group/wifis/remove', request.headers, appParams, runtime);
}

model RotateedkOapiOpenencryptParams = {
  topEdkRotateManual: {
    resource: string(description='资源路径', name='resource'),
    requestid: string(description='请求id', name='requestid'),
    agentid: int64(description='企业内部应用id', name='agentid'),
  }(description='请求参数', name='top_edk_rotate_manual'),
}

model RotateedkOapiOpenencryptRequest = {
  headers?: map[string]string,
  params:RotateedkOapiOpenencryptParams,
}

model RotateedkOapiOpenencryptResponseBody = {
  result?: string(description='一般是空字符串', name='result'),
  success?: boolean(description='接口调用成功与否标记', name='success'),
  errcode?: int64(description='错误码', name='errcode'),
  errmsg?: string(description='错误消息', name='errmsg'),
}

model RotateedkOapiOpenencryptResponse = {
  headers: map[string]string,
  body: RotateedkOapiOpenencryptResponseBody,
}

/**
 * Description: 用于手工轮转密钥时候调用
 */
async function rotateedkOapiOpenencrypt(request: RotateedkOapiOpenencryptRequest): RotateedkOapiOpenencryptResponse {
  var runtime = new Util.RuntimeOptions{};
  return rotateedkOapiOpenencryptEx(request, runtime);
}

/**
 * Description: 用于手工轮转密钥时候调用
 */
async function rotateedkOapiOpenencryptEx(request: RotateedkOapiOpenencryptRequest, runtime: Util.RuntimeOptions): RotateedkOapiOpenencryptResponse {
  Util.validateModel(request);
  var appParams = Util.stringifyMapValue(Util.toMap(request.params));
  return doRequestOApi('POST', '/topapi/openencrypt/rotateedk', request.headers, appParams, runtime);
}

model UpdateOapiCustomerserviceStatusParams = {
  statusChange: {
    buId: string(description='客服所在bu', name='bu_id'),
    originStatus: int64(description='原始状态', name='origin_status'),
    serviceId: string(description='客服id', name='service_id'),
    source: string(description='客服所在系统', name='source'),
    targetStatus: int64(description='目标状态', name='target_status'),
  }(description='系统自动生成', name='status_change'),
}

model UpdateOapiCustomerserviceStatusRequest = {
  headers?: map[string]string,
  params:UpdateOapiCustomerserviceStatusParams,
}

model UpdateOapiCustomerserviceStatusResponseBody = {
  errcode?: int64(description='错误码', name='errcode'),
  errmsg?: string(description='错误信息', name='errmsg'),
  success?: boolean(description='是否成功', name='success'),
}

model UpdateOapiCustomerserviceStatusResponse = {
  headers: map[string]string,
  body: UpdateOapiCustomerserviceStatusResponseBody,
}

/**
 * Description: 提供给集团的BU，调用该接口，在客户服务的场景下，客服状态变更
 */
async function updateOapiCustomerserviceStatus(request: UpdateOapiCustomerserviceStatusRequest): UpdateOapiCustomerserviceStatusResponse {
  var runtime = new Util.RuntimeOptions{};
  return updateOapiCustomerserviceStatusEx(request, runtime);
}

/**
 * Description: 提供给集团的BU，调用该接口，在客户服务的场景下，客服状态变更
 */
async function updateOapiCustomerserviceStatusEx(request: UpdateOapiCustomerserviceStatusRequest, runtime: Util.RuntimeOptions): UpdateOapiCustomerserviceStatusResponse {
  Util.validateModel(request);
  var appParams = Util.stringifyMapValue(Util.toMap(request.params));
  return doRequestOApi('POST', '/topapi/customerservice/status/update', request.headers, appParams, runtime);
}

model QueryOapiAttendanceGroupWifisParams = {
  cursor?: string(description='上一批次最后一个id，默认空', name='cursor'),
  size?: int64(description='分页大小', name='size'),
  opUserid?: string(description='操作人userId', name='op_userid'),
  groupKey: string(description='考勤组id', name='group_key'),
}

model QueryOapiAttendanceGroupWifisRequest = {
  headers?: map[string]string,
  params:QueryOapiAttendanceGroupWifisParams,
}

model QueryOapiAttendanceGroupWifisResponseBody = {
  result?: {
    result?: {
      wifiList?: [
        {
          macAddr?: string(description='mac地址', name='mac_addr'),
          ssid?: string(description='wifi名称', name='ssid'),
          wifiKey?: string(description='wifiKey', name='wifi_key'),
        }
      ](description='wifi列表', name='wifi_list'),
      hasMore?: boolean(description='是否更多', name='has_more'),
    }(description='查询wifi列表结果', name='result'),
    errcode?: int64(description='错误码', name='errcode'),
    errmsg?: string(description='错误信息', name='errmsg'),
    success?: boolean(description='是否成功', name='success'),
  }(description='出参', name='result'),
}

model QueryOapiAttendanceGroupWifisResponse = {
  headers: map[string]string,
  body: QueryOapiAttendanceGroupWifisResponseBody,
}

/**
 * Description: 考勤组下批量查询wifi
 */
async function queryOapiAttendanceGroupWifis(request: QueryOapiAttendanceGroupWifisRequest): QueryOapiAttendanceGroupWifisResponse {
  var runtime = new Util.RuntimeOptions{};
  return queryOapiAttendanceGroupWifisEx(request, runtime);
}

/**
 * Description: 考勤组下批量查询wifi
 */
async function queryOapiAttendanceGroupWifisEx(request: QueryOapiAttendanceGroupWifisRequest, runtime: Util.RuntimeOptions): QueryOapiAttendanceGroupWifisResponse {
  Util.validateModel(request);
  var appParams = Util.stringifyMapValue(Util.toMap(request.params));
  return doRequestOApi('POST', '/topapi/attendance/group/wifis/query', request.headers, appParams, runtime);
}

model UpdateconfigOapiOpenencryptParams = {
  topResourceKmsConfig: {
    extension?: string(description='扩展字段,json格式', name='extension'),
    resource: string(description='资源路径', name='resource'),
    requestid: string(description='请求id', name='requestid'),
    agentid: int64(description='企业内部应用id', name='agentid'),
    rotatePeriodDay: int64(description='轮转周期', name='rotate_period_day'),
  }(description='请求参数', name='top_resource_kms_config'),
}

model UpdateconfigOapiOpenencryptRequest = {
  headers?: map[string]string,
  params:UpdateconfigOapiOpenencryptParams,
}

model UpdateconfigOapiOpenencryptResponseBody = {
  result?: string(description='一般是空字符串', name='result'),
  success?: boolean(description='接口状态标记', name='success'),
  errcode?: int64(description='内部错误', name='errcode'),
  errmsg?: string(description='错误消息', name='errmsg'),
}

model UpdateconfigOapiOpenencryptResponse = {
  headers: map[string]string,
  body: UpdateconfigOapiOpenencryptResponseBody,
}

/**
 * Description: 更新企业kms配置，比如秘钥轮转周期等
 */
async function updateconfigOapiOpenencrypt(request: UpdateconfigOapiOpenencryptRequest): UpdateconfigOapiOpenencryptResponse {
  var runtime = new Util.RuntimeOptions{};
  return updateconfigOapiOpenencryptEx(request, runtime);
}

/**
 * Description: 更新企业kms配置，比如秘钥轮转周期等
 */
async function updateconfigOapiOpenencryptEx(request: UpdateconfigOapiOpenencryptRequest, runtime: Util.RuntimeOptions): UpdateconfigOapiOpenencryptResponse {
  Util.validateModel(request);
  var appParams = Util.stringifyMapValue(Util.toMap(request.params));
  return doRequestOApi('POST', '/topapi/openencrypt/updateconfig', request.headers, appParams, runtime);
}

model InitOapiAlitripBtripReimbursementParams = {
  rq: {
    title: string(description='报销单标题', name='title'),
    payAmount: int64(description='报销金额', name='pay_amount'),
    corpid: string(description='corp id', name='corpid'),
    departId?: string(description='部门ID，不填时取用户所在部门id', name='depart_id'),
    thirdpartyFlowId: string(description='第三方流程id', name='thirdparty_flow_id'),
    status: int64(description='状态  0：审批中，1：已同意，2：已拒绝，4：已撤销', name='status'),
    applyFlowNo?: int64(description='申请单编号', name='apply_flow_no'),
    detailUrl: string(description='报销单详情', name='detail_url'),
    isvCode: string(description='isv标识', name='isv_code'),
    operator: {
      userid: string(description='报销人id', name='userid'),
    }(description='报销人', name='operator'),
    auditList?: [
      {
        userid?: string(description='审批人id', name='userid'),
        status: int64(description='报销审批单状态：0审批中 1已同意 2已拒绝 3已转交，4已取消 5已终止', name='status'),
        operateTime: string(description='审批操作时间', pattern='\\\\d{4}[-]\\\\d{1,2}[-]\\\\d{1,2}[T]\\\\d{2}:\\\\d{2}:\\\\d{2}[Z]', name='operate_time'),
        note?: string(description='备注', name='note'),
      }
    ](description='审批列表', maxItems=999, name='audit_list'),
    departName?: string(description='部门名称，不填时取用户所在部门id', name='depart_name'),
  }(description='入参，创建报销单参数', name='rq'),
}

model InitOapiAlitripBtripReimbursementRequest = {
  headers?: map[string]string,
  params:InitOapiAlitripBtripReimbursementParams,
}

model InitOapiAlitripBtripReimbursementResponseBody = {
  success?: boolean(description='操作是否成功', name='success'),
  errcode?: int64(description='错误码', name='errcode'),
  errmsg?: string(description='错误信息', name='errmsg'),
  module?: {
    flowNo?: int64(description='报销单号', name='flow_no'),
    thirdpartyFlowId?: string(description='第三方流程编号', name='thirdparty_flow_id'),
  }(description='返回值', name='module'),
}

model InitOapiAlitripBtripReimbursementResponse = {
  headers: map[string]string,
  body: InitOapiAlitripBtripReimbursementResponseBody,
}

/**
 * Description: 创建报销单，回流报销数据
 */
async function initOapiAlitripBtripReimbursement(request: InitOapiAlitripBtripReimbursementRequest): InitOapiAlitripBtripReimbursementResponse {
  var runtime = new Util.RuntimeOptions{};
  return initOapiAlitripBtripReimbursementEx(request, runtime);
}

/**
 * Description: 创建报销单，回流报销数据
 */
async function initOapiAlitripBtripReimbursementEx(request: InitOapiAlitripBtripReimbursementRequest, runtime: Util.RuntimeOptions): InitOapiAlitripBtripReimbursementResponse {
  Util.validateModel(request);
  var appParams = Util.stringifyMapValue(Util.toMap(request.params));
  return doRequestOApi('POST', '/topapi/alitrip/btrip/reimbursement/init', request.headers, appParams, runtime);
}

model AddOapiAttendanceGroupPositionsParams = {
  opUserid?: string(description='操作人userId', name='op_userid'),
  groupKey: string(description='考勤组id', name='group_key'),
  positionList: [
    {
      address: string(description='地址描述', name='address'),
      foreignId: string(description='业务方positionId', name='foreign_id'),
      longitude: string(description='经度(支持6位小数)', name='longitude'),
      latitude: string(description='纬度(支持6位小数)', name='latitude'),
    }
  ](description='postion列表', maxItems=100, name='position_list'),
}

model AddOapiAttendanceGroupPositionsRequest = {
  headers?: map[string]string,
  params:AddOapiAttendanceGroupPositionsParams,
}

model AddOapiAttendanceGroupPositionsResponseBody = {
  result?: {
    result?: {
      errorInfoList?: [
        {
          failureList?: [
            {
              foreignId?: string(description='业务方positionId', name='foreign_id'),
              address?: string(description='地址描述', name='address'),
              latitude?: string(description='经度(支持6位小数)', name='latitude'),
              longitude?: string(description='纬度(支持6位小数)', name='longitude'),
              positionKey?: string(description='positionKey，失败时为空', name='position_key'),
            }
          ](description='失败列表', name='failure_list'),
          msg?: string(description='错误信息', name='msg'),
          code?: string(description='错误码', name='code'),
        }
      ](description='错误列表', name='error_info_list'),
      successList?: [
        {
          foreignId?: string(description='业务方positionId', name='foreign_id'),
          address?: string(description='地址描述', name='address'),
          latitude?: string(description='经度(支持6位小数)', name='latitude'),
          longitude?: string(description='纬度(支持6位小数)', name='longitude'),
          positionKey?: string(description='positionKey', name='position_key'),
        }
      ](description='成功列表', name='success_list'),
    }(description='结果', name='result'),
    errcode?: int64(description='错误码', name='errcode'),
    errmsg?: string(description='错误信息', name='errmsg'),
    success?: boolean(description='是否成功', name='success'),
  }(description='出参', name='result'),
}

model AddOapiAttendanceGroupPositionsResponse = {
  headers: map[string]string,
  body: AddOapiAttendanceGroupPositionsResponseBody,
}

/**
 * Description: 考勤组下批量新增position
 */
async function addOapiAttendanceGroupPositions(request: AddOapiAttendanceGroupPositionsRequest): AddOapiAttendanceGroupPositionsResponse {
  var runtime = new Util.RuntimeOptions{};
  return addOapiAttendanceGroupPositionsEx(request, runtime);
}

/**
 * Description: 考勤组下批量新增position
 */
async function addOapiAttendanceGroupPositionsEx(request: AddOapiAttendanceGroupPositionsRequest, runtime: Util.RuntimeOptions): AddOapiAttendanceGroupPositionsResponse {
  Util.validateModel(request);
  var appParams = Util.stringifyMapValue(Util.toMap(request.params));
  return doRequestOApi('POST', '/topapi/attendance/group/positions/add', request.headers, appParams, runtime);
}

model AuthappcloseOapiOrgOpenencryptParams = {
  topAuthMicroAppClose: {
    resource: string(description='资源路径', name='resource'),
    requestid: string(description='请求id', name='requestid'),
    agentid: int64(description='企业内部应用id', name='agentid'),
    authcode: string(description='授权码', name='authcode'),
  }(description='请求参数', name='top_auth_micro_app_close'),
}

model AuthappcloseOapiOrgOpenencryptRequest = {
  headers?: map[string]string,
  params:AuthappcloseOapiOrgOpenencryptParams,
}

model AuthappcloseOapiOrgOpenencryptResponseBody = {
  result?: string(description='一般是空字符串', name='result'),
  success?: boolean(description='接口调用成功标记', name='success'),
  errcode?: int64(description='错误码', name='errcode'),
  errmsg?: string(description='错误消息', name='errmsg'),
}

model AuthappcloseOapiOrgOpenencryptResponse = {
  headers: map[string]string,
  body: AuthappcloseOapiOrgOpenencryptResponseBody,
}

/**
 * Description: 关闭微应用解密鉴权
 */
async function authappcloseOapiOrgOpenencrypt(request: AuthappcloseOapiOrgOpenencryptRequest): AuthappcloseOapiOrgOpenencryptResponse {
  var runtime = new Util.RuntimeOptions{};
  return authappcloseOapiOrgOpenencryptEx(request, runtime);
}

/**
 * Description: 关闭微应用解密鉴权
 */
async function authappcloseOapiOrgOpenencryptEx(request: AuthappcloseOapiOrgOpenencryptRequest, runtime: Util.RuntimeOptions): AuthappcloseOapiOrgOpenencryptResponse {
  Util.validateModel(request);
  var appParams = Util.stringifyMapValue(Util.toMap(request.params));
  return doRequestOApi('POST', '/topapi/org/openencrypt/authappclose', request.headers, appParams, runtime);
}

model GetOapiKacDatavChatSummaryParams = {
  request?: {
    dataId: string(description='日期标识', name='data_id'),
  }(description='请求对象', name='request'),
}

model GetOapiKacDatavChatSummaryRequest = {
  headers?: map[string]string,
  params?:GetOapiKacDatavChatSummaryParams,
}

model GetOapiKacDatavChatSummaryResponseBody = {
  errcode?: int64(description='结果码', name='errcode'),
  errmsg?: string(description='提示信息', name='errmsg'),
  result?: {
    groupChatUserCount?: int64(description='群聊用户数', name='group_chat_user_count'),
    messageTotalCount?: int64(description='消息数', name='message_total_count'),
    messageUserCount?: int64(description='聊天用户数', name='message_user_count'),
    chatUserCount?: int64(description='单聊用户数', name='chat_user_count'),
    groupCount?: int64(description='总群数', name='group_count'),
    newGroupCount?: int64(description='新增群数（当日）', name='new_group_count'),
    activeGroupCount?: int64(description='活跃群数（当日）', name='active_group_count'),
  }(description='结果对象', name='result'),
}

model GetOapiKacDatavChatSummaryResponse = {
  headers: map[string]string,
  body: GetOapiKacDatavChatSummaryResponseBody,
}

/**
 * Description: 大客户钉钉数据：查询当前企业每天的聊天汇总数据
 */
async function getOapiKacDatavChatSummary(request: GetOapiKacDatavChatSummaryRequest): GetOapiKacDatavChatSummaryResponse {
  var runtime = new Util.RuntimeOptions{};
  return getOapiKacDatavChatSummaryEx(request, runtime);
}

/**
 * Description: 大客户钉钉数据：查询当前企业每天的聊天汇总数据
 */
async function getOapiKacDatavChatSummaryEx(request: GetOapiKacDatavChatSummaryRequest, runtime: Util.RuntimeOptions): GetOapiKacDatavChatSummaryResponse {
  Util.validateModel(request);
  var appParams = Util.stringifyMapValue(Util.toMap(request.params));
  return doRequestOApi('POST', '/topapi/kac/datav/chat/summary/get', request.headers, appParams, runtime);
}

model RemoveOapiAttendanceGroupPositionsParams = {
  opUserid?: string(description='操作人userId', name='op_userid'),
  groupKey: string(description='考勤组id', name='group_key'),
  wifiKeyList: [ string ](description='wifiKeyList', maxItems=100, name='wifi_key_list'),
}

model RemoveOapiAttendanceGroupPositionsRequest = {
  headers?: map[string]string,
  params:RemoveOapiAttendanceGroupPositionsParams,
}

model RemoveOapiAttendanceGroupPositionsResponseBody = {
  result?: {
    successList?: [ string ](description='成功列表', name='success_list'),
    errorInfoList?: [
      {
        failureList?: [ string ](description='失败列表', name='failure_list'),
        msg?: string(description='错误描述', name='msg'),
        code?: string(description='错误码', name='code'),
      }
    ](description='错误列表', name='error_info_list'),
  }(description='删除成功的positionId列表', name='result'),
  errcode?: int64(description='错误码', name='errcode'),
  errmsg?: string(description='错误信息', name='errmsg'),
  success?: boolean(description='是否成功', name='success'),
}

model RemoveOapiAttendanceGroupPositionsResponse = {
  headers: map[string]string,
  body: RemoveOapiAttendanceGroupPositionsResponseBody,
}

/**
 * Description: 考勤组下批量删除position
 */
async function removeOapiAttendanceGroupPositions(request: RemoveOapiAttendanceGroupPositionsRequest): RemoveOapiAttendanceGroupPositionsResponse {
  var runtime = new Util.RuntimeOptions{};
  return removeOapiAttendanceGroupPositionsEx(request, runtime);
}

/**
 * Description: 考勤组下批量删除position
 */
async function removeOapiAttendanceGroupPositionsEx(request: RemoveOapiAttendanceGroupPositionsRequest, runtime: Util.RuntimeOptions): RemoveOapiAttendanceGroupPositionsResponse {
  Util.validateModel(request);
  var appParams = Util.stringifyMapValue(Util.toMap(request.params));
  return doRequestOApi('POST', '/topapi/attendance/group/positions/remove', request.headers, appParams, runtime);
}

model HeartbeatOapiOrgOpenencryptParams = {
  topKmsHeartbeat: {
    requestid: string(description='请求id', name='requestid'),
    payload?: string(description='附加数据，json格式', name='payload'),
    agentid: int64(description='企业内部应用id', name='agentid'),
  }(description='请求参数', name='top_kms_heartbeat'),
}

model HeartbeatOapiOrgOpenencryptRequest = {
  headers?: map[string]string,
  params:HeartbeatOapiOrgOpenencryptParams,
}

model HeartbeatOapiOrgOpenencryptResponseBody = {
  result?: string(description='一般是空字符串', name='result'),
  errmsg?: string(description='成功', name='errmsg'),
  errcode?: int64(description='0', name='errcode'),
  success?: boolean(description='true', name='success'),
}

model HeartbeatOapiOrgOpenencryptResponse = {
  headers: map[string]string,
  body: HeartbeatOapiOrgOpenencryptResponseBody,
}

/**
 * Description: ISV调用该心跳接口，表明自己存活状态
 */
async function heartbeatOapiOrgOpenencrypt(request: HeartbeatOapiOrgOpenencryptRequest): HeartbeatOapiOrgOpenencryptResponse {
  var runtime = new Util.RuntimeOptions{};
  return heartbeatOapiOrgOpenencryptEx(request, runtime);
}

/**
 * Description: ISV调用该心跳接口，表明自己存活状态
 */
async function heartbeatOapiOrgOpenencryptEx(request: HeartbeatOapiOrgOpenencryptRequest, runtime: Util.RuntimeOptions): HeartbeatOapiOrgOpenencryptResponse {
  Util.validateModel(request);
  var appParams = Util.stringifyMapValue(Util.toMap(request.params));
  return doRequestOApi('POST', '/topapi/org/openencrypt/heartbeat', request.headers, appParams, runtime);
}

model ListOapiKacDatavVideoliveDetailParams = {
  request: {
    dataId: string(description='日期标识', name='data_id'),
    size: int64(description='分页大小;不超过100', name='size'),
    cursor: int64(description='分页游标；首页请使用0，之后直接使用返回结果中的next_cursor', name='cursor'),
  }(description='请求参数对象', name='request'),
}

model ListOapiKacDatavVideoliveDetailRequest = {
  headers?: map[string]string,
  params:ListOapiKacDatavVideoliveDetailParams,
}

model ListOapiKacDatavVideoliveDetailResponseBody = {
  errcode?: int64(description='错误码', name='errcode'),
  errmsg?: string(description='错误信息', name='errmsg'),
  result?: {
    hasMore?: boolean(description='是否有下一页；true则存在更多分页', name='has_more'),
    nextCursor?: int64(description='下一次请求的分页游标', name='next_cursor'),
    data?: [
      {
        cid?: string(description='直播群cid', name='cid'),
        groupName?: string(description='直播群名称', name='group_name'),
        groupUserCount?: int64(description='群人数', name='group_user_count'),
        liveWatchCount?: int64(description='观看直播次数', name='live_watch_count'),
        liveWatchDuration?: string(description='直播时长（秒）', name='live_watch_duration'),
        liveWatchEndTime?: string(description='直播结束时间', name='live_watch_end_time'),
        liveWatchStartTime?: string(description='直播开始时间', name='live_watch_start_time'),
        liveWatchTitle?: string(description='直播标题', name='live_watch_title'),
        liveWatchUserCount?: int64(description='观看直播人数', name='live_watch_user_count'),
        userid?: string(description='员工在当前企业内的唯一标识，也称staffId。可由企业在创建时指定，并代表一定含义比如工号，创建后不可修改', name='userid'),
        staffName?: string(description='直播发起人用户名称', name='staff_name'),
        uuid?: string(description='直播uuid', name='uuid'),
        deptId?: int64(description='部门ID', name='dept_id'),
        deptName?: string(description='部门名称', name='dept_name'),
        staffJobNum?: string(description='直播发起人员工工号', name='staff_job_num'),
        liveWatchDurationMin?: string(description='直播时长（分钟）', name='live_watch_duration_min'),
      }
    ](description='数据明细列表', name='data'),
  }(description='结果对象', name='result'),
}

model ListOapiKacDatavVideoliveDetailResponse = {
  headers: map[string]string,
  body: ListOapiKacDatavVideoliveDetailResponseBody,
}

/**
 * Description: 大客户钉钉数据：查询视频直播明细列表
 */
async function listOapiKacDatavVideoliveDetail(request: ListOapiKacDatavVideoliveDetailRequest): ListOapiKacDatavVideoliveDetailResponse {
  var runtime = new Util.RuntimeOptions{};
  return listOapiKacDatavVideoliveDetailEx(request, runtime);
}

/**
 * Description: 大客户钉钉数据：查询视频直播明细列表
 */
async function listOapiKacDatavVideoliveDetailEx(request: ListOapiKacDatavVideoliveDetailRequest, runtime: Util.RuntimeOptions): ListOapiKacDatavVideoliveDetailResponse {
  Util.validateModel(request);
  var appParams = Util.stringifyMapValue(Util.toMap(request.params));
  return doRequestOApi('POST', '/topapi/kac/datav/videolive/detail/list', request.headers, appParams, runtime);
}

model QueryOapiAttendanceGroupPositionsParams = {
  cursor?: string(description='上一批次的最后一个id，默认空', name='cursor'),
  size?: int64(description='分页大小', name='size'),
  opUserid?: string(description='操作人userId', name='op_userid'),
  groupKey: string(description='考勤组id', name='group_key'),
}

model QueryOapiAttendanceGroupPositionsRequest = {
  headers?: map[string]string,
  params:QueryOapiAttendanceGroupPositionsParams,
}

model QueryOapiAttendanceGroupPositionsResponseBody = {
  result?: {
    result?: {
      positionList?: [
        {
          address?: string(description='地址描述', name='address'),
          latitude?: string(description='纬度(支持6位小数)', name='latitude'),
          longitude?: string(description='经度(支持6位小数)', name='longitude'),
          positionKey?: string(description='positionKey', name='position_key'),
        }
      ](description='position列表', name='position_list'),
      hasMore?: boolean(description='是否更多', name='has_more'),
    }(description='查询结果', name='result'),
    errcode?: int64(description='错误码', name='errcode'),
    errmsg?: string(description='错误信息', name='errmsg'),
    success?: boolean(description='是否成功', name='success'),
  }(description='出参', name='result'),
}

model QueryOapiAttendanceGroupPositionsResponse = {
  headers: map[string]string,
  body: QueryOapiAttendanceGroupPositionsResponseBody,
}

/**
 * Description: 考勤组下批量查询position
 */
async function queryOapiAttendanceGroupPositions(request: QueryOapiAttendanceGroupPositionsRequest): QueryOapiAttendanceGroupPositionsResponse {
  var runtime = new Util.RuntimeOptions{};
  return queryOapiAttendanceGroupPositionsEx(request, runtime);
}

/**
 * Description: 考勤组下批量查询position
 */
async function queryOapiAttendanceGroupPositionsEx(request: QueryOapiAttendanceGroupPositionsRequest, runtime: Util.RuntimeOptions): QueryOapiAttendanceGroupPositionsResponse {
  Util.validateModel(request);
  var appParams = Util.stringifyMapValue(Util.toMap(request.params));
  return doRequestOApi('POST', '/topapi/attendance/group/positions/query', request.headers, appParams, runtime);
}

model RegistekmsOapiOrgOpenencryptParams = {
  topKmsMeta: {
    endpoint: string(description='kms数据域名', name='endpoint'),
    extension?: string(description='扩展字段,json格式', name='extension'),
    requestid: string(description='请求id', name='requestid'),
    agentid: int64(description='企业内部应用id', name='agentid'),
    status: int64(description='0：禁用，1：启用', name='status'),
  }(description='请求参数', name='top_kms_meta'),
}

model RegistekmsOapiOrgOpenencryptRequest = {
  headers?: map[string]string,
  params:RegistekmsOapiOrgOpenencryptParams,
}

model RegistekmsOapiOrgOpenencryptResponseBody = {
  result?: string(description='一般是空字符串', name='result'),
  success?: boolean(description='接口状态码', name='success'),
  errcode?: int64(description='错误类型', name='errcode'),
  errmsg?: string(description='错误消息', name='errmsg'),
}

model RegistekmsOapiOrgOpenencryptResponse = {
  headers: map[string]string,
  body: RegistekmsOapiOrgOpenencryptResponseBody,
}

/**
 * Description: 用于KMS注册元数据信息，比如kms的数据域名等
 */
async function registekmsOapiOrgOpenencrypt(request: RegistekmsOapiOrgOpenencryptRequest): RegistekmsOapiOrgOpenencryptResponse {
  var runtime = new Util.RuntimeOptions{};
  return registekmsOapiOrgOpenencryptEx(request, runtime);
}

/**
 * Description: 用于KMS注册元数据信息，比如kms的数据域名等
 */
async function registekmsOapiOrgOpenencryptEx(request: RegistekmsOapiOrgOpenencryptRequest, runtime: Util.RuntimeOptions): RegistekmsOapiOrgOpenencryptResponse {
  Util.validateModel(request);
  var appParams = Util.stringifyMapValue(Util.toMap(request.params));
  return doRequestOApi('POST', '/topapi/org/openencrypt/registekms', request.headers, appParams, runtime);
}

model GetOapiKacDatavDauSummaryParams = {
  request: {
    dataId: string(description='日期标识', name='data_id'),
  }(description='请求参数对象', name='request'),
}

model GetOapiKacDatavDauSummaryRequest = {
  headers?: map[string]string,
  params:GetOapiKacDatavDauSummaryParams,
}

model GetOapiKacDatavDauSummaryResponseBody = {
  errcode?: int64(description='结果码', name='errcode'),
  errmsg?: string(description='错误信息', name='errmsg'),
  result?: {
    dailyActiveUsers?: int64(description='日活跃人数', name='daily_active_users'),
    activatedCount?: int64(description='激活人数（累计）', name='activated_count'),
    contactsCount?: int64(description='通讯录人数', name='contacts_count'),
    chatUserCount?: int64(description='聊天用户数', name='chat_user_count'),
  }(description='结果对象', name='result'),
}

model GetOapiKacDatavDauSummaryResponse = {
  headers: map[string]string,
  body: GetOapiKacDatavDauSummaryResponseBody,
}

/**
 * Description: 大客户钉钉数据：查询企业自己的DAU汇总数据
 */
async function getOapiKacDatavDauSummary(request: GetOapiKacDatavDauSummaryRequest): GetOapiKacDatavDauSummaryResponse {
  var runtime = new Util.RuntimeOptions{};
  return getOapiKacDatavDauSummaryEx(request, runtime);
}

/**
 * Description: 大客户钉钉数据：查询企业自己的DAU汇总数据
 */
async function getOapiKacDatavDauSummaryEx(request: GetOapiKacDatavDauSummaryRequest, runtime: Util.RuntimeOptions): GetOapiKacDatavDauSummaryResponse {
  Util.validateModel(request);
  var appParams = Util.stringifyMapValue(Util.toMap(request.params));
  return doRequestOApi('POST', '/topapi/kac/datav/dau/summary/get', request.headers, appParams, runtime);
}

model AddOapiAttendanceGroupUsersParams = {
  opUserid?: string(description='操作人userId', name='op_userid'),
  groupKey: string(description='考勤组id', name='group_key'),
  userIdList: [ string ](description='用户列表', maxItems=100, name='user_id_list'),
}

model AddOapiAttendanceGroupUsersRequest = {
  headers?: map[string]string,
  params:AddOapiAttendanceGroupUsersParams,
}

model AddOapiAttendanceGroupUsersResponseBody = {
  result?: {
    errorInfoList?: [
      {
        failureList?: [ string ](description='失败列表', name='failure_list'),
        msg?: string(description='错误信息', name='msg'),
        code?: string(description='错误码', name='code'),
      }
    ](description='错误列表', name='error_info_list'),
    successList?: [ string ](description='成功列表', name='success_list'),
  }(description='结果', name='result'),
  errcode?: int64(description='错误码', name='errcode'),
  errmsg?: string(description='错误信息', name='errmsg'),
  success?: boolean(description='是否成功', name='success'),
}

model AddOapiAttendanceGroupUsersResponse = {
  headers: map[string]string,
  body: AddOapiAttendanceGroupUsersResponseBody,
}

/**
 * Description: 考勤组下批量新增员工
 */
async function addOapiAttendanceGroupUsers(request: AddOapiAttendanceGroupUsersRequest): AddOapiAttendanceGroupUsersResponse {
  var runtime = new Util.RuntimeOptions{};
  return addOapiAttendanceGroupUsersEx(request, runtime);
}

/**
 * Description: 考勤组下批量新增员工
 */
async function addOapiAttendanceGroupUsersEx(request: AddOapiAttendanceGroupUsersRequest, runtime: Util.RuntimeOptions): AddOapiAttendanceGroupUsersResponse {
  Util.validateModel(request);
  var appParams = Util.stringifyMapValue(Util.toMap(request.params));
  return doRequestOApi('POST', '/topapi/attendance/group/users/add', request.headers, appParams, runtime);
}

model HeartbeatOapiIsvOpenencryptParams = {
  topKmsHeartbeat: {
    requestid: string(description='请求id', name='requestid'),
    payload?: string(description='附加数据', name='payload'),
    appid: int64(description='微应用id', name='appid'),
  }(description='请求参数', name='top_kms_heartbeat'),
}

model HeartbeatOapiIsvOpenencryptRequest = {
  headers?: map[string]string,
  params:HeartbeatOapiIsvOpenencryptParams,
}

model HeartbeatOapiIsvOpenencryptResponseBody = {
  result?: string(description='一般是空字符串', name='result'),
  errmsg?: string(description='成功', name='errmsg'),
  errcode?: int64(description='0', name='errcode'),
  success?: boolean(description='true', name='success'),
}

model HeartbeatOapiIsvOpenencryptResponse = {
  headers: map[string]string,
  body: HeartbeatOapiIsvOpenencryptResponseBody,
}

/**
 * Description: ISV调用该心跳接口，表明自己存活状态
 */
async function heartbeatOapiIsvOpenencrypt(request: HeartbeatOapiIsvOpenencryptRequest): HeartbeatOapiIsvOpenencryptResponse {
  var runtime = new Util.RuntimeOptions{};
  return heartbeatOapiIsvOpenencryptEx(request, runtime);
}

/**
 * Description: ISV调用该心跳接口，表明自己存活状态
 */
async function heartbeatOapiIsvOpenencryptEx(request: HeartbeatOapiIsvOpenencryptRequest, runtime: Util.RuntimeOptions): HeartbeatOapiIsvOpenencryptResponse {
  Util.validateModel(request);
  var appParams = Util.stringifyMapValue(Util.toMap(request.params));
  return doRequestOApi('POST', '/topapi/isv/openencrypt/heartbeat', request.headers, appParams, runtime);
}

model ListOapiKacDatavInactivatedUserParams = {
  request: {
    dataId: string(description='日期标识', name='data_id'),
    size: int64(description='分页大小;不超过100', name='size'),
    cursor: int64(description='分页游标；首页请使用0，之后直接使用返回结果中的next_cursor', name='cursor'),
  }(description='请求参数对象', name='request'),
}

model ListOapiKacDatavInactivatedUserRequest = {
  headers?: map[string]string,
  params:ListOapiKacDatavInactivatedUserParams,
}

model ListOapiKacDatavInactivatedUserResponseBody = {
  errcode?: int64(description='结果码', name='errcode'),
  errmsg?: string(description='提示信息', name='errmsg'),
  result?: {
    data?: [
      {
        deptId?: int64(description='部门id', name='dept_id'),
        deptName?: string(description='部门名称', name='dept_name'),
        userid?: string(description='员工在当前企业内的唯一标识，也称staffId。可由企业在创建时指定，并代表一定含义比如工号，创建后不可修改', name='userid'),
        staffJobNum?: string(description='员工工号', name='staff_job_num'),
        staffName?: string(description='员工姓名', name='staff_name'),
      }
    ](description='人员列表', name='data'),
    hasMore?: boolean(description='是否有下一页；true则存在更多分页', name='has_more'),
    nextCursor?: int64(description='下一次请求的分页游标', name='next_cursor'),
  }(description='结果对象', name='result'),
}

model ListOapiKacDatavInactivatedUserResponse = {
  headers: map[string]string,
  body: ListOapiKacDatavInactivatedUserResponseBody,
}

/**
 * Description: 大客户钉钉数据：查询当前企业当前通讯录未激活明细列表
 */
async function listOapiKacDatavInactivatedUser(request: ListOapiKacDatavInactivatedUserRequest): ListOapiKacDatavInactivatedUserResponse {
  var runtime = new Util.RuntimeOptions{};
  return listOapiKacDatavInactivatedUserEx(request, runtime);
}

/**
 * Description: 大客户钉钉数据：查询当前企业当前通讯录未激活明细列表
 */
async function listOapiKacDatavInactivatedUserEx(request: ListOapiKacDatavInactivatedUserRequest, runtime: Util.RuntimeOptions): ListOapiKacDatavInactivatedUserResponse {
  Util.validateModel(request);
  var appParams = Util.stringifyMapValue(Util.toMap(request.params));
  return doRequestOApi('POST', '/topapi/kac/datav/inactivated/user/list', request.headers, appParams, runtime);
}

model QueryinfoOapiCertifyParams = {
  userid: string(description='员工userId，也称staffId', name='userid'),
}

model QueryinfoOapiCertifyRequest = {
  headers?: map[string]string,
  params:QueryinfoOapiCertifyParams,
}

model QueryinfoOapiCertifyResponseBody = {
  errmsg?: string(description='errorMsg', name='errmsg'),
  result?: {
    hasCertify?: boolean(description='是否已实名', name='has_certify'),
    certifyFaceImage?: string(description='实名时的脸图', name='certify_face_image'),
    needEnterFace?: boolean(description='是否需要补录脸', name='need_enter_face'),
  }(description='result', name='result'),
  errcode?: int64(description='dingOpenErrcode', name='errcode'),
}

model QueryinfoOapiCertifyResponse = {
  headers: map[string]string,
  body: QueryinfoOapiCertifyResponseBody,
}

/**
 * Description: 提供查询实名认证信息（仅支持2018云栖大会）
 */
async function queryinfoOapiCertify(request: QueryinfoOapiCertifyRequest): QueryinfoOapiCertifyResponse {
  var runtime = new Util.RuntimeOptions{};
  return queryinfoOapiCertifyEx(request, runtime);
}

/**
 * Description: 提供查询实名认证信息（仅支持2018云栖大会）
 */
async function queryinfoOapiCertifyEx(request: QueryinfoOapiCertifyRequest, runtime: Util.RuntimeOptions): QueryinfoOapiCertifyResponse {
  Util.validateModel(request);
  var appParams = Util.stringifyMapValue(Util.toMap(request.params));
  return doRequestOApi('POST', '/topapi/certify/queryinfo', request.headers, appParams, runtime);
}

model RemoveOapiAttendanceGroupUsersParams = {
  opUserid?: string(description='操作人userId', name='op_userid'),
  groupKey: string(description='考勤组id', name='group_key'),
  userIdList: [ string ](description='用户列表', maxItems=100, name='user_id_list'),
}

model RemoveOapiAttendanceGroupUsersRequest = {
  headers?: map[string]string,
  params:RemoveOapiAttendanceGroupUsersParams,
}

model RemoveOapiAttendanceGroupUsersResponseBody = {
  result?: {
    errorInfoList?: [
      {
        failureList?: [ string ](description='失败列表', name='failure_list'),
        msg?: string(description='错误描述', name='msg'),
        code?: string(description='错误码', name='code'),
      }
    ](description='错误列表', name='error_info_list'),
    successList?: [ string ](description='成功列表', name='success_list'),
  }(description='结果', name='result'),
  errcode?: int64(description='错误码', name='errcode'),
  errmsg?: string(description='错误信息', name='errmsg'),
  success?: boolean(description='是否成功', name='success'),
}

model RemoveOapiAttendanceGroupUsersResponse = {
  headers: map[string]string,
  body: RemoveOapiAttendanceGroupUsersResponseBody,
}

/**
 * Description: 考勤组下批量删除员工
 */
async function removeOapiAttendanceGroupUsers(request: RemoveOapiAttendanceGroupUsersRequest): RemoveOapiAttendanceGroupUsersResponse {
  var runtime = new Util.RuntimeOptions{};
  return removeOapiAttendanceGroupUsersEx(request, runtime);
}

/**
 * Description: 考勤组下批量删除员工
 */
async function removeOapiAttendanceGroupUsersEx(request: RemoveOapiAttendanceGroupUsersRequest, runtime: Util.RuntimeOptions): RemoveOapiAttendanceGroupUsersResponse {
  Util.validateModel(request);
  var appParams = Util.stringifyMapValue(Util.toMap(request.params));
  return doRequestOApi('POST', '/topapi/attendance/group/users/remove', request.headers, appParams, runtime);
}

model AuthappcloseOapiIsvOpenencryptParams = {
  topAuthMicroAppClose: {
    resource: string(description='资源路径', name='resource'),
    requestid: string(description='请求id', name='requestid'),
    appid: int64(description='微应用id', name='appid'),
    authcode: string(description='授权码', name='authcode'),
  }(description='请求参数', name='top_auth_micro_app_close'),
}

model AuthappcloseOapiIsvOpenencryptRequest = {
  headers?: map[string]string,
  params:AuthappcloseOapiIsvOpenencryptParams,
}

model AuthappcloseOapiIsvOpenencryptResponseBody = {
  result?: string(description='一般是空字符串', name='result'),
  success?: boolean(description='接口调用成功标记', name='success'),
  errcode?: int64(description='错误码', name='errcode'),
  errmsg?: string(description='错误消息', name='errmsg'),
}

model AuthappcloseOapiIsvOpenencryptResponse = {
  headers: map[string]string,
  body: AuthappcloseOapiIsvOpenencryptResponseBody,
}

/**
 * Description: 关闭微应用解密鉴权
 */
async function authappcloseOapiIsvOpenencrypt(request: AuthappcloseOapiIsvOpenencryptRequest): AuthappcloseOapiIsvOpenencryptResponse {
  var runtime = new Util.RuntimeOptions{};
  return authappcloseOapiIsvOpenencryptEx(request, runtime);
}

/**
 * Description: 关闭微应用解密鉴权
 */
async function authappcloseOapiIsvOpenencryptEx(request: AuthappcloseOapiIsvOpenencryptRequest, runtime: Util.RuntimeOptions): AuthappcloseOapiIsvOpenencryptResponse {
  Util.validateModel(request);
  var appParams = Util.stringifyMapValue(Util.toMap(request.params));
  return doRequestOApi('POST', '/topapi/isv/openencrypt/authappclose', request.headers, appParams, runtime);
}

model ListOapiKacDatavDeptDauParams = {
  request: {
    dataId: string(description='日期标识', name='data_id'),
    size: int64(description='分页大小;不超过100', name='size'),
    cursor: int64(description='分页游标；首页请使用0，之后直接使用返回结果中的next_cursor', name='cursor'),
  }(description='请求参数对象', name='request'),
}

model ListOapiKacDatavDeptDauRequest = {
  headers?: map[string]string,
  params:ListOapiKacDatavDeptDauParams,
}

model ListOapiKacDatavDeptDauResponseBody = {
  errcode?: int64(description='结果码', name='errcode'),
  errmsg?: string(description='提示信息', name='errmsg'),
  result?: {
    data?: [
      {
        dailyActiveUsers?: int64(description='日活跃人数', name='daily_active_users'),
        deptId?: int64(description='部门id', name='dept_id'),
        deptName?: string(description='部门名称', name='dept_name'),
        contactsNumber?: int64(description='通讯录人数', name='contacts_number'),
      }
    ](description='数据列表', name='data'),
    hasMore?: boolean(description='是否有下一页；true则存在更多分页', name='has_more'),
    nextCursor?: int64(description='下一次请求的分页游标', name='next_cursor'),
  }(description='结果对象', name='result'),
}

model ListOapiKacDatavDeptDauResponse = {
  headers: map[string]string,
  body: ListOapiKacDatavDeptDauResponseBody,
}

/**
 * Description: 大客户钉钉数据：查询大客户部门维度的活跃用户统计数据列表
 */
async function listOapiKacDatavDeptDau(request: ListOapiKacDatavDeptDauRequest): ListOapiKacDatavDeptDauResponse {
  var runtime = new Util.RuntimeOptions{};
  return listOapiKacDatavDeptDauEx(request, runtime);
}

/**
 * Description: 大客户钉钉数据：查询大客户部门维度的活跃用户统计数据列表
 */
async function listOapiKacDatavDeptDauEx(request: ListOapiKacDatavDeptDauRequest, runtime: Util.RuntimeOptions): ListOapiKacDatavDeptDauResponse {
  Util.validateModel(request);
  var appParams = Util.stringifyMapValue(Util.toMap(request.params));
  return doRequestOApi('POST', '/topapi/kac/datav/dept/dau/list', request.headers, appParams, runtime);
}

model QueryOapiAttendanceGroupUsersParams = {
  size?: int64(description='分页大小', name='size'),
  cursor?: string(description='上一批次最后一个userId，传null、空值表示从头开始查', name='cursor'),
  opUserid?: string(description='操作人userId', name='op_userid'),
  groupKey: string(description='考勤组id', name='group_key'),
}

model QueryOapiAttendanceGroupUsersRequest = {
  headers?: map[string]string,
  params:QueryOapiAttendanceGroupUsersParams,
}

model QueryOapiAttendanceGroupUsersResponseBody = {
  result?: {
    result?: {
      userList?: [ string ](description='用户列表', name='user_list'),
      hasMore?: string(description='是否更多', name='has_more'),
    }(description='查询结果', name='result'),
    errcode?: int64(description='错误码', name='errcode'),
    errmsg?: string(description='错误信息', name='errmsg'),
    success?: boolean(description='是否成功', name='success'),
  }(description='出参', name='result'),
}

model QueryOapiAttendanceGroupUsersResponse = {
  headers: map[string]string,
  body: QueryOapiAttendanceGroupUsersResponseBody,
}

/**
 * Description: 考勤组下批量查询员工
 */
async function queryOapiAttendanceGroupUsers(request: QueryOapiAttendanceGroupUsersRequest): QueryOapiAttendanceGroupUsersResponse {
  var runtime = new Util.RuntimeOptions{};
  return queryOapiAttendanceGroupUsersEx(request, runtime);
}

/**
 * Description: 考勤组下批量查询员工
 */
async function queryOapiAttendanceGroupUsersEx(request: QueryOapiAttendanceGroupUsersRequest, runtime: Util.RuntimeOptions): QueryOapiAttendanceGroupUsersResponse {
  Util.validateModel(request);
  var appParams = Util.stringifyMapValue(Util.toMap(request.params));
  return doRequestOApi('POST', '/topapi/attendance/group/users/query', request.headers, appParams, runtime);
}

model RegistekmsOapiIsvOpenencryptParams = {
  topKmsMeta: {
    endpoint: string(description='kms数据域名', name='endpoint'),
    extension?: string(description='扩展字段,JSON格式', name='extension'),
    requestid: string(description='请求id', name='requestid'),
    appid: int64(description='微应用id', name='appid'),
    status?: int64(description='0：禁用，1：启用', name='status'),
  }(description='请求参数', name='top_kms_meta'),
}

model RegistekmsOapiIsvOpenencryptRequest = {
  headers?: map[string]string,
  params:RegistekmsOapiIsvOpenencryptParams,
}

model RegistekmsOapiIsvOpenencryptResponseBody = {
  result?: string(description='一般是空字符串', name='result'),
  success?: boolean(description='接口状态码', name='success'),
  errcode?: int64(description='错误类型', name='errcode'),
  errmsg?: string(description='错误消息', name='errmsg'),
}

model RegistekmsOapiIsvOpenencryptResponse = {
  headers: map[string]string,
  body: RegistekmsOapiIsvOpenencryptResponseBody,
}

/**
 * Description: 用于KMS注册元数据信息，比如kms的数据域名等
 */
async function registekmsOapiIsvOpenencrypt(request: RegistekmsOapiIsvOpenencryptRequest): RegistekmsOapiIsvOpenencryptResponse {
  var runtime = new Util.RuntimeOptions{};
  return registekmsOapiIsvOpenencryptEx(request, runtime);
}

/**
 * Description: 用于KMS注册元数据信息，比如kms的数据域名等
 */
async function registekmsOapiIsvOpenencryptEx(request: RegistekmsOapiIsvOpenencryptRequest, runtime: Util.RuntimeOptions): RegistekmsOapiIsvOpenencryptResponse {
  Util.validateModel(request);
  var appParams = Util.stringifyMapValue(Util.toMap(request.params));
  return doRequestOApi('POST', '/topapi/isv/openencrypt/registekms', request.headers, appParams, runtime);
}

model ConfirmOapiAttendanceCorpParams = {
  corpId: string(description='企业id', name='corp_id'),
  corpList: [
    {
      staffAmount: int64(description='企业人数', name='staff_amount'),
      adminPhone: string(description='管理员手机号', name='admin_phone'),
      adminName: string(description='管理员名称', name='admin_name'),
    }
  ](description='企业明细', maxItems=10, name='corp_list'),
}

model ConfirmOapiAttendanceCorpRequest = {
  headers?: map[string]string,
  params:ConfirmOapiAttendanceCorpParams,
}

model ConfirmOapiAttendanceCorpResponseBody = {
  success?: boolean(description='是否成功', name='success'),
  errcode?: int64(description='错误码', name='errcode'),
  errmsg?: string(description='错误描述', name='errmsg'),
  result?: {
    phone?: string(description='手机号', name='phone'),
    corpId?: string(description='企业id', name='corp_id'),
    userid?: string(description='管理员id', name='userid'),
  }(description='匹配结果', name='result'),
}

model ConfirmOapiAttendanceCorpResponse = {
  headers: map[string]string,
  body: ConfirmOapiAttendanceCorpResponseBody,
}

/**
 * Description: 提供给isv喔趣，验证是否是迁移的企业
 */
async function confirmOapiAttendanceCorp(request: ConfirmOapiAttendanceCorpRequest): ConfirmOapiAttendanceCorpResponse {
  var runtime = new Util.RuntimeOptions{};
  return confirmOapiAttendanceCorpEx(request, runtime);
}

/**
 * Description: 提供给isv喔趣，验证是否是迁移的企业
 */
async function confirmOapiAttendanceCorpEx(request: ConfirmOapiAttendanceCorpRequest, runtime: Util.RuntimeOptions): ConfirmOapiAttendanceCorpResponse {
  Util.validateModel(request);
  var appParams = Util.stringifyMapValue(Util.toMap(request.params));
  return doRequestOApi('POST', '/topapi/attendance/corp/confirm', request.headers, appParams, runtime);
}

model ListSmartworkBpmsProcessinstanceParams = {
  processCode: string(description='流程模板唯一标识，可在oa后台编辑审批表单部分查询', name='process_code'),
  startTime: int64(description='审批实例开始时间，毫秒级', name='start_time'),
  endTime?: int64(description='审批实例结束时间，毫秒级，默认取当前值', name='end_time'),
  size?: int64(description='分页参数，每页大小，最多传10', name='size'),
  cursor?: int64(description='分页查询的游标，最开始传0，后续传返回参数中的next_cursor值', name='cursor'),
  useridList?: [ string ](description='发起人用户id列表', maxItems=20, name='userid_list'),
}

model ListSmartworkBpmsProcessinstanceRequest = {
  headers?: map[string]string,
  params:ListSmartworkBpmsProcessinstanceParams,
}

model ListSmartworkBpmsProcessinstanceResponseBody = {
  result?: {
    result?: {
      list?: [
        {
          processInstanceId?: string(description='审批实例id', name='process_instance_id'),
          title?: string(description='标题', name='title'),
          createTime?: string(description='开始时间', pattern='\\\\d{4}[-]\\\\d{1,2}[-]\\\\d{1,2}[T]\\\\d{2}:\\\\d{2}:\\\\d{2}[Z]', name='create_time'),
          finishTime?: string(description='结束时间', pattern='\\\\d{4}[-]\\\\d{1,2}[-]\\\\d{1,2}[T]\\\\d{2}:\\\\d{2}:\\\\d{2}[Z]', name='finish_time'),
          originatorUserid?: string(description='发起人userid', name='originator_userid'),
          originatorDeptId?: string(description='发起人部门id', name='originator_dept_id'),
          status?: string(description='审批状态，分为NEW（刚创建）|RUNNING（运行中）|TERMINATED（被终止）|COMPLETED（完成）|CANCELED（取消）', name='status'),
          approverUseridList?: [ string ](description='审批人列表', name='approver_userid_list'),
          ccUseridList?: [ string ](description='抄送人列表', name='cc_userid_list'),
          formComponentValues?: [
            {
              name?: string(description='表单标签名', name='name'),
              value?: string(description='表单标签值', name='value'),
            }
          ](description='审批表单变量组', name='form_component_values'),
          processInstanceResult?: string(description='审批结果，分为agree和refuse', name='process_instance_result'),
          businessId?: string(description='流程实例业务编号', name='business_id'),
        }
      ](description='list', name='list'),
      nextCursor?: int64(description='表示下次查询的游标，当返回结果没有该字段时表示没有更多数据了', name='next_cursor'),
    }(description='result', name='result'),
    dingOpenErrcode?: int64(description='dingOpenErrcode', name='ding_open_errcode'),
    errorMsg?: string(description='errorMsg', name='error_msg'),
    success?: boolean(description='success', name='success'),
  }(description='result', name='result'),
}

model ListSmartworkBpmsProcessinstanceResponse = {
  headers: map[string]string,
  body: ListSmartworkBpmsProcessinstanceResponseBody,
}

/**
 * Description: 企业可以根据审批流的唯一标识，分页获取该审批流对应的审批实例。只能取到权限范围内的相关部门的审批实例
 */
async function listSmartworkBpmsProcessinstance(request: ListSmartworkBpmsProcessinstanceRequest): ListSmartworkBpmsProcessinstanceResponse {
  var runtime = new Util.RuntimeOptions{};
  return listSmartworkBpmsProcessinstanceEx(request, runtime);
}

/**
 * Description: 企业可以根据审批流的唯一标识，分页获取该审批流对应的审批实例。只能取到权限范围内的相关部门的审批实例
 */
async function listSmartworkBpmsProcessinstanceEx(request: ListSmartworkBpmsProcessinstanceRequest, runtime: Util.RuntimeOptions): ListSmartworkBpmsProcessinstanceResponse {
  Util.validateModel(request);
  var appParams = Util.stringifyMapValue(Util.toMap(request.params));
  return doRequest('dingtalk.smartwork.bpms.processinstance.list', 'POST', '/router/rest', request.headers, appParams, runtime);
}

model StatisticsOapiLiveGroupliveParams = {
  liveUuid: string(description='直播uuid', name='live_uuid'),
  cid?: int64(description='群id', name='cid'),
  openId?: int64(description='用户id', name='open_id'),
}

model StatisticsOapiLiveGroupliveRequest = {
  headers?: map[string]string,
  params:StatisticsOapiLiveGroupliveParams,
}

model StatisticsOapiLiveGroupliveResponseBody = {
  errcode?: int64(description='错误码', name='errcode'),
  errmsg?: string(description='错误描述', name='errmsg'),
  result?: {
    unviewedCount?: int64(description='未看数', name='unviewed_count'),
    viewerCount?: int64(description='已看', name='viewer_count'),
    messageCount?: int64(description='消息', name='message_count'),
    praiseCount?: int64(description='点赞', name='praise_count'),
    pv?: int64(description='pv', name='pv'),
    groupLiveViewers?: [
      {
        openId?: int64(description='openid', name='open_id'),
        playDuration?: int64(description='直播时长', name='play_duration'),
        playRecordDuration?: int64(description='回放时长', name='play_record_duration'),
      }
    ](description='观看列表', name='group_live_viewers'),
  }(description='返回结果', name='result'),
}

model StatisticsOapiLiveGroupliveResponse = {
  headers: map[string]string,
  body: StatisticsOapiLiveGroupliveResponseBody,
}

/**
 * Description: 查询内部群某一场直播的数据统计
 */
async function statisticsOapiLiveGrouplive(request: StatisticsOapiLiveGroupliveRequest): StatisticsOapiLiveGroupliveResponse {
  var runtime = new Util.RuntimeOptions{};
  return statisticsOapiLiveGroupliveEx(request, runtime);
}

/**
 * Description: 查询内部群某一场直播的数据统计
 */
async function statisticsOapiLiveGroupliveEx(request: StatisticsOapiLiveGroupliveRequest, runtime: Util.RuntimeOptions): StatisticsOapiLiveGroupliveResponse {
  Util.validateModel(request);
  var appParams = Util.stringifyMapValue(Util.toMap(request.params));
  return doRequestOApi('POST', '/topapi/live/grouplive/statistics', request.headers, appParams, runtime);
}

model ListOapiLiveGroupliveParams = {
  cid: int64(description='群id', name='cid'),
  openId?: int64(description='用户id', name='open_id'),
  toTime?: int64(description='开始时间ms', name='to_time'),
  fromTime?: int64(description='截止时间ms', name='from_time'),
}

model ListOapiLiveGroupliveRequest = {
  headers?: map[string]string,
  params:ListOapiLiveGroupliveParams,
}

model ListOapiLiveGroupliveResponseBody = {
  result?: [
    {
      isLandscape?: boolean(description='是否横屏', name='is_landscape'),
      cid?: int64(description='群id', name='cid'),
      liveUuid?: string(description='直播id', name='live_uuid'),
      openId?: int64(description='openid', name='open_id'),
      title?: string(description='标题', name='title'),
      startTime?: int64(description='开始时间ms', name='start_time'),
      duration?: int64(description='时长', name='duration'),
    }
  ](description='返回列表', name='result'),
  errcode?: int64(description='错误码', name='errcode'),
  errmsg?: string(description='错误信息', name='errmsg'),
}

model ListOapiLiveGroupliveResponse = {
  headers: map[string]string,
  body: ListOapiLiveGroupliveResponseBody,
}

/**
 * Description: 查询内部群的直播列表
 */
async function listOapiLiveGrouplive(request: ListOapiLiveGroupliveRequest): ListOapiLiveGroupliveResponse {
  var runtime = new Util.RuntimeOptions{};
  return listOapiLiveGroupliveEx(request, runtime);
}

/**
 * Description: 查询内部群的直播列表
 */
async function listOapiLiveGroupliveEx(request: ListOapiLiveGroupliveRequest, runtime: Util.RuntimeOptions): ListOapiLiveGroupliveResponse {
  Util.validateModel(request);
  var appParams = Util.stringifyMapValue(Util.toMap(request.params));
  return doRequestOApi('POST', '/topapi/live/grouplive/list', request.headers, appParams, runtime);
}

model GetOapiCateringStoreParams = {
  offset?: int64(description='分页查询起始记录行号', name='offset'),
  size?: int64(description='每页返回的记录数', name='size'),
}

model GetOapiCateringStoreRequest = {
  headers?: map[string]string,
  params?:GetOapiCateringStoreParams,
}

model GetOapiCateringStoreResponseBody = {
  result?: {
    current?: int64(description='当前页码', name='current'),
    pageSize?: int64(description='每页记录数', name='page_size'),
    total?: int64(description='总记录数', name='total'),
    hasMore?: boolean(description='是否有下一页数据', name='has_more'),
    totalPage?: int64(description='总页数', name='total_page'),
    data?: [
      {
        managerList?: [
          {
            staffId?: string(description='门店店长工号', name='staff_id'),
          }
        ](description='门店店长列表', name='manager_list'),
        type?: string(description='部门类型，门店为store', name='type'),
        deptName?: string(description='部门名称', name='dept_name'),
        deptId?: int64(description='部门编号', name='dept_id'),
      }
    ](description='当前页数据', name='data'),
  }(description='查询结果', name='result'),
  errcode?: int64(description='错误码', name='errcode'),
  errmsg?: string(description='错误原因', name='errmsg'),
  success?: boolean(description='是否成功', name='success'),
}

model GetOapiCateringStoreResponse = {
  headers: map[string]string,
  body: GetOapiCateringStoreResponseBody,
}

/**
 * Description: 获取餐饮企业下的门店数据，门店是通过在部门上面打标来实现的。分页获取相关数据，返回的数据包括有部门编号、部门名称、部门类型（固定为store门店），以及对应的门店店长工号
 */
async function getOapiCateringStore(request: GetOapiCateringStoreRequest): GetOapiCateringStoreResponse {
  var runtime = new Util.RuntimeOptions{};
  return getOapiCateringStoreEx(request, runtime);
}

/**
 * Description: 获取餐饮企业下的门店数据，门店是通过在部门上面打标来实现的。分页获取相关数据，返回的数据包括有部门编号、部门名称、部门类型（固定为store门店），以及对应的门店店长工号
 */
async function getOapiCateringStoreEx(request: GetOapiCateringStoreRequest, runtime: Util.RuntimeOptions): GetOapiCateringStoreResponse {
  Util.validateModel(request);
  var appParams = Util.stringifyMapValue(Util.toMap(request.params));
  return doRequestOApi('POST', '/topapi/catering/store/get', request.headers, appParams, runtime);
}

model DescribeOapiCrmObjectmetaParams = {
  name: string(description='目标名称', name='name'),
}

model DescribeOapiCrmObjectmetaRequest = {
  headers?: map[string]string,
  params:DescribeOapiCrmObjectmetaParams,
}

model DescribeOapiCrmObjectmetaResponseBody = {
  result?: {
    name?: string(description='对象名称', name='name'),
    customized?: boolean(description='是否自定义对象', name='customized'),
    fields?: [
      {
        name?: string(description='字段名称', name='name'),
        customized?: boolean(description='是否自定义字段', name='customized'),
        label?: string(description='字段展示名', name='label'),
        type?: string(description='字段类型', name='type'),
        nillable?: boolean(description='是否可空', name='nillable'),
        format?: string(description='日期格式', name='format'),
        unit?: string(description='日期单位/金额单位', name='unit'),
        selectOptions?: [
          {
            key?: string(description='选项key', name='key'),
            value?: string(description='选项名', name='value'),
          }
        ](description='选项列表', name='select_options'),
        quote?: boolean(description='是否引用关联', name='quote'),
        referenceTo?: string(description='关联对象名称', name='reference_to'),
        referenceFields?: [
          {
            label?: string(description='引用的关联对象字段显示名', name='label'),
            type?: string(description='引用的关联对象字段类型', name='type'),
            nillable?: boolean(description='引用的关联对象字段是否可空', name='nillable'),
            format?: string(description='引用的关联对象字段格式', name='format'),
            unit?: string(description='引用的关联对象字段单位', name='unit'),
            selectOptions?: [
              {
                key?: string(description='引用的关联对象的字段选项key', name='key'),
                value?: string(description='引用的关联对象的字段选项值', name='value'),
              }
            ](description='引用的关联对象的字段选项列表', name='select_options'),
            name?: string(description='引用的关联对象的字段名称', name='name'),
          }
        ](description='引用的关联对象的字段列表', name='reference_fields'),
        rollUpSummaryFields?: [
          {
            name?: string(description='需要汇总的明细内字段名', name='name'),
            aggregator?: string(description='汇总方法', name='aggregator'),
          }
        ](description='对MasterDetail类型有效：roll-up summary字段列表', name='roll_up_summary_fields'),
      }
    ](description='字段列表', name='fields'),
  }(description='result', name='result'),
  errcode?: int64(description='错误码', name='errcode'),
  errmsg?: string(description='错误信息', name='errmsg'),
}

model DescribeOapiCrmObjectmetaResponse = {
  headers: map[string]string,
  body: DescribeOapiCrmObjectmetaResponseBody,
}

/**
 * Description: 读取钉钉CRM自定义对象的元数据描述
 */
async function describeOapiCrmObjectmeta(request: DescribeOapiCrmObjectmetaRequest): DescribeOapiCrmObjectmetaResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeOapiCrmObjectmetaEx(request, runtime);
}

/**
 * Description: 读取钉钉CRM自定义对象的元数据描述
 */
async function describeOapiCrmObjectmetaEx(request: DescribeOapiCrmObjectmetaRequest, runtime: Util.RuntimeOptions): DescribeOapiCrmObjectmetaResponse {
  Util.validateModel(request);
  var appParams = Util.stringifyMapValue(Util.toMap(request.params));
  return doRequestOApi('POST', '/topapi/crm/objectmeta/describe', request.headers, appParams, runtime);
}

model GetOapiCrmMenuParams = {
  clientType: string(description='0:PC端导航 1：手机端导航', name='client_type'),
}

model GetOapiCrmMenuRequest = {
  headers?: map[string]string,
  params:GetOapiCrmMenuParams,
}

model GetOapiCrmMenuResponseBody = {
  result?: {
    formUuid?: string(description='表单id 如果非表单类菜单，可为空', name='form_uuid'),
    parentId?: int64(description='树形结构 父菜单id', name='parent_id'),
    name?: string(description='菜单名称', name='name'),
    listOrder?: int64(description='菜单排序序号', name='list_order'),
    navType?: string(description='导航类型：sw_form：表单类到导航 group：分组类  outLinker：链接跳转', name='nav_type'),
    isNew?: int64(description='是否新打开页面 0:不打开 1：新打开', name='is_new'),
    mobileHidden?: int64(description='1:隐藏 0：不隐藏', name='mobile_hidden'),
    pcHidden?: int64(description='1:隐藏 0：不隐藏', name='pc_hidden'),
    linkUrl?: string(description='链接地址', name='link_url'),
    icon?: string(description='图标地址', name='icon'),
    children?: [
      {
        parentId?: int64(description='树形结构 父菜单id', name='parent_id'),
        name?: string(description='菜单名称', name='name'),
        formUuid?: string(description='表单id 如果非表单类菜单，可为空', name='form_uuid'),
        listOrder?: int64(description='菜单排序序号', name='list_order'),
        navType?: string(description='导航类型：sw_form：表单类到导航 group：分组类  outLinker：链接跳转', name='nav_type'),
        isNew?: int64(description='是否新打开页面 0:不打开 1：新打开', name='is_new'),
        mobileHidden?: int64(description='1:隐藏 0：不隐藏', name='mobile_hidden'),
        pcHidden?: int64(description='1:隐藏 0：不隐藏', name='pc_hidden'),
        linkUrl?: string(description='链接地址', name='link_url'),
        icon?: string(description='图标地址', name='icon'),
        children?: [
          {
            parentId?: int64(description='树形结构 父菜单id', name='parent_id'),
            name?: string(description='菜单名称', name='name'),
            formUuid?: string(description='表单id 如果非表单类菜单，可为空', name='form_uuid'),
            listOrder?: int64(description='菜单排序序号', name='list_order'),
            navType?: string(description='导航类型：sw_form：表单类到导航 group：分组类  outLinker：链接跳转', name='nav_type'),
            isNew?: int64(description='是否新打开页面 0:不打开 1：新打开', name='is_new'),
            mobileHidden?: int64(description='1:隐藏 0：不隐藏', name='mobile_hidden'),
            pcHidden?: int64(description='1:隐藏 0：不隐藏', name='pc_hidden'),
            linkUrl?: string(description='链接地址', name='link_url'),
            icon?: string(description='图标地址', name='icon'),
          }
        ](description='子菜单列表', name='children'),
      }
    ](description='子菜单列表', name='children'),
  }(description='接口返回model', name='result'),
  success?: boolean(description='是否成功', name='success'),
  errcode?: int64(description='错误码', name='errcode'),
  errmsg?: string(description='错误描述', name='errmsg'),
}

model GetOapiCrmMenuResponse = {
  headers: map[string]string,
  body: GetOapiCrmMenuResponseBody,
}

/**
 * Description: 获得app的导航栏菜单列表
 */
async function getOapiCrmMenu(request: GetOapiCrmMenuRequest): GetOapiCrmMenuResponse {
  var runtime = new Util.RuntimeOptions{};
  return getOapiCrmMenuEx(request, runtime);
}

/**
 * Description: 获得app的导航栏菜单列表
 */
async function getOapiCrmMenuEx(request: GetOapiCrmMenuRequest, runtime: Util.RuntimeOptions): GetOapiCrmMenuResponse {
  Util.validateModel(request);
  var appParams = Util.stringifyMapValue(Util.toMap(request.params));
  return doRequestOApi('POST', '/topapi/crm/menu/get', request.headers, appParams, runtime);
}

model QueryOapiCrmObjectdataParams = {
  currentOperatorUserid?: string(description='用户ID', name='current_operator_userid'),
  cursor?: string(description='分页游标', name='cursor'),
  pageSize: int64(description='分页大小', name='page_size'),
  name: string(description='表单code', name='name'),
}

model QueryOapiCrmObjectdataRequest = {
  headers?: map[string]string,
  params:QueryOapiCrmObjectdataParams,
}

model QueryOapiCrmObjectdataResponseBody = {
  result?: {
    nextCursor?: string(description='下一页的游标', name='next_cursor'),
    values?: [
      {
        creatorNick?: string(description='创建记录的用户昵称', name='creator_nick'),
        gmtModified?: string(description='记录修改时间', name='gmt_modified'),
        creatorUserid?: string(description='创建记录的用户ID', name='creator_userid'),
        instanceId?: string(description='数据ID', name='instance_id'),
        data?: string(description='数据内容', name='data'),
        extendData?: string(description='扩展数据内容', name='extend_data'),
        gmtCreate?: string(description='记录创建时间', name='gmt_create'),
        objectType?: string(description='数据类型', name='object_type'),
        permission?: {
          participantUseridList?: [ string ](description='协同人用户ID列表', name='participant_userid_list'),
          ownerUseridList?: [ string ](description='负责人用户ID列表', name='owner_userid_list'),
        }(description='数据权限信息', name='permission'),
        procInstStatus?: string(description='审批状态', name='proc_inst_status'),
        procOutResult?: string(description='审批结果', name='proc_out_result'),
      }
    ](description='数据列表', name='values'),
    hasMore?: boolean(description='是否有下一页', name='has_more'),
    pageSize?: int64(description='分页大小', name='page_size'),
  }(description='分页结果', name='result'),
  errcode?: int64(description='错误码', name='errcode'),
  errmsg?: string(description='错误信息', name='errmsg'),
}

model QueryOapiCrmObjectdataResponse = {
  headers: map[string]string,
  body: QueryOapiCrmObjectdataResponseBody,
}

/**
 * Description: 获取CRM自定义对象数据，最多可一次获取200条数据
 */
async function queryOapiCrmObjectdata(request: QueryOapiCrmObjectdataRequest): QueryOapiCrmObjectdataResponse {
  var runtime = new Util.RuntimeOptions{};
  return queryOapiCrmObjectdataEx(request, runtime);
}

/**
 * Description: 获取CRM自定义对象数据，最多可一次获取200条数据
 */
async function queryOapiCrmObjectdataEx(request: QueryOapiCrmObjectdataRequest, runtime: Util.RuntimeOptions): QueryOapiCrmObjectdataResponse {
  Util.validateModel(request);
  var appParams = Util.stringifyMapValue(Util.toMap(request.params));
  return doRequestOApi('POST', '/topapi/crm/objectdata/query', request.headers, appParams, runtime);
}

model GetCcoserviceServicegroupParams = {
  openGroupId: string(description='服务群id', name='open_group_id'),
}

model GetCcoserviceServicegroupRequest = {
  headers?: map[string]string,
  params:GetCcoserviceServicegroupParams,
}

model GetCcoserviceServicegroupResponseBody = {
  result?: {
    title?: string(description='title', name='title'),
    ownerName?: string(description='ownerName', name='owner_name'),
    ownerNick?: string(description='ownerNick', name='owner_nick'),
    ownerDingtalkId?: string(description='ownerDingtalkId', name='owner_dingtalk_id'),
    ownerUserid?: string(description='ownerUserid', name='owner_userid'),
    type?: int64(description='type', name='type'),
    conversationType?: int64(description='conversationType', name='conversation_type'),
  }(description='result', name='result'),
  errmsg?: string(description='errorMsg', name='errmsg'),
  errcode?: int64(description='dingOpenErrcode', name='errcode'),
}

model GetCcoserviceServicegroupResponse = {
  headers: map[string]string,
  body: GetCcoserviceServicegroupResponseBody,
}

/**
 * Description: 企业查询自己企业内服务群的信息，会把服务群的群主信息，dingtalkid，nick，真实姓名和群名称返回。
 */
async function getCcoserviceServicegroup(request: GetCcoserviceServicegroupRequest): GetCcoserviceServicegroupResponse {
  var runtime = new Util.RuntimeOptions{};
  return getCcoserviceServicegroupEx(request, runtime);
}

/**
 * Description: 企业查询自己企业内服务群的信息，会把服务群的群主信息，dingtalkid，nick，真实姓名和群名称返回。
 */
async function getCcoserviceServicegroupEx(request: GetCcoserviceServicegroupRequest, runtime: Util.RuntimeOptions): GetCcoserviceServicegroupResponse {
  Util.validateModel(request);
  var appParams = Util.stringifyMapValue(Util.toMap(request.params));
  return doRequest('dingtalk.ccoservice.servicegroup.get', 'POST', '/router/rest', request.headers, appParams, runtime);
}

model AddmemberCcoserviceServicegroupParams = {
  userid: string(description='企业员工id', name='userid'),
  openGroupId: string(description='服务群id', name='open_group_id'),
}

model AddmemberCcoserviceServicegroupRequest = {
  headers?: map[string]string,
  params:AddmemberCcoserviceServicegroupParams,
}

model AddmemberCcoserviceServicegroupResponseBody = {
  result?: {
    dingtalkId?: string(description='dingtalkId', name='dingtalk_id'),
  }(description='result', name='result'),
  errmsg?: string(description='errorMsg', name='errmsg'),
  errcode?: int64(description='dingOpenErrcode', name='errcode'),
}

model AddmemberCcoserviceServicegroupResponse = {
  headers: map[string]string,
  body: AddmemberCcoserviceServicegroupResponseBody,
}

/**
 * Description: 此API主要就是把某个企业的员工加入到此企业的某个服务群内
 */
async function addmemberCcoserviceServicegroup(request: AddmemberCcoserviceServicegroupRequest): AddmemberCcoserviceServicegroupResponse {
  var runtime = new Util.RuntimeOptions{};
  return addmemberCcoserviceServicegroupEx(request, runtime);
}

/**
 * Description: 此API主要就是把某个企业的员工加入到此企业的某个服务群内
 */
async function addmemberCcoserviceServicegroupEx(request: AddmemberCcoserviceServicegroupRequest, runtime: Util.RuntimeOptions): AddmemberCcoserviceServicegroupResponse {
  Util.validateModel(request);
  var appParams = Util.stringifyMapValue(Util.toMap(request.params));
  return doRequest('dingtalk.ccoservice.servicegroup.addmember', 'POST', '/router/rest', request.headers, appParams, runtime);
}

model TransferOapiUserAssociated_unionidParams = {
  associatedUnionid: string(description='用户统一ID', name='associated_unionid'),
}

model TransferOapiUserAssociated_unionidRequest = {
  headers?: map[string]string,
  params:TransferOapiUserAssociated_unionidParams,
}

model TransferOapiUserAssociated_unionidResponseBody = {
  errmsg?: string(description='错误信息', name='errmsg'),
  errcode?: int64(description='错误码，0为成功', name='errcode'),
  result?: {
    userid?: string(description='用户在企业中userid', name='userid'),
    contactType?: int64(description='用户通讯录类型，0为内部，1为外部', name='contact_type'),
  }(description='用户userid结果', name='result'),
}

model TransferOapiUserAssociated_unionidResponse = {
  headers: map[string]string,
  body: TransferOapiUserAssociated_unionidResponseBody,
}

/**
 * Description: 根据统一跨开发者组织统一ID获取成员的userid
 */
async function transferOapiUserAssociated_unionid(request: TransferOapiUserAssociated_unionidRequest): TransferOapiUserAssociated_unionidResponse {
  var runtime = new Util.RuntimeOptions{};
  return transferOapiUserAssociated_unionidEx(request, runtime);
}

/**
 * Description: 根据统一跨开发者组织统一ID获取成员的userid
 */
async function transferOapiUserAssociated_unionidEx(request: TransferOapiUserAssociated_unionidRequest, runtime: Util.RuntimeOptions): TransferOapiUserAssociated_unionidResponse {
  Util.validateModel(request);
  var appParams = Util.stringifyMapValue(Util.toMap(request.params));
  return doRequestOApi('POST', '/topapi/user/associated_unionid/transfer', request.headers, appParams, runtime);
}

model BatchaddOapiIndustryStudentpoolParams = {
  bizCode: string(description='业务code', name='biz_code'),
  studentList?: [
    {
      mobile?: string(description='学员手机号', name='mobile'),
      packageIds?: [ int64 ](description='课包ID列表', maxItems=20, name='package_ids'),
      number?: string(description='学员编号', name='number'),
      patriarchs?: [
        {
          relation?: string(description='联系人与学员的关系', name='relation'),
          mobile?: string(description='联系人手机号', name='mobile'),
          name?: string(description='联系人名字', name='name'),
        }
      ](description='学员联系人列表', maxItems=20, name='patriarchs'),
      name?: string(description='学员名字', name='name'),
    }
  ](description='学员列表', maxItems=20, name='student_list'),
}

model BatchaddOapiIndustryStudentpoolRequest = {
  headers?: map[string]string,
  params:BatchaddOapiIndustryStudentpoolParams,
}

model BatchaddOapiIndustryStudentpoolResponseBody = {
  result?: [ string ](description='校验重名,返回重名人列表', name='result'),
  success?: boolean(description='是否调用成功', name='success'),
  errcode?: int64(description='错误码', name='errcode'),
  errmsg?: string(description='错误信息', name='errmsg'),
}

model BatchaddOapiIndustryStudentpoolResponse = {
  headers: map[string]string,
  body: BatchaddOapiIndustryStudentpoolResponseBody,
}

/**
 * Description: 钉钉教培,提供给isv向学员池中批量写入学员的接口
 */
async function batchaddOapiIndustryStudentpool(request: BatchaddOapiIndustryStudentpoolRequest): BatchaddOapiIndustryStudentpoolResponse {
  var runtime = new Util.RuntimeOptions{};
  return batchaddOapiIndustryStudentpoolEx(request, runtime);
}

/**
 * Description: 钉钉教培,提供给isv向学员池中批量写入学员的接口
 */
async function batchaddOapiIndustryStudentpoolEx(request: BatchaddOapiIndustryStudentpoolRequest, runtime: Util.RuntimeOptions): BatchaddOapiIndustryStudentpoolResponse {
  Util.validateModel(request);
  var appParams = Util.stringifyMapValue(Util.toMap(request.params));
  return doRequestOApi('POST', '/topapi/industry/studentpool/batchadd', request.headers, appParams, runtime);
}

model GetOapiIndustryPackRequest = {
  headers?: map[string]string,
}

model GetOapiIndustryPackResponseBody = {
  result?: [
    {
      id?: int64(description='课包ID', name='id'),
      packageName?: string(description='课包名称', name='package_name'),
    }
  ](description='查询结果列表', name='result'),
  success?: boolean(description='是否调用成功', name='success'),
  errcode?: int64(description='错误码', name='errcode'),
  errmsg?: string(description='错误信息', name='errmsg'),
}

model GetOapiIndustryPackResponse = {
  headers: map[string]string,
  body: GetOapiIndustryPackResponseBody,
}

/**
 * Description: 获取教培企业下所有的课包
 */
async function getOapiIndustryPack(request: GetOapiIndustryPackRequest): GetOapiIndustryPackResponse {
  var runtime = new Util.RuntimeOptions{};
  return getOapiIndustryPackEx(request, runtime);
}

/**
 * Description: 获取教培企业下所有的课包
 */
async function getOapiIndustryPackEx(request: GetOapiIndustryPackRequest, runtime: Util.RuntimeOptions): GetOapiIndustryPackResponse {
  Util.validateModel(request);
  var appParams : map[string]string = {};
  return doRequestOApi('POST', '/topapi/industry/pack/get', request.headers, appParams, runtime);
}

model ModifyOapiRelationRemarkParams = {
  markers: [ string ](description='修改者的userid', maxItems=100, name='markers'),
  markees: [
    {
      remarkName: string(description='被修改的备注名', name='remark_name'),
      userid: string(description='被修改的userid', name='userid'),
    }
  ](description='系统自动生成', maxItems=100, name='markees'),
}

model ModifyOapiRelationRemarkRequest = {
  headers?: map[string]string,
  params:ModifyOapiRelationRemarkParams,
}

model ModifyOapiRelationRemarkResponseBody = {
  result?: string(description='result', name='result'),
  errcode?: int64(description='dingOpenErrcode', name='errcode'),
  errmsg?: string(description='errorMsg', name='errmsg'),
  success?: boolean(description='success', name='success'),
}

model ModifyOapiRelationRemarkResponse = {
  headers: map[string]string,
  body: ModifyOapiRelationRemarkResponseBody,
}

/**
 * Description: 给指定企业，批量修改备注名。
 */
async function modifyOapiRelationRemark(request: ModifyOapiRelationRemarkRequest): ModifyOapiRelationRemarkResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifyOapiRelationRemarkEx(request, runtime);
}

/**
 * Description: 给指定企业，批量修改备注名。
 */
async function modifyOapiRelationRemarkEx(request: ModifyOapiRelationRemarkRequest, runtime: Util.RuntimeOptions): ModifyOapiRelationRemarkResponse {
  Util.validateModel(request);
  var appParams = Util.stringifyMapValue(Util.toMap(request.params));
  return doRequestOApi('POST', '/topapi/relation/remark/modify', request.headers, appParams, runtime);
}

model ListOapiCrmObjectdataParams = {
  currentOperatorUserid?: string(description='操作人用户ID', name='current_operator_userid'),
  dataIdList: [ string ](description='数据ID列表', maxItems=100, name='data_id_list'),
  name: string(description='表单名称', name='name'),
}

model ListOapiCrmObjectdataRequest = {
  headers?: map[string]string,
  params:ListOapiCrmObjectdataParams,
}

model ListOapiCrmObjectdataResponseBody = {
  resultList?: [
    {
      creatorNick?: string(description='记录创建人的昵称', name='creator_nick'),
      gmtModified?: string(description='记录修改时间', name='gmt_modified'),
      creatorUserid?: string(description='记录创建人的用户ID', name='creator_userid'),
      instanceId?: string(description='数据ID', name='instance_id'),
      data?: string(description='数据内容', name='data'),
      extendData?: string(description='扩展数据内容', name='extend_data'),
      gmtCreate?: string(description='记录创建时间', name='gmt_create'),
      objectType?: string(description='数据类型', name='object_type'),
      permission?: {
        participantUseridList?: [ string ](description='协同人用户ID列表', name='participant_userid_list'),
        ownerUseridList?: [ string ](description='负责人用户ID列表', name='owner_userid_list'),
      }(description='数据权限信息', name='permission'),
      procOutResult?: string(description='审批结果', name='proc_out_result'),
      procInstStatus?: string(description='审批状态', name='proc_inst_status'),
    }
  ](description='实例数据', name='result_list'),
  errcode?: int64(description='错误码', name='errcode'),
  errmsg?: string(description='错误信息', name='errmsg'),
}

model ListOapiCrmObjectdataResponse = {
  headers: map[string]string,
  body: ListOapiCrmObjectdataResponseBody,
}

/**
 * Description: 根据实例ID列表批量获取CRM自定义表单数据，最多可一次获取200条数据
 */
async function listOapiCrmObjectdata(request: ListOapiCrmObjectdataRequest): ListOapiCrmObjectdataResponse {
  var runtime = new Util.RuntimeOptions{};
  return listOapiCrmObjectdataEx(request, runtime);
}

/**
 * Description: 根据实例ID列表批量获取CRM自定义表单数据，最多可一次获取200条数据
 */
async function listOapiCrmObjectdataEx(request: ListOapiCrmObjectdataRequest, runtime: Util.RuntimeOptions): ListOapiCrmObjectdataResponse {
  Util.validateModel(request);
  var appParams = Util.stringifyMapValue(Util.toMap(request.params));
  return doRequestOApi('POST', '/topapi/crm/objectdata/list', request.headers, appParams, runtime);
}

model AsyncsendOapiEduClassconversationParams = {
  request: {
    classId: int64(description='班级id', name='class_id'),
    attributes: string(description='占位符替换词', name='attributes'),
    templateId: int64(description='模板id', name='template_id'),
    receiverUserIds?: [ string ](description='接收者userid', maxItems=20, name='receiver_user_ids'),
    nonce?: string(description='随机数，在小程序打开的时候传入。需要透传过来', name='nonce'),
  }(description='request', name='request'),
}

model AsyncsendOapiEduClassconversationRequest = {
  headers?: map[string]string,
  params:AsyncsendOapiEduClassconversationParams,
}

model AsyncsendOapiEduClassconversationResponseBody = {
  result?: {
    success?: boolean(description='调用是否成功', name='success'),
    errcode?: int64(description='错误码', name='errcode'),
    errmsg?: string(description='系统错误', name='errmsg'),
    response?: {
      taskId?: string(description='异步任务id', name='task_id'),
    }(description='response', name='response'),
  }(description='result', name='result'),
}

model AsyncsendOapiEduClassconversationResponse = {
  headers: map[string]string,
  body: AsyncsendOapiEduClassconversationResponseBody,
}

/**
 * Description: 更新相册后，往班级群发送通知
 */
async function asyncsendOapiEduClassconversation(request: AsyncsendOapiEduClassconversationRequest): AsyncsendOapiEduClassconversationResponse {
  var runtime = new Util.RuntimeOptions{};
  return asyncsendOapiEduClassconversationEx(request, runtime);
}

/**
 * Description: 更新相册后，往班级群发送通知
 */
async function asyncsendOapiEduClassconversationEx(request: AsyncsendOapiEduClassconversationRequest, runtime: Util.RuntimeOptions): AsyncsendOapiEduClassconversationResponse {
  Util.validateModel(request);
  var appParams = Util.stringifyMapValue(Util.toMap(request.params));
  return doRequestOApi('POST', '/topapi/edu/classconversation/asyncsend', request.headers, appParams, runtime);
}

model SetOapiRoleVisibleParams = {
  roleId: int64(description='roleId', name='role_id'),
  visibleRoleIds: [ int64 ](description='roleId可见的roleIdList', maxItems=50, name='visible_role_ids'),
}

model SetOapiRoleVisibleRequest = {
  headers?: map[string]string,
  params:SetOapiRoleVisibleParams,
}

model SetOapiRoleVisibleResponseBody = {
  errcode?: int64(description='错误码', name='errcode'),
  errmsg?: string(description='错误信息', name='errmsg'),
}

model SetOapiRoleVisibleResponse = {
  headers: map[string]string,
  body: SetOapiRoleVisibleResponseBody,
}

/**
 * Description: 在钉钉企业通讯录内，支持设置角色之间的可见性。这个接口的目的是用来设置/更新某个角色设置的可见角色列表。(如果之前设置过，这个API是会做覆盖更新。)
 */
async function setOapiRoleVisible(request: SetOapiRoleVisibleRequest): SetOapiRoleVisibleResponse {
  var runtime = new Util.RuntimeOptions{};
  return setOapiRoleVisibleEx(request, runtime);
}

/**
 * Description: 在钉钉企业通讯录内，支持设置角色之间的可见性。这个接口的目的是用来设置/更新某个角色设置的可见角色列表。(如果之前设置过，这个API是会做覆盖更新。)
 */
async function setOapiRoleVisibleEx(request: SetOapiRoleVisibleRequest, runtime: Util.RuntimeOptions): SetOapiRoleVisibleResponse {
  Util.validateModel(request);
  var appParams = Util.stringifyMapValue(Util.toMap(request.params));
  return doRequestOApi('POST', '/topapi/role/visible/set', request.headers, appParams, runtime);
}

model DeleteOapiRoleVisibleParams = {
  roleId: int64(description='角色ID', name='role_id'),
}

model DeleteOapiRoleVisibleRequest = {
  headers?: map[string]string,
  params:DeleteOapiRoleVisibleParams,
}

model DeleteOapiRoleVisibleResponseBody = {
  errcode?: int64(description='错误码', name='errcode'),
  errmsg?: string(description='错误信息', name='errmsg'),
}

model DeleteOapiRoleVisibleResponse = {
  headers: map[string]string,
  body: DeleteOapiRoleVisibleResponseBody,
}

/**
 * Description: 在钉钉企业通讯录内，支持设置角色之间的可见性。这个接口的目的是用来删除/清空某个角色设置的可见角色列表。
 */
async function deleteOapiRoleVisible(request: DeleteOapiRoleVisibleRequest): DeleteOapiRoleVisibleResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteOapiRoleVisibleEx(request, runtime);
}

/**
 * Description: 在钉钉企业通讯录内，支持设置角色之间的可见性。这个接口的目的是用来删除/清空某个角色设置的可见角色列表。
 */
async function deleteOapiRoleVisibleEx(request: DeleteOapiRoleVisibleRequest, runtime: Util.RuntimeOptions): DeleteOapiRoleVisibleResponse {
  Util.validateModel(request);
  var appParams = Util.stringifyMapValue(Util.toMap(request.params));
  return doRequestOApi('POST', '/topapi/role/visible/delete', request.headers, appParams, runtime);
}

model GetOapiRoleVisibleParams = {
  roleId: int64(description='角色ID', name='role_id'),
  size?: int64(description='批量大小', name='size'),
  offset?: int64(description='偏移量', name='offset'),
}

model GetOapiRoleVisibleRequest = {
  headers?: map[string]string,
  params:GetOapiRoleVisibleParams,
}

model GetOapiRoleVisibleResponseBody = {
  errcode?: int64(description='错误码', name='errcode'),
  errmsg?: string(description='错误信息', name='errmsg'),
  result?: {
    nextCursor?: string(description='下次请求的游标', name='next_cursor'),
    hasMore?: boolean(description='是否还有数据', name='has_more'),
    list?: [ int64 ](description='roleIdList', name='list'),
  }(description='结果', name='result'),
}

model GetOapiRoleVisibleResponse = {
  headers: map[string]string,
  body: GetOapiRoleVisibleResponseBody,
}

/**
 * Description: 在钉钉企业通讯录内，支持设置角色之间的可见性。这个接口的目的是用来获取某个角色设置的可见角色列表。返回的是roleIdList。
 */
async function getOapiRoleVisible(request: GetOapiRoleVisibleRequest): GetOapiRoleVisibleResponse {
  var runtime = new Util.RuntimeOptions{};
  return getOapiRoleVisibleEx(request, runtime);
}

/**
 * Description: 在钉钉企业通讯录内，支持设置角色之间的可见性。这个接口的目的是用来获取某个角色设置的可见角色列表。返回的是roleIdList。
 */
async function getOapiRoleVisibleEx(request: GetOapiRoleVisibleRequest, runtime: Util.RuntimeOptions): GetOapiRoleVisibleResponse {
  Util.validateModel(request);
  var appParams = Util.stringifyMapValue(Util.toMap(request.params));
  return doRequestOApi('POST', '/topapi/role/visible/get', request.headers, appParams, runtime);
}

model DescribeOapiDdpaasObjectmetaParams = {
  formCode: string(description='表单编号', name='form_code'),
  appUuid: string(description='PaaS应用ID', name='app_uuid'),
}

model DescribeOapiDdpaasObjectmetaRequest = {
  headers?: map[string]string,
  params:DescribeOapiDdpaasObjectmetaParams,
}

model DescribeOapiDdpaasObjectmetaResponseBody = {
  errcode?: int64(description='错误码', name='errcode'),
  errmsg?: string(description='错误信息', name='errmsg'),
  result?: {
    fields?: [
      {
        name?: string(description='字段名称', name='name'),
        customized?: boolean(description='是否自定义字段', name='customized'),
        label?: string(description='字段展示名', name='label'),
        type?: string(description='字段类型', name='type'),
        nillable?: boolean(description='是否可空', name='nillable'),
        format?: string(description='日期格式', name='format'),
        unit?: string(description='日期单位/金额单位', name='unit'),
        selectOptions?: [
          {
            key?: string(description='选项key', name='key'),
            value?: string(description='选项名', name='value'),
          }
        ](description='选项列表', name='select_options'),
        quote?: boolean(description='是否引用关联', name='quote'),
        referenceTo?: string(description='关联对象名称', name='reference_to'),
        referenceFields?: [
          {
            label?: string(description='引用的关联对象字段显示名', name='label'),
            type?: string(description='引用的关联对象字段类型', name='type'),
            nillable?: boolean(description='引用的关联对象字段是否可空', name='nillable'),
            format?: string(description='引用的关联对象字段格式', name='format'),
            unit?: string(description='引用的关联对象字段单位', name='unit'),
            selectOptions?: [
              {
                key?: string(description='引用的关联对象的字段选项key', name='key'),
                value?: string(description='引用的关联对象的字段选项值', name='value'),
              }
            ](description='引用的关联对象的字段选项列表', name='select_options'),
            name?: string(description='引用的关联对象的字段名称', name='name'),
          }
        ](description='引用的关联对象的字段列表', name='reference_fields'),
        rollUpSummaryFields?: [
          {
            name?: string(description='需要汇总的明细内字段名', name='name'),
            aggregator?: string(description='汇总方法', name='aggregator'),
          }
        ](description='对MasterDetail类型有效：roll-up summary字段列表', name='roll_up_summary_fields'),
      }
    ](description='字段列表', name='fields'),
  }(description='元数据信息', name='result'),
}

model DescribeOapiDdpaasObjectmetaResponse = {
  headers: map[string]string,
  body: DescribeOapiDdpaasObjectmetaResponseBody,
}

/**
 * Description: 获取PaaS平台表单元数据信息的接口
 */
async function describeOapiDdpaasObjectmeta(request: DescribeOapiDdpaasObjectmetaRequest): DescribeOapiDdpaasObjectmetaResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeOapiDdpaasObjectmetaEx(request, runtime);
}

/**
 * Description: 获取PaaS平台表单元数据信息的接口
 */
async function describeOapiDdpaasObjectmetaEx(request: DescribeOapiDdpaasObjectmetaRequest, runtime: Util.RuntimeOptions): DescribeOapiDdpaasObjectmetaResponse {
  Util.validateModel(request);
  var appParams = Util.stringifyMapValue(Util.toMap(request.params));
  return doRequestOApi('POST', '/topapi/ddpaas/objectmeta/describe', request.headers, appParams, runtime);
}

model ListOapiDdpaasObjectdataParams = {
  currentOperatorUserid?: string(description='当前操作用户ID，不填默认系统身份', name='current_operator_userid'),
  dataIdList: [ string ](description='表单数据实例ID列表', maxItems=999, name='data_id_list'),
  appUuid: string(description='钉钉PaaS应用ID', name='app_uuid'),
  formCode: string(description='钉钉PaaS表单编号', name='form_code'),
}

model ListOapiDdpaasObjectdataRequest = {
  headers?: map[string]string,
  params:ListOapiDdpaasObjectdataParams,
}

model ListOapiDdpaasObjectdataResponseBody = {
  result?: [
    {
      creatorNick?: string(description='创建记录的用户昵称', name='creator_nick'),
      gmtModified?: string(description='记录修改时间', name='gmt_modified'),
      creatorUserid?: string(description='创建记录的用户ID', name='creator_userid'),
      instanceId?: string(description='数据ID', name='instance_id'),
      data?: string(description='数据内容', name='data'),
      extendData?: string(description='扩展数据内容', name='extend_data'),
      gmtCreate?: string(description='记录创建时间', name='gmt_create'),
      permission?: {
        ownerUseridList?: [ string ](description='负责人用户ID列表', name='owner_userid_list'),
        participantUseridList?: [ string ](description='协同人用户ID列表', name='participant_userid_list'),
      }(description='数据权限信息', name='permission'),
      procOutResult?: string(description='审批结果', name='proc_out_result'),
      procInstStatus?: string(description='审批状态', name='proc_inst_status'),
    }
  ](description='查询结果列表', name='result'),
  errcode?: int64(description='错误码', name='errcode'),
  errmsg?: string(description='错误信息', name='errmsg'),
}

model ListOapiDdpaasObjectdataResponse = {
  headers: map[string]string,
  body: ListOapiDdpaasObjectdataResponseBody,
}

/**
 * Description: 开放钉钉PaaS里应用搭建出的表单数据，通过表单数据实例ID获取数据
 */
async function listOapiDdpaasObjectdata(request: ListOapiDdpaasObjectdataRequest): ListOapiDdpaasObjectdataResponse {
  var runtime = new Util.RuntimeOptions{};
  return listOapiDdpaasObjectdataEx(request, runtime);
}

/**
 * Description: 开放钉钉PaaS里应用搭建出的表单数据，通过表单数据实例ID获取数据
 */
async function listOapiDdpaasObjectdataEx(request: ListOapiDdpaasObjectdataRequest, runtime: Util.RuntimeOptions): ListOapiDdpaasObjectdataResponse {
  Util.validateModel(request);
  var appParams = Util.stringifyMapValue(Util.toMap(request.params));
  return doRequestOApi('POST', '/topapi/ddpaas/objectdata/list', request.headers, appParams, runtime);
}

model PushOapiCateringOpenOrderParams = {
  orderDetails: string(description='菜品信息', name='order_details'),
  orderId: string(description='订单id', name='order_id'),
  allowanceAmount: int64(description='补贴金额', name='allowance_amount'),
  mealPlanNo: string(description='餐补规则编码', name='meal_plan_no'),
  actualAmount: int64(description='实际支付金额', name='actual_amount'),
  shopName?: string(description='点餐商家名称', name='shop_name'),
  shopId: string(description='点餐商户编号', name='shop_id'),
  orderFullAmount: int64(description='应付金额', name='order_full_amount'),
  userName?: string(description='点餐人姓名', name='user_name'),
  userid: string(description='点餐人的编码，通过开放平台获取的 userId', name='userid'),
  orderTime?: int64(description='点餐时间', name='order_time'),
  ext?: string(description='补充信息', name='ext'),
  mealTime?: int64(description='用餐时间', name='meal_time'),
}

model PushOapiCateringOpenOrderRequest = {
  headers?: map[string]string,
  params:PushOapiCateringOpenOrderParams,
}

model PushOapiCateringOpenOrderResponseBody = {
  result?: boolean(description='是否成功', name='result'),
  errcode?: int64(description='errcode', name='errcode'),
  errmsg?: string(description='errmsg', name='errmsg'),
}

model PushOapiCateringOpenOrderResponse = {
  headers: map[string]string,
  body: PushOapiCateringOpenOrderResponseBody,
}

/**
 * Description: 团餐ISV可通过该api上传餐饮商家的订单信息
 */
async function pushOapiCateringOpenOrder(request: PushOapiCateringOpenOrderRequest): PushOapiCateringOpenOrderResponse {
  var runtime = new Util.RuntimeOptions{};
  return pushOapiCateringOpenOrderEx(request, runtime);
}

/**
 * Description: 团餐ISV可通过该api上传餐饮商家的订单信息
 */
async function pushOapiCateringOpenOrderEx(request: PushOapiCateringOpenOrderRequest, runtime: Util.RuntimeOptions): PushOapiCateringOpenOrderResponse {
  Util.validateModel(request);
  var appParams = Util.stringifyMapValue(Util.toMap(request.params));
  return doRequestOApi('POST', '/topapi/catering/open/order/push', request.headers, appParams, runtime);
}

model SendmockCorpMessageCorpconversationParams = {
  microappAgentId: int64(description='微应用agentId', name='microapp_agent_id'),
  toUser: [ string ](description='消息接收者userid列表', maxItems=20, name='to_user'),
  toParty: [ int64 ](description='消息接收者部门列表', maxItems=20, name='to_party'),
  messageType: string(description='消息类型', name='message_type'),
  message: string(description='消息体', name='message'),
}

model SendmockCorpMessageCorpconversationRequest = {
  headers?: map[string]string,
  params:SendmockCorpMessageCorpconversationParams,
}

model SendmockCorpMessageCorpconversationResponseBody = {
  result?: string(description='返回结果', name='result'),
}

model SendmockCorpMessageCorpconversationResponse = {
  headers: map[string]string,
  body: SendmockCorpMessageCorpconversationResponseBody,
}

/**
 * Description: 测试接入top是否有问题
 */
async function sendmockCorpMessageCorpconversation(request: SendmockCorpMessageCorpconversationRequest): SendmockCorpMessageCorpconversationResponse {
  var runtime = new Util.RuntimeOptions{};
  return sendmockCorpMessageCorpconversationEx(request, runtime);
}

/**
 * Description: 测试接入top是否有问题
 */
async function sendmockCorpMessageCorpconversationEx(request: SendmockCorpMessageCorpconversationRequest, runtime: Util.RuntimeOptions): SendmockCorpMessageCorpconversationResponse {
  Util.validateModel(request);
  var appParams = Util.stringifyMapValue(Util.toMap(request.params));
  return doRequest('dingtalk.corp.message.corpconversation.sendmock', 'POST', '/router/rest', request.headers, appParams, runtime);
}

model UpdateOapiAlitripBtripReimbursementParams = {
  rq: {
    flowNo: int64(description='审批单号', name='flow_no'),
    corpid: string(description='corp id', name='corpid'),
    auditList: [
      {
        userid: string(description='审批人id', name='userid'),
        status: int64(description='审批状态：0审批中 1已同意 2已拒绝 3已转交，4已取消 5已终止', name='status'),
        operateTime: string(description='审批操作时间', pattern='\\\\d{4}[-]\\\\d{1,2}[-]\\\\d{1,2}[T]\\\\d{2}:\\\\d{2}:\\\\d{2}[Z]', name='operate_time'),
        note?: string(description='备注', name='note'),
      }
    ](description='审批人列表', maxItems=999, name='audit_list'),
    operateTime: string(description='审批操作时间', pattern='\\\\d{4}[-]\\\\d{1,2}[-]\\\\d{1,2}[T]\\\\d{2}:\\\\d{2}:\\\\d{2}[Z]', name='operate_time'),
    status: int64(description='审批状态', name='status'),
    thirdpartyFlowId: string(description='第三方报销单id', name='thirdparty_flow_id'),
  }(description='请求参数', name='rq'),
}

model UpdateOapiAlitripBtripReimbursementRequest = {
  headers?: map[string]string,
  params:UpdateOapiAlitripBtripReimbursementParams,
}

model UpdateOapiAlitripBtripReimbursementResponseBody = {
  success?: boolean(description='操作是否成功', name='success'),
  errcode?: int64(description='错误码', name='errcode'),
  errmsg?: string(description='错误信息', name='errmsg'),
  module?: boolean(description='更新报销单结果', name='module'),
}

model UpdateOapiAlitripBtripReimbursementResponse = {
  headers: map[string]string,
  body: UpdateOapiAlitripBtripReimbursementResponseBody,
}

/**
 * Description: 报销单状态更新
 */
async function updateOapiAlitripBtripReimbursement(request: UpdateOapiAlitripBtripReimbursementRequest): UpdateOapiAlitripBtripReimbursementResponse {
  var runtime = new Util.RuntimeOptions{};
  return updateOapiAlitripBtripReimbursementEx(request, runtime);
}

/**
 * Description: 报销单状态更新
 */
async function updateOapiAlitripBtripReimbursementEx(request: UpdateOapiAlitripBtripReimbursementRequest, runtime: Util.RuntimeOptions): UpdateOapiAlitripBtripReimbursementResponse {
  Util.validateModel(request);
  var appParams = Util.stringifyMapValue(Util.toMap(request.params));
  return doRequestOApi('POST', '/topapi/alitrip/btrip/reimbursement/update', request.headers, appParams, runtime);
}

model UpdateOapiWorkspaceStatusParams = {
  updateStatus: {
    status: string(description='对于项目有如下状态： WORKING进行中 DISBANDED解散 CLOSE归档 RECYCLE回收站状态 新建项目后状态是WORKING，WORKING/CLOSE/RECYCLE回收站状态可以切换，但是一旦成为DISBANDED则说明项目已销毁无法变更状态', name='status'),
  }(description='更新状态', name='update_status'),
}

model UpdateOapiWorkspaceStatusRequest = {
  headers?: map[string]string,
  params:UpdateOapiWorkspaceStatusParams,
}

model UpdateOapiWorkspaceStatusResponseBody = {
  result?: string(description='无返回值', name='result'),
  success?: boolean(description='请求成功', name='success'),
  errcode?: int64(description='错误码', name='errcode'),
  errmsg?: string(description='错误信息', name='errmsg'),
}

model UpdateOapiWorkspaceStatusResponse = {
  headers: map[string]string,
  body: UpdateOapiWorkspaceStatusResponseBody,
}

/**
 * Description: 对于项目有如下状态：
WORKING进行中 DISBANDED解散 CLOSE归档 RECYCLE回收站状态
新建项目后状态是WORKING，WORKING/CLOSE/RECYCLE回收站状态可以切换，但是一旦成为DISBANDED则说明项目已销毁无法变更状态
 */
async function updateOapiWorkspaceStatus(request: UpdateOapiWorkspaceStatusRequest): UpdateOapiWorkspaceStatusResponse {
  var runtime = new Util.RuntimeOptions{};
  return updateOapiWorkspaceStatusEx(request, runtime);
}

/**
 * Description: 对于项目有如下状态：
WORKING进行中 DISBANDED解散 CLOSE归档 RECYCLE回收站状态
新建项目后状态是WORKING，WORKING/CLOSE/RECYCLE回收站状态可以切换，但是一旦成为DISBANDED则说明项目已销毁无法变更状态
 */
async function updateOapiWorkspaceStatusEx(request: UpdateOapiWorkspaceStatusRequest, runtime: Util.RuntimeOptions): UpdateOapiWorkspaceStatusResponse {
  Util.validateModel(request);
  var appParams = Util.stringifyMapValue(Util.toMap(request.params));
  return doRequestOApi('POST', '/topapi/workspace/status/update', request.headers, appParams, runtime);
}

model AddwithuseridOapiMicroappParams = {
  agentId: int64(description='微应用实例化id，表示企业和微应用的唯一关系', name='agentId'),
  userids: [ string ](description='用户id列表，最多10个', maxItems=20, name='userids'),
}

model AddwithuseridOapiMicroappRequest = {
  headers?: map[string]string,
  params:AddwithuseridOapiMicroappParams,
}

model AddwithuseridOapiMicroappResponseBody = {
  errcode?: int64(description='dingOpenErrcode', name='errcode'),
  errmsg?: string(description='errorMsg', name='errmsg'),
}

model AddwithuseridOapiMicroappResponse = {
  headers: map[string]string,
  body: AddwithuseridOapiMicroappResponseBody,
}

/**
 * Description: 添加用户到微应用可见范围
 */
async function addwithuseridOapiMicroapp(request: AddwithuseridOapiMicroappRequest): AddwithuseridOapiMicroappResponse {
  var runtime = new Util.RuntimeOptions{};
  return addwithuseridOapiMicroappEx(request, runtime);
}

/**
 * Description: 添加用户到微应用可见范围
 */
async function addwithuseridOapiMicroappEx(request: AddwithuseridOapiMicroappRequest, runtime: Util.RuntimeOptions): AddwithuseridOapiMicroappResponse {
  Util.validateModel(request);
  var appParams = Util.stringifyMapValue(Util.toMap(request.params));
  return doRequestOApi('POST', '/topapi/microapp/addwithuserid', request.headers, appParams, runtime);
}

model GetOapiCustomerserviceStatusRequest = {
  headers?: map[string]string,
}

model GetOapiCustomerserviceStatusResponseBody = {
  result?: boolean(description='查询企业是否开通客服 true已开通  false未开通', name='result'),
  success?: boolean(description='服务调用结果', name='success'),
  errcode?: int64(description='调用错误码', name='errcode'),
  errmsg?: string(description='错误信息', name='errmsg'),
}

model GetOapiCustomerserviceStatusResponse = {
  headers: map[string]string,
  body: GetOapiCustomerserviceStatusResponseBody,
}

/**
 * Description: 获取指定的企业是否开通了客服产品
 */
async function getOapiCustomerserviceStatus(request: GetOapiCustomerserviceStatusRequest): GetOapiCustomerserviceStatusResponse {
  var runtime = new Util.RuntimeOptions{};
  return getOapiCustomerserviceStatusEx(request, runtime);
}

/**
 * Description: 获取指定的企业是否开通了客服产品
 */
async function getOapiCustomerserviceStatusEx(request: GetOapiCustomerserviceStatusRequest, runtime: Util.RuntimeOptions): GetOapiCustomerserviceStatusResponse {
  Util.validateModel(request);
  var appParams : map[string]string = {};
  return doRequestOApi('POST', '/topapi/customerservice/status/get', request.headers, appParams, runtime);
}

model DelwithuseridOapiMicroappParams = {
  agentId: int64(description='微应用实例化id，表示企业和微应用的唯一关系', name='agentId'),
  userids: [ string ](description='用户id列表，最多10个', maxItems=20, name='userids'),
}

model DelwithuseridOapiMicroappRequest = {
  headers?: map[string]string,
  params:DelwithuseridOapiMicroappParams,
}

model DelwithuseridOapiMicroappResponseBody = {
  errcode?: int64(description='dingOpenErrcode', name='errcode'),
  errmsg?: string(description='errorMsg', name='errmsg'),
}

model DelwithuseridOapiMicroappResponse = {
  headers: map[string]string,
  body: DelwithuseridOapiMicroappResponseBody,
}

/**
 * Description: 去掉用户的微应用可见范围
 */
async function delwithuseridOapiMicroapp(request: DelwithuseridOapiMicroappRequest): DelwithuseridOapiMicroappResponse {
  var runtime = new Util.RuntimeOptions{};
  return delwithuseridOapiMicroappEx(request, runtime);
}

/**
 * Description: 去掉用户的微应用可见范围
 */
async function delwithuseridOapiMicroappEx(request: DelwithuseridOapiMicroappRequest, runtime: Util.RuntimeOptions): DelwithuseridOapiMicroappResponse {
  Util.validateModel(request);
  var appParams = Util.stringifyMapValue(Util.toMap(request.params));
  return doRequestOApi('POST', '/topapi/microapp/delwithuserid', request.headers, appParams, runtime);
}

model GeneratecodeIsvBlazersParams = {
  bizId: string(description='业务对象唯一标示', name='biz_id'),
  ext: string(description='具体业务场景下约定的数据，格式：Map<String,String>', name='ext'),
}

model GeneratecodeIsvBlazersRequest = {
  headers?: map[string]string,
  params:GeneratecodeIsvBlazersParams,
}

model GeneratecodeIsvBlazersResponseBody = {
  result?: {
    result?: string(description='result', name='result'),
    dingOpenErrcode?: int64(description='dingOpenErrcode', name='ding_open_errcode'),
    errorMsg?: string(description='errorMsg', name='error_msg'),
    success?: boolean(description='success', name='success'),
  }(description='result', name='result'),
}

model GeneratecodeIsvBlazersResponse = {
  headers: map[string]string,
  body: GeneratecodeIsvBlazersResponseBody,
}

/**
 * Description: 约定的isv通过此接口提供其业务对象唯一标示及相关信息，钉钉返回一个引流页并提供一个token，token后续供钉钉用于识别该业务对象
 */
async function generatecodeIsvBlazers(request: GeneratecodeIsvBlazersRequest): GeneratecodeIsvBlazersResponse {
  var runtime = new Util.RuntimeOptions{};
  return generatecodeIsvBlazersEx(request, runtime);
}

/**
 * Description: 约定的isv通过此接口提供其业务对象唯一标示及相关信息，钉钉返回一个引流页并提供一个token，token后续供钉钉用于识别该业务对象
 */
async function generatecodeIsvBlazersEx(request: GeneratecodeIsvBlazersRequest, runtime: Util.RuntimeOptions): GeneratecodeIsvBlazersResponse {
  Util.validateModel(request);
  var appParams = Util.stringifyMapValue(Util.toMap(request.params));
  return doRequest('dingtalk.isv.blazers.generatecode', 'POST', '/router/rest', request.headers, appParams, runtime);
}

model SyncOapiAlitripBtripReimbursementAppstatusParams = {
  rq: {
    corpid: string(description='corp id', name='corpid'),
    isvCode: string(description='isv 代码', name='isv_code'),
    version?: string(description='app版本', name='version'),
    installed: boolean(description='是否已经安装（app是否正常提供服务）', name='installed'),
  }(description='请求参数', name='rq'),
}

model SyncOapiAlitripBtripReimbursementAppstatusRequest = {
  headers?: map[string]string,
  params:SyncOapiAlitripBtripReimbursementAppstatusParams,
}

model SyncOapiAlitripBtripReimbursementAppstatusResponseBody = {
  module?: int64(description='结果模型', name='module'),
  errcode?: int64(description='错误码', name='errcode'),
  errmsg?: string(description='错误信息', name='errmsg'),
}

model SyncOapiAlitripBtripReimbursementAppstatusResponse = {
  headers: map[string]string,
  body: SyncOapiAlitripBtripReimbursementAppstatusResponseBody,
}

/**
 * Description: 报销-第三方app安装状态同步
 */
async function syncOapiAlitripBtripReimbursementAppstatus(request: SyncOapiAlitripBtripReimbursementAppstatusRequest): SyncOapiAlitripBtripReimbursementAppstatusResponse {
  var runtime = new Util.RuntimeOptions{};
  return syncOapiAlitripBtripReimbursementAppstatusEx(request, runtime);
}

/**
 * Description: 报销-第三方app安装状态同步
 */
async function syncOapiAlitripBtripReimbursementAppstatusEx(request: SyncOapiAlitripBtripReimbursementAppstatusRequest, runtime: Util.RuntimeOptions): SyncOapiAlitripBtripReimbursementAppstatusResponse {
  Util.validateModel(request);
  var appParams = Util.stringifyMapValue(Util.toMap(request.params));
  return doRequestOApi('POST', '/topapi/alitrip/btrip/reimbursement/appstatus/sync', request.headers, appParams, runtime);
}

model GetbinddataCorpBlazersRequest = {
  headers?: map[string]string,
}

model GetbinddataCorpBlazersResponseBody = {
  result?: {
    result?: string(description='result', name='result'),
    dingOpenErrcode?: int64(description='dingOpenErrcode', name='ding_open_errcode'),
    errorMsg?: string(description='errorMsg', name='error_msg'),
    success?: boolean(description='success', name='success'),
  }(description='result', name='result'),
}

model GetbinddataCorpBlazersResponse = {
  headers: map[string]string,
  body: GetbinddataCorpBlazersResponseBody,
}

/**
 * Description: 获取绑定信息
 */
async function getbinddataCorpBlazers(request: GetbinddataCorpBlazersRequest): GetbinddataCorpBlazersResponse {
  var runtime = new Util.RuntimeOptions{};
  return getbinddataCorpBlazersEx(request, runtime);
}

/**
 * Description: 获取绑定信息
 */
async function getbinddataCorpBlazersEx(request: GetbinddataCorpBlazersRequest, runtime: Util.RuntimeOptions): GetbinddataCorpBlazersResponse {
  Util.validateModel(request);
  var appParams : map[string]string = {};
  return doRequest('dingtalk.corp.blazers.getbinddata', 'POST', '/router/rest', request.headers, appParams, runtime);
}

model ListshortcutOapiOrgRequest = {
  headers?: map[string]string,
}

model ListshortcutOapiOrgResponseBody = {
  result?: {
    shortcuts?: [
      {
        type?: int64(description='类型，1表示工作台微应用', name='type'),
        value?: string(description='微应用的agentId', name='value'),
      }
    ](description='result', name='shortcuts'),
    errcode?: int64(description='dingOpenErrcode', name='errcode'),
    errmsg?: string(description='errorMsg', name='errmsg'),
  }(description='result', name='result'),
}

model ListshortcutOapiOrgResponse = {
  headers: map[string]string,
  body: ListshortcutOapiOrgResponseBody,
}

/**
 * Description: 查询企业工作台快捷方式
 */
async function listshortcutOapiOrg(request: ListshortcutOapiOrgRequest): ListshortcutOapiOrgResponse {
  var runtime = new Util.RuntimeOptions{};
  return listshortcutOapiOrgEx(request, runtime);
}

/**
 * Description: 查询企业工作台快捷方式
 */
async function listshortcutOapiOrgEx(request: ListshortcutOapiOrgRequest, runtime: Util.RuntimeOptions): ListshortcutOapiOrgResponse {
  Util.validateModel(request);
  var appParams : map[string]string = {};
  return doRequestOApi('POST', '/topapi/org/listshortcut', request.headers, appParams, runtime);
}

model SendforpayslipOapiSmartworkHrmSmsParams = {
  param: {
    month: int64(description='工资条月份', name='month'),
    useridList: [ string ](description='员工userids', maxItems=50, name='userid_list'),
  }(description='入参', name='param'),
}

model SendforpayslipOapiSmartworkHrmSmsRequest = {
  headers?: map[string]string,
  params:SendforpayslipOapiSmartworkHrmSmsParams,
}

model SendforpayslipOapiSmartworkHrmSmsResponseBody = {
  result?: {
    successUseridList?: [ string ](description='成功的userids', name='success_userid_list'),
    invalidUseridList?: [ string ](description='无效的userids', name='invalid_userid_list'),
    failedUseridList?: [ string ](description='失败的userids', name='failed_userid_list'),
  }(description='是否成功', name='result'),
  errcode?: int64(description='错误码', name='errcode'),
  errmsg?: string(description='错误信息', name='errmsg'),
  success?: boolean(description='调用结果', name='success'),
}

model SendforpayslipOapiSmartworkHrmSmsResponse = {
  headers: map[string]string,
  body: SendforpayslipOapiSmartworkHrmSmsResponseBody,
}

/**
 * Description: 发送工资条之后，给没有激活的钉钉通讯录人员发送激活短信
 */
async function sendforpayslipOapiSmartworkHrmSms(request: SendforpayslipOapiSmartworkHrmSmsRequest): SendforpayslipOapiSmartworkHrmSmsResponse {
  var runtime = new Util.RuntimeOptions{};
  return sendforpayslipOapiSmartworkHrmSmsEx(request, runtime);
}

/**
 * Description: 发送工资条之后，给没有激活的钉钉通讯录人员发送激活短信
 */
async function sendforpayslipOapiSmartworkHrmSmsEx(request: SendforpayslipOapiSmartworkHrmSmsRequest, runtime: Util.RuntimeOptions): SendforpayslipOapiSmartworkHrmSmsResponse {
  Util.validateModel(request);
  var appParams = Util.stringifyMapValue(Util.toMap(request.params));
  return doRequestOApi('POST', '/topapi/smartwork/hrm/sms/sendforpayslip', request.headers, appParams, runtime);
}

model GetbizidCorpBlazersRequest = {
  headers?: map[string]string,
}

model GetbizidCorpBlazersResponseBody = {
  result?: {
    result?: string(description='result', name='result'),
    dingOpenErrcode?: int64(description='dingOpenErrcode', name='ding_open_errcode'),
    errorMsg?: string(description='errorMsg', name='error_msg'),
    success?: boolean(description='success', name='success'),
  }(description='result', name='result'),
}

model GetbizidCorpBlazersResponse = {
  headers: map[string]string,
  body: GetbizidCorpBlazersResponseBody,
}

/**
 * Description: 获取bizId
 */
async function getbizidCorpBlazers(request: GetbizidCorpBlazersRequest): GetbizidCorpBlazersResponse {
  var runtime = new Util.RuntimeOptions{};
  return getbizidCorpBlazersEx(request, runtime);
}

/**
 * Description: 获取bizId
 */
async function getbizidCorpBlazersEx(request: GetbizidCorpBlazersRequest, runtime: Util.RuntimeOptions): GetbizidCorpBlazersResponse {
  Util.validateModel(request);
  var appParams : map[string]string = {};
  return doRequest('dingtalk.corp.blazers.getbizid', 'POST', '/router/rest', request.headers, appParams, runtime);
}

model SetshortcutOapiOrgParams = {
  agentIds?: [ int64 ](description='微应用实例id列表', maxItems=20, name='agentIds'),
}

model SetshortcutOapiOrgRequest = {
  headers?: map[string]string,
  params?:SetshortcutOapiOrgParams,
}

model SetshortcutOapiOrgResponseBody = {
  errcode?: int64(description='dingOpenErrcode', name='errcode'),
  errmsg?: string(description='errorMsg', name='errmsg'),
}

model SetshortcutOapiOrgResponse = {
  headers: map[string]string,
  body: SetshortcutOapiOrgResponseBody,
}

/**
 * Description: 设置企业工作台快捷方式列表
 */
async function setshortcutOapiOrg(request: SetshortcutOapiOrgRequest): SetshortcutOapiOrgResponse {
  var runtime = new Util.RuntimeOptions{};
  return setshortcutOapiOrgEx(request, runtime);
}

/**
 * Description: 设置企业工作台快捷方式列表
 */
async function setshortcutOapiOrgEx(request: SetshortcutOapiOrgRequest, runtime: Util.RuntimeOptions): SetshortcutOapiOrgResponse {
  Util.validateModel(request);
  var appParams = Util.stringifyMapValue(Util.toMap(request.params));
  return doRequestOApi('POST', '/topapi/org/setshortcut', request.headers, appParams, runtime);
}

model CapacityOapiCateringDeductParams = {
  meaTime: int64(description='用餐时间', name='mea_time'),
  orderid?: string(description='订单id', name='orderid'),
  orderFullAmount: int64(description='应付金额', name='order_full_amount'),
  userid: string(description='点餐人userid', name='userid'),
}

model CapacityOapiCateringDeductRequest = {
  headers?: map[string]string,
  params:CapacityOapiCateringDeductParams,
}

model CapacityOapiCateringDeductResponseBody = {
  result?: {
    deductCapacity?: int64(description='可抵扣金额，单位为分', name='deduct_capacity'),
  }(description='餐补结果', name='result'),
  errcode?: int64(description='errcode', name='errcode'),
  errmsg?: string(description='errmsg', name='errmsg'),
}

model CapacityOapiCateringDeductResponse = {
  headers: map[string]string,
  body: CapacityOapiCateringDeductResponseBody,
}

/**
 * Description: 查询开通餐补的企业用户是否具有餐补金额
 */
async function capacityOapiCateringDeduct(request: CapacityOapiCateringDeductRequest): CapacityOapiCateringDeductResponse {
  var runtime = new Util.RuntimeOptions{};
  return capacityOapiCateringDeductEx(request, runtime);
}

/**
 * Description: 查询开通餐补的企业用户是否具有餐补金额
 */
async function capacityOapiCateringDeductEx(request: CapacityOapiCateringDeductRequest, runtime: Util.RuntimeOptions): CapacityOapiCateringDeductResponse {
  Util.validateModel(request);
  var appParams = Util.stringifyMapValue(Util.toMap(request.params));
  return doRequestOApi('POST', '/topapi/catering/deduct/capacity', request.headers, appParams, runtime);
}

model PredeductOapiCateringParams = {
  orderid: string(description='订单id', name='orderid'),
  mealTime: int64(description='用餐时间', name='meal_time'),
  expiryTime: int64(description='抵扣部分金额的超时时间（毫秒）', name='expiry_time'),
  orderFullAmount: int64(description='应付金额', name='order_full_amount'),
  userid: string(description='点餐人userid', name='userid'),
}

model PredeductOapiCateringRequest = {
  headers?: map[string]string,
  params:PredeductOapiCateringParams,
}

model PredeductOapiCateringResponseBody = {
  result?: {
    deductedAmount?: int64(description='已经预抵扣的金额', name='deducted_amount'),
    mealPlanNo?: string(description='餐补规则编码', name='meal_plan_no'),
  }(description='预抵扣结果', name='result'),
  errcode?: int64(description='errcode', name='errcode'),
  errmsg?: string(description='errmsg', name='errmsg'),
}

model PredeductOapiCateringResponse = {
  headers: map[string]string,
  body: PredeductOapiCateringResponseBody,
}

/**
 * Description: 查看订单是否已经预抵扣金额
 */
async function predeductOapiCatering(request: PredeductOapiCateringRequest): PredeductOapiCateringResponse {
  var runtime = new Util.RuntimeOptions{};
  return predeductOapiCateringEx(request, runtime);
}

/**
 * Description: 查看订单是否已经预抵扣金额
 */
async function predeductOapiCateringEx(request: PredeductOapiCateringRequest, runtime: Util.RuntimeOptions): PredeductOapiCateringResponse {
  Util.validateModel(request);
  var appParams = Util.stringifyMapValue(Util.toMap(request.params));
  return doRequestOApi('POST', '/topapi/catering/prededuct', request.headers, appParams, runtime);
}

model CreateOapiProcessWorkrecordParams = {
  request?: {
    agentid?: int64(description='应用id', name='agentid'),
    processCode: string(description='审批模板唯一码', name='process_code'),
    originatorUserId?: string(description='审批发起人', name='originator_user_id'),
    formComponentValues: [
      {
        name: string(description='表单名称', name='name'),
        value: string(description='表单值', name='value'),
        extValue?: string(description='扩展字段', name='extValue'),
      }
    ](description='表单参数列表', maxItems=20, name='form_component_values'),
    url: string(description='实例跳转链接', name='url'),
    title?: string(description='实例标题', name='title'),
  }(description='请求', name='request'),
}

model CreateOapiProcessWorkrecordRequest = {
  headers?: map[string]string,
  params?:CreateOapiProcessWorkrecordParams,
}

model CreateOapiProcessWorkrecordResponseBody = {
  success?: boolean(description='true', name='success'),
  errcode?: int64(description='0', name='errcode'),
  errmsg?: string(description='成功', name='errmsg'),
  result?: {
    processInstanceId?: string(description='审批实例id', name='process_instance_id'),
  }(description='实例信息', name='result'),
}

model CreateOapiProcessWorkrecordResponse = {
  headers: map[string]string,
  body: CreateOapiProcessWorkrecordResponseBody,
}

/**
 * Description: 发起不带流程的审批实例
 */
async function createOapiProcessWorkrecord(request: CreateOapiProcessWorkrecordRequest): CreateOapiProcessWorkrecordResponse {
  var runtime = new Util.RuntimeOptions{};
  return createOapiProcessWorkrecordEx(request, runtime);
}

/**
 * Description: 发起不带流程的审批实例
 */
async function createOapiProcessWorkrecordEx(request: CreateOapiProcessWorkrecordRequest, runtime: Util.RuntimeOptions): CreateOapiProcessWorkrecordResponse {
  Util.validateModel(request);
  var appParams = Util.stringifyMapValue(Util.toMap(request.params));
  return doRequestOApi('POST', '/topapi/process/workrecord/create', request.headers, appParams, runtime);
}

model UpdateOapiProcessWorkrecordParams = {
  request?: {
    agentid?: int64(description='应用id', name='agentid'),
    processInstanceId: string(description='实例id', name='process_instance_id'),
    status: string(description='实例状态，分为COMPLETED, TERMINATED', name='status'),
    result?: string(description='实例结果, 如果实例状态是COMPLETED，需要设置result，分为agree和refuse', name='result'),
    cancelRunningTask?: boolean(description='取消任务', name='cancel_running_task'),
  }(description='请求', name='request'),
}

model UpdateOapiProcessWorkrecordRequest = {
  headers?: map[string]string,
  params?:UpdateOapiProcessWorkrecordParams,
}

model UpdateOapiProcessWorkrecordResponseBody = {
  errcode?: int64(description='0', name='errcode'),
  errmsg?: string(description='成功', name='errmsg'),
}

model UpdateOapiProcessWorkrecordResponse = {
  headers: map[string]string,
  body: UpdateOapiProcessWorkrecordResponseBody,
}

/**
 * Description: 同步待办实例状态
 */
async function updateOapiProcessWorkrecord(request: UpdateOapiProcessWorkrecordRequest): UpdateOapiProcessWorkrecordResponse {
  var runtime = new Util.RuntimeOptions{};
  return updateOapiProcessWorkrecordEx(request, runtime);
}

/**
 * Description: 同步待办实例状态
 */
async function updateOapiProcessWorkrecordEx(request: UpdateOapiProcessWorkrecordRequest, runtime: Util.RuntimeOptions): UpdateOapiProcessWorkrecordResponse {
  Util.validateModel(request);
  var appParams = Util.stringifyMapValue(Util.toMap(request.params));
  return doRequestOApi('POST', '/topapi/process/workrecord/update', request.headers, appParams, runtime);
}

model CreateOapiProcessWorkrecordTaskParams = {
  request?: {
    agentid?: int64(description='应用id', name='agentid'),
    processInstanceId: string(description='实例id', name='process_instance_id'),
    activityId?: string(description='节点id', name='activity_id'),
    tasks: [
      {
        userid: string(description='用户id', name='userid'),
        url?: string(description='跳转url', name='url'),
      }
    ](description='任务列表', maxItems=20, name='tasks'),
  }(description='请求', name='request'),
}

model CreateOapiProcessWorkrecordTaskRequest = {
  headers?: map[string]string,
  params?:CreateOapiProcessWorkrecordTaskParams,
}

model CreateOapiProcessWorkrecordTaskResponseBody = {
  errcode?: int64(description='0', name='errcode'),
  errmsg?: string(description='成功', name='errmsg'),
  tasks?: [
    {
      taskId?: int64(description='任务id', name='task_id'),
      userid?: string(description='用户id', name='userid'),
    }
  ](description='任务列表', name='tasks'),
}

model CreateOapiProcessWorkrecordTaskResponse = {
  headers: map[string]string,
  body: CreateOapiProcessWorkrecordTaskResponseBody,
}

/**
 * Description: 创建待办任务
 */
async function createOapiProcessWorkrecordTask(request: CreateOapiProcessWorkrecordTaskRequest): CreateOapiProcessWorkrecordTaskResponse {
  var runtime = new Util.RuntimeOptions{};
  return createOapiProcessWorkrecordTaskEx(request, runtime);
}

/**
 * Description: 创建待办任务
 */
async function createOapiProcessWorkrecordTaskEx(request: CreateOapiProcessWorkrecordTaskRequest, runtime: Util.RuntimeOptions): CreateOapiProcessWorkrecordTaskResponse {
  Util.validateModel(request);
  var appParams = Util.stringifyMapValue(Util.toMap(request.params));
  return doRequestOApi('POST', '/topapi/process/workrecord/task/create', request.headers, appParams, runtime);
}

model UpdateOapiProcessWorkrecordTaskParams = {
  request?: {
    agentid?: int64(description='应用id', name='agentid'),
    processInstanceId: string(description='实例id', name='process_instance_id'),
    tasks: [
      {
        taskId: int64(description='任务id', name='task_id'),
        status: string(description='任务状态，分为CANCELED和COMPLETED', name='status'),
        result?: string(description='任务结果，分为agree和refuse。当status为CANCELED时，不需要传result', name='result'),
      }
    ](description='任务列表', maxItems=20, name='tasks'),
  }(description='请求', name='request'),
}

model UpdateOapiProcessWorkrecordTaskRequest = {
  headers?: map[string]string,
  params?:UpdateOapiProcessWorkrecordTaskParams,
}

model UpdateOapiProcessWorkrecordTaskResponseBody = {
  errcode?: int64(description='0', name='errcode'),
  errmsg?: string(description='成功', name='errmsg'),
}

model UpdateOapiProcessWorkrecordTaskResponse = {
  headers: map[string]string,
  body: UpdateOapiProcessWorkrecordTaskResponseBody,
}

/**
 * Description: 更新待办任务状态
 */
async function updateOapiProcessWorkrecordTask(request: UpdateOapiProcessWorkrecordTaskRequest): UpdateOapiProcessWorkrecordTaskResponse {
  var runtime = new Util.RuntimeOptions{};
  return updateOapiProcessWorkrecordTaskEx(request, runtime);
}

/**
 * Description: 更新待办任务状态
 */
async function updateOapiProcessWorkrecordTaskEx(request: UpdateOapiProcessWorkrecordTaskRequest, runtime: Util.RuntimeOptions): UpdateOapiProcessWorkrecordTaskResponse {
  Util.validateModel(request);
  var appParams = Util.stringifyMapValue(Util.toMap(request.params));
  return doRequestOApi('POST', '/topapi/process/workrecord/task/update', request.headers, appParams, runtime);
}

model CreateOapiProcessWorkrecordForwardParams = {
  request?: {
    agentid?: int64(description='应用id', name='agentid'),
    processInstanceId: string(description='实例id', name='process_instance_id'),
    useridList: [ string ](description='抄送人id列表', maxItems=20, name='userid_list'),
  }(description='请求', name='request'),
}

model CreateOapiProcessWorkrecordForwardRequest = {
  headers?: map[string]string,
  params?:CreateOapiProcessWorkrecordForwardParams,
}

model CreateOapiProcessWorkrecordForwardResponseBody = {
  errcode?: int64(description='0', name='errcode'),
  errmsg?: string(description='成功', name='errmsg'),
}

model CreateOapiProcessWorkrecordForwardResponse = {
  headers: map[string]string,
  body: CreateOapiProcessWorkrecordForwardResponseBody,
}

/**
 * Description: 创建实例抄送人
 */
async function createOapiProcessWorkrecordForward(request: CreateOapiProcessWorkrecordForwardRequest): CreateOapiProcessWorkrecordForwardResponse {
  var runtime = new Util.RuntimeOptions{};
  return createOapiProcessWorkrecordForwardEx(request, runtime);
}

/**
 * Description: 创建实例抄送人
 */
async function createOapiProcessWorkrecordForwardEx(request: CreateOapiProcessWorkrecordForwardRequest, runtime: Util.RuntimeOptions): CreateOapiProcessWorkrecordForwardResponse {
  Util.validateModel(request);
  var appParams = Util.stringifyMapValue(Util.toMap(request.params));
  return doRequestOApi('POST', '/topapi/process/workrecord/forward/create', request.headers, appParams, runtime);
}

model SaveOapiProcessWorkrecordTemplateParams = {
  saveProcessRequest?: {
    agentid: int64(description='企业应用id', name='agentid'),
    processCode?: string(description='审批模板唯一码', name='process_code'),
    name?: string(description='审批模板名称', name='name'),
    description?: string(description='审批模板描述', name='description'),
    formComponentList: [
      {
        componentName: string(description='表单名称', name='component_name'),
        props: {
          id: string(description='表单id', name='id'),
          label: string(description='表单名称', name='label'),
          required?: boolean(description='是否必填', name='required'),
          notPrint?: string(description='是否参与打印(1表示不打印, 0表示打印)', name='not_print'),
          placeholder?: string(description='占位提示（仅输入类组件）', name='placeholder'),
          notUpper?: string(description='是否需要大写 默认是需要; 1:不需要大写, 空或者0:需要大写', name='not_upper'),
          unit?: string(description='数字组件/日期区间组件单位属性', name='unit'),
          formula?: string(description='暂不需要', name='formula'),
          options?: [ string ](description='单选框或者多选框的选项', maxItems=20, name='options'),
          format?: string(description='时间格式', name='format'),
          duration?: boolean(description='是否自动计算时长', name='duration'),
          choice?: int64(description='内部联系人choice，1表示多选，0表示单选', name='choice'),
          link?: string(description='说明文案的链接地址', name='link'),
          statField?: [
            {
              id?: string(description='组件id', name='id'),
              label?: string(description='组件名称', name='label'),
              upper?: boolean(description='统计总和是否大写', name='upper'),
              unit?: string(description='单元', name='unit'),
            }
          ](description='需要计算总和的明细组件', maxItems=20, name='stat_field'),
          actionName?: string(description='增加明细动作名称', name='action_name'),
        }(description='表单属性', name='props'),
        children?: [
          {
            componentName?: string(description='表单名称', name='component_name'),
            props?: {
              id?: string(description='表单id', name='id'),
              label?: string(description='表单名称', name='label'),
              required?: boolean(description='是否必填', name='required'),
              notPrint?: string(description='是否参与打印(1表示不打印, 0表示打印)', name='not_print'),
              placeholder?: string(description='占位提示（仅输入类组件）', name='placeholder'),
              notUpper?: string(description='是否需要大写 默认是需要; 1:不需要大写, 空或者0:需要大写', name='not_upper'),
              unit?: string(description='数字组件/日期区间组件单位属性', name='unit'),
              formula?: string(description='暂不需要', name='formula'),
              options?: [ string ](description='单选框或者多选框的选项', maxItems=20, name='options'),
              format?: string(description='时间格式', name='format'),
              duration?: boolean(description='是否自动计算时长', name='duration'),
              choice?: int64(description='内部联系人choice，1表示多选，0表示单选', name='choice'),
              link?: string(description='说明文案的链接地址', name='link'),
            }(description='子表单属性', name='props'),
          }
        ](description='子表单列表', maxItems=20, name='children'),
      }
    ](description='表单列表', maxItems=20, name='form_component_list'),
    templateEditUrl?: string(description='模板编辑页跳转url', name='template_edit_url'),
    submitUrl?: string(description='发起审批页跳转url', name='submit_url'),
  }(description='入参', name='saveProcessRequest'),
}

model SaveOapiProcessWorkrecordTemplateRequest = {
  headers?: map[string]string,
  params?:SaveOapiProcessWorkrecordTemplateParams,
}

model SaveOapiProcessWorkrecordTemplateResponseBody = {
  errmsg?: string(description='成功', name='errmsg'),
  errcode?: int64(description='0', name='errcode'),
  result?: {
    processCode?: string(description='审批模板唯一码', name='process_code'),
  }(description='结果', name='result'),
}

model SaveOapiProcessWorkrecordTemplateResponse = {
  headers: map[string]string,
  body: SaveOapiProcessWorkrecordTemplateResponseBody,
}

/**
 * Description: 创建待办模板
 */
async function saveOapiProcessWorkrecordTemplate(request: SaveOapiProcessWorkrecordTemplateRequest): SaveOapiProcessWorkrecordTemplateResponse {
  var runtime = new Util.RuntimeOptions{};
  return saveOapiProcessWorkrecordTemplateEx(request, runtime);
}

/**
 * Description: 创建待办模板
 */
async function saveOapiProcessWorkrecordTemplateEx(request: SaveOapiProcessWorkrecordTemplateRequest, runtime: Util.RuntimeOptions): SaveOapiProcessWorkrecordTemplateResponse {
  Util.validateModel(request);
  var appParams = Util.stringifyMapValue(Util.toMap(request.params));
  return doRequestOApi('POST', '/topapi/process/workrecord/template/save', request.headers, appParams, runtime);
}

model UpdateOapiWorkspaceParams = {
  updateInfo: {
    name?: string(description='非必填必填。组织名，长度3-50个字符以内，不允许中划线、下划线、逗号、空格', name='name'),
    ownerUserid?: string(description='非必填。修改项目负责人，传新负责人在项目组织内的userId（注意不是归属组织的）', name='owner_userid'),
    logoMediaId?: string(description='非必填。mediaId格式，参考https://ding-doc.dingtalk.com/doc#/serverapi2/bcmg0i', name='logo_media_id'),
    desc?: string(description='非必填。描述，长度256字符以内', name='desc'),
  }(description='修改项目/圈子信息', name='update_info'),
}

model UpdateOapiWorkspaceRequest = {
  headers?: map[string]string,
  params:UpdateOapiWorkspaceParams,
}

model UpdateOapiWorkspaceResponseBody = {
  errcode?: int64(description='错误码', name='errcode'),
  errmsg?: string(description='错误信息', name='errmsg'),
  result?: {
    createTime?: int64(description='创建时间', name='create_time'),
    creator?: {
      corpId?: string(description='项目corpid', name='corp_id'),
      name?: string(description='姓名', name='name'),
      tags?: [
        {
          code?: string(description='角色code', name='code'),
          name?: string(description='角色名', name='name'),
        }
      ](description='角色', name='tags'),
      userid?: string(description='项目组织内userid', name='userid'),
    }(description='创建人', name='creator'),
    desc?: string(description='项目描述', name='desc'),
    name?: string(description='项目名', name='name'),
    outerId?: string(description='外部系统id', name='outer_id'),
    owner?: {
      corpId?: string(description='项目corpid', name='corp_id'),
      name?: string(description='姓名', name='name'),
      tags?: [
        {
          code?: string(description='角色code', name='code'),
          name?: string(description='角色名', name='name'),
        }
      ](description='角色', name='tags'),
      userId?: string(description='项目组织内userid', name='user_id'),
    }(description='管理员（负责人）', name='owner'),
    type?: int64(description='1项目 2圈子', name='type'),
  }(description='更新后的结果', name='result'),
  success?: boolean(description='请求成功', name='success'),
}

model UpdateOapiWorkspaceResponse = {
  headers: map[string]string,
  body: UpdateOapiWorkspaceResponseBody,
}

/**
 * Description: 更换负责人要求新的负责人是项目成员。
更换logo，图片要求是mediaId格式，参考https://ding-doc.dingtalk.com/doc#/serverapi2/bcmg0i
 */
async function updateOapiWorkspace(request: UpdateOapiWorkspaceRequest): UpdateOapiWorkspaceResponse {
  var runtime = new Util.RuntimeOptions{};
  return updateOapiWorkspaceEx(request, runtime);
}

/**
 * Description: 更换负责人要求新的负责人是项目成员。
更换logo，图片要求是mediaId格式，参考https://ding-doc.dingtalk.com/doc#/serverapi2/bcmg0i
 */
async function updateOapiWorkspaceEx(request: UpdateOapiWorkspaceRequest, runtime: Util.RuntimeOptions): UpdateOapiWorkspaceResponse {
  Util.validateModel(request);
  var appParams = Util.stringifyMapValue(Util.toMap(request.params));
  return doRequestOApi('POST', '/topapi/workspace/update', request.headers, appParams, runtime);
}

model GetOapiAlitripBtripReimbursementParams = {
  corpid: string(description='corp id', name='corpid'),
  thirdpartyFlowId: string(description='第三方流程id', name='thirdparty_flow_id'),
}

model GetOapiAlitripBtripReimbursementRequest = {
  headers?: map[string]string,
  params:GetOapiAlitripBtripReimbursementParams,
}

model GetOapiAlitripBtripReimbursementResponseBody = {
  success?: boolean(description='是否成功', name='success'),
  errcode?: int64(description='错误码', name='errcode'),
  errmsg?: string(description='错误信息', name='errmsg'),
  module?: int64(description='返回值：流程id', name='module'),
}

model GetOapiAlitripBtripReimbursementResponse = {
  headers: map[string]string,
  body: GetOapiAlitripBtripReimbursementResponseBody,
}

/**
 * Description: 获取报销单
 */
async function getOapiAlitripBtripReimbursement(request: GetOapiAlitripBtripReimbursementRequest): GetOapiAlitripBtripReimbursementResponse {
  var runtime = new Util.RuntimeOptions{};
  return getOapiAlitripBtripReimbursementEx(request, runtime);
}

/**
 * Description: 获取报销单
 */
async function getOapiAlitripBtripReimbursementEx(request: GetOapiAlitripBtripReimbursementRequest, runtime: Util.RuntimeOptions): GetOapiAlitripBtripReimbursementResponse {
  Util.validateModel(request);
  var appParams = Util.stringifyMapValue(Util.toMap(request.params));
  return doRequestOApi('POST', '/topapi/alitrip/btrip/reimbursement/get', request.headers, appParams, runtime);
}

model ChangeOapiCustomerserviceEventParams = {
  eventDto: {
    eventCode: string(description='事件code，参考com.dingtalk.customerservice.common.EventBizTypeEnum', name='event_code'),
    eventId: string(description='事件的唯一性id，用于幂等', name='event_id'),
    bizType: string(description='事件业务类型，参考com.dingtalk.customerservice.common.EventBizTypeEnum', name='biz_type'),
    buId: string(description='buId(租户id)', name='bu_id'),
    source: string(description='事件来源，com.dingtalk.customerservice.common.SourceEnum', name='source'),
    eventBody: string(description='事件变更内容，json格式', name='event_body'),
  }(description='事件对象', name='event_dto'),
}

model ChangeOapiCustomerserviceEventRequest = {
  headers?: map[string]string,
  params:ChangeOapiCustomerserviceEventParams,
}

model ChangeOapiCustomerserviceEventResponseBody = {
  success?: boolean(description='是否调用成功', name='success'),
  errcode?: int64(description='异常code', name='errcode'),
  errmsg?: string(description='系统异常', name='errmsg'),
}

model ChangeOapiCustomerserviceEventResponse = {
  headers: map[string]string,
  body: ChangeOapiCustomerserviceEventResponseBody,
}

/**
 * Description: 客服域的事件变更时，通知钉钉客服
 */
async function changeOapiCustomerserviceEvent(request: ChangeOapiCustomerserviceEventRequest): ChangeOapiCustomerserviceEventResponse {
  var runtime = new Util.RuntimeOptions{};
  return changeOapiCustomerserviceEventEx(request, runtime);
}

/**
 * Description: 客服域的事件变更时，通知钉钉客服
 */
async function changeOapiCustomerserviceEventEx(request: ChangeOapiCustomerserviceEventRequest, runtime: Util.RuntimeOptions): ChangeOapiCustomerserviceEventResponse {
  Util.validateModel(request);
  var appParams = Util.stringifyMapValue(Util.toMap(request.params));
  return doRequestOApi('POST', '/topapi/customerservice/event/change', request.headers, appParams, runtime);
}

model GetOapiWorkspaceTaskParams = {
  microappAgentId?: int64(description='微应用agentId', name='microapp_agent_id'),
  taskId: string(description='任务ID', name='task_id'),
}

model GetOapiWorkspaceTaskRequest = {
  headers?: map[string]string,
  params:GetOapiWorkspaceTaskParams,
}

model GetOapiWorkspaceTaskResponseBody = {
  result?: {
    gmtCreate?: string(description='创建时间', pattern='\\\\d{4}[-]\\\\d{1,2}[-]\\\\d{1,2}[T]\\\\d{2}:\\\\d{2}:\\\\d{2}[Z]', name='gmt_create'),
    modifierUserid?: string(description='更新者id', name='modifier_userid'),
    creatorUserid?: string(description='创建者id', name='creator_userid'),
    bizTag?: string(description='业务标识', name='biz_tag'),
    priority?: int64(description='优先级', name='priority'),
    description?: string(description='任务描述', name='description'),
    finishDate?: string(description='完成时间', pattern='\\\\d{4}[-]\\\\d{1,2}[-]\\\\d{1,2}[T]\\\\d{2}:\\\\d{2}:\\\\d{2}[Z]', name='finish_date'),
    startDate?: string(description='开始时间', pattern='\\\\d{4}[-]\\\\d{1,2}[-]\\\\d{1,2}[T]\\\\d{2}:\\\\d{2}:\\\\d{2}[Z]', name='start_date'),
    isRecycled?: boolean(description='是否放入回收站', name='is_recycled'),
    isArchived?: boolean(description='是否归档', name='is_archived'),
    statusStage?: int64(description='状态阶段: 开始阶段(0)，进行阶段(1)，完成阶段(2)', name='status_stage'),
    sourceId?: string(description='来源id', name='source_id'),
    parentId?: string(description='父任务id', name='parent_id'),
    taskTypeId?: int64(description='任务类型id', name='task_type_id'),
    statusId?: int64(description='工作流状态id', name='status_id'),
    executorUserid?: string(description='执行者id', name='executor_userid'),
    subject?: string(description='标题', name='subject'),
    gmtModified?: string(description='修改时间', pattern='\\\\d{4}[-]\\\\d{1,2}[-]\\\\d{1,2}[T]\\\\d{2}:\\\\d{2}:\\\\d{2}[Z]', name='gmt_modified'),
    corpId?: string(description='任务所属项目(虚拟企业），基于项目空间的项目', name='corp_id'),
    belongCorpId?: string(description='归属企业id', name='belong_corp_id'),
    taskTypeCategory?: string(description='任务类型分类:// 任务 TASK("task"),     // 需求     REQ("req"),     // 缺陷     BUG("bug"),     // 风险     RISK("risk"),     // 工作项     WORKITEM("workitem")', name='task_type_category'),
    taskId?: string(description='任务id', name='task_id'),
    planStartDate?: string(description='计划开始时间', pattern='\\\\d{4}[-]\\\\d{1,2}[-]\\\\d{1,2}[T]\\\\d{2}:\\\\d{2}:\\\\d{2}[Z]', name='plan_start_date'),
    planFinishDate?: string(description='计划完成时间', pattern='\\\\d{4}[-]\\\\d{1,2}[-]\\\\d{1,2}[T]\\\\d{2}:\\\\d{2}:\\\\d{2}[Z]', name='plan_finish_date'),
    trackerUserids?: [ string ](description='任务参与者列表', name='tracker_userids'),
    extension?: {
      commentCount?: string(description='评论数', name='comment_count'),
      filePath?: string(description='附件地址', name='file_path'),
      other?: string(description='用户可扩展的字段', name='other'),
    }(description='任务的扩展字段', name='extension'),
  }(description='响应结果', name='result'),
  errcode?: int64(description='错误码', name='errcode'),
  errmsg?: string(description='错误描述', name='errmsg'),
}

model GetOapiWorkspaceTaskResponse = {
  headers: map[string]string,
  body: GetOapiWorkspaceTaskResponseBody,
}

/**
 * Description: 根据id查询任务详情
 */
async function getOapiWorkspaceTask(request: GetOapiWorkspaceTaskRequest): GetOapiWorkspaceTaskResponse {
  var runtime = new Util.RuntimeOptions{};
  return getOapiWorkspaceTaskEx(request, runtime);
}

/**
 * Description: 根据id查询任务详情
 */
async function getOapiWorkspaceTaskEx(request: GetOapiWorkspaceTaskRequest, runtime: Util.RuntimeOptions): GetOapiWorkspaceTaskResponse {
  Util.validateModel(request);
  var appParams = Util.stringifyMapValue(Util.toMap(request.params));
  return doRequestOApi('POST', '/topapi/workspace/task/get', request.headers, appParams, runtime);
}

model DeleteOapiWorkspaceTaskParams = {
  microappAgentId?: int64(description='微应用agentId', name='microapp_agent_id'),
  operatorUserid: string(description='操作者id', name='operator_userid'),
  taskId: string(description='任务ID', name='task_id'),
}

model DeleteOapiWorkspaceTaskRequest = {
  headers?: map[string]string,
  params:DeleteOapiWorkspaceTaskParams,
}

model DeleteOapiWorkspaceTaskResponseBody = {
  errcode?: int64(description='错误码', name='errcode'),
  errmsg?: string(description='错误描述', name='errmsg'),
}

model DeleteOapiWorkspaceTaskResponse = {
  headers: map[string]string,
  body: DeleteOapiWorkspaceTaskResponseBody,
}

/**
 * Description: 根据ID删除任务
 */
async function deleteOapiWorkspaceTask(request: DeleteOapiWorkspaceTaskRequest): DeleteOapiWorkspaceTaskResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteOapiWorkspaceTaskEx(request, runtime);
}

/**
 * Description: 根据ID删除任务
 */
async function deleteOapiWorkspaceTaskEx(request: DeleteOapiWorkspaceTaskRequest, runtime: Util.RuntimeOptions): DeleteOapiWorkspaceTaskResponse {
  Util.validateModel(request);
  var appParams = Util.stringifyMapValue(Util.toMap(request.params));
  return doRequestOApi('POST', '/topapi/workspace/task/delete', request.headers, appParams, runtime);
}

model UpdateOapiWorkspaceTaskParams = {
  microappAgentId?: int64(description='微应用agentId', name='microapp_agent_id'),
  task: {
    sourceId?: string(description='来源id', name='source_id'),
    isRecycled?: boolean(description='是否放入回收站', name='is_recycled'),
    gmtModified?: string(description='修改时间', pattern='\\\\d{4}[-]\\\\d{1,2}[-]\\\\d{1,2}[T]\\\\d{2}:\\\\d{2}:\\\\d{2}[Z]', name='gmt_modified'),
    executorUserid?: string(description='执行者id（传null不更新，传空串则清空原值）', name='executor_userid'),
    subject?: string(description='标题', name='subject'),
    isArchived?: boolean(description='是否归档', name='is_archived'),
    modifierUserid?: string(description='更新者id', name='modifier_userid'),
    description?: string(description='描述（传null不更新，传空串则清空原值）', name='description'),
    priority?: int64(description='优先级', name='priority'),
    parentId?: string(description='父任务id', name='parent_id'),
    taskTypeId?: int64(description='任务类型id', name='task_type_id'),
    statusId?: int64(description='工作流状态id', name='status_id'),
    statusStage?: int64(description='状态阶段: 开始阶段(0)，进行阶段(1)，完成阶段(2)', name='status_stage'),
    finishDate?: string(description='完成时间（传null不更新，传Date(0)，即1970-01-01T08:00:00.000+08:00则清空原值）', pattern='\\\\d{4}[-]\\\\d{1,2}[-]\\\\d{1,2}[T]\\\\d{2}:\\\\d{2}:\\\\d{2}[Z]', name='finish_date'),
    startDate?: string(description='开始日期（传null不更新，传Date(0)，即1970-01-01T08:00:00.000+08:00则清空原值）', pattern='\\\\d{4}[-]\\\\d{1,2}[-]\\\\d{1,2}[T]\\\\d{2}:\\\\d{2}:\\\\d{2}[Z]', name='start_date'),
    taskTypeCategory?: string(description='任务类型分类:// 任务 TASK("task"),     // 需求     REQ("req"),     // 缺陷     BUG("bug"),     // 风险     RISK("risk"),     // 工作项     WORKITEM("workitem")', name='task_type_category'),
    planStartDate?: string(description='计划开始时间（传null不更新，传Date(0)，即1970-01-01T08:00:00.000+08:00则清空原值）', pattern='\\\\d{4}[-]\\\\d{1,2}[-]\\\\d{1,2}[T]\\\\d{2}:\\\\d{2}:\\\\d{2}[Z]', name='plan_start_date'),
    planFinishDate?: string(description='计划结束时间（传null不更新，传Date(0)，即1970-01-01T08:00:00.000+08:00则清空原值）', pattern='\\\\d{4}[-]\\\\d{1,2}[-]\\\\d{1,2}[T]\\\\d{2}:\\\\d{2}:\\\\d{2}[Z]', name='plan_finish_date'),
    trackerUserids?: [ string ](description='任务参与者列表', maxItems=20, name='tracker_userids'),
    extension?: {
      commentCount?: int64(description='评论数', name='comment_count'),
      filePath?: string(description='附件地址', name='file_path'),
      other?: string(description='用户可扩展的字段', name='other'),
    }(description='任务的扩展字段', name='extension'),
    corpId?: string(description='任务所属项目(虚拟企业），基于项目空间的项目', name='corp_id'),
    source?: string(description='任务来源source', name='source'),
  }(description='请求入参', name='task'),
  operatorUserid?: string(description='操作者id', name='operator_userid'),
  taskId: string(description='任务ID', name='task_id'),
}

model UpdateOapiWorkspaceTaskRequest = {
  headers?: map[string]string,
  params:UpdateOapiWorkspaceTaskParams,
}

model UpdateOapiWorkspaceTaskResponseBody = {
  errcode?: int64(description='错误码', name='errcode'),
  errmsg?: string(description='错误描述', name='errmsg'),
}

model UpdateOapiWorkspaceTaskResponse = {
  headers: map[string]string,
  body: UpdateOapiWorkspaceTaskResponseBody,
}

/**
 * Description: 更新任务基础信息
 */
async function updateOapiWorkspaceTask(request: UpdateOapiWorkspaceTaskRequest): UpdateOapiWorkspaceTaskResponse {
  var runtime = new Util.RuntimeOptions{};
  return updateOapiWorkspaceTaskEx(request, runtime);
}

/**
 * Description: 更新任务基础信息
 */
async function updateOapiWorkspaceTaskEx(request: UpdateOapiWorkspaceTaskRequest, runtime: Util.RuntimeOptions): UpdateOapiWorkspaceTaskResponse {
  Util.validateModel(request);
  var appParams = Util.stringifyMapValue(Util.toMap(request.params));
  return doRequestOApi('POST', '/topapi/workspace/task/update', request.headers, appParams, runtime);
}

model ListbypageOapiMicroappParams = {
  agentId: int64(description='微应用id', name='agentId'),
  offset: int64(description='偏移量', name='offset'),
  size: int64(description='大小', name='size'),
}

model ListbypageOapiMicroappRequest = {
  headers?: map[string]string,
  params:ListbypageOapiMicroappParams,
}

model ListbypageOapiMicroappResponseBody = {
  errcode?: int64(description='dingOpenErrcode', name='errcode'),
  errmsg?: string(description='errorMsg', name='errmsg'),
  result?: {
    hasMore?: boolean(description='hasMore', name='has_more'),
    scopes?: [ string ](description='list', name='scopes'),
  }(description='result', name='result'),
}

model ListbypageOapiMicroappResponse = {
  headers: map[string]string,
  body: ListbypageOapiMicroappResponseBody,
}

/**
 * Description: 分页获取微应用可见范围
 */
async function listbypageOapiMicroapp(request: ListbypageOapiMicroappRequest): ListbypageOapiMicroappResponse {
  var runtime = new Util.RuntimeOptions{};
  return listbypageOapiMicroappEx(request, runtime);
}

/**
 * Description: 分页获取微应用可见范围
 */
async function listbypageOapiMicroappEx(request: ListbypageOapiMicroappRequest, runtime: Util.RuntimeOptions): ListbypageOapiMicroappResponse {
  Util.validateModel(request);
  var appParams = Util.stringifyMapValue(Util.toMap(request.params));
  return doRequestOApi('POST', '/topapi/microapp/listbypage', request.headers, appParams, runtime);
}

model CreateOapiWorkspaceTaskParams = {
  microappAgentId?: int64(description='微应用agentId', name='microapp_agent_id'),
  task: {
    sourceId: string(description='此字段用于数据迁移的场景，表示任务在源系统中的唯一ID，ISV接入时必填，用于跳转至各自的任务详情页', name='source_id'),
    isRecycled?: boolean(description='是否放入回收站', name='is_recycled'),
    gmtModified?: string(description='修改时间', pattern='\\\\d{4}[-]\\\\d{1,2}[-]\\\\d{1,2}[T]\\\\d{2}:\\\\d{2}:\\\\d{2}[Z]', name='gmt_modified'),
    executorUserid?: string(description='执行者id, 传staffId（工号）', name='executor_userid'),
    subject: string(description='任务标题', name='subject'),
    isArchived?: boolean(description='是否归档', name='is_archived'),
    creatorUserid: string(description='创建者id, 传staffId（工号）', name='creator_userid'),
    modifierUserid?: string(description='更新者id, 传staffId（工号）', name='modifier_userid'),
    description?: string(description='任务描述', name='description'),
    priority?: int64(description='优先级, 较低:10, 普通:20, 紧急:30, 非常紧急:40', name='priority'),
    gmtCreate?: string(description='创建时间', pattern='\\\\d{4}[-]\\\\d{1,2}[-]\\\\d{1,2}[T]\\\\d{2}:\\\\d{2}:\\\\d{2}[Z]', name='gmt_create'),
    parentId?: string(description='父任务id', name='parent_id'),
    taskTypeId?: int64(description='任务类型id，任务类型，可以不传', name='task_type_id'),
    statusId?: int64(description='状态id，工作流状态, 可以为空', name='status_id'),
    statusStage?: int64(description='状态阶段: 开始阶段(0)，进行阶段(1)，完成阶段(2)', name='status_stage'),
    finishDate?: string(description='任务实际完成时间', pattern='\\\\d{4}[-]\\\\d{1,2}[-]\\\\d{1,2}[T]\\\\d{2}:\\\\d{2}:\\\\d{2}[Z]', name='finish_date'),
    startDate?: string(description='任务实际开始日期', pattern='\\\\d{4}[-]\\\\d{1,2}[-]\\\\d{1,2}[T]\\\\d{2}:\\\\d{2}:\\\\d{2}[Z]', name='start_date'),
    corpId?: string(description='任务所属项目(虚拟企业），基于项目空间的项目', name='corp_id'),
    taskTypeCategory?: string(description='任务类型分类:// 任务 TASK("task"),     // 需求     REQ("req"),     // 缺陷     BUG("bug"),     // 风险     RISK("risk"),     // 工作项     WORKITEM("workitem")', name='task_type_category'),
    planStartDate?: string(description='任务计划开始时间', pattern='\\\\d{4}[-]\\\\d{1,2}[-]\\\\d{1,2}[T]\\\\d{2}:\\\\d{2}:\\\\d{2}[Z]', name='plan_start_date'),
    planFinishDate?: string(description='任务计划完成时间', pattern='\\\\d{4}[-]\\\\d{1,2}[-]\\\\d{1,2}[T]\\\\d{2}:\\\\d{2}:\\\\d{2}[Z]', name='plan_finish_date'),
    trackerUserids?: [ string ](description='任务参与者列表, 传staffId（工号）', maxItems=20, name='tracker_userids'),
    extension?: {
      commentCount?: int64(description='评论数', name='comment_count'),
      filePath?: string(description='附件地址', name='file_path'),
      other?: string(description='用户可扩展的字段', name='other'),
    }(description='任务的扩展字段', name='extension'),
    source?: string(description='任务来源source', name='source'),
  }(description='请求入参', name='task'),
  operatorUserid: string(description='操作者id', name='operator_userid'),
}

model CreateOapiWorkspaceTaskRequest = {
  headers?: map[string]string,
  params:CreateOapiWorkspaceTaskParams,
}

model CreateOapiWorkspaceTaskResponseBody = {
  result?: {
    gmtCreate?: string(description='创建时间', pattern='\\\\d{4}[-]\\\\d{1,2}[-]\\\\d{1,2}[T]\\\\d{2}:\\\\d{2}:\\\\d{2}[Z]', name='gmt_create'),
    modifierUserid?: string(description='更新者id, 传staffId（工号）', name='modifier_userid'),
    creatorUserid?: string(description='创建者id, 传staffId（工号）', name='creator_userid'),
    bizTag?: string(description='业务标识', name='biz_tag'),
    priority?: int64(description='优先级, 较低:10, 普通:20, 紧急:30, 非常紧急:40', name='priority'),
    description?: string(description='任务描述', name='description'),
    finishDate?: string(description='完成时间', pattern='\\\\d{4}[-]\\\\d{1,2}[-]\\\\d{1,2}[T]\\\\d{2}:\\\\d{2}:\\\\d{2}[Z]', name='finish_date'),
    startDate?: string(description='开始时间', pattern='\\\\d{4}[-]\\\\d{1,2}[-]\\\\d{1,2}[T]\\\\d{2}:\\\\d{2}:\\\\d{2}[Z]', name='start_date'),
    isRecycled?: boolean(description='是否放入回收站', name='is_recycled'),
    isArchived?: boolean(description='是否归档', name='is_archived'),
    statusStage?: int64(description='状态阶段: 开始阶段(0)，进行阶段(1)，完成阶段(2)', name='status_stage'),
    sourceId?: string(description='此字段用于数据迁移的场景，表示任务在源系统中的唯一ID', name='source_id'),
    parentId?: string(description='父任务id', name='parent_id'),
    taskTypeId?: int64(description='任务类型id，任务类型，可以不传', name='task_type_id'),
    statusId?: int64(description='状态id，工作流状态, 可以为空', name='status_id'),
    executorUserid?: string(description='执行者id, 传staffId（工号）', name='executor_userid'),
    subject?: string(description='标题', name='subject'),
    gmtModified?: string(description='修改时间', pattern='\\\\d{4}[-]\\\\d{1,2}[-]\\\\d{1,2}[T]\\\\d{2}:\\\\d{2}:\\\\d{2}[Z]', name='gmt_modified'),
    belongCorpId?: string(description='归属企业id', name='belong_corp_id'),
    corpId?: string(description='任务所属项目(虚拟企业），基于项目空间的项目', name='corp_id'),
    taskId?: string(description='任务id', name='task_id'),
    taskTypeCategory?: string(description='任务类型分类:// 任务 TASK("task"),     // 需求     REQ("req"),     // 缺陷     BUG("bug"),     // 风险     RISK("risk"),     // 工作项     WORKITEM("workitem")', name='task_type_category'),
    planStartDate?: string(description='任务计划开始时间', pattern='\\\\d{4}[-]\\\\d{1,2}[-]\\\\d{1,2}[T]\\\\d{2}:\\\\d{2}:\\\\d{2}[Z]', name='plan_start_date'),
    planFinishDate?: string(description='任务计划完成时间', pattern='\\\\d{4}[-]\\\\d{1,2}[-]\\\\d{1,2}[T]\\\\d{2}:\\\\d{2}:\\\\d{2}[Z]', name='plan_finish_date'),
    trackerUserids?: [ string ](description='任务参与者列表', name='tracker_userids'),
    extension?: {
      commentCount?: int64(description='评论数量', name='comment_count'),
      filePath?: string(description='附件地址', name='file_path'),
      other?: string(description='用户可扩展的字段', name='other'),
    }(description='任务的扩展字段', name='extension'),
    source?: string(description='任务来源source', name='source'),
  }(description='响应结果', name='result'),
  errcode?: int64(description='错误码', name='errcode'),
  errmsg?: string(description='错误描述', name='errmsg'),
}

model CreateOapiWorkspaceTaskResponse = {
  headers: map[string]string,
  body: CreateOapiWorkspaceTaskResponseBody,
}

/**
 * Description: 新增基础任务信息
 */
async function createOapiWorkspaceTask(request: CreateOapiWorkspaceTaskRequest): CreateOapiWorkspaceTaskResponse {
  var runtime = new Util.RuntimeOptions{};
  return createOapiWorkspaceTaskEx(request, runtime);
}

/**
 * Description: 新增基础任务信息
 */
async function createOapiWorkspaceTaskEx(request: CreateOapiWorkspaceTaskRequest, runtime: Util.RuntimeOptions): CreateOapiWorkspaceTaskResponse {
  Util.validateModel(request);
  var appParams = Util.stringifyMapValue(Util.toMap(request.params));
  return doRequestOApi('POST', '/topapi/workspace/task/create', request.headers, appParams, runtime);
}

model ListOapiKacDatavDeptVideoliveParams = {
  request: {
    dataId: string(description='日期标识', name='data_id'),
    size: int64(description='分页大小;不超过100', name='size'),
    cursor: int64(description='分页游标；首页请使用0，之后直接使用返回结果中的next_cursor', name='cursor'),
  }(description='请求对象', name='request'),
}

model ListOapiKacDatavDeptVideoliveRequest = {
  headers?: map[string]string,
  params:ListOapiKacDatavDeptVideoliveParams,
}

model ListOapiKacDatavDeptVideoliveResponseBody = {
  errcode?: int64(description='结果码', name='errcode'),
  errmsg?: string(description='提示信息', name='errmsg'),
  result?: {
    data?: [
      {
        deptId?: int64(description='部门id', name='dept_id'),
        deptName?: string(description='部门名称', name='dept_name'),
        liveLaunchCount?: int64(description='直播发起次数（成功）', name='live_launch_count'),
        liveTimeLength?: string(description='直播时长（分钟）', name='live_time_length'),
        livePlayUserCount?: int64(description='观看直播人数', name='live_play_user_count'),
      }
    ](description='data', name='data'),
    hasMore?: boolean(description='是否有下一页；true则存在更多分页', name='has_more'),
    nextCursor?: int64(description='下一次请求的分页游标', name='next_cursor'),
  }(description='result', name='result'),
}

model ListOapiKacDatavDeptVideoliveResponse = {
  headers: map[string]string,
  body: ListOapiKacDatavDeptVideoliveResponseBody,
}

/**
 * Description: 钉钉数据：大客户部门维度直播汇总统计列表
 */
async function listOapiKacDatavDeptVideolive(request: ListOapiKacDatavDeptVideoliveRequest): ListOapiKacDatavDeptVideoliveResponse {
  var runtime = new Util.RuntimeOptions{};
  return listOapiKacDatavDeptVideoliveEx(request, runtime);
}

/**
 * Description: 钉钉数据：大客户部门维度直播汇总统计列表
 */
async function listOapiKacDatavDeptVideoliveEx(request: ListOapiKacDatavDeptVideoliveRequest, runtime: Util.RuntimeOptions): ListOapiKacDatavDeptVideoliveResponse {
  Util.validateModel(request);
  var appParams = Util.stringifyMapValue(Util.toMap(request.params));
  return doRequestOApi('POST', '/topapi/kac/datav/dept/videolive/list', request.headers, appParams, runtime);
}

model EnableOapiPbpInstanceParams = {
  bizId: string(description='业务唯一标识', name='biz_id'),
  bizInstId: string(description='业务实例唯一标识', name='biz_inst_id'),
}

model EnableOapiPbpInstanceRequest = {
  headers?: map[string]string,
  params:EnableOapiPbpInstanceParams,
}

model EnableOapiPbpInstanceResponseBody = {
  errmsg?: string(description='错误描述', name='errmsg'),
  errcode?: int64(description='错误码', name='errcode'),
}

model EnableOapiPbpInstanceResponse = {
  headers: map[string]string,
  body: EnableOapiPbpInstanceResponseBody,
}

/**
 * Description: 启用业务实例
 */
async function enableOapiPbpInstance(request: EnableOapiPbpInstanceRequest): EnableOapiPbpInstanceResponse {
  var runtime = new Util.RuntimeOptions{};
  return enableOapiPbpInstanceEx(request, runtime);
}

/**
 * Description: 启用业务实例
 */
async function enableOapiPbpInstanceEx(request: EnableOapiPbpInstanceRequest, runtime: Util.RuntimeOptions): EnableOapiPbpInstanceResponse {
  Util.validateModel(request);
  var appParams = Util.stringifyMapValue(Util.toMap(request.params));
  return doRequestOApi('POST', '/topapi/pbp/instance/enable', request.headers, appParams, runtime);
}

model SendOapiChatbotMessageParams = {
  chatbotId: string(description='企业机器人模板类型', name='chatbot_id'),
  userid: string(description='企业员工ID', name='userid'),
  message: string(description='消息内容,支持的消息类型详见：https://open-doc.dingtalk.com/microapp/serverapi2/qf2nxq#a-namesgw3aga%E6%B6%88%E6%81%AF%E7%B1%BB%E5%9E%8B%E5%8F%8A%E6%95%B0%E6%8D%AE%E6%A0%BC%E5%BC%8F', name='message'),
}

model SendOapiChatbotMessageRequest = {
  headers?: map[string]string,
  params:SendOapiChatbotMessageParams,
}

model SendOapiChatbotMessageResponseBody = {
  success?: boolean(description='是否成功', name='success'),
  errcode?: int64(description='错误码', name='errcode'),
  errmsg?: string(description='错误信息', name='errmsg'),
  result?: {
    messageId?: string(description='加密的消息id', name='message_id'),
  }(description='result', name='result'),
}

model SendOapiChatbotMessageResponse = {
  headers: map[string]string,
  body: SendOapiChatbotMessageResponseBody,
}

/**
 * Description: 通过机器人单聊会话主动给企业内员工发送消息。
 */
async function sendOapiChatbotMessage(request: SendOapiChatbotMessageRequest): SendOapiChatbotMessageResponse {
  var runtime = new Util.RuntimeOptions{};
  return sendOapiChatbotMessageEx(request, runtime);
}

/**
 * Description: 通过机器人单聊会话主动给企业内员工发送消息。
 */
async function sendOapiChatbotMessageEx(request: SendOapiChatbotMessageRequest, runtime: Util.RuntimeOptions): SendOapiChatbotMessageResponse {
  Util.validateModel(request);
  var appParams = Util.stringifyMapValue(Util.toMap(request.params));
  return doRequestOApi('POST', '/topapi/chatbot/message/send', request.headers, appParams, runtime);
}

model ListOapiUserCorpinfoParams = {
  mobile: string(description='用户手机号', name='mobile'),
  corpName: string(description='企业全称', name='corp_name'),
}

model ListOapiUserCorpinfoRequest = {
  headers?: map[string]string,
  params:ListOapiUserCorpinfoParams,
}

model ListOapiUserCorpinfoResponseBody = {
  errmsg?: string(description='错误信息', name='errmsg'),
  errcode?: int64(description='错误码', name='errcode'),
  corpList?: [
    {
      corpName?: string(description='企业名称', name='corp_name'),
      corpid?: string(description='企业id', name='corpid'),
      authStatus?: int64(description='是否认证，0表示未认证，1表示认证', name='auth_status'),
    }
  ](description='企业列表', name='corp_list'),
}

model ListOapiUserCorpinfoResponse = {
  headers: map[string]string,
  body: ListOapiUserCorpinfoResponseBody,
}

/**
 * Description: 根据用户手机号和企业名称获取企业信息
 */
async function listOapiUserCorpinfo(request: ListOapiUserCorpinfoRequest): ListOapiUserCorpinfoResponse {
  var runtime = new Util.RuntimeOptions{};
  return listOapiUserCorpinfoEx(request, runtime);
}

/**
 * Description: 根据用户手机号和企业名称获取企业信息
 */
async function listOapiUserCorpinfoEx(request: ListOapiUserCorpinfoRequest, runtime: Util.RuntimeOptions): ListOapiUserCorpinfoResponse {
  Util.validateModel(request);
  var appParams = Util.stringifyMapValue(Util.toMap(request.params));
  return doRequestOApi('POST', '/topapi/user/corpinfo/list', request.headers, appParams, runtime);
}

model Create_orderOapiAppstoreOrdersSpecial_canalParams = {
  orderCenterId: string(description='联通订单id', name='order_center_id'),
  corpid: string(description='下单企业id', name='corpid'),
  mobile: string(description='下单人手机号', name='mobile'),
  goodsCode: string(description='商品码', name='goods_code'),
  itemCode: string(description='规格码', name='item_code'),
  cycNum: string(description='订购周期数量', name='cyc_num'),
  cycUnit: string(description='订购的周期单位：1-年，2-月，3-日', name='cyc_unit'),
  quantity: string(description='订购数量', name='quantity'),
  price: string(description='订购价格', name='price'),
}

model Create_orderOapiAppstoreOrdersSpecial_canalRequest = {
  headers?: map[string]string,
  params:Create_orderOapiAppstoreOrdersSpecial_canalParams,
}

model Create_orderOapiAppstoreOrdersSpecial_canalResponseBody = {
  errcode?: int64(description='错误码', name='errcode'),
  errmsg?: string(description='错误信息', name='errmsg'),
  dingOrderId?: string(description='钉钉订单id', name='ding_order_id'),
}

model Create_orderOapiAppstoreOrdersSpecial_canalResponse = {
  headers: map[string]string,
  body: Create_orderOapiAppstoreOrdersSpecial_canalResponseBody,
}

/**
 * Description: 特渠专用下单接口
 */
async function create_orderOapiAppstoreOrdersSpecial_canal(request: Create_orderOapiAppstoreOrdersSpecial_canalRequest): Create_orderOapiAppstoreOrdersSpecial_canalResponse {
  var runtime = new Util.RuntimeOptions{};
  return create_orderOapiAppstoreOrdersSpecial_canalEx(request, runtime);
}

/**
 * Description: 特渠专用下单接口
 */
async function create_orderOapiAppstoreOrdersSpecial_canalEx(request: Create_orderOapiAppstoreOrdersSpecial_canalRequest, runtime: Util.RuntimeOptions): Create_orderOapiAppstoreOrdersSpecial_canalResponse {
  Util.validateModel(request);
  var appParams = Util.stringifyMapValue(Util.toMap(request.params));
  return doRequestOApi('POST', '/topapi/appstore/orders/special_canal/create_order', request.headers, appParams, runtime);
}

model Update_orderOapiAppstoreOrdersSpecial_canalParams = {
  dingOrderId: string(description='钉钉订单id', name='ding_order_id'),
  status: int64(description='状态。已支付是3，已完成是4，已取消是1', name='status'),
}

model Update_orderOapiAppstoreOrdersSpecial_canalRequest = {
  headers?: map[string]string,
  params:Update_orderOapiAppstoreOrdersSpecial_canalParams,
}

model Update_orderOapiAppstoreOrdersSpecial_canalResponseBody = {
  errmsg?: string(description='错误信息', name='errmsg'),
  errcode?: int64(description='错误码', name='errcode'),
}

model Update_orderOapiAppstoreOrdersSpecial_canalResponse = {
  headers: map[string]string,
  body: Update_orderOapiAppstoreOrdersSpecial_canalResponseBody,
}

/**
 * Description: 更新联通订单状态
 */
async function update_orderOapiAppstoreOrdersSpecial_canal(request: Update_orderOapiAppstoreOrdersSpecial_canalRequest): Update_orderOapiAppstoreOrdersSpecial_canalResponse {
  var runtime = new Util.RuntimeOptions{};
  return update_orderOapiAppstoreOrdersSpecial_canalEx(request, runtime);
}

/**
 * Description: 更新联通订单状态
 */
async function update_orderOapiAppstoreOrdersSpecial_canalEx(request: Update_orderOapiAppstoreOrdersSpecial_canalRequest, runtime: Util.RuntimeOptions): Update_orderOapiAppstoreOrdersSpecial_canalResponse {
  Util.validateModel(request);
  var appParams = Util.stringifyMapValue(Util.toMap(request.params));
  return doRequestOApi('POST', '/topapi/appstore/orders/special_canal/update_order', request.headers, appParams, runtime);
}

model QueryOapiAppstoreGoodsParams = {
  goodsCode: string(description='商品码', name='goods_code'),
}

model QueryOapiAppstoreGoodsRequest = {
  headers?: map[string]string,
  params:QueryOapiAppstoreGoodsParams,
}

model QueryOapiAppstoreGoodsResponseBody = {
  goodsInfo?: {
    name?: string(description='商品名称', name='name'),
    itemList?: [
      {
        isTryOuts?: boolean(description='是否试用', name='is_try_outs'),
        itemName?: string(description='规格名称', name='item_name'),
        itemCode?: string(description='规格码', name='item_code'),
        maxNum?: int64(description='最大购买人数', name='max_num'),
        minNum?: int64(description='最小购买人数', name='min_num'),
        itemCycList?: [
          {
            cycNum?: int64(description='订购周期数量', name='cyc_num'),
            cycUnit?: int64(description='订购周期单位', name='cyc_unit'),
            aliasName?: string(description='周期别名', name='alias_name'),
          }
        ](description='周期列表', name='item_cyc_list'),
      }
    ](description='规格列表', name='item_list'),
  }(description='商品详情', name='goods_info'),
  errcode?: int64(description='错误码', name='errcode'),
  errmsg?: string(description='错误信息', name='errmsg'),
}

model QueryOapiAppstoreGoodsResponse = {
  headers: map[string]string,
  body: QueryOapiAppstoreGoodsResponseBody,
}

/**
 * Description: 查询商品详情
 */
async function queryOapiAppstoreGoods(request: QueryOapiAppstoreGoodsRequest): QueryOapiAppstoreGoodsResponse {
  var runtime = new Util.RuntimeOptions{};
  return queryOapiAppstoreGoodsEx(request, runtime);
}

/**
 * Description: 查询商品详情
 */
async function queryOapiAppstoreGoodsEx(request: QueryOapiAppstoreGoodsRequest, runtime: Util.RuntimeOptions): QueryOapiAppstoreGoodsResponse {
  Util.validateModel(request);
  var appParams = Util.stringifyMapValue(Util.toMap(request.params));
  return doRequestOApi('POST', '/topapi/appstore/goods/query', request.headers, appParams, runtime);
}

model ListCorpReportParams = {
  startTime: int64(description='查询起始时间', name='start_time'),
  endTime: int64(description='查询截止时间', name='end_time'),
  templateName?: string(description='要查询的模板名称', name='template_name'),
  userid?: string(description='员工的userid', name='userid'),
  cursor: int64(description='查询游标，初始传入0，后续从上一次的返回值中获取', name='cursor'),
  size: int64(description='每页数据量', name='size'),
}

model ListCorpReportRequest = {
  headers?: map[string]string,
  params:ListCorpReportParams,
}

model ListCorpReportResponseBody = {
  result?: {
    result?: {
      dataList?: [
        {
          contents?: [
            {
              sort?: string(description='排序', name='sort'),
              type?: string(description='类型', name='type'),
              value?: string(description='用户填写的内容', name='value'),
              key?: string(description='模板内容', name='key'),
            }
          ](description='日志内容', name='contents'),
          remark?: string(description='备注', name='remark'),
          templateName?: string(description='日志模板名', name='template_name'),
          deptName?: string(description='部门', name='dept_name'),
          creatorName?: string(description='日志创建人', name='creator_name'),
          creatorId?: string(description='日志创建人userid', name='creator_id'),
          createTime?: int64(description='日志创建时间', name='create_time'),
          reportId?: string(description='日志唯一id', name='report_id'),
        }
      ](description='日志列表', name='data_list'),
      size?: int64(description='分页大小', name='size'),
      nextCursor?: int64(description='nextCursor', name='next_cursor'),
      hasMore?: boolean(description='是否还有下一页', name='has_more'),
    }(description='result', name='result'),
    dingOpenErrcode?: int64(description='dingOpenErrcode', name='ding_open_errcode'),
    errorMsg?: string(description='errorMsg', name='error_msg'),
    success?: boolean(description='success', name='success'),
  }(description='result', name='result'),
}

model ListCorpReportResponse = {
  headers: map[string]string,
  body: ListCorpReportResponseBody,
}

/**
 * Description: 企业可以根据员工userid或者日志模板名称，分页获取员工一段时间范围内在【日志】微应用发送的日志详细信息
 */
async function listCorpReport(request: ListCorpReportRequest): ListCorpReportResponse {
  var runtime = new Util.RuntimeOptions{};
  return listCorpReportEx(request, runtime);
}

/**
 * Description: 企业可以根据员工userid或者日志模板名称，分页获取员工一段时间范围内在【日志】微应用发送的日志详细信息
 */
async function listCorpReportEx(request: ListCorpReportRequest, runtime: Util.RuntimeOptions): ListCorpReportResponse {
  Util.validateModel(request);
  var appParams = Util.stringifyMapValue(Util.toMap(request.params));
  return doRequest('dingtalk.corp.report.list', 'POST', '/router/rest', request.headers, appParams, runtime);
}

model InquiryOapiAppstoreOrdersParams = {
  corpid: string(description='询价企业id', name='corpid'),
  mobile: string(description='询价用户手机号', name='mobile'),
  goodsCode: string(description='商品码', name='goods_code'),
  itemCode: string(description='规格码', name='item_code'),
  cycNum: int64(description='订购周期数量', name='cyc_num'),
  cycUnit: int64(description='订购周期单位', name='cyc_unit'),
  quantity: int64(description='订购人数', name='quantity'),
}

model InquiryOapiAppstoreOrdersRequest = {
  headers?: map[string]string,
  params:InquiryOapiAppstoreOrdersParams,
}

model InquiryOapiAppstoreOrdersResponseBody = {
  errmsg?: string(description='错误信息', name='errmsg'),
  errcode?: int64(description='错误码', name='errcode'),
  payFee?: string(description='费用', name='pay_fee'),
}

model InquiryOapiAppstoreOrdersResponse = {
  headers: map[string]string,
  body: InquiryOapiAppstoreOrdersResponseBody,
}

/**
 * Description: 商品询价接口
 */
async function inquiryOapiAppstoreOrders(request: InquiryOapiAppstoreOrdersRequest): InquiryOapiAppstoreOrdersResponse {
  var runtime = new Util.RuntimeOptions{};
  return inquiryOapiAppstoreOrdersEx(request, runtime);
}

/**
 * Description: 商品询价接口
 */
async function inquiryOapiAppstoreOrdersEx(request: InquiryOapiAppstoreOrdersRequest, runtime: Util.RuntimeOptions): InquiryOapiAppstoreOrdersResponse {
  Util.validateModel(request);
  var appParams = Util.stringifyMapValue(Util.toMap(request.params));
  return doRequestOApi('POST', '/topapi/appstore/orders/inquiry', request.headers, appParams, runtime);
}

model SyncOapiPbpEventResultParams = {
  param: {
    bizCode: string(description='打卡业务代码', name='biz_code'),
    userid: string(description='员工id', name='userid'),
    result: int64(description='打卡事件结果，2:成功，3:失败', name='result'),
    invalidEvent: boolean(description='是否失效当前事件，不可重复打卡:true，可重复打卡:false', name='invalid_event'),
    punchPosition: {
      positionId: string(description='打卡成功的位置点id', name='position_id'),
      positionType: int64(description='打卡成功的位置类型', name='position_type'),
    }(description='打卡成功的位置信息', name='punch_position'),
    eventId: string(description='打卡事件外部id，唯一键', name='event_id'),
    bizInstId: string(description='打卡业务实例id', name='biz_inst_id'),
  }(description='打卡事件结果模型', name='param'),
}

model SyncOapiPbpEventResultRequest = {
  headers?: map[string]string,
  params:SyncOapiPbpEventResultParams,
}

model SyncOapiPbpEventResultResponseBody = {
  errcode?: int64(description='错误码', name='errcode'),
  errmsg?: string(description='描述', name='errmsg'),
}

model SyncOapiPbpEventResultResponse = {
  headers: map[string]string,
  body: SyncOapiPbpEventResultResponseBody,
}

/**
 * Description: 钉钉多场景打卡业务，开放小闹钟入口，接入方同步打卡事件【结果】到打卡平台。
 */
async function syncOapiPbpEventResult(request: SyncOapiPbpEventResultRequest): SyncOapiPbpEventResultResponse {
  var runtime = new Util.RuntimeOptions{};
  return syncOapiPbpEventResultEx(request, runtime);
}

/**
 * Description: 钉钉多场景打卡业务，开放小闹钟入口，接入方同步打卡事件【结果】到打卡平台。
 */
async function syncOapiPbpEventResultEx(request: SyncOapiPbpEventResultRequest, runtime: Util.RuntimeOptions): SyncOapiPbpEventResultResponse {
  Util.validateModel(request);
  var appParams = Util.stringifyMapValue(Util.toMap(request.params));
  return doRequestOApi('POST', '/topapi/pbp/event/result/sync', request.headers, appParams, runtime);
}

model DeleteOapiPbpEventParams = {
  param: {
    userEventList: [
      {
        eventName?: string(description='打卡事件名称', name='event_name'),
        userid: string(description='员工id', name='userid'),
        bizInstId: string(description='打卡业务实例id', name='biz_inst_id'),
        eventId: string(description='打卡事件外部id，唯一键', name='event_id'),
      }
    ](description='打卡事件列表', maxItems=999, name='user_event_list'),
    bizCode: string(description='打卡业务代码', name='biz_code'),
  }(description='打卡事件参数模型', name='param'),
}

model DeleteOapiPbpEventRequest = {
  headers?: map[string]string,
  params:DeleteOapiPbpEventParams,
}

model DeleteOapiPbpEventResponseBody = {
  errcode?: int64(description='错误码', name='errcode'),
  errmsg?: string(description='描述', name='errmsg'),
}

model DeleteOapiPbpEventResponse = {
  headers: map[string]string,
  body: DeleteOapiPbpEventResponseBody,
}

/**
 * Description: 钉钉多场景打卡业务，开放小闹钟入口，接入方删除打卡事件
 */
async function deleteOapiPbpEvent(request: DeleteOapiPbpEventRequest): DeleteOapiPbpEventResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteOapiPbpEventEx(request, runtime);
}

/**
 * Description: 钉钉多场景打卡业务，开放小闹钟入口，接入方删除打卡事件
 */
async function deleteOapiPbpEventEx(request: DeleteOapiPbpEventRequest, runtime: Util.RuntimeOptions): DeleteOapiPbpEventResponse {
  Util.validateModel(request);
  var appParams = Util.stringifyMapValue(Util.toMap(request.params));
  return doRequestOApi('POST', '/topapi/pbp/event/delete', request.headers, appParams, runtime);
}

model SyncOapiPbpEventParams = {
  param: {
    bizCode: string(description='打卡业务代码', name='biz_code'),
    userEventList: [
      {
        userid: string(description='员工id', name='userid'),
        eventName: string(description='打卡事件名称', name='event_name'),
        startTime: int64(description='打卡事件结束时间，单位毫秒', name='start_time'),
        endTime: int64(description='打卡事件开始时间，单位毫秒', name='end_time'),
        eventTimeStamp: int64(description='打卡事件生成时间戳，单位毫秒', name='event_time_stamp'),
        positionList: [
          {
            positionId: string(description='位置点id', name='position_id'),
            positionType: int64(description='位置类型', name='position_type'),
          }
        ](description='位置列表', maxItems=999, name='position_list'),
        bizInstId: string(description='打卡业务实例id', name='biz_inst_id'),
        eventId: string(description='打卡事件外部id，唯一键', name='event_id'),
      }
    ](description='打卡事件列表', maxItems=999, name='user_event_list'),
  }(description='打卡事件参数模型', name='param'),
}

model SyncOapiPbpEventRequest = {
  headers?: map[string]string,
  params:SyncOapiPbpEventParams,
}

model SyncOapiPbpEventResponseBody = {
  errcode?: int64(description='错误码', name='errcode'),
  errmsg?: string(description='描述', name='errmsg'),
}

model SyncOapiPbpEventResponse = {
  headers: map[string]string,
  body: SyncOapiPbpEventResponseBody,
}

/**
 * Description: 钉钉多场景打卡业务，开放小闹钟入口，接入方同步打卡事件到打卡平台。
 */
async function syncOapiPbpEvent(request: SyncOapiPbpEventRequest): SyncOapiPbpEventResponse {
  var runtime = new Util.RuntimeOptions{};
  return syncOapiPbpEventEx(request, runtime);
}

/**
 * Description: 钉钉多场景打卡业务，开放小闹钟入口，接入方同步打卡事件到打卡平台。
 */
async function syncOapiPbpEventEx(request: SyncOapiPbpEventRequest, runtime: Util.RuntimeOptions): SyncOapiPbpEventResponse {
  Util.validateModel(request);
  var appParams = Util.stringifyMapValue(Util.toMap(request.params));
  return doRequestOApi('POST', '/topapi/pbp/event/sync', request.headers, appParams, runtime);
}

model ListOapiCollectionInstanceParams = {
  formCode: string(description='填表code', name='form_code'),
  actionDate?: string(description='时间，必须是YYYY-MM-DD的格式', name='action_date'),
  offset: int64(description='分页起始', name='offset'),
  size: int64(description='分页大小，最大100', name='size'),
  bizType?: int64(description='填表类型', name='biz_type'),
}

model ListOapiCollectionInstanceRequest = {
  headers?: map[string]string,
  params:ListOapiCollectionInstanceParams,
}

model ListOapiCollectionInstanceResponseBody = {
  errcode?: int64(description='错误码', name='errcode'),
  errmsg?: string(description='错误信息', name='errmsg'),
  result?: {
    hasMore?: boolean(description='是否还有下一页', name='has_more'),
    list?: [
      {
        createTime?: string(description='毫秒级时间戳，填表提交时间', pattern='\\\\d{4}[-]\\\\d{1,2}[-]\\\\d{1,2}[T]\\\\d{2}:\\\\d{2}:\\\\d{2}[Z]', name='create_time'),
        submitterUserid?: string(description='提交人userid', name='submitter_userid'),
        submitterUserName?: string(description='提交人姓名', name='submitter_user_name'),
        forms?: [
          {
            value?: string(description='表单的值', name='value'),
            label?: string(description='名称。当label字段为空或不存在时，忽略这个label和value', name='label'),
            key?: string(description='表单控件key', name='key'),
          }
        ](description='表单内容列表', name='forms'),
        modifyTime?: string(description='更新时间', pattern='\\\\d{4}[-]\\\\d{1,2}[-]\\\\d{1,2}[T]\\\\d{2}:\\\\d{2}:\\\\d{2}[Z]', name='modify_time'),
        formInstanceId?: string(description='实例id', name='form_instance_id'),
        studentClassName?: string(description='学生班级名称', name='student_class_name'),
        studentName?: string(description='学生名称', name='student_name'),
        studentClassId?: int64(description='学生班级id', name='student_class_id'),
        studentUserId?: string(description='学生id', name='student_user_id'),
      }
    ](description='列表', name='list'),
    nextCursor?: int64(description='下一次分页offset的值', name='next_cursor'),
  }(description='结果', name='result'),
}

model ListOapiCollectionInstanceResponse = {
  headers: map[string]string,
  body: ListOapiCollectionInstanceResponseBody,
}

/**
 * Description: 批量获取填表记录
 */
async function listOapiCollectionInstance(request: ListOapiCollectionInstanceRequest): ListOapiCollectionInstanceResponse {
  var runtime = new Util.RuntimeOptions{};
  return listOapiCollectionInstanceEx(request, runtime);
}

/**
 * Description: 批量获取填表记录
 */
async function listOapiCollectionInstanceEx(request: ListOapiCollectionInstanceRequest, runtime: Util.RuntimeOptions): ListOapiCollectionInstanceResponse {
  Util.validateModel(request);
  var appParams = Util.stringifyMapValue(Util.toMap(request.params));
  return doRequestOApi('POST', '/topapi/collection/instance/list', request.headers, appParams, runtime);
}

model SearchCorpEmpParams = {
  keyword?: string(description='搜索关键字', name='keyword'),
  offset?: int64(description='偏移量', name='offset'),
  size?: int64(description='请求数量', name='size'),
}

model SearchCorpEmpRequest = {
  headers?: map[string]string,
  params?:SearchCorpEmpParams,
}

model SearchCorpEmpResponseBody = {
  result?: string(description='返回结果', name='result'),
}

model SearchCorpEmpResponse = {
  headers: map[string]string,
  body: SearchCorpEmpResponseBody,
}

/**
 * Description: 钉钉企业通讯录搜索接口, 支持翻页
 */
async function searchCorpEmp(request: SearchCorpEmpRequest): SearchCorpEmpResponse {
  var runtime = new Util.RuntimeOptions{};
  return searchCorpEmpEx(request, runtime);
}

/**
 * Description: 钉钉企业通讯录搜索接口, 支持翻页
 */
async function searchCorpEmpEx(request: SearchCorpEmpRequest, runtime: Util.RuntimeOptions): SearchCorpEmpResponse {
  Util.validateModel(request);
  var appParams = Util.stringifyMapValue(Util.toMap(request.params));
  return doRequest('dingtalk.corp.emp.search', 'POST', '/router/rest', request.headers, appParams, runtime);
}

model SwitchOapiAttendanceApproveScheduleParams = {
  userid: string(description='发起人的user_id', name='userid'),
  switchDate: string(description='申请换班日期，当天必须有排班或排休', name='switch_date'),
  rebackDate?: string(description='还班日期，当天必须有排班或排休，如果申请换班人和被换班人是同一个人，那么必须要有还班日期', name='reback_date'),
  applyUserid: string(description='申请换班人id，仅支持排班制考勤组用户', name='apply_userid'),
  targetUserid: string(description='被换班人id，仅支持排班制考勤组用户', name='target_userid'),
  applyShiftId?: int64(description='申请人换班日期当天的班次id', name='apply_shift_id'),
  targetShiftId?: int64(description='被换班人换班日期当天的班次id', name='target_shift_id'),
  rebackApplyShiftId?: int64(description='申请人还班日期当天的班次id', name='reback_apply_shift_id'),
  rebackTargetShiftId?: int64(description='被换班人还班日期当天的班次id', name='reback_target_shift_id'),
  approveId: string(description='审批单唯一id', maxLength=100, name='approve_id'),
}

model SwitchOapiAttendanceApproveScheduleRequest = {
  headers?: map[string]string,
  params:SwitchOapiAttendanceApproveScheduleParams,
}

model SwitchOapiAttendanceApproveScheduleResponseBody = {
  errcode?: int64(description='0代表成功，其他代表失败', name='errcode'),
  errmsg?: string(description='错误信息', name='errmsg'),
}

model SwitchOapiAttendanceApproveScheduleResponse = {
  headers: map[string]string,
  body: SwitchOapiAttendanceApproveScheduleResponseBody,
}

/**
 * Description: 该接口提供了通过审批单进行换班的能力，可以和自己换班，也可以和别人换班。有以下几个约束条件
1.换班双方必须都在排班制考勤组。
2.换班日期和还班日期双方必须都要有排班或排休
3.换完班后的打卡时间不能有冲突，例如原先1号的排班是8：00-22：00，2号的排班是10：00-次日9：00，换完班后1号的排班是10：00-次日9：00，2号的排班是8：00-22：00，此时1号的打卡时间范围内包含了2号上班时间，这种情况称之为打卡时间冲突。
 */
async function switchOapiAttendanceApproveSchedule(request: SwitchOapiAttendanceApproveScheduleRequest): SwitchOapiAttendanceApproveScheduleResponse {
  var runtime = new Util.RuntimeOptions{};
  return switchOapiAttendanceApproveScheduleEx(request, runtime);
}

/**
 * Description: 该接口提供了通过审批单进行换班的能力，可以和自己换班，也可以和别人换班。有以下几个约束条件
1.换班双方必须都在排班制考勤组。
2.换班日期和还班日期双方必须都要有排班或排休
3.换完班后的打卡时间不能有冲突，例如原先1号的排班是8：00-22：00，2号的排班是10：00-次日9：00，换完班后1号的排班是10：00-次日9：00，2号的排班是8：00-22：00，此时1号的打卡时间范围内包含了2号上班时间，这种情况称之为打卡时间冲突。
 */
async function switchOapiAttendanceApproveScheduleEx(request: SwitchOapiAttendanceApproveScheduleRequest, runtime: Util.RuntimeOptions): SwitchOapiAttendanceApproveScheduleResponse {
  Util.validateModel(request);
  var appParams = Util.stringifyMapValue(Util.toMap(request.params));
  return doRequestOApi('POST', '/topapi/attendance/approve/schedule/switch', request.headers, appParams, runtime);
}

model SendstaffmessageOapiImpaasNewretailParams = {
  msgType?: int64(description='0系统消息', name='msg_type'),
  sender?: string(description='系统账号', name='sender'),
  useridList?: [ string ](description='用账号列表', maxItems=100, name='userid_list'),
  content?: string(description='消息体', name='content'),
}

model SendstaffmessageOapiImpaasNewretailRequest = {
  headers?: map[string]string,
  params?:SendstaffmessageOapiImpaasNewretailParams,
}

model SendstaffmessageOapiImpaasNewretailResponseBody = {
  result?: int64(description='result', name='result'),
  errcode?: int64(description='dingOpenErrcode', name='errcode'),
  errmsg?: string(description='errorMsg', name='errmsg'),
}

model SendstaffmessageOapiImpaasNewretailResponse = {
  headers: map[string]string,
  body: SendstaffmessageOapiImpaasNewretailResponseBody,
}

/**
 * Description: 新零售场景下，通过系统账号或员工账号向员工发送单聊账号
 */
async function sendstaffmessageOapiImpaasNewretail(request: SendstaffmessageOapiImpaasNewretailRequest): SendstaffmessageOapiImpaasNewretailResponse {
  var runtime = new Util.RuntimeOptions{};
  return sendstaffmessageOapiImpaasNewretailEx(request, runtime);
}

/**
 * Description: 新零售场景下，通过系统账号或员工账号向员工发送单聊账号
 */
async function sendstaffmessageOapiImpaasNewretailEx(request: SendstaffmessageOapiImpaasNewretailRequest, runtime: Util.RuntimeOptions): SendstaffmessageOapiImpaasNewretailResponse {
  Util.validateModel(request);
  var appParams = Util.stringifyMapValue(Util.toMap(request.params));
  return doRequestOApi('POST', '/topapi/impaas/newretail/sendstaffmessage', request.headers, appParams, runtime);
}

model DeleteroleCorpRoleParams = {
  roleId: int64(description='角色id', name='role_id'),
}

model DeleteroleCorpRoleRequest = {
  headers?: map[string]string,
  params:DeleteroleCorpRoleParams,
}

model DeleteroleCorpRoleResponseBody = {
  result?: {
    dingOpenErrcode?: int64(description='dingOpenErrcode', name='ding_open_errcode'),
    errorMsg?: string(description='errorMsg', name='error_msg'),
    success?: boolean(description='success', name='success'),
  }(description='result', name='result'),
}

model DeleteroleCorpRoleResponse = {
  headers: map[string]string,
  body: DeleteroleCorpRoleResponseBody,
}

/**
 * Description: 企业在做企业内部组织结构角色管理的时候，如果需要删除该企业下某个角色信息，可以调用该接口。调用的前提是该角色下面的所有员工都已经被删除该角色
 */
async function deleteroleCorpRole(request: DeleteroleCorpRoleRequest): DeleteroleCorpRoleResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteroleCorpRoleEx(request, runtime);
}

/**
 * Description: 企业在做企业内部组织结构角色管理的时候，如果需要删除该企业下某个角色信息，可以调用该接口。调用的前提是该角色下面的所有员工都已经被删除该角色
 */
async function deleteroleCorpRoleEx(request: DeleteroleCorpRoleRequest, runtime: Util.RuntimeOptions): DeleteroleCorpRoleResponse {
  Util.validateModel(request);
  var appParams = Util.stringifyMapValue(Util.toMap(request.params));
  return doRequest('dingtalk.corp.role.deleterole', 'POST', '/router/rest', request.headers, appParams, runtime);
}

model GetrolegroupCorpRoleParams = {
  groupId: int64(description='角色组的Id', name='group_id'),
}

model GetrolegroupCorpRoleRequest = {
  headers?: map[string]string,
  params:GetrolegroupCorpRoleParams,
}

model GetrolegroupCorpRoleResponseBody = {
  result?: {
    roleGroup?: {
      roles?: [
        {
          roleId?: int64(description='角色id', name='role_id'),
          roleName?: string(description='角色名', name='role_name'),
        }
      ](description='角色列表信息', name='roles'),
      groupName?: string(description='角色组名', name='group_name'),
    }(description='角色组信息', name='role_group'),
    dingOpenErrcode?: int64(description='dingOpenErrcode', name='ding_open_errcode'),
    errorMsg?: string(description='errorMsg', name='error_msg'),
    success?: boolean(description='success', name='success'),
  }(description='result', name='result'),
}

model GetrolegroupCorpRoleResponse = {
  headers: map[string]string,
  body: GetrolegroupCorpRoleResponseBody,
}

/**
 * Description: 该接口通过groupId参数可以获取该角色组详细信息以及下面所有关联的角色的信息
 */
async function getrolegroupCorpRole(request: GetrolegroupCorpRoleRequest): GetrolegroupCorpRoleResponse {
  var runtime = new Util.RuntimeOptions{};
  return getrolegroupCorpRoleEx(request, runtime);
}

/**
 * Description: 该接口通过groupId参数可以获取该角色组详细信息以及下面所有关联的角色的信息
 */
async function getrolegroupCorpRoleEx(request: GetrolegroupCorpRoleRequest, runtime: Util.RuntimeOptions): GetrolegroupCorpRoleResponse {
  Util.validateModel(request);
  var appParams = Util.stringifyMapValue(Util.toMap(request.params));
  return doRequest('dingtalk.corp.role.getrolegroup', 'POST', '/router/rest', request.headers, appParams, runtime);
}

model AddrolesforempsCorpRoleParams = {
  rolelidList: [ int64 ](description='角色id list', maxItems=20, name='rolelid_list'),
  useridList: [ string ](description='员工id list', maxItems=100, name='userid_list'),
}

model AddrolesforempsCorpRoleRequest = {
  headers?: map[string]string,
  params:AddrolesforempsCorpRoleParams,
}

model AddrolesforempsCorpRoleResponseBody = {
  result?: {
    dingOpenErrcode?: int64(description='dingOpenErrcode', name='ding_open_errcode'),
    errorMsg?: string(description='errorMsg', name='error_msg'),
    success?: boolean(description='success', name='success'),
  }(description='result', name='result'),
}

model AddrolesforempsCorpRoleResponse = {
  headers: map[string]string,
  body: AddrolesforempsCorpRoleResponseBody,
}

/**
 * Description: 企业在做企业员工管理的时候，需要对部分员工进行角色分类，该接口可以批量为员工增加角色信息
 */
async function addrolesforempsCorpRole(request: AddrolesforempsCorpRoleRequest): AddrolesforempsCorpRoleResponse {
  var runtime = new Util.RuntimeOptions{};
  return addrolesforempsCorpRoleEx(request, runtime);
}

/**
 * Description: 企业在做企业员工管理的时候，需要对部分员工进行角色分类，该接口可以批量为员工增加角色信息
 */
async function addrolesforempsCorpRoleEx(request: AddrolesforempsCorpRoleRequest, runtime: Util.RuntimeOptions): AddrolesforempsCorpRoleResponse {
  Util.validateModel(request);
  var appParams = Util.stringifyMapValue(Util.toMap(request.params));
  return doRequest('dingtalk.corp.role.addrolesforemps', 'POST', '/router/rest', request.headers, appParams, runtime);
}

model RemoverolesforempsCorpRoleParams = {
  roleidList: [ int64 ](description='角色标签id', maxItems=20, name='roleid_list'),
  useridList: [ string ](description='用户userId', maxItems=100, name='userid_list'),
}

model RemoverolesforempsCorpRoleRequest = {
  headers?: map[string]string,
  params:RemoverolesforempsCorpRoleParams,
}

model RemoverolesforempsCorpRoleResponseBody = {
  result?: {
    dingOpenErrcode?: int64(description='dingOpenErrcode', name='ding_open_errcode'),
    errorMsg?: string(description='errorMsg', name='error_msg'),
    success?: boolean(description='success', name='success'),
  }(description='result', name='result'),
}

model RemoverolesforempsCorpRoleResponse = {
  headers: map[string]string,
  body: RemoverolesforempsCorpRoleResponseBody,
}

/**
 * Description: 企业在做企业员工管理的时候，需要对部分员工进行角色分类，该接口可以批量删除员工的角色信息
 */
async function removerolesforempsCorpRole(request: RemoverolesforempsCorpRoleRequest): RemoverolesforempsCorpRoleResponse {
  var runtime = new Util.RuntimeOptions{};
  return removerolesforempsCorpRoleEx(request, runtime);
}

/**
 * Description: 企业在做企业员工管理的时候，需要对部分员工进行角色分类，该接口可以批量删除员工的角色信息
 */
async function removerolesforempsCorpRoleEx(request: RemoverolesforempsCorpRoleRequest, runtime: Util.RuntimeOptions): RemoverolesforempsCorpRoleResponse {
  Util.validateModel(request);
  var appParams = Util.stringifyMapValue(Util.toMap(request.params));
  return doRequest('dingtalk.corp.role.removerolesforemps', 'POST', '/router/rest', request.headers, appParams, runtime);
}

model CancelOapiProcessWorkrecordTaskgroupParams = {
  request?: {
    agentid?: int64(description='应用id', name='agentid'),
    processInstanceId: string(description='实例id', name='process_instance_id'),
    activityId?: string(description='任务组id', name='activity_id'),
    activityIdList?: [ string ](description='任务组id列表', maxItems=20, name='activity_id_list'),
  }(description='request', name='request'),
}

model CancelOapiProcessWorkrecordTaskgroupRequest = {
  headers?: map[string]string,
  params?:CancelOapiProcessWorkrecordTaskgroupParams,
}

model CancelOapiProcessWorkrecordTaskgroupResponseBody = {
  errcode?: int64(description='0', name='errcode'),
  errmsg?: string(description='成功', name='errmsg'),
}

model CancelOapiProcessWorkrecordTaskgroupResponse = {
  headers: map[string]string,
  body: CancelOapiProcessWorkrecordTaskgroupResponseBody,
}

/**
 * Description: 批量取消任务
 */
async function cancelOapiProcessWorkrecordTaskgroup(request: CancelOapiProcessWorkrecordTaskgroupRequest): CancelOapiProcessWorkrecordTaskgroupResponse {
  var runtime = new Util.RuntimeOptions{};
  return cancelOapiProcessWorkrecordTaskgroupEx(request, runtime);
}

/**
 * Description: 批量取消任务
 */
async function cancelOapiProcessWorkrecordTaskgroupEx(request: CancelOapiProcessWorkrecordTaskgroupRequest, runtime: Util.RuntimeOptions): CancelOapiProcessWorkrecordTaskgroupResponse {
  Util.validateModel(request);
  var appParams = Util.stringifyMapValue(Util.toMap(request.params));
  return doRequestOApi('POST', '/topapi/process/workrecord/taskgroup/cancel', request.headers, appParams, runtime);
}

model Get_by_nameOapiProcessParams = {
  name: string(description='模板名称', name='name'),
}

model Get_by_nameOapiProcessRequest = {
  headers?: map[string]string,
  params:Get_by_nameOapiProcessParams,
}

model Get_by_nameOapiProcessResponseBody = {
  errcode?: int64(description='错误码', name='errcode'),
  errmsg?: string(description='错误信息', name='errmsg'),
  processCode?: string(description='模板code', name='process_code'),
}

model Get_by_nameOapiProcessResponse = {
  headers: map[string]string,
  body: Get_by_nameOapiProcessResponseBody,
}

/**
 * Description: 根据模板名称获取模板code
 */
async function get_by_nameOapiProcess(request: Get_by_nameOapiProcessRequest): Get_by_nameOapiProcessResponse {
  var runtime = new Util.RuntimeOptions{};
  return get_by_nameOapiProcessEx(request, runtime);
}

/**
 * Description: 根据模板名称获取模板code
 */
async function get_by_nameOapiProcessEx(request: Get_by_nameOapiProcessRequest, runtime: Util.RuntimeOptions): Get_by_nameOapiProcessResponse {
  Util.validateModel(request);
  var appParams = Util.stringifyMapValue(Util.toMap(request.params));
  return doRequestOApi('POST', '/topapi/process/get_by_name', request.headers, appParams, runtime);
}

model SendstaffgroupmessageOapiImpaasNewretailParams = {
  msgType?: int64(description='消息类型', name='msg_type'),
  sender?: string(description='系统账号名', name='sender'),
  chatId?: string(description='加密后的群号', name='chat_id'),
  content?: string(description='消息内容', name='content'),
}

model SendstaffgroupmessageOapiImpaasNewretailRequest = {
  headers?: map[string]string,
  params?:SendstaffgroupmessageOapiImpaasNewretailParams,
}

model SendstaffgroupmessageOapiImpaasNewretailResponseBody = {
  result?: int64(description='返回结果taskid', name='result'),
  errcode?: int64(description='dingOpenErrcode', name='errcode'),
  errmsg?: string(description='errorMsg', name='errmsg'),
}

model SendstaffgroupmessageOapiImpaasNewretailResponse = {
  headers: map[string]string,
  body: SendstaffgroupmessageOapiImpaasNewretailResponseBody,
}

/**
 * Description: 新零售场景下，先创建某企业的内部群。
然后用特定的系统账号向群内发送群聊消息
 */
async function sendstaffgroupmessageOapiImpaasNewretail(request: SendstaffgroupmessageOapiImpaasNewretailRequest): SendstaffgroupmessageOapiImpaasNewretailResponse {
  var runtime = new Util.RuntimeOptions{};
  return sendstaffgroupmessageOapiImpaasNewretailEx(request, runtime);
}

/**
 * Description: 新零售场景下，先创建某企业的内部群。
然后用特定的系统账号向群内发送群聊消息
 */
async function sendstaffgroupmessageOapiImpaasNewretailEx(request: SendstaffgroupmessageOapiImpaasNewretailRequest, runtime: Util.RuntimeOptions): SendstaffgroupmessageOapiImpaasNewretailResponse {
  Util.validateModel(request);
  var appParams = Util.stringifyMapValue(Util.toMap(request.params));
  return doRequestOApi('POST', '/topapi/impaas/newretail/sendstaffgroupmessage', request.headers, appParams, runtime);
}

model RemovevisitorOapiSmartdeviceVisitorParams = {
  reservationId: string(description='预约编号', name='reservation_id'),
}

model RemovevisitorOapiSmartdeviceVisitorRequest = {
  headers?: map[string]string,
  params:RemovevisitorOapiSmartdeviceVisitorParams,
}

model RemovevisitorOapiSmartdeviceVisitorResponseBody = {
  errcode?: int64(description='dingOpenErrcode', name='errcode'),
  errmsg?: string(description='errorMsg', name='errmsg'),
  result?: boolean(description='result', name='result'),
  success?: boolean(description='success', name='success'),
}

model RemovevisitorOapiSmartdeviceVisitorResponse = {
  headers: map[string]string,
  body: RemovevisitorOapiSmartdeviceVisitorResponseBody,
}

/**
 * Description: ISV向钉钉智能硬件取消授权企业的访客邀约记录，以实现与智能识别设备的打通流程
 */
async function removevisitorOapiSmartdeviceVisitor(request: RemovevisitorOapiSmartdeviceVisitorRequest): RemovevisitorOapiSmartdeviceVisitorResponse {
  var runtime = new Util.RuntimeOptions{};
  return removevisitorOapiSmartdeviceVisitorEx(request, runtime);
}

/**
 * Description: ISV向钉钉智能硬件取消授权企业的访客邀约记录，以实现与智能识别设备的打通流程
 */
async function removevisitorOapiSmartdeviceVisitorEx(request: RemovevisitorOapiSmartdeviceVisitorRequest, runtime: Util.RuntimeOptions): RemovevisitorOapiSmartdeviceVisitorResponse {
  Util.validateModel(request);
  var appParams = Util.stringifyMapValue(Util.toMap(request.params));
  return doRequestOApi('POST', '/topapi/smartdevice/visitor/removevisitor', request.headers, appParams, runtime);
}

model AddOapiImpaasUserSubaccountParams = {
  request?: {
    adminaccountId?: string(description='主账号id', name='adminaccount_id'),
    subaccountId?: string(description='子账号id', name='subaccount_id'),
    channel?: string(description='业务方channel', name='channel'),
  }(description='添加子账号入参', name='request'),
}

model AddOapiImpaasUserSubaccountRequest = {
  headers?: map[string]string,
  params?:AddOapiImpaasUserSubaccountParams,
}

model AddOapiImpaasUserSubaccountResponseBody = {
  result?: {
    imOpenid?: string(description='im的唯一id', name='im_openid'),
  }(description='添加账号出参', name='result'),
  errcode?: int64(description='错误码  -1 系统异常 40035 参数错误', name='errcode'),
  errmsg?: string(description='错误信息', name='errmsg'),
  success?: boolean(description='接口是否调用成功', name='success'),
}

model AddOapiImpaasUserSubaccountResponse = {
  headers: map[string]string,
  body: AddOapiImpaasUserSubaccountResponseBody,
}

/**
 * Description: 业务方（icbu)添加了子账号后需要同步到钉钉，
该接口提供子账号创建及子账号加入主账号组织功能
 */
async function addOapiImpaasUserSubaccount(request: AddOapiImpaasUserSubaccountRequest): AddOapiImpaasUserSubaccountResponse {
  var runtime = new Util.RuntimeOptions{};
  return addOapiImpaasUserSubaccountEx(request, runtime);
}

/**
 * Description: 业务方（icbu)添加了子账号后需要同步到钉钉，
该接口提供子账号创建及子账号加入主账号组织功能
 */
async function addOapiImpaasUserSubaccountEx(request: AddOapiImpaasUserSubaccountRequest, runtime: Util.RuntimeOptions): AddOapiImpaasUserSubaccountResponse {
  Util.validateModel(request);
  var appParams = Util.stringifyMapValue(Util.toMap(request.params));
  return doRequestOApi('POST', '/topapi/impaas/user/subaccount/add', request.headers, appParams, runtime);
}

model DeleteOapiImpaasUserSubaccountParams = {
  request?: {
    subaccountId?: string(description='子账号id', name='subaccount_id'),
    adminaccountId?: string(description='主账号id', name='adminaccount_id'),
    channel?: string(description='业务方channel', name='channel'),
  }(description='删除子账号入参', name='request'),
}

model DeleteOapiImpaasUserSubaccountRequest = {
  headers?: map[string]string,
  params?:DeleteOapiImpaasUserSubaccountParams,
}

model DeleteOapiImpaasUserSubaccountResponseBody = {
  errcode?: int64(description='错误码  -1 系统异常 40035 参数错误', name='errcode'),
  errmsg?: string(description='错误信息', name='errmsg'),
  success?: boolean(description='接口是否调用成功', name='success'),
}

model DeleteOapiImpaasUserSubaccountResponse = {
  headers: map[string]string,
  body: DeleteOapiImpaasUserSubaccountResponseBody,
}

/**
 * Description: 业务方（icbu)删除了子账号后需要同步到钉钉，
该接口提供子账号退出主账号组织功能
 */
async function deleteOapiImpaasUserSubaccount(request: DeleteOapiImpaasUserSubaccountRequest): DeleteOapiImpaasUserSubaccountResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteOapiImpaasUserSubaccountEx(request, runtime);
}

/**
 * Description: 业务方（icbu)删除了子账号后需要同步到钉钉，
该接口提供子账号退出主账号组织功能
 */
async function deleteOapiImpaasUserSubaccountEx(request: DeleteOapiImpaasUserSubaccountRequest, runtime: Util.RuntimeOptions): DeleteOapiImpaasUserSubaccountResponse {
  Util.validateModel(request);
  var appParams = Util.stringifyMapValue(Util.toMap(request.params));
  return doRequestOApi('POST', '/topapi/impaas/user/subaccount/delete', request.headers, appParams, runtime);
}

model AddchatbotinstanceCorpChatbotParams = {
  chatbotId: string(description='机器人id，由钉钉事先分配', name='chatbot_id'),
  openConversationId: string(description='创建群时返回的openConvsationId', name='open_conversation_id'),
  name?: string(description='机器人名字(如果为空，默认是机器人安装时的名字)', name='name'),
  iconMediaId?: string(description='机器人头像(如果为空，默认是机器人安装时的头像)', name='icon_media_id'),
}

model AddchatbotinstanceCorpChatbotRequest = {
  headers?: map[string]string,
  params:AddchatbotinstanceCorpChatbotParams,
}

model AddchatbotinstanceCorpChatbotResponseBody = {
  result?: {
    result?: {
      chatbotUserId?: string(description='机器人实例userId', name='chatbot_user_id'),
      webhook?: string(description='机器人发消息时的地址', name='webhook'),
    }(description='result', name='result'),
    dingOpenErrcode?: int64(description='dingOpenErrcode', name='ding_open_errcode'),
    errorMsg?: string(description='errorMsg', name='error_msg'),
    success?: boolean(description='success', name='success'),
  }(description='result', name='result'),
}

model AddchatbotinstanceCorpChatbotResponse = {
  headers: map[string]string,
  body: AddchatbotinstanceCorpChatbotResponseBody,
}

/**
 * Description: 企业应用，向自己的企业群，添加已安装的企业机器人
 */
async function addchatbotinstanceCorpChatbot(request: AddchatbotinstanceCorpChatbotRequest): AddchatbotinstanceCorpChatbotResponse {
  var runtime = new Util.RuntimeOptions{};
  return addchatbotinstanceCorpChatbotEx(request, runtime);
}

/**
 * Description: 企业应用，向自己的企业群，添加已安装的企业机器人
 */
async function addchatbotinstanceCorpChatbotEx(request: AddchatbotinstanceCorpChatbotRequest, runtime: Util.RuntimeOptions): AddchatbotinstanceCorpChatbotResponse {
  Util.validateModel(request);
  var appParams = Util.stringifyMapValue(Util.toMap(request.params));
  return doRequest('dingtalk.corp.chatbot.addchatbotinstance', 'POST', '/router/rest', request.headers, appParams, runtime);
}

model DeleteOapiProcessParams = {
  request: {
    agentid?: int64(description='微应用agentId，ISV必填', name='agentid'),
    processCode: string(description='流程code', name='process_code'),
    cleanRunningTask?: boolean(description='是否清理运行中的任务', name='clean_running_task'),
  }(description='请求对象', name='request'),
}

model DeleteOapiProcessRequest = {
  headers?: map[string]string,
  params:DeleteOapiProcessParams,
}

model DeleteOapiProcessResponseBody = {
  success?: boolean(description='成功标识', name='success'),
  errcode?: int64(description='错误码', name='errcode'),
  errmsg?: string(description='错误信息', name='errmsg'),
}

model DeleteOapiProcessResponse = {
  headers: map[string]string,
  body: DeleteOapiProcessResponseBody,
}

/**
 * Description: 删除创建的审批模板
 */
async function deleteOapiProcess(request: DeleteOapiProcessRequest): DeleteOapiProcessResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteOapiProcessEx(request, runtime);
}

/**
 * Description: 删除创建的审批模板
 */
async function deleteOapiProcessEx(request: DeleteOapiProcessRequest, runtime: Util.RuntimeOptions): DeleteOapiProcessResponse {
  Util.validateModel(request);
  var appParams = Util.stringifyMapValue(Util.toMap(request.params));
  return doRequestOApi('POST', '/topapi/process/delete', request.headers, appParams, runtime);
}

model ListOapiCollectionFormParams = {
  bizType?: int64(description='填表类型。0表示通用填表，1表示教育版填表', name='biz_type'),
  creator?: string(description='填表创建人userid', name='creator'),
  offset: int64(description='分页游标，从0开始。后续取返回结果中next_cursor的值', name='offset'),
  size: int64(description='分页大小，最大200', maxLength=500, name='size'),
}

model ListOapiCollectionFormRequest = {
  headers?: map[string]string,
  params:ListOapiCollectionFormParams,
}

model ListOapiCollectionFormResponseBody = {
  errcode?: int64(description='错误码', name='errcode'),
  errmsg?: string(description='错误信息', name='errmsg'),
  result?: {
    hasMore?: boolean(description='是否有下一页', name='has_more'),
    nextCursor?: int64(description='下次分页的起始offset', name='next_cursor'),
    list?: [
      {
        formCode?: string(description='表单code', name='form_code'),
        name?: string(description='填表名称', name='name'),
        memo?: string(description='填表提示', name='memo'),
        setting?: {
          formType?: int64(description='0表示通用智能填表，1表示教育版填表', name='form_type'),
          loopTime?: string(description='填表时间', name='loop_time'),
          loopDays?: [ int64 ](description='填表周期，周一到周日分别用1-7表示', name='loop_days'),
          shouldParticipationCnt?: int64(description='应填人数', name='should_participation_cnt'),
          endTime?: string(description='填表截止时间', pattern='\\\\d{4}[-]\\\\d{1,2}[-]\\\\d{1,2}[T]\\\\d{2}:\\\\d{2}:\\\\d{2}[Z]', name='end_time'),
          createTime?: string(description='创建时间', pattern='\\\\d{4}[-]\\\\d{1,2}[-]\\\\d{1,2}[T]\\\\d{2}:\\\\d{2}:\\\\d{2}[Z]', name='create_time'),
          bizType?: int64(description='表单类型', name='biz_type'),
          stop?: boolean(description='填表是否终止的标记', name='stop'),
        }(description='设置', name='setting'),
        creator?: string(description='创建人', name='creator'),
      }
    ](description='列表', name='list'),
  }(description='结果', name='result'),
}

model ListOapiCollectionFormResponse = {
  headers: map[string]string,
  body: ListOapiCollectionFormResponseBody,
}

/**
 * Description: 获取用户创建的填表模板
 */
async function listOapiCollectionForm(request: ListOapiCollectionFormRequest): ListOapiCollectionFormResponse {
  var runtime = new Util.RuntimeOptions{};
  return listOapiCollectionFormEx(request, runtime);
}

/**
 * Description: 获取用户创建的填表模板
 */
async function listOapiCollectionFormEx(request: ListOapiCollectionFormRequest, runtime: Util.RuntimeOptions): ListOapiCollectionFormResponse {
  Util.validateModel(request);
  var appParams = Util.stringifyMapValue(Util.toMap(request.params));
  return doRequestOApi('POST', '/topapi/collection/form/list', request.headers, appParams, runtime);
}

model CreateOapiCrmObjectdataCustomerParams = {
  instance: {
    creatorUserid: string(description='记录创建人的用户ID', name='creator_userid'),
    creatorNick?: string(description='记录创建人的昵称', name='creator_nick'),
    data: string(description='数据内容', name='data'),
    extendData?: string(description='扩展数据内容', name='extend_data'),
    permission?: {
      participantUserids?: [ string ](description='协同人的用户ID', maxItems=50, name='participant_userids'),
      ownerUserids?: [ string ](description='负责人的用户ID', maxItems=50, name='owner_userids'),
    }(description='权限', name='permission'),
  }(description='客户数据', name='instance'),
}

model CreateOapiCrmObjectdataCustomerRequest = {
  headers?: map[string]string,
  params:CreateOapiCrmObjectdataCustomerParams,
}

model CreateOapiCrmObjectdataCustomerResponseBody = {
  result?: {
    instanceId?: string(description='客户数据id', name='instance_id'),
  }(description='结果', name='result'),
  success?: boolean(description='执行结果', name='success'),
  errcode?: int64(description='错误码', name='errcode'),
  errmsg?: string(description='错误信息', name='errmsg'),
}

model CreateOapiCrmObjectdataCustomerResponse = {
  headers: map[string]string,
  body: CreateOapiCrmObjectdataCustomerResponseBody,
}

/**
 * Description: CRM主数据，创建客户数据
 */
async function createOapiCrmObjectdataCustomer(request: CreateOapiCrmObjectdataCustomerRequest): CreateOapiCrmObjectdataCustomerResponse {
  var runtime = new Util.RuntimeOptions{};
  return createOapiCrmObjectdataCustomerEx(request, runtime);
}

/**
 * Description: CRM主数据，创建客户数据
 */
async function createOapiCrmObjectdataCustomerEx(request: CreateOapiCrmObjectdataCustomerRequest, runtime: Util.RuntimeOptions): CreateOapiCrmObjectdataCustomerResponse {
  Util.validateModel(request);
  var appParams = Util.stringifyMapValue(Util.toMap(request.params));
  return doRequestOApi('POST', '/topapi/crm/objectdata/customer/create', request.headers, appParams, runtime);
}

model UpdateOapiCrmObjectdataContactParams = {
  instance: {
    data: string(description='数据内容', name='data'),
    extendData?: string(description='扩展数据内容', name='extend_data'),
    permission?: {
      participantUserids?: [ string ](description='协同人的用户ID', maxItems=50, name='participant_userids'),
      ownerUserids?: [ string ](description='负责人的用户ID', maxItems=50, name='owner_userids'),
    }(description='权限', name='permission'),
    instanceId: string(description='联系人数据id', name='instance_id'),
    modifierUserid: string(description='修改的钉钉用户id', name='modifier_userid'),
    modifierNick?: string(description='修改的钉钉用户nick', name='modifier_nick'),
  }(description='联系人数据', name='instance'),
}

model UpdateOapiCrmObjectdataContactRequest = {
  headers?: map[string]string,
  params:UpdateOapiCrmObjectdataContactParams,
}

model UpdateOapiCrmObjectdataContactResponseBody = {
  result?: {
    instanceId?: string(description='联系人数据id', name='instance_id'),
  }(description='结果', name='result'),
  success?: boolean(description='执行结果', name='success'),
  errcode?: int64(description='错误码', name='errcode'),
  errmsg?: string(description='错误信息', name='errmsg'),
}

model UpdateOapiCrmObjectdataContactResponse = {
  headers: map[string]string,
  body: UpdateOapiCrmObjectdataContactResponseBody,
}

/**
 * Description: CRM主数据，更新联系人数据
 */
async function updateOapiCrmObjectdataContact(request: UpdateOapiCrmObjectdataContactRequest): UpdateOapiCrmObjectdataContactResponse {
  var runtime = new Util.RuntimeOptions{};
  return updateOapiCrmObjectdataContactEx(request, runtime);
}

/**
 * Description: CRM主数据，更新联系人数据
 */
async function updateOapiCrmObjectdataContactEx(request: UpdateOapiCrmObjectdataContactRequest, runtime: Util.RuntimeOptions): UpdateOapiCrmObjectdataContactResponse {
  Util.validateModel(request);
  var appParams = Util.stringifyMapValue(Util.toMap(request.params));
  return doRequestOApi('POST', '/topapi/crm/objectdata/contact/update', request.headers, appParams, runtime);
}

model GetCorpLivenessRequest = {
  headers?: map[string]string,
}

model GetCorpLivenessResponseBody = {
  result?: {
    dingOpenErrcode?: int64(description='dingOpenErrcode', name='ding_open_errcode'),
    success?: boolean(description='success', name='success'),
    errorMsg?: string(description='errorMsg', name='error_msg'),
    result?: {
      liveness?: string(description='活跃度，L1：不活跃，L2：低活跃，L3：中活跃，L4：高活跃，L5：超活跃', name='liveness'),
    }(description='result', name='result'),
  }(description='result', name='result'),
}

model GetCorpLivenessResponse = {
  headers: map[string]string,
  body: GetCorpLivenessResponseBody,
}

/**
 * Description: 获取企业活跃度
 */
async function getCorpLiveness(request: GetCorpLivenessRequest): GetCorpLivenessResponse {
  var runtime = new Util.RuntimeOptions{};
  return getCorpLivenessEx(request, runtime);
}

/**
 * Description: 获取企业活跃度
 */
async function getCorpLivenessEx(request: GetCorpLivenessRequest, runtime: Util.RuntimeOptions): GetCorpLivenessResponse {
  Util.validateModel(request);
  var appParams : map[string]string = {};
  return doRequest('dingtalk.corp.liveness.get', 'POST', '/router/rest', request.headers, appParams, runtime);
}

model UpdateOapiCrmObjectdataCustomerParams = {
  instance: {
    data: string(description='数据内容', name='data'),
    extendData?: string(description='扩展数据内容', name='extend_data'),
    permission?: {
      participantUserids?: [ string ](description='协同人的用户ID', maxItems=50, name='participant_userids'),
      ownerUserids?: [ string ](description='负责人的用户ID', maxItems=50, name='owner_userids'),
    }(description='权限', name='permission'),
    instanceId: string(description='客户数据id', name='instance_id'),
    modifierUserid: string(description='修改的钉钉用户id', name='modifier_userid'),
    modifierNick?: string(description='修改的钉钉用户nick', name='modifier_nick'),
  }(description='客户数据', name='instance'),
}

model UpdateOapiCrmObjectdataCustomerRequest = {
  headers?: map[string]string,
  params:UpdateOapiCrmObjectdataCustomerParams,
}

model UpdateOapiCrmObjectdataCustomerResponseBody = {
  result?: {
    instanceId?: string(description='客户数据id', name='instance_id'),
  }(description='结果', name='result'),
  success?: boolean(description='执行结果', name='success'),
  errcode?: int64(description='错误码', name='errcode'),
  errmsg?: string(description='错误信息', name='errmsg'),
}

model UpdateOapiCrmObjectdataCustomerResponse = {
  headers: map[string]string,
  body: UpdateOapiCrmObjectdataCustomerResponseBody,
}

/**
 * Description: 钉钉PaaS主数据-更新CRM客户数据
 */
async function updateOapiCrmObjectdataCustomer(request: UpdateOapiCrmObjectdataCustomerRequest): UpdateOapiCrmObjectdataCustomerResponse {
  var runtime = new Util.RuntimeOptions{};
  return updateOapiCrmObjectdataCustomerEx(request, runtime);
}

/**
 * Description: 钉钉PaaS主数据-更新CRM客户数据
 */
async function updateOapiCrmObjectdataCustomerEx(request: UpdateOapiCrmObjectdataCustomerRequest, runtime: Util.RuntimeOptions): UpdateOapiCrmObjectdataCustomerResponse {
  Util.validateModel(request);
  var appParams = Util.stringifyMapValue(Util.toMap(request.params));
  return doRequestOApi('POST', '/topapi/crm/objectdata/customer/update', request.headers, appParams, runtime);
}

model CreateOapiCrmObjectdataContactParams = {
  instance: {
    creatorUserid: string(description='记录创建人的用户ID', name='creator_userid'),
    creatorNick?: string(description='记录创建人的昵称', name='creator_nick'),
    data: string(description='数据内容', name='data'),
    extendData?: string(description='扩展数据内容', name='extend_data'),
    permission?: {
      participantUserids?: [ string ](description='协同人的用户ID', maxItems=50, name='participant_userids'),
      ownerUserids?: [ string ](description='负责人的用户ID', maxItems=50, name='owner_userids'),
    }(description='权限', name='permission'),
  }(description='联系人数据', name='instance'),
}

model CreateOapiCrmObjectdataContactRequest = {
  headers?: map[string]string,
  params:CreateOapiCrmObjectdataContactParams,
}

model CreateOapiCrmObjectdataContactResponseBody = {
  success?: boolean(description='执行结果', name='success'),
  errcode?: int64(description='错误码', name='errcode'),
  errmsg?: string(description='错误信息', name='errmsg'),
  result?: {
    instanceId?: string(description='联系人数据id', name='instance_id'),
  }(description='结果', name='result'),
}

model CreateOapiCrmObjectdataContactResponse = {
  headers: map[string]string,
  body: CreateOapiCrmObjectdataContactResponseBody,
}

/**
 * Description: CRM主数据，创建联系人数据
 */
async function createOapiCrmObjectdataContact(request: CreateOapiCrmObjectdataContactRequest): CreateOapiCrmObjectdataContactResponse {
  var runtime = new Util.RuntimeOptions{};
  return createOapiCrmObjectdataContactEx(request, runtime);
}

/**
 * Description: CRM主数据，创建联系人数据
 */
async function createOapiCrmObjectdataContactEx(request: CreateOapiCrmObjectdataContactRequest, runtime: Util.RuntimeOptions): CreateOapiCrmObjectdataContactResponse {
  Util.validateModel(request);
  var appParams = Util.stringifyMapValue(Util.toMap(request.params));
  return doRequestOApi('POST', '/topapi/crm/objectdata/contact/create', request.headers, appParams, runtime);
}

model UnbindOapiSmartdeviceDeviceParams = {
  deviceUnbindVo?: {
    pk: string(description='产品标识', name='pk'),
    deviceName?: string(description='设备名称，和设备id不能同时为空', name='device_name'),
    deviceId?: string(description='设备id，和设备名称不能同时为空', name='device_id'),
    userid?: string(description='操作者id', name='userid'),
  }(description='解绑参数', name='device_unbind_vo'),
}

model UnbindOapiSmartdeviceDeviceRequest = {
  headers?: map[string]string,
  params?:UnbindOapiSmartdeviceDeviceParams,
}

model UnbindOapiSmartdeviceDeviceResponseBody = {
  success?: boolean(description='是否成功', name='success'),
  errcode?: int64(description='错误代码', name='errcode'),
  errmsg?: string(description='错误信息', name='errmsg'),
}

model UnbindOapiSmartdeviceDeviceResponse = {
  headers: map[string]string,
  body: UnbindOapiSmartdeviceDeviceResponseBody,
}

/**
 * Description: 解除企业下的智能硬件设备绑定
 */
async function unbindOapiSmartdeviceDevice(request: UnbindOapiSmartdeviceDeviceRequest): UnbindOapiSmartdeviceDeviceResponse {
  var runtime = new Util.RuntimeOptions{};
  return unbindOapiSmartdeviceDeviceEx(request, runtime);
}

/**
 * Description: 解除企业下的智能硬件设备绑定
 */
async function unbindOapiSmartdeviceDeviceEx(request: UnbindOapiSmartdeviceDeviceRequest, runtime: Util.RuntimeOptions): UnbindOapiSmartdeviceDeviceResponse {
  Util.validateModel(request);
  var appParams = Util.stringifyMapValue(Util.toMap(request.params));
  return doRequestOApi('POST', '/topapi/smartdevice/device/unbind', request.headers, appParams, runtime);
}

model UpdatenickOapiSmartdeviceDeviceParams = {
  deviceNickModifyVo?: {
    pk: string(description='产品标识', name='pk'),
    deviceName?: string(description='设备名称，和设备id不能同时为空', name='device_name'),
    deviceId?: string(description='设备id，和设备名称不能同时为空', name='device_id'),
    nick: string(description='新的昵称', name='nick'),
  }(description='昵称修改参数', name='device_nick_modify_vo'),
}

model UpdatenickOapiSmartdeviceDeviceRequest = {
  headers?: map[string]string,
  params?:UpdatenickOapiSmartdeviceDeviceParams,
}

model UpdatenickOapiSmartdeviceDeviceResponseBody = {
  success?: boolean(description='是否成功', name='success'),
  errcode?: int64(description='错误代码', name='errcode'),
  errmsg?: string(description='错误信息', name='errmsg'),
}

model UpdatenickOapiSmartdeviceDeviceResponse = {
  headers: map[string]string,
  body: UpdatenickOapiSmartdeviceDeviceResponseBody,
}

/**
 * Description: 解除企业下的智能硬件设备绑定
 */
async function updatenickOapiSmartdeviceDevice(request: UpdatenickOapiSmartdeviceDeviceRequest): UpdatenickOapiSmartdeviceDeviceResponse {
  var runtime = new Util.RuntimeOptions{};
  return updatenickOapiSmartdeviceDeviceEx(request, runtime);
}

/**
 * Description: 解除企业下的智能硬件设备绑定
 */
async function updatenickOapiSmartdeviceDeviceEx(request: UpdatenickOapiSmartdeviceDeviceRequest, runtime: Util.RuntimeOptions): UpdatenickOapiSmartdeviceDeviceResponse {
  Util.validateModel(request);
  var appParams = Util.stringifyMapValue(Util.toMap(request.params));
  return doRequestOApi('POST', '/topapi/smartdevice/device/updatenick', request.headers, appParams, runtime);
}

model QueryOapiSmartdeviceDeviceParams = {
  deviceQueryVo?: {
    pk: string(description='产品唯一编码', name='pk'),
    deviceName?: string(description='设备名称，和设备id不能同时为空', name='device_name'),
    deviceId?: string(description='设备id，和设备名称不能同时为空', name='device_id'),
  }(description='设备查询对象', name='device_query_vo'),
}

model QueryOapiSmartdeviceDeviceRequest = {
  headers?: map[string]string,
  params?:QueryOapiSmartdeviceDeviceParams,
}

model QueryOapiSmartdeviceDeviceResponseBody = {
  result?: {
    deviceMac?: string(description='设备mac', name='device_mac'),
    corpId?: string(description='企业id', name='corp_id'),
    nick?: string(description='设备nick', name='nick'),
    deviceId?: string(description='设备id', name='device_id'),
    deviceName?: string(description='设备名称', name='device_name'),
    pk?: string(description='产品标识', name='pk'),
    userid?: string(description='员工id', name='userid'),
    ext?: string(description='备注信息', name='ext'),
    sn?: string(description='设备序列号', name='sn'),
  }(description='返回结果', name='result'),
  success?: boolean(description='是否成功', name='success'),
  errcode?: int64(description='错误代码', name='errcode'),
  errmsg?: string(description='错误信息', name='errmsg'),
}

model QueryOapiSmartdeviceDeviceResponse = {
  headers: map[string]string,
  body: QueryOapiSmartdeviceDeviceResponseBody,
}

/**
 * Description: 查询企业下的智能硬件设备详情
 */
async function queryOapiSmartdeviceDevice(request: QueryOapiSmartdeviceDeviceRequest): QueryOapiSmartdeviceDeviceResponse {
  var runtime = new Util.RuntimeOptions{};
  return queryOapiSmartdeviceDeviceEx(request, runtime);
}

/**
 * Description: 查询企业下的智能硬件设备详情
 */
async function queryOapiSmartdeviceDeviceEx(request: QueryOapiSmartdeviceDeviceRequest, runtime: Util.RuntimeOptions): QueryOapiSmartdeviceDeviceResponse {
  Util.validateModel(request);
  var appParams = Util.stringifyMapValue(Util.toMap(request.params));
  return doRequestOApi('POST', '/topapi/smartdevice/device/query', request.headers, appParams, runtime);
}

model ListbypageOapiUserParams = {
  lang?: string(description='通讯录语言(默认zh_CN另外支持en_US)', name='lang'),
  departmentId?: int64(description='获取的部门id', name='department_id'),
  offset: int64(description='支持分页查询，与size参数同时设置时才生效，此参数代表偏移量', name='offset'),
  size: int64(description='支持分页查询，与offset参数同时设置时才生效，此参数代表分页大小，最大100', name='size'),
  order?: string(description='支持分页查询，部门成员的排序规则，默认不传是按自定义排序；entry_asc代表按照进入部门的时间升序，entry_desc代表按照进入部门的时间降序，modify_asc代表按照部门信息修改时间升序，modify_desc代表按照部门信息修改时间降序，custom代表用户定义(未定义时按照拼音)排序', name='order'),
}

model ListbypageOapiUserRequest = {
  headers?: map[string]string,
  params:ListbypageOapiUserParams,
}

model ListbypageOapiUserResponseBody = {
  errcode?: int64(description='errcode', name='errcode'),
  errmsg?: string(description='errmsg', name='errmsg'),
  hasMore?: boolean(description='hasMore', name='hasMore'),
  userlist?: [
    {
      userid?: string(description='userid', name='userid'),
      order?: int64(description='order', name='order'),
      dingId?: string(description='dingId', name='dingId'),
      unionid?: string(description='unionid', name='unionid'),
      mobile?: string(description='mobile', name='mobile'),
      tel?: string(description='tel', name='tel'),
      workPlace?: string(description='workPlace', name='workPlace'),
      remark?: string(description='remark', name='remark'),
      isAdmin?: boolean(description='isAdmin', name='isAdmin'),
      isBoss?: boolean(description='isBoss', name='isBoss'),
      isHide?: boolean(description='isHide', name='isHide'),
      isLeader?: boolean(description='isLeader', name='isLeader'),
      name?: string(description='name', name='name'),
      active?: boolean(description='active', name='active'),
      department?: [ int64 ](description='department', name='department'),
      position?: string(description='position', name='position'),
      email?: string(description='email', name='email'),
      orgEmail?: string(description='orgEmail', name='orgEmail'),
      avatar?: string(description='avatar', name='avatar'),
      jobnumber?: string(description='jobnumber', name='jobnumber'),
      hiredDate?: string(description='hiredDate', pattern='\\\\d{4}[-]\\\\d{1,2}[-]\\\\d{1,2}[T]\\\\d{2}:\\\\d{2}:\\\\d{2}[Z]', name='hiredDate'),
      extattr?: string(description='extattr', name='extattr'),
    }
  ](description='userlist', name='userlist'),
}

model ListbypageOapiUserResponse = {
  headers: map[string]string,
  body: ListbypageOapiUserResponseBody,
}

/**
 * Description: 获取部门成员（详情）
 */
async function listbypageOapiUser(request: ListbypageOapiUserRequest): ListbypageOapiUserResponse {
  var runtime = new Util.RuntimeOptions{};
  return listbypageOapiUserEx(request, runtime);
}

/**
 * Description: 获取部门成员（详情）
 */
async function listbypageOapiUserEx(request: ListbypageOapiUserRequest, runtime: Util.RuntimeOptions): ListbypageOapiUserResponse {
  Util.validateModel(request);
  var appParams = Util.stringifyMapValue(Util.toMap(request.params));
  return doRequestOApi('GET', '/user/listbypage', request.headers, appParams, runtime);
}

model QuerylistOapiSmartdeviceDeviceParams = {
  pageQueryVo: {
    pk: string(description='产品唯一编码', name='pk'),
    cursor: int64(description='游标地址,第一页填0', name='cursor'),
    size: int64(description='分页大小，最大20', name='size'),
  }(description='列表查询对象', name='page_query_vo'),
}

model QuerylistOapiSmartdeviceDeviceRequest = {
  headers?: map[string]string,
  params:QuerylistOapiSmartdeviceDeviceParams,
}

model QuerylistOapiSmartdeviceDeviceResponseBody = {
  result?: {
    nextCursor?: int64(description='下一页的游标', name='next_cursor'),
    hasMore?: boolean(description='是否有下一页', name='has_more'),
    list?: [
      {
        corpId?: string(description='企业id', name='corp_id'),
        deviceMac?: string(description='设备mac', name='device_mac'),
        nick?: string(description='设备nick', name='nick'),
        deviceId?: string(description='设备id', name='device_id'),
        deviceName?: string(description='设备名称', name='device_name'),
        pk?: string(description='产品标识', name='pk'),
        userid?: string(description='绑定的员工id', name='userid'),
        ext?: string(description='备注信息', name='ext'),
        sn?: string(description='设备序列号', name='sn'),
      }
    ](description='设备类别', name='list'),
  }(description='返回结果', name='result'),
  success?: boolean(description='是否成功', name='success'),
  errcode?: int64(description='错误代码', name='errcode'),
  errmsg?: string(description='错误信息', name='errmsg'),
}

model QuerylistOapiSmartdeviceDeviceResponse = {
  headers: map[string]string,
  body: QuerylistOapiSmartdeviceDeviceResponseBody,
}

/**
 * Description: 查询企业下的智能硬件设备列表
 */
async function querylistOapiSmartdeviceDevice(request: QuerylistOapiSmartdeviceDeviceRequest): QuerylistOapiSmartdeviceDeviceResponse {
  var runtime = new Util.RuntimeOptions{};
  return querylistOapiSmartdeviceDeviceEx(request, runtime);
}

/**
 * Description: 查询企业下的智能硬件设备列表
 */
async function querylistOapiSmartdeviceDeviceEx(request: QuerylistOapiSmartdeviceDeviceRequest, runtime: Util.RuntimeOptions): QuerylistOapiSmartdeviceDeviceResponse {
  Util.validateModel(request);
  var appParams = Util.stringifyMapValue(Util.toMap(request.params));
  return doRequestOApi('POST', '/topapi/smartdevice/device/querylist', request.headers, appParams, runtime);
}

model QueryOapiChatBanwordsParams = {
  chatid: string(description='会话ID', name='chatid'),
  userid?: string(description='被查询的用户ID', name='userid'),
}

model QueryOapiChatBanwordsRequest = {
  headers?: map[string]string,
  params:QueryOapiChatBanwordsParams,
}

model QueryOapiChatBanwordsResponseBody = {
  success?: boolean(description='是否成功', name='success'),
  errcode?: int64(description='错误码', name='errcode'),
  errmsg?: string(description='错误信息', name='errmsg'),
  result?: {
    userBanWords?: {
      startTime?: int64(description='开始禁言的时间戳', name='start_time'),
      banWordsStatus?: boolean(description='true为该用户禁言，false该用户没有被禁言', name='ban_words_status'),
      endTime?: int64(description='结束禁言的时间戳', name='end_time'),
    }(description='单个人禁言的状态', name='user_ban_words'),
    allBanWords?: boolean(description='true为开启全员禁言，false为关闭全员禁言', name='all_ban_words'),
  }(description='结果集', name='result'),
}

model QueryOapiChatBanwordsResponse = {
  headers: map[string]string,
  body: QueryOapiChatBanwordsResponseBody,
}

/**
 * Description: 查询群是否处于禁言状态，查询单个人在群中的禁言状态
 */
async function queryOapiChatBanwords(request: QueryOapiChatBanwordsRequest): QueryOapiChatBanwordsResponse {
  var runtime = new Util.RuntimeOptions{};
  return queryOapiChatBanwordsEx(request, runtime);
}

/**
 * Description: 查询群是否处于禁言状态，查询单个人在群中的禁言状态
 */
async function queryOapiChatBanwordsEx(request: QueryOapiChatBanwordsRequest, runtime: Util.RuntimeOptions): QueryOapiChatBanwordsResponse {
  Util.validateModel(request);
  var appParams = Util.stringifyMapValue(Util.toMap(request.params));
  return doRequestOApi('POST', '/topapi/chat/banwords/query', request.headers, appParams, runtime);
}

model ApplyoutidOapiSmartdeviceParams = {
  devServId: int64(description='设备类型id', name='dev_serv_id'),
  sn: string(description='设备序列号', name='sn'),
}

model ApplyoutidOapiSmartdeviceRequest = {
  headers?: map[string]string,
  params:ApplyoutidOapiSmartdeviceParams,
}

model ApplyoutidOapiSmartdeviceResponseBody = {
  result?: {
    outdid?: string(description='外部设备id', name='outdid'),
  }(description='返回值对象', name='result'),
  success?: boolean(description='是否成功', name='success'),
  errcode?: int64(description='错误编码', name='errcode'),
  errmsg?: string(description='错误信息', name='errmsg'),
}

model ApplyoutidOapiSmartdeviceResponse = {
  headers: map[string]string,
  body: ApplyoutidOapiSmartdeviceResponseBody,
}

/**
 * Description: 给硬件设备分配设备id
 */
async function applyoutidOapiSmartdevice(request: ApplyoutidOapiSmartdeviceRequest): ApplyoutidOapiSmartdeviceResponse {
  var runtime = new Util.RuntimeOptions{};
  return applyoutidOapiSmartdeviceEx(request, runtime);
}

/**
 * Description: 给硬件设备分配设备id
 */
async function applyoutidOapiSmartdeviceEx(request: ApplyoutidOapiSmartdeviceRequest, runtime: Util.RuntimeOptions): ApplyoutidOapiSmartdeviceResponse {
  Util.validateModel(request);
  var appParams = Util.stringifyMapValue(Util.toMap(request.params));
  return doRequestOApi('POST', '/topapi/smartdevice/applyoutid', request.headers, appParams, runtime);
}

model SendOapiImIntelligentCardParams = {
  openConversationId: string(description='加密的群id', name='open_conversation_id'),
  templateData: string(description='动态卡片的json格式模板', name='template_data'),
  bizType: int64(description='群助理的biz类型', name='biz_type'),
}

model SendOapiImIntelligentCardRequest = {
  headers?: map[string]string,
  params:SendOapiImIntelligentCardParams,
}

model SendOapiImIntelligentCardResponseBody = {
  result?: {
    result?: boolean(description='卡片发送结果', name='result'),
  }(description='result', name='result'),
  success?: boolean(description='调用结果', name='success'),
  errcode?: int64(description='dingOpenErrcode', name='errcode'),
  errmsg?: string(description='errorMsg', name='errmsg'),
}

model SendOapiImIntelligentCardResponse = {
  headers: map[string]string,
  body: SendOapiImIntelligentCardResponseBody,
}

/**
 * Description: 企业应用，向自己的企业群里通过智能群助理账户发送动态卡片
 */
async function sendOapiImIntelligentCard(request: SendOapiImIntelligentCardRequest): SendOapiImIntelligentCardResponse {
  var runtime = new Util.RuntimeOptions{};
  return sendOapiImIntelligentCardEx(request, runtime);
}

/**
 * Description: 企业应用，向自己的企业群里通过智能群助理账户发送动态卡片
 */
async function sendOapiImIntelligentCardEx(request: SendOapiImIntelligentCardRequest, runtime: Util.RuntimeOptions): SendOapiImIntelligentCardResponse {
  Util.validateModel(request);
  var appParams = Util.stringifyMapValue(Util.toMap(request.params));
  return doRequestOApi('POST', '/topapi/im/intelligent/card/send', request.headers, appParams, runtime);
}

model GetOapiNewmanufacturerOrderParams = {
  tenantId?: string(description='租户', name='tenant_id'),
  number?: string(description='订单号', name='number'),
}

model GetOapiNewmanufacturerOrderRequest = {
  headers?: map[string]string,
  params?:GetOapiNewmanufacturerOrderParams,
}

model GetOapiNewmanufacturerOrderResponseBody = {
  errcode?: int64(description='错误编码', name='errcode'),
  success?: string(description='成功标记', name='success'),
  model?: {
    status?: string(description='订单状态', name='status'),
    number?: string(description='订单编码', name='number'),
  }(description='订单信息', name='model'),
  errmsg?: string(description='错误描述', name='errmsg'),
}

model GetOapiNewmanufacturerOrderResponse = {
  headers: map[string]string,
  body: GetOapiNewmanufacturerOrderResponseBody,
}

/**
 * Description: 根据生产订单number查询生产订单信息
 */
async function getOapiNewmanufacturerOrder(request: GetOapiNewmanufacturerOrderRequest): GetOapiNewmanufacturerOrderResponse {
  var runtime = new Util.RuntimeOptions{};
  return getOapiNewmanufacturerOrderEx(request, runtime);
}

/**
 * Description: 根据生产订单number查询生产订单信息
 */
async function getOapiNewmanufacturerOrderEx(request: GetOapiNewmanufacturerOrderRequest, runtime: Util.RuntimeOptions): GetOapiNewmanufacturerOrderResponse {
  Util.validateModel(request);
  var appParams = Util.stringifyMapValue(Util.toMap(request.params));
  return doRequestOApi('POST', '/topapi/newmanufacturer/order/get', request.headers, appParams, runtime);
}

model UpdateOapiChatMemberFriendswitchParams = {
  chatid: string(description='会话Id', name='chatid'),
  isProhibit: boolean(description='true开启禁止开关，false关闭禁止开关', name='is_prohibit'),
}

model UpdateOapiChatMemberFriendswitchRequest = {
  headers?: map[string]string,
  params:UpdateOapiChatMemberFriendswitchParams,
}

model UpdateOapiChatMemberFriendswitchResponseBody = {
  success?: boolean(description='是否设置成功', name='success'),
  errcode?: int64(description='错误码', name='errcode'),
  errmsg?: string(description='错误信息', name='errmsg'),
}

model UpdateOapiChatMemberFriendswitchResponse = {
  headers: map[string]string,
  body: UpdateOapiChatMemberFriendswitchResponseBody,
}

/**
 * Description: 设置群成员之间是否可以添加好友和私聊的开关
 */
async function updateOapiChatMemberFriendswitch(request: UpdateOapiChatMemberFriendswitchRequest): UpdateOapiChatMemberFriendswitchResponse {
  var runtime = new Util.RuntimeOptions{};
  return updateOapiChatMemberFriendswitchEx(request, runtime);
}

/**
 * Description: 设置群成员之间是否可以添加好友和私聊的开关
 */
async function updateOapiChatMemberFriendswitchEx(request: UpdateOapiChatMemberFriendswitchRequest, runtime: Util.RuntimeOptions): UpdateOapiChatMemberFriendswitchResponse {
  Util.validateModel(request);
  var appParams = Util.stringifyMapValue(Util.toMap(request.params));
  return doRequestOApi('POST', '/topapi/chat/member/friendswitch/update', request.headers, appParams, runtime);
}

model GetleaveapprovedurationSmartworkAttendsParams = {
  userid: string(description='员工在企业内的UserID，企业用来唯一标识用户的字段。', name='userid'),
  fromDate: string(description='请假开始时间', pattern='\\\\d{4}[-]\\\\d{1,2}[-]\\\\d{1,2}[T]\\\\d{2}:\\\\d{2}:\\\\d{2}[Z]', name='from_date'),
  toDate: string(description='请假结束时间', pattern='\\\\d{4}[-]\\\\d{1,2}[-]\\\\d{1,2}[T]\\\\d{2}:\\\\d{2}:\\\\d{2}[Z]', name='to_date'),
}

model GetleaveapprovedurationSmartworkAttendsRequest = {
  headers?: map[string]string,
  params:GetleaveapprovedurationSmartworkAttendsParams,
}

model GetleaveapprovedurationSmartworkAttendsResponseBody = {
  result?: {
    result?: {
      durationInMinutes?: int64(description='请假时长（单位分钟）', name='duration_in_minutes'),
    }(description='result', name='result'),
    dingOpenErrcode?: int64(description='dingOpenErrcode', name='ding_open_errcode'),
    success?: boolean(description='success', name='success'),
    errorMsg?: string(description='errorMsg', name='error_msg'),
  }(description='result', name='result'),
}

model GetleaveapprovedurationSmartworkAttendsResponse = {
  headers: map[string]string,
  body: GetleaveapprovedurationSmartworkAttendsResponseBody,
}

/**
 * Description: 钉钉考勤微应用，提供了排班的功能，企业管理员可以设置排班规则，该接口可以自动根据排班规则统计出每个员工的请假时长，进而可以与企业自有的请假／财务系统对接，进行工资统计，如果您的企业使用了钉钉考勤并希望依赖考勤系统自动计算员工请假时长，可选择使用此接口
 */
async function getleaveapprovedurationSmartworkAttends(request: GetleaveapprovedurationSmartworkAttendsRequest): GetleaveapprovedurationSmartworkAttendsResponse {
  var runtime = new Util.RuntimeOptions{};
  return getleaveapprovedurationSmartworkAttendsEx(request, runtime);
}

/**
 * Description: 钉钉考勤微应用，提供了排班的功能，企业管理员可以设置排班规则，该接口可以自动根据排班规则统计出每个员工的请假时长，进而可以与企业自有的请假／财务系统对接，进行工资统计，如果您的企业使用了钉钉考勤并希望依赖考勤系统自动计算员工请假时长，可选择使用此接口
 */
async function getleaveapprovedurationSmartworkAttendsEx(request: GetleaveapprovedurationSmartworkAttendsRequest, runtime: Util.RuntimeOptions): GetleaveapprovedurationSmartworkAttendsResponse {
  Util.validateModel(request);
  var appParams = Util.stringifyMapValue(Util.toMap(request.params));
  return doRequest('dingtalk.smartwork.attends.getleaveapproveduration', 'POST', '/router/rest', request.headers, appParams, runtime);
}

model QueryOapiMiniappPackageconfigParams = {
  modelKey: string(description='查询参数', name='model_key'),
}

model QueryOapiMiniappPackageconfigRequest = {
  headers?: map[string]string,
  params:QueryOapiMiniappPackageconfigParams,
}

model QueryOapiMiniappPackageconfigResponseBody = {
  data?: {
    isDeleted?: int64(description='是否删除', name='is_deleted'),
    packageUrl?: string(description='包地址', name='package_url'),
    size?: int64(description='大小', name='size'),
    versionUniqueId?: string(description='版本ID', name='version_unique_id'),
    appId?: string(description='appid', name='app_id'),
    packageType?: string(description='包类型MAIN/SUB', name='package_type'),
    buildResultUrl?: string(description='构建结果url', name='build_result_url'),
    packagePath?: string(description='包路径', name='package_path'),
    fallbackUrl?: string(description='fallback', name='fallback_url'),
  }(description='返回的数据实体', name='data'),
  errcode?: int64(description='errcode', name='errcode'),
  errmsg?: string(description='errmsg', name='errmsg'),
}

model QueryOapiMiniappPackageconfigResponse = {
  headers: map[string]string,
  body: QueryOapiMiniappPackageconfigResponseBody,
}

/**
 * Description: 通过主键 id 查询 PackageConfig 记录
 */
async function queryOapiMiniappPackageconfig(request: QueryOapiMiniappPackageconfigRequest): QueryOapiMiniappPackageconfigResponse {
  var runtime = new Util.RuntimeOptions{};
  return queryOapiMiniappPackageconfigEx(request, runtime);
}

/**
 * Description: 通过主键 id 查询 PackageConfig 记录
 */
async function queryOapiMiniappPackageconfigEx(request: QueryOapiMiniappPackageconfigRequest, runtime: Util.RuntimeOptions): QueryOapiMiniappPackageconfigResponse {
  Util.validateModel(request);
  var appParams = Util.stringifyMapValue(Util.toMap(request.params));
  return doRequestOApi('POST', '/topapi/miniapp/packageconfig/query', request.headers, appParams, runtime);
}

model QueryorginfoOapiNewretailRequest = {
  headers?: map[string]string,
}

model QueryorginfoOapiNewretailResponseBody = {
  result?: {
    orgname?: string(description='orgName', name='orgname'),
    licensemediaid?: string(description='licenseMediaId', name='licensemediaid'),
    registnum?: string(description='registNum', name='registnum'),
    unifiedsocialcredit?: string(description='unifiedSocialCredit', name='unifiedsocialcredit'),
    unnameorganizationcoded?: string(description='unnameorganizationCoded', name='unnameorganizationcoded'),
  }(description='result', name='result'),
  errcode?: int64(description='dingOpenErrcode', name='errcode'),
  errmsg?: string(description='errorMsg', name='errmsg'),
}

model QueryorginfoOapiNewretailResponse = {
  headers: map[string]string,
  body: QueryorginfoOapiNewretailResponseBody,
}

/**
 * Description: 提供给新零售查询企业认证信息
 */
async function queryorginfoOapiNewretail(request: QueryorginfoOapiNewretailRequest): QueryorginfoOapiNewretailResponse {
  var runtime = new Util.RuntimeOptions{};
  return queryorginfoOapiNewretailEx(request, runtime);
}

/**
 * Description: 提供给新零售查询企业认证信息
 */
async function queryorginfoOapiNewretailEx(request: QueryorginfoOapiNewretailRequest, runtime: Util.RuntimeOptions): QueryorginfoOapiNewretailResponse {
  Util.validateModel(request);
  var appParams : map[string]string = {};
  return doRequestOApi('POST', '/topapi/newretail/queryorginfo', request.headers, appParams, runtime);
}

model PostOapiSmartdeviceEventParams = {
  deviceEventVo?: {
    topic?: string(description='事件对应的topic', name='topic'),
    data?: string(description='json格式的数据体', name='data'),
    dn?: string(description='设备名称', name='dn'),
    pk?: string(description='产品key', name='pk'),
  }(description='系统自动生成', name='device_event_vo'),
}

model PostOapiSmartdeviceEventRequest = {
  headers?: map[string]string,
  params?:PostOapiSmartdeviceEventParams,
}

model PostOapiSmartdeviceEventResponseBody = {
  result?: boolean(description='返回结果', name='result'),
  success?: boolean(description='是否成功', name='success'),
  errcode?: int64(description='错误代码', name='errcode'),
  errmsg?: string(description='错误信息', name='errmsg'),
}

model PostOapiSmartdeviceEventResponse = {
  headers: map[string]string,
  body: PostOapiSmartdeviceEventResponseBody,
}

/**
 * Description: 接收第三方云平台上报的设备数据，保存到钉钉，开放给isv使用
 */
async function postOapiSmartdeviceEvent(request: PostOapiSmartdeviceEventRequest): PostOapiSmartdeviceEventResponse {
  var runtime = new Util.RuntimeOptions{};
  return postOapiSmartdeviceEventEx(request, runtime);
}

/**
 * Description: 接收第三方云平台上报的设备数据，保存到钉钉，开放给isv使用
 */
async function postOapiSmartdeviceEventEx(request: PostOapiSmartdeviceEventRequest, runtime: Util.RuntimeOptions): PostOapiSmartdeviceEventResponse {
  Util.validateModel(request);
  var appParams = Util.stringifyMapValue(Util.toMap(request.params));
  return doRequestOApi('POST', '/topapi/smartdevice/event/post', request.headers, appParams, runtime);
}

model BindOapiSmartdeviceExternalParams = {
  deviceBindReqVo: {
    nick?: string(description='设备昵称', name='nick'),
    sn: string(description='sn地址', name='sn'),
    mac?: string(description='mac地址', name='mac'),
    outid?: string(description='外部设备id', name='outid'),
    ext?: string(description='扩展信息', name='ext'),
    dn: string(description='设备名称', name='dn'),
    pk: string(description='产品key', name='pk'),
  }(description='设备请求信息', name='device_bind_req_vo'),
}

model BindOapiSmartdeviceExternalRequest = {
  headers?: map[string]string,
  params:BindOapiSmartdeviceExternalParams,
}

model BindOapiSmartdeviceExternalResponseBody = {
  result?: {
    deviceId?: string(description='设备ID', name='device_id'),
  }(description='返回结果', name='result'),
  success?: boolean(description='是否成功', name='success'),
  errcode?: int64(description='错误代码', name='errcode'),
  errmsg?: string(description='错误信息', name='errmsg'),
}

model BindOapiSmartdeviceExternalResponse = {
  headers: map[string]string,
  body: BindOapiSmartdeviceExternalResponseBody,
}

/**
 * Description: 智能设备接入钉钉时，需要和组织建立绑定关系，此接口用于创建绑定关系。
 */
async function bindOapiSmartdeviceExternal(request: BindOapiSmartdeviceExternalRequest): BindOapiSmartdeviceExternalResponse {
  var runtime = new Util.RuntimeOptions{};
  return bindOapiSmartdeviceExternalEx(request, runtime);
}

/**
 * Description: 智能设备接入钉钉时，需要和组织建立绑定关系，此接口用于创建绑定关系。
 */
async function bindOapiSmartdeviceExternalEx(request: BindOapiSmartdeviceExternalRequest, runtime: Util.RuntimeOptions): BindOapiSmartdeviceExternalResponse {
  Util.validateModel(request);
  var appParams = Util.stringifyMapValue(Util.toMap(request.params));
  return doRequestOApi('POST', '/topapi/smartdevice/external/bind', request.headers, appParams, runtime);
}

model UpdateOapiCircleEnworkParams = {
  openUpdateDto?: {
    similarity?: string(description='相似度结果', name='similarity'),
    versionId?: int64(description='作文id', name='version_id'),
    pigaiAnalysis?: string(description='作文批改结果', name='pigai_analysis'),
    openId?: string(description='用户id', name='open_id'),
    postId?: string(description='作文id', name='post_id'),
    workId?: string(description='作业id', name='work_id'),
  }(description='请求封装类', name='open_update_dto'),
}

model UpdateOapiCircleEnworkRequest = {
  headers?: map[string]string,
  params?:UpdateOapiCircleEnworkParams,
}

model UpdateOapiCircleEnworkResponseBody = {
  errcode?: int64(description='返回状态码', name='errcode'),
  errmsg?: string(description='响应信息', name='errmsg'),
  result?: boolean(description='响应结果', name='result'),
}

model UpdateOapiCircleEnworkResponse = {
  headers: map[string]string,
  body: UpdateOapiCircleEnworkResponseBody,
}

/**
 * Description: 更新作业批改结果，更新作业的相似度、得分以及按句分析的结果
 */
async function updateOapiCircleEnwork(request: UpdateOapiCircleEnworkRequest): UpdateOapiCircleEnworkResponse {
  var runtime = new Util.RuntimeOptions{};
  return updateOapiCircleEnworkEx(request, runtime);
}

/**
 * Description: 更新作业批改结果，更新作业的相似度、得分以及按句分析的结果
 */
async function updateOapiCircleEnworkEx(request: UpdateOapiCircleEnworkRequest, runtime: Util.RuntimeOptions): UpdateOapiCircleEnworkResponse {
  Util.validateModel(request);
  var appParams = Util.stringifyMapValue(Util.toMap(request.params));
  return doRequestOApi('POST', '/topapi/circle/enwork/update', request.headers, appParams, runtime);
}

model SendOapiServicegroupMessageParams = {
  orderId: int64(description='订单id', name='order_id'),
  conversationMessage: {
    title: string(description='标题', name='title'),
    text: string(description='内容', name='text'),
  }(description='消息对象', name='conversation_message'),
}

model SendOapiServicegroupMessageRequest = {
  headers?: map[string]string,
  params:SendOapiServicegroupMessageParams,
}

model SendOapiServicegroupMessageResponseBody = {
  errcode?: int64(description='dingOpenErrcode', name='errcode'),
  errmsg?: string(description='errorMsg', name='errmsg'),
  result?: boolean(description='result', name='result'),
}

model SendOapiServicegroupMessageResponse = {
  headers: map[string]string,
  body: SendOapiServicegroupMessageResponseBody,
}

/**
 * Description: 1、订单支付成功通知服务商
服务商下的所有商品支付成功后通知服务商
2、支持服务商在订单支付成功后发送群文件
订单支付成功后，服务商才能调接口发送对应文件
发送文件的接口也需要限定时间（x小时内）
 */
async function sendOapiServicegroupMessage(request: SendOapiServicegroupMessageRequest): SendOapiServicegroupMessageResponse {
  var runtime = new Util.RuntimeOptions{};
  return sendOapiServicegroupMessageEx(request, runtime);
}

/**
 * Description: 1、订单支付成功通知服务商
服务商下的所有商品支付成功后通知服务商
2、支持服务商在订单支付成功后发送群文件
订单支付成功后，服务商才能调接口发送对应文件
发送文件的接口也需要限定时间（x小时内）
 */
async function sendOapiServicegroupMessageEx(request: SendOapiServicegroupMessageRequest, runtime: Util.RuntimeOptions): SendOapiServicegroupMessageResponse {
  Util.validateModel(request);
  var appParams = Util.stringifyMapValue(Util.toMap(request.params));
  return doRequestOApi('POST', '/topapi/servicegroup/message/send', request.headers, appParams, runtime);
}

model GetOapiFugongProcess_codeRequest = {
  headers?: map[string]string,
}

model GetOapiFugongProcess_codeResponseBody = {
  errcode?: int64(description='错误码', name='errcode'),
  errmsg?: string(description='错误结果', name='errmsg'),
  result?: [ string ](description='模板code列表', name='result'),
}

model GetOapiFugongProcess_codeResponse = {
  headers: map[string]string,
  body: GetOapiFugongProcess_codeResponseBody,
}

/**
 * Description: 获取复工审批模板code
 */
async function getOapiFugongProcess_code(request: GetOapiFugongProcess_codeRequest): GetOapiFugongProcess_codeResponse {
  var runtime = new Util.RuntimeOptions{};
  return getOapiFugongProcess_codeEx(request, runtime);
}

/**
 * Description: 获取复工审批模板code
 */
async function getOapiFugongProcess_codeEx(request: GetOapiFugongProcess_codeRequest, runtime: Util.RuntimeOptions): GetOapiFugongProcess_codeResponse {
  Util.validateModel(request);
  var appParams : map[string]string = {};
  return doRequestOApi('POST', '/topapi/fugong/process_code/get', request.headers, appParams, runtime);
}

model ListOapiFugongHealth_dataParams = {
  processInstanceId: string(description='复工审批实例id', name='process_instance_id'),
  actionDate: string(description='时间，必须是YYYY-MM-DD的格式', name='action_date'),
  offset: int64(description='分页起始', name='offset'),
  size: int64(description='分页大小，最大100', name='size'),
}

model ListOapiFugongHealth_dataRequest = {
  headers?: map[string]string,
  params:ListOapiFugongHealth_dataParams,
}

model ListOapiFugongHealth_dataResponseBody = {
  errcode?: int64(description='错误码', name='errcode'),
  errmsg?: string(description='错误信息', name='errmsg'),
  result?: {
    hasMore?: boolean(description='是否还有下一页', name='has_more'),
    nextCursor?: int64(description='下一次分页offset的值', name='next_cursor'),
    list?: [
      {
        submitterUserid?: string(description='提交人userid', name='submitter_userid'),
        createTime?: string(description='毫秒级时间戳，填表提交时间', pattern='\\\\d{4}[-]\\\\d{1,2}[-]\\\\d{1,2}[T]\\\\d{2}:\\\\d{2}:\\\\d{2}[Z]', name='create_time'),
        submitterUserName?: string(description='提交人姓名', name='submitter_user_name'),
        forms?: [
          {
            label?: string(description='名称。当label字段为空或不存在时，忽略这个label和value', name='label'),
            value?: string(description='表单值', name='value'),
          }
        ](description='表单内容列表', name='forms'),
        modifyTime?: string(description='毫秒级时间戳，填表更新时间', pattern='\\\\d{4}[-]\\\\d{1,2}[-]\\\\d{1,2}[T]\\\\d{2}:\\\\d{2}:\\\\d{2}[Z]', name='modify_time'),
      }
    ](description='列表', name='list'),
  }(description='结果', name='result'),
}

model ListOapiFugongHealth_dataResponse = {
  headers: map[string]string,
  body: ListOapiFugongHealth_dataResponseBody,
}

/**
 * Description: 获取员工健康打卡数据
 */
async function listOapiFugongHealth_data(request: ListOapiFugongHealth_dataRequest): ListOapiFugongHealth_dataResponse {
  var runtime = new Util.RuntimeOptions{};
  return listOapiFugongHealth_dataEx(request, runtime);
}

/**
 * Description: 获取员工健康打卡数据
 */
async function listOapiFugongHealth_dataEx(request: ListOapiFugongHealth_dataRequest, runtime: Util.RuntimeOptions): ListOapiFugongHealth_dataResponse {
  Util.validateModel(request);
  var appParams = Util.stringifyMapValue(Util.toMap(request.params));
  return doRequestOApi('POST', '/topapi/fugong/health_data/list', request.headers, appParams, runtime);
}

model QueryOapiRhinoOpenserviceParams = {
  userid?: string(description='用户ID', name='userid'),
  code?: string(description='编码', name='code'),
  id?: int64(description='ID', name='id'),
  tenentId?: string(description='租户ID', name='tenent_id'),
  gmtCreate?: string(description='创建时间', pattern='\\\\d{4}[-]\\\\d{1,2}[-]\\\\d{1,2}[T]\\\\d{2}:\\\\d{2}:\\\\d{2}[Z]', name='gmt_create'),
}

model QueryOapiRhinoOpenserviceRequest = {
  headers?: map[string]string,
  params?:QueryOapiRhinoOpenserviceParams,
}

model QueryOapiRhinoOpenserviceResponseBody = {
  result?: {
    errcode?: int64(description='code', name='errcode'),
    success?: boolean(description='是否成功', name='success'),
    model?: [
      {
        app?: string(description='应用', name='app'),
        creator?: string(description='创建人', name='creator'),
        gmtModified?: string(description='修改时间', pattern='\\\\d{4}[-]\\\\d{1,2}[-]\\\\d{1,2}[T]\\\\d{2}:\\\\d{2}:\\\\d{2}[Z]', name='gmt_modified'),
        code?: string(description='编码', name='code'),
        modifier?: string(description='修改人', name='modifier'),
        name?: string(description='名称', name='name'),
        description?: string(description='描述', name='description'),
        id?: int64(description='ID', name='id'),
        type?: string(description='类型', name='type'),
        gmtCreate?: string(description='创建时间', pattern='\\\\d{4}[-]\\\\d{1,2}[-]\\\\d{1,2}[T]\\\\d{2}:\\\\d{2}:\\\\d{2}[Z]', name='gmt_create'),
        status?: string(description='状态', name='status'),
      }
    ](description='返回结果', name='model'),
    errmsg?: string(description='message', name='errmsg'),
  }(description='接口返回model', name='result'),
}

model QueryOapiRhinoOpenserviceResponse = {
  headers: map[string]string,
  body: QueryOapiRhinoOpenserviceResponseBody,
}

/**
 * Description: 智能制造-开放服务查询
 */
async function queryOapiRhinoOpenservice(request: QueryOapiRhinoOpenserviceRequest): QueryOapiRhinoOpenserviceResponse {
  var runtime = new Util.RuntimeOptions{};
  return queryOapiRhinoOpenserviceEx(request, runtime);
}

/**
 * Description: 智能制造-开放服务查询
 */
async function queryOapiRhinoOpenserviceEx(request: QueryOapiRhinoOpenserviceRequest, runtime: Util.RuntimeOptions): QueryOapiRhinoOpenserviceResponse {
  Util.validateModel(request);
  var appParams = Util.stringifyMapValue(Util.toMap(request.params));
  return doRequestOApi('POST', '/topapi/rhino/openservice/query', request.headers, appParams, runtime);
}

model InstallOapiWorkspaceTestappParams = {
  installTestapp: {
    circleCorpId: string(description='圈子组织的corpId，圈子归属组织必须是isv组织', name='circle_corp_id'),
  }(description='为isv组织下的圈子安装测试应用', name='install_testapp'),
}

model InstallOapiWorkspaceTestappRequest = {
  headers?: map[string]string,
  params:InstallOapiWorkspaceTestappParams,
}

model InstallOapiWorkspaceTestappResponseBody = {
  errcode?: int64(description='错误码', name='errcode'),
  errmsg?: string(description='错误信息', name='errmsg'),
  result?: string(description='无返回值', name='result'),
  success?: boolean(description='请求成功', name='success'),
}

model InstallOapiWorkspaceTestappResponse = {
  headers: map[string]string,
  body: InstallOapiWorkspaceTestappResponseBody,
}

/**
 * Description: 提供给isv应用的测试圈子安装应用接口，方便isv给自己的圈子做测试
 */
async function installOapiWorkspaceTestapp(request: InstallOapiWorkspaceTestappRequest): InstallOapiWorkspaceTestappResponse {
  var runtime = new Util.RuntimeOptions{};
  return installOapiWorkspaceTestappEx(request, runtime);
}

/**
 * Description: 提供给isv应用的测试圈子安装应用接口，方便isv给自己的圈子做测试
 */
async function installOapiWorkspaceTestappEx(request: InstallOapiWorkspaceTestappRequest, runtime: Util.RuntimeOptions): InstallOapiWorkspaceTestappResponse {
  Util.validateModel(request);
  var appParams = Util.stringifyMapValue(Util.toMap(request.params));
  return doRequestOApi('POST', '/topapi/workspace/testapp/install', request.headers, appParams, runtime);
}

model SetOapiCustomizeConfigParams = {
  biz: string(description='入口会话id，自定义的业务', name='biz'),
  type: string(description='会话类型', name='type'),
  ruleName: string(description='二级会话', name='rule_name'),
  activeType: string(description='e应用', name='active_type'),
  activeId: string(description='e应用id', name='active_id'),
}

model SetOapiCustomizeConfigRequest = {
  headers?: map[string]string,
  params:SetOapiCustomizeConfigParams,
}

model SetOapiCustomizeConfigResponseBody = {
  errcode?: int64(description='成功', name='errcode'),
  errmsg?: string(description='返回成功', name='errmsg'),
}

model SetOapiCustomizeConfigResponse = {
  headers: map[string]string,
  body: SetOapiCustomizeConfigResponseBody,
}

/**
 * Description: 配置客户端开放点自定义能力
 */
async function setOapiCustomizeConfig(request: SetOapiCustomizeConfigRequest): SetOapiCustomizeConfigResponse {
  var runtime = new Util.RuntimeOptions{};
  return setOapiCustomizeConfigEx(request, runtime);
}

/**
 * Description: 配置客户端开放点自定义能力
 */
async function setOapiCustomizeConfigEx(request: SetOapiCustomizeConfigRequest, runtime: Util.RuntimeOptions): SetOapiCustomizeConfigResponse {
  Util.validateModel(request);
  var appParams = Util.stringifyMapValue(Util.toMap(request.params));
  return doRequestOApi('POST', '/topapi/customize/config/set', request.headers, appParams, runtime);
}

model GetOapiAlitripBtripBindTaobaoParams = {
  request: {
    corpid: string(description='企业id', name='corpid'),
    userid: string(description='用户id', name='userid'),
  }(description='请求对象', name='request'),
}

model GetOapiAlitripBtripBindTaobaoRequest = {
  headers?: map[string]string,
  params:GetOapiAlitripBtripBindTaobaoParams,
}

model GetOapiAlitripBtripBindTaobaoResponseBody = {
  success?: boolean(description='成功标识', name='success'),
  result?: {
    taobaoInfo?: string(description='淘宝帐号', name='taobao_info'),
    alipayInfo?: string(description='关联的支付宝帐号', name='alipay_info'),
  }(description='结果对象', name='result'),
  errcode?: int64(description='错误码', name='errcode'),
  errmsg?: string(description='错误信息', name='errmsg'),
}

model GetOapiAlitripBtripBindTaobaoResponse = {
  headers: map[string]string,
  body: GetOapiAlitripBtripBindTaobaoResponseBody,
}

/**
 * Description: 获取绑定的淘宝账号信息（商旅预订过程中需要绑定淘宝帐号），用于查看当前绑定的淘帐号信息，如需更换，可通过解绑接口进行解绑。
 */
async function getOapiAlitripBtripBindTaobao(request: GetOapiAlitripBtripBindTaobaoRequest): GetOapiAlitripBtripBindTaobaoResponse {
  var runtime = new Util.RuntimeOptions{};
  return getOapiAlitripBtripBindTaobaoEx(request, runtime);
}

/**
 * Description: 获取绑定的淘宝账号信息（商旅预订过程中需要绑定淘宝帐号），用于查看当前绑定的淘帐号信息，如需更换，可通过解绑接口进行解绑。
 */
async function getOapiAlitripBtripBindTaobaoEx(request: GetOapiAlitripBtripBindTaobaoRequest, runtime: Util.RuntimeOptions): GetOapiAlitripBtripBindTaobaoResponse {
  Util.validateModel(request);
  var appParams = Util.stringifyMapValue(Util.toMap(request.params));
  return doRequestOApi('POST', '/topapi/alitrip/btrip/bind/taobao/get', request.headers, appParams, runtime);
}

model GetOapiAlitripBtripAddressParams = {
  request?: {
    corpid: string(description='企业id', name='corpid'),
    userid: string(description='用户id', name='userid'),
    type: int64(description='类目类型：1：机票，2：火车票，3：酒店，4：用车', name='type'),
    actionType: int64(description='操作类型：1：预订，2：我的订单列表，3：商旅管理后台（其他参数可不要，只需corpid，userid）', name='action_type'),
    itineraryId?: string(description='第三方行程id（存在代表通过审批单预订，不存在代表特殊场景：普通员工是预览，特殊授权人和代订人是免审批预订场景）', name='itinerary_id'),
    phone?: string(description='员工第一次使用用车需要手机号，与司机联系', name='phone'),
  }(description='请求对象', name='request'),
}

model GetOapiAlitripBtripAddressRequest = {
  headers?: map[string]string,
  params?:GetOapiAlitripBtripAddressParams,
}

model GetOapiAlitripBtripAddressResponseBody = {
  success?: boolean(description='成功标识', name='success'),
  result?: {
    url?: string(description='访问地址', name='url'),
  }(description='结果对象', name='result'),
  errcode?: int64(description='错误码', name='errcode'),
  errmsg?: string(description='错误信息', name='errmsg'),
}

model GetOapiAlitripBtripAddressResponse = {
  headers: map[string]string,
  body: GetOapiAlitripBtripAddressResponseBody,
}

/**
 * Description: 提供各个场景预订访问地址，以及我的订单地址
 */
async function getOapiAlitripBtripAddress(request: GetOapiAlitripBtripAddressRequest): GetOapiAlitripBtripAddressResponse {
  var runtime = new Util.RuntimeOptions{};
  return getOapiAlitripBtripAddressEx(request, runtime);
}

/**
 * Description: 提供各个场景预订访问地址，以及我的订单地址
 */
async function getOapiAlitripBtripAddressEx(request: GetOapiAlitripBtripAddressRequest, runtime: Util.RuntimeOptions): GetOapiAlitripBtripAddressResponse {
  Util.validateModel(request);
  var appParams = Util.stringifyMapValue(Util.toMap(request.params));
  return doRequestOApi('POST', '/topapi/alitrip/btrip/address/get', request.headers, appParams, runtime);
}

model TaobaoOapiAlitripBtripUnbindParams = {
  request?: {
    corpid?: string(description='企业id', name='corpid'),
    userid?: string(description='用户id', name='userid'),
  }(description='请求对象', name='request'),
}

model TaobaoOapiAlitripBtripUnbindRequest = {
  headers?: map[string]string,
  params?:TaobaoOapiAlitripBtripUnbindParams,
}

model TaobaoOapiAlitripBtripUnbindResponseBody = {
  success?: boolean(description='接口成功标识', name='success'),
  result?: boolean(description='解绑是否成功', name='result'),
  errcode?: int64(description='错误码', name='errcode'),
  errmsg?: string(description='错误信息', name='errmsg'),
}

model TaobaoOapiAlitripBtripUnbindResponse = {
  headers: map[string]string,
  body: TaobaoOapiAlitripBtripUnbindResponseBody,
}

/**
 * Description: 商旅解除淘宝帐号绑定，用于更换绑定淘宝帐号
 */
async function taobaoOapiAlitripBtripUnbind(request: TaobaoOapiAlitripBtripUnbindRequest): TaobaoOapiAlitripBtripUnbindResponse {
  var runtime = new Util.RuntimeOptions{};
  return taobaoOapiAlitripBtripUnbindEx(request, runtime);
}

/**
 * Description: 商旅解除淘宝帐号绑定，用于更换绑定淘宝帐号
 */
async function taobaoOapiAlitripBtripUnbindEx(request: TaobaoOapiAlitripBtripUnbindRequest, runtime: Util.RuntimeOptions): TaobaoOapiAlitripBtripUnbindResponse {
  Util.validateModel(request);
  var appParams = Util.stringifyMapValue(Util.toMap(request.params));
  return doRequestOApi('POST', '/topapi/alitrip/btrip/unbind/taobao', request.headers, appParams, runtime);
}

model SendOapiRobotIntelligentMessageParams = {
  msgKey: string(description='申请到的消息模板唯一标识符', name='msg_key'),
  msgParam: string(description='消息模板中，变量本次替换的值', name='msg_param'),
  openConversationId: string(description='开放的群ID', name='open_conversation_id'),
  receiverUnionIds?: [ string ](description='消息接收者的unionId列表，如果不传则表示群全员可见', maxItems=999, name='receiver_union_ids'),
}

model SendOapiRobotIntelligentMessageRequest = {
  headers?: map[string]string,
  params:SendOapiRobotIntelligentMessageParams,
}

model SendOapiRobotIntelligentMessageResponseBody = {
  errcode?: int64(description='错误代码', name='errcode'),
  errmsg?: string(description='错误描述', name='errmsg'),
  success?: boolean(description='是否受理成功', name='success'),
}

model SendOapiRobotIntelligentMessageResponse = {
  headers: map[string]string,
  body: SendOapiRobotIntelligentMessageResponseBody,
}

/**
 * Description: 第三方应用，以小钉的身份在群里发消息
 */
async function sendOapiRobotIntelligentMessage(request: SendOapiRobotIntelligentMessageRequest): SendOapiRobotIntelligentMessageResponse {
  var runtime = new Util.RuntimeOptions{};
  return sendOapiRobotIntelligentMessageEx(request, runtime);
}

/**
 * Description: 第三方应用，以小钉的身份在群里发消息
 */
async function sendOapiRobotIntelligentMessageEx(request: SendOapiRobotIntelligentMessageRequest, runtime: Util.RuntimeOptions): SendOapiRobotIntelligentMessageResponse {
  Util.validateModel(request);
  var appParams = Util.stringifyMapValue(Util.toMap(request.params));
  return doRequestOApi('POST', '/topapi/robot/intelligent/message/send', request.headers, appParams, runtime);
}

model QueryOapiDingpayVirtualaccountParams = {
  extension?: string(description='扩展属性', name='extension'),
}

model QueryOapiDingpayVirtualaccountRequest = {
  headers?: map[string]string,
  params?:QueryOapiDingpayVirtualaccountParams,
}

model QueryOapiDingpayVirtualaccountResponseBody = {
  result?: {
    accountOpenBo?: {
      corpId?: string(description='企业corpId', name='corp_id'),
      anonymousAlipayUid?: string(description='支付宝托管账户', name='anonymous_alipay_uid'),
      extension?: string(description='扩展属性', name='extension'),
      realAlipayUids?: [ string ](description='支付宝资金账号列表', name='real_alipay_uids'),
      realUsedAlipayUid?: string(description='当前使用的支付宝资金账号', name='real_used_alipay_uid'),
    }(description='accountOpenBO', name='account_open_bo'),
  }(description='result', name='result'),
  errcode?: int64(description='钉钉错误代码', name='errcode'),
  errmsg?: string(description='错误详情', name='errmsg'),
  success?: boolean(description='是否成功', name='success'),
}

model QueryOapiDingpayVirtualaccountResponse = {
  headers: map[string]string,
  body: QueryOapiDingpayVirtualaccountResponseBody,
}

/**
 * Description: 钉支付的企业托管支付宝账户查询，如果没有，会去创建一个
 */
async function queryOapiDingpayVirtualaccount(request: QueryOapiDingpayVirtualaccountRequest): QueryOapiDingpayVirtualaccountResponse {
  var runtime = new Util.RuntimeOptions{};
  return queryOapiDingpayVirtualaccountEx(request, runtime);
}

/**
 * Description: 钉支付的企业托管支付宝账户查询，如果没有，会去创建一个
 */
async function queryOapiDingpayVirtualaccountEx(request: QueryOapiDingpayVirtualaccountRequest, runtime: Util.RuntimeOptions): QueryOapiDingpayVirtualaccountResponse {
  Util.validateModel(request);
  var appParams = Util.stringifyMapValue(Util.toMap(request.params));
  return doRequestOApi('POST', '/topapi/dingpay/virtualaccount/query', request.headers, appParams, runtime);
}

model BatchqueryOapiDingpayBillParams = {
  statusList?: [ string ](description='状态列表', maxItems=20, name='status_list'),
  billCategory?: string(description='INCOME收入、EXPENSE支出', name='bill_category'),
  title?: string(description='标题', name='title'),
  minAmount?: int64(description='最小金额（单位：分）', name='min_amount'),
  maxAmount?: int64(description='最大金额（单位：分）', name='max_amount'),
  payChannelList?: [ string ](description='支付渠道列表', maxItems=20, name='pay_channel_list'),
  payChannelPayerRealUid?: string(description='支付渠道方付款者实际出资UID', name='pay_channel_payer_real_uid'),
  bizCode?: string(description='业务代码', name='biz_code'),
  extension?: string(description='扩展属性', name='extension'),
  gmtApplyPayBeginTime?: string(description='申请付款开始时间', pattern='\\\\d{4}[-]\\\\d{1,2}[-]\\\\d{1,2}[T]\\\\d{2}:\\\\d{2}:\\\\d{2}[Z]', name='gmt_apply_pay_begin_time'),
  gmtApplyPayEndTime?: string(description='申请付款截止时间', pattern='\\\\d{4}[-]\\\\d{1,2}[-]\\\\d{1,2}[T]\\\\d{2}:\\\\d{2}:\\\\d{2}[Z]', name='gmt_apply_pay_end_time'),
  gmtCreateBeginTime?: string(description='创单开始时间', pattern='\\\\d{4}[-]\\\\d{1,2}[-]\\\\d{1,2}[T]\\\\d{2}:\\\\d{2}:\\\\d{2}[Z]', name='gmt_create_begin_time'),
  gmtCreateEndTime?: string(description='创单截止时间', pattern='\\\\d{4}[-]\\\\d{1,2}[-]\\\\d{1,2}[T]\\\\d{2}:\\\\d{2}:\\\\d{2}[Z]', name='gmt_create_end_time'),
  gmtPayBeginTime?: string(description='完成付款开始时间', pattern='\\\\d{4}[-]\\\\d{1,2}[-]\\\\d{1,2}[T]\\\\d{2}:\\\\d{2}:\\\\d{2}[Z]', name='gmt_pay_begin_time'),
  gmtPayEndTime?: string(description='完成付款截止时间', pattern='\\\\d{4}[-]\\\\d{1,2}[-]\\\\d{1,2}[T]\\\\d{2}:\\\\d{2}:\\\\d{2}[Z]', name='gmt_pay_end_time'),
  payeeId?: string(description='收款者corpId或者userId', name='payee_id'),
  payeeUserType?: string(description='收款者类型', name='payee_user_type'),
  payerId?: string(description='付款者corpId或者userId', name='payer_id'),
  payerUserType?: string(description='付款者类型', name='payer_user_type'),
  applyPayOperatorUserid?: string(description='申请支付者userid', name='apply_pay_operator_userid'),
  createOperatorUserid?: string(description='创单者userid', name='create_operator_userid'),
  receiptorTypeList?: [ string ](description='收款人账户类型', maxItems=20, name='receiptor_type_list'),
  terminationReason?: string(description='中止支付原因', name='termination_reason'),
  nextKey?: string(description='第一次调用传空，后面翻页根据上次response的nextKey回传', name='next_key'),
  size?: int64(description='查询的条目数', name='size'),
  pageNum?: int64(description='页码，从1开始', name='page_num'),
  pageSize?: int64(description='每页大小', name='page_size'),
}

model BatchqueryOapiDingpayBillRequest = {
  headers?: map[string]string,
  params?:BatchqueryOapiDingpayBillParams,
}

model BatchqueryOapiDingpayBillResponseBody = {
  errcode?: int64(description='错误代码', name='errcode'),
  errmsg?: string(description='错误文案', name='errmsg'),
  success?: boolean(description='是否成功', name='success'),
  result?: {
    totalCount?: int64(description='总记录条数', name='total_count'),
    billList?: [
      {
        amount?: int64(description='金额（单位：分）', name='amount'),
        applyPayOperatorUserid?: string(description='发起支付操作员userId', name='apply_pay_operator_userid'),
        billCategory?: string(description='INCOME收入、EXPENSE支出', name='bill_category'),
        billNo?: string(description='账单号', name='bill_no'),
        bizCode?: string(description='业务代码', name='biz_code'),
        createOperatorUserid?: string(description='创单操作员userId', name='create_operator_userid'),
        extension?: string(description='扩展属性', name='extension'),
        gmtApplyPay?: string(description='申请支付时间', pattern='\\\\d{4}[-]\\\\d{1,2}[-]\\\\d{1,2}[T]\\\\d{2}:\\\\d{2}:\\\\d{2}[Z]', name='gmt_apply_pay'),
        gmtCreate?: string(description='创单时间', pattern='\\\\d{4}[-]\\\\d{1,2}[-]\\\\d{1,2}[T]\\\\d{2}:\\\\d{2}:\\\\d{2}[Z]', name='gmt_create'),
        gmtModified?: string(description='记录更新时间', pattern='\\\\d{4}[-]\\\\d{1,2}[-]\\\\d{1,2}[T]\\\\d{2}:\\\\d{2}:\\\\d{2}[Z]', name='gmt_modified'),
        gmtPay?: string(description='完成付款时间', pattern='\\\\d{4}[-]\\\\d{1,2}[-]\\\\d{1,2}[T]\\\\d{2}:\\\\d{2}:\\\\d{2}[Z]', name='gmt_pay'),
        orderNo?: string(description='订单号', name='order_no'),
        outBizNo?: string(description='外部流水号', name='out_biz_no'),
        payChannel?: string(description='支付渠道', name='pay_channel'),
        payChannelBizNo?: string(description='支付渠道方流水号', name='pay_channel_biz_no'),
        payeeId?: string(description='收款者corpId或者userId', name='payee_id'),
        payeeUserType?: string(description='收款者类型', name='payee_user_type'),
        payerId?: string(description='付款者corpId或者userId', name='payer_id'),
        payerUserType?: string(description='付款者类型', name='payer_user_type'),
        principalId?: string(description='记账主体corpId或者userId', name='principal_id'),
        sourceAppId?: string(description='来源应用ID', name='source_app_id'),
        status?: string(description='状态', name='status'),
        title?: string(description='标题', name='title'),
        payChannelPayerRealUid?: string(description='支付渠道方付款者实际出资UID', name='pay_channel_payer_real_uid'),
        terminationReason?: string(description='中止支付原因', name='termination_reason'),
        terminationOperatorId?: string(description='中止操作员id', name='termination_operator_id'),
        receiptorType?: string(description='收款人账户类型', name='receiptor_type'),
        payChannelPayeeRealUid?: string(description='收款方真实账号', name='pay_channel_payee_real_uid'),
      }
    ](description='billList', name='bill_list'),
    currentPageNum?: int64(description='当前页码', name='current_page_num'),
    pageSize?: int64(description='每页大小', name='page_size'),
    totalPage?: int64(description='总页数', name='total_page'),
    nextKey?: string(description='如果nextKey不为空，说明还有翻页数据', name='next_key'),
  }(description='result', name='result'),
}

model BatchqueryOapiDingpayBillResponse = {
  headers: map[string]string,
  body: BatchqueryOapiDingpayBillResponseBody,
}

/**
 * Description: 钉支付账单批量查询
 */
async function batchqueryOapiDingpayBill(request: BatchqueryOapiDingpayBillRequest): BatchqueryOapiDingpayBillResponse {
  var runtime = new Util.RuntimeOptions{};
  return batchqueryOapiDingpayBillEx(request, runtime);
}

/**
 * Description: 钉支付账单批量查询
 */
async function batchqueryOapiDingpayBillEx(request: BatchqueryOapiDingpayBillRequest, runtime: Util.RuntimeOptions): BatchqueryOapiDingpayBillResponse {
  Util.validateModel(request);
  var appParams = Util.stringifyMapValue(Util.toMap(request.params));
  return doRequestOApi('POST', '/topapi/dingpay/bill/batchquery', request.headers, appParams, runtime);
}

model SyncstatusOapiDingpayOrderParams = {
  orderNos: [ string ](description='钉支付订单号', maxItems=20, name='order_nos'),
}

model SyncstatusOapiDingpayOrderRequest = {
  headers?: map[string]string,
  params:SyncstatusOapiDingpayOrderParams,
}

model SyncstatusOapiDingpayOrderResponseBody = {
  result?: {
    orders?: [
      {
        orderNo?: string(description='钉支付订单号', name='order_no'),
        status?: string(description='订单状态', name='status'),
        amount?: int64(description='金额（单位：分）', name='amount'),
        applyPayOperatorUserid?: string(description='发起支付操作员userId', name='apply_pay_operator_userid'),
        bizCode?: string(description='业务代码', name='biz_code'),
        createOperatorUserid?: string(description='创单操作员userId', name='create_operator_userid'),
        extension?: string(description='扩展属性', name='extension'),
        gmtApplyPay?: string(description='申请支付时间', pattern='\\\\d{4}[-]\\\\d{1,2}[-]\\\\d{1,2}[T]\\\\d{2}:\\\\d{2}:\\\\d{2}[Z]', name='gmt_apply_pay'),
        gmtCreate?: string(description='创单时间', pattern='\\\\d{4}[-]\\\\d{1,2}[-]\\\\d{1,2}[T]\\\\d{2}:\\\\d{2}:\\\\d{2}[Z]', name='gmt_create'),
        gmtModified?: string(description='记录更新时间', pattern='\\\\d{4}[-]\\\\d{1,2}[-]\\\\d{1,2}[T]\\\\d{2}:\\\\d{2}:\\\\d{2}[Z]', name='gmt_modified'),
        gmtPay?: string(description='完成付款时间', pattern='\\\\d{4}[-]\\\\d{1,2}[-]\\\\d{1,2}[T]\\\\d{2}:\\\\d{2}:\\\\d{2}[Z]', name='gmt_pay'),
        outBizNo?: string(description='外部流水号', name='out_biz_no'),
        payChannel?: string(description='支付渠道', name='pay_channel'),
        payChannelBizNo?: string(description='支付渠道方流水号', name='pay_channel_biz_no'),
        payChannelPayerRealUid?: string(description='支付渠道方付款者UID', name='pay_channel_payer_real_uid'),
        payeeId?: string(description='收款方corpId或者userId', name='payee_id'),
        payeeUserType?: string(description='收款方类型', name='payee_user_type'),
        payerId?: string(description='付款方corpId或者userId', name='payer_id'),
        payerUserType?: string(description='付款方类型', name='payer_user_type'),
        sourceAppId?: string(description='来源应用ID', name='source_app_id'),
        title?: string(description='标题', name='title'),
      }
    ](description='orders', name='orders'),
  }(description='result', name='result'),
  errcode?: int64(description='钉钉错误代码', name='errcode'),
  errmsg?: string(description='错误文案', name='errmsg'),
  success?: boolean(description='是否成功', name='success'),
}

model SyncstatusOapiDingpayOrderResponse = {
  headers: map[string]string,
  body: SyncstatusOapiDingpayOrderResponseBody,
}

/**
 * Description: 钉支付账单状态手动同步
 */
async function syncstatusOapiDingpayOrder(request: SyncstatusOapiDingpayOrderRequest): SyncstatusOapiDingpayOrderResponse {
  var runtime = new Util.RuntimeOptions{};
  return syncstatusOapiDingpayOrderEx(request, runtime);
}

/**
 * Description: 钉支付账单状态手动同步
 */
async function syncstatusOapiDingpayOrderEx(request: SyncstatusOapiDingpayOrderRequest, runtime: Util.RuntimeOptions): SyncstatusOapiDingpayOrderResponse {
  Util.validateModel(request);
  var appParams = Util.stringifyMapValue(Util.toMap(request.params));
  return doRequestOApi('POST', '/topapi/dingpay/order/syncstatus', request.headers, appParams, runtime);
}

model BatchquerycountOapiDingpayBillParams = {
  billCategory?: string(description='INCOME收入、EXPENSE支出', name='bill_category'),
  bizCode?: string(description='业务代码', name='biz_code'),
  extension?: string(description='扩展属性', name='extension'),
  gmtApplyPayBeginTime?: string(description='申请付款开始时间', pattern='\\\\d{4}[-]\\\\d{1,2}[-]\\\\d{1,2}[T]\\\\d{2}:\\\\d{2}:\\\\d{2}[Z]', name='gmt_apply_pay_begin_time'),
  gmtApplyPayEndTime?: string(description='申请付款截止时间', pattern='\\\\d{4}[-]\\\\d{1,2}[-]\\\\d{1,2}[T]\\\\d{2}:\\\\d{2}:\\\\d{2}[Z]', name='gmt_apply_pay_end_time'),
  gmtCreateBeginTime?: string(description='创单开始时间', pattern='\\\\d{4}[-]\\\\d{1,2}[-]\\\\d{1,2}[T]\\\\d{2}:\\\\d{2}:\\\\d{2}[Z]', name='gmt_create_begin_time'),
  gmtCreateEndTime?: string(description='创单截止时间', pattern='\\\\d{4}[-]\\\\d{1,2}[-]\\\\d{1,2}[T]\\\\d{2}:\\\\d{2}:\\\\d{2}[Z]', name='gmt_create_end_time'),
  gmtPayBeginTime?: string(description='完成付款开始时间', pattern='\\\\d{4}[-]\\\\d{1,2}[-]\\\\d{1,2}[T]\\\\d{2}:\\\\d{2}:\\\\d{2}[Z]', name='gmt_pay_begin_time'),
  gmtPayEndTime?: string(description='完成付款截止时间', pattern='\\\\d{4}[-]\\\\d{1,2}[-]\\\\d{1,2}[T]\\\\d{2}:\\\\d{2}:\\\\d{2}[Z]', name='gmt_pay_end_time'),
  maxAmount?: int64(description='最大金额（单位：分）', name='max_amount'),
  minAmount?: int64(description='最小金额（单位：分）', name='min_amount'),
  payChannelList?: [ string ](description='支付渠道列表', maxItems=20, name='pay_channel_list'),
  payChannelPayerRealUid?: string(description='支付渠道方付款者实际出资UID', name='pay_channel_payer_real_uid'),
  payeeId?: string(description='收款者corpId或者userId', name='payee_id'),
  payeeUserType?: string(description='收款者类型', name='payee_user_type'),
  payerId?: string(description='付款者corpId或者userId', name='payer_id'),
  payerUserType?: string(description='付款者类型', name='payer_user_type'),
  statusList?: [ string ](description='状态列表', maxItems=20, name='status_list'),
  title?: string(description='标题', name='title'),
  applyPayOperatorUserid?: string(description='申请支付者userid', name='apply_pay_operator_userid'),
  createOperatorUserid?: string(description='创单者userid', name='create_operator_userid'),
  receiptorTypeList?: [ string ](description='收款人账户类型', maxItems=20, name='receiptor_type_list'),
  terminationReason?: string(description='中止支付原因', name='termination_reason'),
}

model BatchquerycountOapiDingpayBillRequest = {
  headers?: map[string]string,
  params?:BatchquerycountOapiDingpayBillParams,
}

model BatchquerycountOapiDingpayBillResponseBody = {
  errcode?: int64(description='错误代码', name='errcode'),
  errmsg?: string(description='错误文案', name='errmsg'),
  success?: boolean(description='是否成功', name='success'),
  result?: int64(description='记录总数', name='result'),
}

model BatchquerycountOapiDingpayBillResponse = {
  headers: map[string]string,
  body: BatchquerycountOapiDingpayBillResponseBody,
}

/**
 * Description: 钉支付账单查询总数
 */
async function batchquerycountOapiDingpayBill(request: BatchquerycountOapiDingpayBillRequest): BatchquerycountOapiDingpayBillResponse {
  var runtime = new Util.RuntimeOptions{};
  return batchquerycountOapiDingpayBillEx(request, runtime);
}

/**
 * Description: 钉支付账单查询总数
 */
async function batchquerycountOapiDingpayBillEx(request: BatchquerycountOapiDingpayBillRequest, runtime: Util.RuntimeOptions): BatchquerycountOapiDingpayBillResponse {
  Util.validateModel(request);
  var appParams = Util.stringifyMapValue(Util.toMap(request.params));
  return doRequestOApi('POST', '/topapi/dingpay/bill/batchquerycount', request.headers, appParams, runtime);
}

model MarkotherpayOapiDingpayOrderParams = {
  applyPayOperatorUserid?: string(description='标记支付的操作员userId', name='apply_pay_operator_userid'),
  orderNos?: [ string ](description='钉支付订单号', maxItems=20, name='order_nos'),
  extension?: string(description='扩展属性', name='extension'),
  payChannelPayerRealUid?: string(description='真实支付宝UID', name='pay_channel_payer_real_uid'),
}

model MarkotherpayOapiDingpayOrderRequest = {
  headers?: map[string]string,
  params?:MarkotherpayOapiDingpayOrderParams,
}

model MarkotherpayOapiDingpayOrderResponseBody = {
  result?: {
    resultMap?: string(description='标记结果', name='result_map'),
  }(description='result', name='result'),
  errcode?: int64(description='钉钉错误代码', name='errcode'),
  errmsg?: string(description='错误文案', name='errmsg'),
  success?: boolean(description='是否成功', name='success'),
}

model MarkotherpayOapiDingpayOrderResponse = {
  headers: map[string]string,
  body: MarkotherpayOapiDingpayOrderResponseBody,
}

/**
 * Description: 钉支付订单标记非支付宝渠道已付款
 */
async function markotherpayOapiDingpayOrder(request: MarkotherpayOapiDingpayOrderRequest): MarkotherpayOapiDingpayOrderResponse {
  var runtime = new Util.RuntimeOptions{};
  return markotherpayOapiDingpayOrderEx(request, runtime);
}

/**
 * Description: 钉支付订单标记非支付宝渠道已付款
 */
async function markotherpayOapiDingpayOrderEx(request: MarkotherpayOapiDingpayOrderRequest, runtime: Util.RuntimeOptions): MarkotherpayOapiDingpayOrderResponse {
  Util.validateModel(request);
  var appParams = Util.stringifyMapValue(Util.toMap(request.params));
  return doRequestOApi('POST', '/topapi/dingpay/order/markotherpay', request.headers, appParams, runtime);
}

model QuerytagOapiDingpayBillParams = {
  bizCode: string(description='业务代码', name='biz_code'),
  dayRange: int64(description='查询最近几天的标签', name='day_range'),
  sourceAppId: string(description='标签来源应用ID', name='source_app_id'),
}

model QuerytagOapiDingpayBillRequest = {
  headers?: map[string]string,
  params:QuerytagOapiDingpayBillParams,
}

model QuerytagOapiDingpayBillResponseBody = {
  errcode?: int64(description='错误代码', name='errcode'),
  errmsg?: string(description='错误文案', name='errmsg'),
  result?: {
    tags?: [ string ](description='标签列表', name='tags'),
  }(description='result', name='result'),
}

model QuerytagOapiDingpayBillResponse = {
  headers: map[string]string,
  body: QuerytagOapiDingpayBillResponseBody,
}

/**
 * Description: 查询钉支付账单一段时间内的Tag列表
 */
async function querytagOapiDingpayBill(request: QuerytagOapiDingpayBillRequest): QuerytagOapiDingpayBillResponse {
  var runtime = new Util.RuntimeOptions{};
  return querytagOapiDingpayBillEx(request, runtime);
}

/**
 * Description: 查询钉支付账单一段时间内的Tag列表
 */
async function querytagOapiDingpayBillEx(request: QuerytagOapiDingpayBillRequest, runtime: Util.RuntimeOptions): QuerytagOapiDingpayBillResponse {
  Util.validateModel(request);
  var appParams = Util.stringifyMapValue(Util.toMap(request.params));
  return doRequestOApi('POST', '/topapi/dingpay/bill/querytag', request.headers, appParams, runtime);
}

model ApplypayOapiDingpayOrderParams = {
  applyPayOperatorUserid: string(description='发起支付操作员userId', name='apply_pay_operator_userid'),
  orderNos: [ string ](description='订单号', maxItems=20, name='order_nos'),
  payChannel: string(description='支付渠道', name='pay_channel'),
  payChannelPayerRealUid?: string(description='支付渠道方付款者真实出资UID', name='pay_channel_payer_real_uid'),
  extension?: string(description='扩展属性', name='extension'),
}

model ApplypayOapiDingpayOrderRequest = {
  headers?: map[string]string,
  params:ApplypayOapiDingpayOrderParams,
}

model ApplypayOapiDingpayOrderResponseBody = {
  result?: {
    orderStr?: string(description='收银台需要的订单参数', name='orderStr'),
  }(description='result', name='result'),
  errcode?: int64(description='钉钉错误代码', name='errcode'),
  errmsg?: string(description='错误文案', name='errmsg'),
  success?: boolean(description='是否成功', name='success'),
}

model ApplypayOapiDingpayOrderResponse = {
  headers: map[string]string,
  body: ApplypayOapiDingpayOrderResponseBody,
}

/**
 * Description: 钉支付交易订单申请支付
 */
async function applypayOapiDingpayOrder(request: ApplypayOapiDingpayOrderRequest): ApplypayOapiDingpayOrderResponse {
  var runtime = new Util.RuntimeOptions{};
  return applypayOapiDingpayOrderEx(request, runtime);
}

/**
 * Description: 钉支付交易订单申请支付
 */
async function applypayOapiDingpayOrderEx(request: ApplypayOapiDingpayOrderRequest, runtime: Util.RuntimeOptions): ApplypayOapiDingpayOrderResponse {
  Util.validateModel(request);
  var appParams = Util.stringifyMapValue(Util.toMap(request.params));
  return doRequestOApi('POST', '/topapi/dingpay/order/applypay', request.headers, appParams, runtime);
}

model AddOapiAttendanceCorpInviteactiveParams = {
  adminMobile: string(description='管理员的手机号', name='admin_mobile'),
  invitedMobile: string(description='被邀请员工的手机号', name='invited_mobile'),
}

model AddOapiAttendanceCorpInviteactiveRequest = {
  headers?: map[string]string,
  params:AddOapiAttendanceCorpInviteactiveParams,
}

model AddOapiAttendanceCorpInviteactiveResponseBody = {
  result?: boolean(description='服务处理状态', name='result'),
  errcode?: int64(description='错误码', name='errcode'),
  errmsg?: string(description='错误描述', name='errmsg'),
  success?: boolean(description='是否成功', name='success'),
}

model AddOapiAttendanceCorpInviteactiveResponse = {
  headers: map[string]string,
  body: AddOapiAttendanceCorpInviteactiveResponseBody,
}

/**
 * Description: 喔趣企业管理员邀请指定员工参与邀1得1活动
 */
async function addOapiAttendanceCorpInviteactive(request: AddOapiAttendanceCorpInviteactiveRequest): AddOapiAttendanceCorpInviteactiveResponse {
  var runtime = new Util.RuntimeOptions{};
  return addOapiAttendanceCorpInviteactiveEx(request, runtime);
}

/**
 * Description: 喔趣企业管理员邀请指定员工参与邀1得1活动
 */
async function addOapiAttendanceCorpInviteactiveEx(request: AddOapiAttendanceCorpInviteactiveRequest, runtime: Util.RuntimeOptions): AddOapiAttendanceCorpInviteactiveResponse {
  Util.validateModel(request);
  var appParams = Util.stringifyMapValue(Util.toMap(request.params));
  return doRequestOApi('POST', '/topapi/attendance/corp/inviteactive/add', request.headers, appParams, runtime);
}

model OpenOapiAttendanceCorpInviteactiveParams = {
  adminName: string(description='姓名', name='admin_name'),
  adminPhone: string(description='手机号', name='admin_phone'),
}

model OpenOapiAttendanceCorpInviteactiveRequest = {
  headers?: map[string]string,
  params:OpenOapiAttendanceCorpInviteactiveParams,
}

model OpenOapiAttendanceCorpInviteactiveResponseBody = {
  result?: boolean(description='请求处理成功', name='result'),
  errcode?: int64(description='错误码', name='errcode'),
  errmsg?: string(description='错误描述', name='errmsg'),
  success?: boolean(description='是否成功', name='success'),
}

model OpenOapiAttendanceCorpInviteactiveResponse = {
  headers: map[string]string,
  body: OpenOapiAttendanceCorpInviteactiveResponseBody,
}

/**
 * Description: 喔趣企业开通邀1得1活动
 */
async function openOapiAttendanceCorpInviteactive(request: OpenOapiAttendanceCorpInviteactiveRequest): OpenOapiAttendanceCorpInviteactiveResponse {
  var runtime = new Util.RuntimeOptions{};
  return openOapiAttendanceCorpInviteactiveEx(request, runtime);
}

/**
 * Description: 喔趣企业开通邀1得1活动
 */
async function openOapiAttendanceCorpInviteactiveEx(request: OpenOapiAttendanceCorpInviteactiveRequest, runtime: Util.RuntimeOptions): OpenOapiAttendanceCorpInviteactiveResponse {
  Util.validateModel(request);
  var appParams = Util.stringifyMapValue(Util.toMap(request.params));
  return doRequestOApi('POST', '/topapi/attendance/corp/inviteactive/open', request.headers, appParams, runtime);
}

model GetOapiProcessFormParams = {
  processCode: string(description='流程模板code', name='process_code'),
}

model GetOapiProcessFormRequest = {
  headers?: map[string]string,
  params:GetOapiProcessFormParams,
}

model GetOapiProcessFormResponseBody = {
  result?: {
    formComponentVos?: [
      {
        children?: [
          {
            children?: [
              {
                props?: {
                  label?: string(description='标题', name='label'),
                  id?: string(description='id', name='id'),
                  disable?: boolean(description='是否可编辑', name='disable'),
                  bizAlias?: string(description='业务别名, 当组件属于业务套件的一部分时方便业务识别(DDBizSuite)', name='biz_alias'),
                  notPrint?: string(description='是否参与打印(1表示不打印, 0表示打印)', name='not_print'),
                  required?: boolean(description='必填', name='required'),
                  bizType?: string(description='业务套件类型(DDBizSuite)', name='biz_type'),
                  invisible?: boolean(description='隐藏字段', name='invisible'),
                  childFieldVisible?: string(description='套件内子组件可见性，key为label，value=false不可见', name='child_field_visible'),
                  notUpper?: string(description='是否需要大写 默认是需要; 1:不需要大写, 空或者0:需要大写', name='not_upper'),
                  statField?: [
                    {
                      unit?: string(description='单位', name='unit'),
                      upper?: boolean(description='是否大写', name='upper'),
                      label?: string(description='标题', name='label'),
                      id?: string(description='组件id', name='id'),
                    }
                  ](description='明细里需要统计的字段', name='stat_field'),
                  duration?: boolean(description='是否开启时长', name='duration'),
                  durationLabel?: string(description='时长文案', name='duration_label'),
                  attendTypeLabel?: string(description='考勤类型文案', name='attend_type_label'),
                  behaviorLinkage?: [
                    {
                      value?: string(description='联动对应的单选组件选项', name='value'),
                      targets?: [
                        {
                          behavior?: string(description='对应目标的行为', name='behavior'),
                          fieldId?: string(description='对应目标的id', name='field_id'),
                        }
                      ](description='联动对应的目标', name='targets'),
                    }
                  ](description='明细里的表单联动属性', name='behavior_linkage'),
                  format?: string(description='时间格式', name='format'),
                  options?: [ string ](description='选项列表', name='options'),
                }(description='组件属性', name='props'),
                componentName?: string(description='控件类型', name='component_name'),
              }
            ](description='子组件', name='children'),
            props?: {
              label?: string(description='标题', name='label'),
              id?: string(description='id', name='id'),
              disable?: boolean(description='是否可编辑', name='disable'),
              bizAlias?: string(description='业务别名, 当组件属于业务套件的一部分时方便业务识别(DDBizSuite)', name='biz_alias'),
              notPrint?: string(description='是否参与打印(1表示不打印, 0表示打印)', name='not_print'),
              required?: boolean(description='必填', name='required'),
              bizType?: string(description='业务套件类型(DDBizSuite)', name='biz_type'),
              invisible?: boolean(description='隐藏字段', name='invisible'),
              childFieldVisible?: string(description='套件内子组件可见性，key为label，value=false不可见', name='child_field_visible'),
              notUpper?: string(description='是否需要大写 默认是需要; 1:不需要大写, 空或者0:需要大写', name='not_upper'),
              statField?: [
                {
                  unit?: string(description='单位', name='unit'),
                  upper?: boolean(description='是否大写', name='upper'),
                  label?: string(description='标题', name='label'),
                  id?: string(description='组件id', name='id'),
                }
              ](description='明细里需要统计的字段', name='stat_field'),
              duration?: boolean(description='是否开启时长', name='duration'),
              durationLabel?: string(description='时长文案', name='duration_label'),
              attendTypeLabel?: string(description='考勤类型文案', name='attend_type_label'),
              behaviorLinkage?: [
                {
                  value?: string(description='联动对应的单选组件选项', name='value'),
                  targets?: [
                    {
                      fieldId?: string(description='对应目标的id', name='field_id'),
                      behavior?: string(description='对应目标的行为', name='behavior'),
                    }
                  ](description='联动对应的目标', name='targets'),
                }
              ](description='明细里的表单联动属性', name='behavior_linkage'),
              format?: string(description='时间格式', name='format'),
              options?: [ string ](description='选项列表', name='options'),
            }(description='组件属性', name='props'),
            componentName?: string(description='控件类型', name='component_name'),
          }
        ](description='子组件', name='children'),
        props?: {
          label?: string(description='标题', name='label'),
          id?: string(description='id', name='id'),
          disable?: boolean(description='是否可编辑', name='disable'),
          bizType?: string(description='业务套件类型(DDBizSuite)', name='biz_type'),
          bizAlias?: string(description='业务别名, 当组件属于业务套件的一部分时方便业务识别(DDBizSuite)', name='biz_alias'),
          notPrint?: string(description='是否参与打印(1表示不打印, 0表示打印)', name='not_print'),
          required?: boolean(description='必填', name='required'),
          invisible?: boolean(description='隐藏字段', name='invisible'),
          childFieldVisible?: string(description='套件内子组件可见性，key为label，value=false不可见', name='child_field_visible'),
          notUpper?: string(description='是否需要大写 默认是需要; 1:不需要大写, 空或者0:需要大写', name='not_upper'),
          statField?: [
            {
              unit?: string(description='单位', name='unit'),
              upper?: boolean(description='是否大写', name='upper'),
              label?: string(description='标题', name='label'),
              id?: string(description='组件id', name='id'),
            }
          ](description='明细里需要统计的字段', name='stat_field'),
          duration?: boolean(description='是否开启时长', name='duration'),
          durationLabel?: string(description='时长文案', name='duration_label'),
          attendTypeLabel?: string(description='考勤类型文案', name='attend_type_label'),
          behaviorLinkage?: [
            {
              value?: string(description='联动对应的单选组件选项', name='value'),
              targets?: [
                {
                  fieldId?: string(description='对应目标的id', name='field_id'),
                  behavior?: string(description='对应目标的行为', name='behavior'),
                }
              ](description='联动对应的目标', name='targets'),
            }
          ](description='明细里的表单联动属性', name='behavior_linkage'),
          format?: string(description='时间格式', name='format'),
          options?: [ string ](description='选项列表', name='options'),
        }(description='组件属性', name='props'),
        isOldSuite?: boolean(description='是否为旧套件', name='is_old_suite'),
        componentName?: string(description='控件类型', name='component_name'),
      }
    ](description='表单列表', name='form_component_vos'),
    iconUrl?: string(description='图片地址', name='icon_url'),
    name?: string(description='模板名称', name='name'),
    handSignEnable?: boolean(description='是否开启手写签名', name='hand_sign_enable'),
    processConfig?: string(description='流程相关信息', name='processConfig'),
  }(description='result', name='result'),
  errcode?: int64(description='错误码', name='errcode'),
  errmsg?: string(description='错误信息', name='errmsg'),
  success?: boolean(description='是否成功', name='success'),
}

model GetOapiProcessFormResponse = {
  headers: map[string]string,
  body: GetOapiProcessFormResponseBody,
}

/**
 * Description: ISV通过这个接口获取流程的表单schema信息
 */
async function getOapiProcessForm(request: GetOapiProcessFormRequest): GetOapiProcessFormResponse {
  var runtime = new Util.RuntimeOptions{};
  return getOapiProcessFormEx(request, runtime);
}

/**
 * Description: ISV通过这个接口获取流程的表单schema信息
 */
async function getOapiProcessFormEx(request: GetOapiProcessFormRequest, runtime: Util.RuntimeOptions): GetOapiProcessFormResponse {
  Util.validateModel(request);
  var appParams = Util.stringifyMapValue(Util.toMap(request.params));
  return doRequestOApi('POST', '/topapi/process/form/get', request.headers, appParams, runtime);
}

model SaveOapiProcessTemplateParams = {
  processCode: string(description='流程编码', name='process_code'),
  vm: string(description='vm文件', name='vm'),
  font: string(description='字体', name='font'),
}

model SaveOapiProcessTemplateRequest = {
  headers?: map[string]string,
  params:SaveOapiProcessTemplateParams,
}

model SaveOapiProcessTemplateResponseBody = {
  errcode?: int64(description='错误码', name='errcode'),
  errmsg?: string(description='错误信息', name='errmsg'),
  success?: boolean(description='是否成功', name='success'),
}

model SaveOapiProcessTemplateResponse = {
  headers: map[string]string,
  body: SaveOapiProcessTemplateResponseBody,
}

/**
 * Description: 自定义打印模板文件保存
 */
async function saveOapiProcessTemplate(request: SaveOapiProcessTemplateRequest): SaveOapiProcessTemplateResponse {
  var runtime = new Util.RuntimeOptions{};
  return saveOapiProcessTemplateEx(request, runtime);
}

/**
 * Description: 自定义打印模板文件保存
 */
async function saveOapiProcessTemplateEx(request: SaveOapiProcessTemplateRequest, runtime: Util.RuntimeOptions): SaveOapiProcessTemplateResponse {
  Util.validateModel(request);
  var appParams = Util.stringifyMapValue(Util.toMap(request.params));
  return doRequestOApi('POST', '/topapi/process/template/save', request.headers, appParams, runtime);
}

model ListOapiMaterialArticleParams = {
  unionid: string(description='服务号的unionid', name='unionid'),
  pageSize: int64(description='每页条数', maximum=20, name='page_size'),
  pageStart: int64(description='页码', name='page_start'),
}

model ListOapiMaterialArticleRequest = {
  headers?: map[string]string,
  params:ListOapiMaterialArticleParams,
}

model ListOapiMaterialArticleResponseBody = {
  items?: [
    {
      articleId?: int64(description='文章id', name='article_id'),
      title?: string(description='标题', name='title'),
      thumbMediaId?: string(description='封面图', name='thumb_media_id'),
      publishStatus?: int64(description='发布状态', name='publish_status'),
      publishTime?: int64(description='发布时间', name='publish_time'),
      createTime?: int64(description='创建时间', name='create_time'),
      updateTime?: int64(description='更新时间', name='update_time'),
      content?: string(description='内容', name='content'),
      url?: string(description='链接', name='url'),
      digest?: string(description='摘要', name='digest'),
    }
  ](description='文章列表', name='items'),
  totalCount?: int64(description='总数', name='total_count'),
  errcode?: int64(description='错误码', name='errcode'),
  errmsg?: string(description='错误信息', name='errmsg'),
  itemCount?: int64(description='本页条数', name='item_count'),
}

model ListOapiMaterialArticleResponse = {
  headers: map[string]string,
  body: ListOapiMaterialArticleResponseBody,
}

/**
 * Description: 查询文章列表
 */
async function listOapiMaterialArticle(request: ListOapiMaterialArticleRequest): ListOapiMaterialArticleResponse {
  var runtime = new Util.RuntimeOptions{};
  return listOapiMaterialArticleEx(request, runtime);
}

/**
 * Description: 查询文章列表
 */
async function listOapiMaterialArticleEx(request: ListOapiMaterialArticleRequest, runtime: Util.RuntimeOptions): ListOapiMaterialArticleResponse {
  Util.validateModel(request);
  var appParams = Util.stringifyMapValue(Util.toMap(request.params));
  return doRequestOApi('POST', '/topapi/material/article/list', request.headers, appParams, runtime);
}

model UpdateOapiMaterialNewsParams = {
  unionid: string(description='服务号的unionid', name='unionid'),
  mediaId: string(description='消息卡片素材id', name='media_id'),
  articles?: [
    {
      articleId?: int64(description='文章id', name='article_id'),
    }
  ](description='文章列表', maxItems=8, name='articles'),
}

model UpdateOapiMaterialNewsRequest = {
  headers?: map[string]string,
  params:UpdateOapiMaterialNewsParams,
}

model UpdateOapiMaterialNewsResponseBody = {
  errmsg?: string(description='错误信息', name='errmsg'),
  errcode?: int64(description='错误码', name='errcode'),
}

model UpdateOapiMaterialNewsResponse = {
  headers: map[string]string,
  body: UpdateOapiMaterialNewsResponseBody,
}

/**
 * Description: 消息卡片素材更新接口
 */
async function updateOapiMaterialNews(request: UpdateOapiMaterialNewsRequest): UpdateOapiMaterialNewsResponse {
  var runtime = new Util.RuntimeOptions{};
  return updateOapiMaterialNewsEx(request, runtime);
}

/**
 * Description: 消息卡片素材更新接口
 */
async function updateOapiMaterialNewsEx(request: UpdateOapiMaterialNewsRequest, runtime: Util.RuntimeOptions): UpdateOapiMaterialNewsResponse {
  Util.validateModel(request);
  var appParams = Util.stringifyMapValue(Util.toMap(request.params));
  return doRequestOApi('POST', '/topapi/material/news/update', request.headers, appParams, runtime);
}

model GetOapiMaterialNewsParams = {
  unionid: string(description='服务号的unionid', name='unionid'),
  mediaId: string(description='消息卡片素材id', name='media_id'),
}

model GetOapiMaterialNewsRequest = {
  headers?: map[string]string,
  params:GetOapiMaterialNewsParams,
}

model GetOapiMaterialNewsResponseBody = {
  errmsg?: string(description='错误信息', name='errmsg'),
  errcode?: int64(description='错误码', name='errcode'),
  mediaId?: string(description='卡片素材id', name='media_id'),
  updateTime?: int64(description='消息卡片更新时间', name='update_time'),
  articles?: [
    {
      articleId?: int64(description='文章id', name='article_id'),
      title?: string(description='标题', name='title'),
      content?: string(description='文章内容', name='content'),
      thumbMediaId?: string(description='封面图片的素材id', name='thumb_media_id'),
      publishStatus?: int64(description='publish_status，发布状态，0 未发布，1 已发布。文章第一次发布后，状态置为1，已发布文章支持修改，修改后此状态保持为1，每次修改文章后需要再次发布内容才会生效。', name='publish_status'),
      publishTime?: int64(description='发布时间', name='publish_time'),
      userViewCount?: int64(description='已读用户数', name='user_view_count'),
      totalViewCount?: int64(description='阅读次数', name='total_view_count'),
      createTime?: int64(description='文章创建时间', name='create_time'),
      updateTime?: int64(description='文章更新时间', name='update_time'),
      url?: string(description='文章链接', name='url'),
      digest?: string(description='摘要', name='digest'),
    }
  ](description='文章列表', name='articles'),
}

model GetOapiMaterialNewsResponse = {
  headers: map[string]string,
  body: GetOapiMaterialNewsResponseBody,
}

/**
 * Description: 获取消息卡片素材详情
 */
async function getOapiMaterialNews(request: GetOapiMaterialNewsRequest): GetOapiMaterialNewsResponse {
  var runtime = new Util.RuntimeOptions{};
  return getOapiMaterialNewsEx(request, runtime);
}

/**
 * Description: 获取消息卡片素材详情
 */
async function getOapiMaterialNewsEx(request: GetOapiMaterialNewsRequest, runtime: Util.RuntimeOptions): GetOapiMaterialNewsResponse {
  Util.validateModel(request);
  var appParams = Util.stringifyMapValue(Util.toMap(request.params));
  return doRequestOApi('POST', '/topapi/material/news/get', request.headers, appParams, runtime);
}

model ListOapiMaterialNewsParams = {
  unionid: string(description='服务号的unionid', name='unionid'),
  pageStart?: int64(description='页码，第几页，从1开始算', name='page_start'),
  pageSize?: int64(description='每页条数', maximum=20, minimum=1, name='page_size'),
}

model ListOapiMaterialNewsRequest = {
  headers?: map[string]string,
  params:ListOapiMaterialNewsParams,
}

model ListOapiMaterialNewsResponseBody = {
  errmsg?: string(description='错误信息', name='errmsg'),
  errcode?: int64(description='错误码', name='errcode'),
  totalCount?: int64(description='总记录数', name='total_count'),
  itemCount?: int64(description='当前返回记录数', name='item_count'),
  items?: [
    {
      articles?: [
        {
          articleId?: int64(description='文章id', name='article_id'),
          title?: string(description='标题', name='title'),
          thumbMediaId?: string(description='封面图片的素材id', name='thumb_media_id'),
          publishStatus?: int64(description='发布状态，0-未发布，1-已发布', name='publish_status'),
          publishTime?: int64(description='发布时间', name='publish_time'),
          userViewCount?: int64(description='已读用户数', name='user_view_count'),
          totalViewCount?: int64(description='阅读次数', name='total_view_count'),
          createTime?: int64(description='创建时间', name='create_time'),
          updateTime?: int64(description='修改时间', name='update_time'),
          url?: string(description='文章链接', name='url'),
          content?: string(description='文章内容', name='content'),
          digest?: string(description='摘要', name='digest'),
        }
      ](description='文章列表', name='articles'),
      updateTime?: int64(description='消息卡片更新时间', name='update_time'),
      mediaId?: string(description='消息卡片的素材id', name='media_id'),
    }
  ](description='卡片列表', name='items'),
}

model ListOapiMaterialNewsResponse = {
  headers: map[string]string,
  body: ListOapiMaterialNewsResponseBody,
}

/**
 * Description: 查询消息卡片素材列表
 */
async function listOapiMaterialNews(request: ListOapiMaterialNewsRequest): ListOapiMaterialNewsResponse {
  var runtime = new Util.RuntimeOptions{};
  return listOapiMaterialNewsEx(request, runtime);
}

/**
 * Description: 查询消息卡片素材列表
 */
async function listOapiMaterialNewsEx(request: ListOapiMaterialNewsRequest, runtime: Util.RuntimeOptions): ListOapiMaterialNewsResponse {
  Util.validateModel(request);
  var appParams = Util.stringifyMapValue(Util.toMap(request.params));
  return doRequestOApi('POST', '/topapi/material/news/list', request.headers, appParams, runtime);
}

model DeleteOapiMaterialNewsParams = {
  unionid: string(description='服务号的unionid', name='unionid'),
  mediaId: string(description='消息卡片素材id', name='media_id'),
}

model DeleteOapiMaterialNewsRequest = {
  headers?: map[string]string,
  params:DeleteOapiMaterialNewsParams,
}

model DeleteOapiMaterialNewsResponseBody = {
  errmsg?: string(description='错误信息', name='errmsg'),
  errcode?: int64(description='错误码', name='errcode'),
}

model DeleteOapiMaterialNewsResponse = {
  headers: map[string]string,
  body: DeleteOapiMaterialNewsResponseBody,
}

/**
 * Description: 删除一个消息卡片素材
 */
async function deleteOapiMaterialNews(request: DeleteOapiMaterialNewsRequest): DeleteOapiMaterialNewsResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteOapiMaterialNewsEx(request, runtime);
}

/**
 * Description: 删除一个消息卡片素材
 */
async function deleteOapiMaterialNewsEx(request: DeleteOapiMaterialNewsRequest, runtime: Util.RuntimeOptions): DeleteOapiMaterialNewsResponse {
  Util.validateModel(request);
  var appParams = Util.stringifyMapValue(Util.toMap(request.params));
  return doRequestOApi('POST', '/topapi/material/news/delete', request.headers, appParams, runtime);
}

model AddOapiMaterialNewsParams = {
  articles: [
    {
      articleId?: int64(description='文章id', name='article_id'),
    }
  ](description='文章列表', maxItems=8, name='articles'),
  unionid: string(description='服务号的unionid', name='unionid'),
}

model AddOapiMaterialNewsRequest = {
  headers?: map[string]string,
  params:AddOapiMaterialNewsParams,
}

model AddOapiMaterialNewsResponseBody = {
  errmsg?: string(description='错误信息', name='errmsg'),
  mediaId?: string(description='卡片素材id', name='media_id'),
  errcode?: int64(description='错误码', name='errcode'),
}

model AddOapiMaterialNewsResponse = {
  headers: map[string]string,
  body: AddOapiMaterialNewsResponseBody,
}

/**
 * Description: 新增消息卡片素材
 */
async function addOapiMaterialNews(request: AddOapiMaterialNewsRequest): AddOapiMaterialNewsResponse {
  var runtime = new Util.RuntimeOptions{};
  return addOapiMaterialNewsEx(request, runtime);
}

/**
 * Description: 新增消息卡片素材
 */
async function addOapiMaterialNewsEx(request: AddOapiMaterialNewsRequest, runtime: Util.RuntimeOptions): AddOapiMaterialNewsResponse {
  Util.validateModel(request);
  var appParams = Util.stringifyMapValue(Util.toMap(request.params));
  return doRequestOApi('POST', '/topapi/material/news/add', request.headers, appParams, runtime);
}

model DeleteOapiMaterialArticleParams = {
  unionid: string(description='服务号的unionid', name='unionid'),
  articleId: int64(description='文章id', name='article_id'),
}

model DeleteOapiMaterialArticleRequest = {
  headers?: map[string]string,
  params:DeleteOapiMaterialArticleParams,
}

model DeleteOapiMaterialArticleResponseBody = {
  errcode?: int64(description='错误码', name='errcode'),
  errmsg?: string(description='错误信息', name='errmsg'),
}

model DeleteOapiMaterialArticleResponse = {
  headers: map[string]string,
  body: DeleteOapiMaterialArticleResponseBody,
}

/**
 * Description: 服务窗删除文章（使得文章页不可访问）
 */
async function deleteOapiMaterialArticle(request: DeleteOapiMaterialArticleRequest): DeleteOapiMaterialArticleResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteOapiMaterialArticleEx(request, runtime);
}

/**
 * Description: 服务窗删除文章（使得文章页不可访问）
 */
async function deleteOapiMaterialArticleEx(request: DeleteOapiMaterialArticleRequest, runtime: Util.RuntimeOptions): DeleteOapiMaterialArticleResponse {
  Util.validateModel(request);
  var appParams = Util.stringifyMapValue(Util.toMap(request.params));
  return doRequestOApi('POST', '/topapi/material/article/delete', request.headers, appParams, runtime);
}

model PublishOapiMaterialArticleParams = {
  unionid: string(description='服务号的unionid', name='unionid'),
  articleId: int64(description='文章id', name='article_id'),
}

model PublishOapiMaterialArticleRequest = {
  headers?: map[string]string,
  params:PublishOapiMaterialArticleParams,
}

model PublishOapiMaterialArticleResponseBody = {
  url?: string(description='生成页面的url', name='url'),
  errcode?: int64(description='错误码', name='errcode'),
  errmsg?: string(description='错误信息', name='errmsg'),
}

model PublishOapiMaterialArticleResponse = {
  headers: map[string]string,
  body: PublishOapiMaterialArticleResponseBody,
}

/**
 * Description: 服务窗发布文章成页面
 */
async function publishOapiMaterialArticle(request: PublishOapiMaterialArticleRequest): PublishOapiMaterialArticleResponse {
  var runtime = new Util.RuntimeOptions{};
  return publishOapiMaterialArticleEx(request, runtime);
}

/**
 * Description: 服务窗发布文章成页面
 */
async function publishOapiMaterialArticleEx(request: PublishOapiMaterialArticleRequest, runtime: Util.RuntimeOptions): PublishOapiMaterialArticleResponse {
  Util.validateModel(request);
  var appParams = Util.stringifyMapValue(Util.toMap(request.params));
  return doRequestOApi('POST', '/topapi/material/article/publish', request.headers, appParams, runtime);
}

model GetOapiMaterialArticleParams = {
  unionid: string(description='服务号的unionid', name='unionid'),
  articleId: int64(description='文章id', name='article_id'),
}

model GetOapiMaterialArticleRequest = {
  headers?: map[string]string,
  params:GetOapiMaterialArticleParams,
}

model GetOapiMaterialArticleResponseBody = {
  articleId?: int64(description='文章id', name='article_id'),
  title?: string(description='标题', name='title'),
  thumbMediaId?: string(description='封面图', name='thumb_media_id'),
  publishStatus?: int64(description='发布状态', name='publish_status'),
  publishTime?: int64(description='发布时间', name='publish_time'),
  createTime?: int64(description='创建时间', name='create_time'),
  updateTime?: int64(description='更新时间', name='update_time'),
  content?: string(description='html码', name='content'),
  errcode?: int64(description='错误码', name='errcode'),
  errmsg?: string(description='错误描述', name='errmsg'),
  url?: string(description='跳转链接', name='url'),
  digest?: string(description='摘要', name='digest'),
}

model GetOapiMaterialArticleResponse = {
  headers: map[string]string,
  body: GetOapiMaterialArticleResponseBody,
}

/**
 * Description: 获取单篇文章信息
 */
async function getOapiMaterialArticle(request: GetOapiMaterialArticleRequest): GetOapiMaterialArticleResponse {
  var runtime = new Util.RuntimeOptions{};
  return getOapiMaterialArticleEx(request, runtime);
}

/**
 * Description: 获取单篇文章信息
 */
async function getOapiMaterialArticleEx(request: GetOapiMaterialArticleRequest, runtime: Util.RuntimeOptions): GetOapiMaterialArticleResponse {
  Util.validateModel(request);
  var appParams = Util.stringifyMapValue(Util.toMap(request.params));
  return doRequestOApi('POST', '/topapi/material/article/get', request.headers, appParams, runtime);
}

model UpdateOapiMaterialArticleParams = {
  article: {
    thumbMediaId?: string(description='封面图', name='thumb_media_id'),
    content: string(description='html码', maxLength=65535, name='content'),
    title: string(description='标题', maxLength=30, name='title'),
    articleId: int64(description='文章id', name='article_id'),
    digest?: string(description='摘要', maxLength=128, name='digest'),
  }(description='文章对象', name='article'),
  unionid: string(description='服务号的unionid', name='unionid'),
}

model UpdateOapiMaterialArticleRequest = {
  headers?: map[string]string,
  params:UpdateOapiMaterialArticleParams,
}

model UpdateOapiMaterialArticleResponseBody = {
  errcode?: int64(description='错误码', name='errcode'),
  errmsg?: string(description='错误信息', name='errmsg'),
}

model UpdateOapiMaterialArticleResponse = {
  headers: map[string]string,
  body: UpdateOapiMaterialArticleResponseBody,
}

/**
 * Description: 服务窗用于修改文章详情
 */
async function updateOapiMaterialArticle(request: UpdateOapiMaterialArticleRequest): UpdateOapiMaterialArticleResponse {
  var runtime = new Util.RuntimeOptions{};
  return updateOapiMaterialArticleEx(request, runtime);
}

/**
 * Description: 服务窗用于修改文章详情
 */
async function updateOapiMaterialArticleEx(request: UpdateOapiMaterialArticleRequest, runtime: Util.RuntimeOptions): UpdateOapiMaterialArticleResponse {
  Util.validateModel(request);
  var appParams = Util.stringifyMapValue(Util.toMap(request.params));
  return doRequestOApi('POST', '/topapi/material/article/update', request.headers, appParams, runtime);
}

model AddOapiMaterialArticleParams = {
  article: {
    thumbMediaId?: string(description='图文消息的封面图片素材id', name='thumb_media_id'),
    content: string(description='文章内容（html码）', maxLength=65535, name='content'),
    title: string(description='标题', maxLength=64, name='title'),
    uuid: string(description='幂等参数', name='uuid'),
    digest?: string(description='摘要', maxLength=128, name='digest'),
  }(description='文章参数对象', name='article'),
  unionid: string(description='服务号的unionid', name='unionid'),
}

model AddOapiMaterialArticleRequest = {
  headers?: map[string]string,
  params:AddOapiMaterialArticleParams,
}

model AddOapiMaterialArticleResponseBody = {
  errcode?: int64(description='错误码', name='errcode'),
  errmsg?: string(description='信息', name='errmsg'),
  success?: boolean(description='是否成功', name='success'),
  articleId?: int64(description='文章id', name='article_id'),
}

model AddOapiMaterialArticleResponse = {
  headers: map[string]string,
  body: AddOapiMaterialArticleResponseBody,
}

/**
 * Description: 服务窗新建文章使用
 */
async function addOapiMaterialArticle(request: AddOapiMaterialArticleRequest): AddOapiMaterialArticleResponse {
  var runtime = new Util.RuntimeOptions{};
  return addOapiMaterialArticleEx(request, runtime);
}

/**
 * Description: 服务窗新建文章使用
 */
async function addOapiMaterialArticleEx(request: AddOapiMaterialArticleRequest, runtime: Util.RuntimeOptions): AddOapiMaterialArticleResponse {
  Util.validateModel(request);
  var appParams = Util.stringifyMapValue(Util.toMap(request.params));
  return doRequestOApi('POST', '/topapi/material/article/add', request.headers, appParams, runtime);
}

model DeleteCorpExtParams = {
  userid: string(description='外部联系人的userId', maxLength=150, name='userid'),
}

model DeleteCorpExtRequest = {
  headers?: map[string]string,
  params:DeleteCorpExtParams,
}

model DeleteCorpExtResponse = {
  headers: map[string]string,
}

/**
 * Description: dingtalk.corp.ext.delete
 */
async function deleteCorpExt(request: DeleteCorpExtRequest): DeleteCorpExtResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteCorpExtEx(request, runtime);
}

/**
 * Description: dingtalk.corp.ext.delete
 */
async function deleteCorpExtEx(request: DeleteCorpExtRequest, runtime: Util.RuntimeOptions): DeleteCorpExtResponse {
  Util.validateModel(request);
  var appParams = Util.stringifyMapValue(Util.toMap(request.params));
  return doRequest('dingtalk.corp.ext.delete', 'POST', '/router/rest', request.headers, appParams, runtime);
}

model AddCorpExtParams = {
  contact: {
    title?: string(description='职位', name='title'),
    shareDeptids?: [ int64 ](description='共享给的部门ID', maxItems=20, name='share_deptids'),
    labelIds: [ int64 ](description='标签列表', maxItems=20, name='label_ids'),
    remark?: string(description='备注', name='remark'),
    address?: string(description='地址', name='address'),
    name: string(description='名称', name='name'),
    followerUserid: string(description='负责人userId', name='follower_userid'),
    stateCode: string(description='手机号国家码', name='state_code'),
    companyName?: string(description='企业名', name='company_name'),
    shareUserids?: [ string ](description='共享给的员工userId列表', maxItems=20, name='share_userids'),
    mobile: string(description='手机号', name='mobile'),
  }(description='外部联系人信息', name='contact'),
}

model AddCorpExtRequest = {
  headers?: map[string]string,
  params:AddCorpExtParams,
}

model AddCorpExtResponseBody = {
  userid?: string(description='新外部联系人的userId', name='userid'),
}

model AddCorpExtResponse = {
  headers: map[string]string,
  body: AddCorpExtResponseBody,
}

/**
 * Description: 钉钉企业外部通讯录, 添加外部联系人
 */
async function addCorpExt(request: AddCorpExtRequest): AddCorpExtResponse {
  var runtime = new Util.RuntimeOptions{};
  return addCorpExtEx(request, runtime);
}

/**
 * Description: 钉钉企业外部通讯录, 添加外部联系人
 */
async function addCorpExtEx(request: AddCorpExtRequest, runtime: Util.RuntimeOptions): AddCorpExtResponse {
  Util.validateModel(request);
  var appParams = Util.stringifyMapValue(Util.toMap(request.params));
  return doRequest('dingtalk.corp.ext.add', 'POST', '/router/rest', request.headers, appParams, runtime);
}

model QueryOapiSmartdeviceQrParams = {
  qrContent?: string(description='二维码内容', name='qr_content'),
}

model QueryOapiSmartdeviceQrRequest = {
  headers?: map[string]string,
  params?:QueryOapiSmartdeviceQrParams,
}

model QueryOapiSmartdeviceQrResponseBody = {
  result?: string(description='返回结果', name='result'),
  success?: boolean(description='是否成功', name='success'),
  errcode?: int64(description='错误代码', name='errcode'),
  errmsg?: string(description='错误信息', name='errmsg'),
}

model QueryOapiSmartdeviceQrResponse = {
  headers: map[string]string,
  body: QueryOapiSmartdeviceQrResponseBody,
}

/**
 * Description: 查询智能硬件二维码信息的接口
 */
async function queryOapiSmartdeviceQr(request: QueryOapiSmartdeviceQrRequest): QueryOapiSmartdeviceQrResponse {
  var runtime = new Util.RuntimeOptions{};
  return queryOapiSmartdeviceQrEx(request, runtime);
}

/**
 * Description: 查询智能硬件二维码信息的接口
 */
async function queryOapiSmartdeviceQrEx(request: QueryOapiSmartdeviceQrRequest, runtime: Util.RuntimeOptions): QueryOapiSmartdeviceQrResponse {
  Util.validateModel(request);
  var appParams = Util.stringifyMapValue(Util.toMap(request.params));
  return doRequestOApi('POST', '/topapi/smartdevice/qr/query', request.headers, appParams, runtime);
}

model ListCorpExtParams = {
  size?: int64(description='分页大小, 最大100', name='size'),
  offset?: int64(description='偏移位置', name='offset'),
}

model ListCorpExtRequest = {
  headers?: map[string]string,
  params?:ListCorpExtParams,
}

model ListCorpExtResponseBody = {
  result?: string(description='result', name='result'),
}

model ListCorpExtResponse = {
  headers: map[string]string,
  body: ListCorpExtResponseBody,
}

/**
 * Description: 外部联系人列表
 */
async function listCorpExt(request: ListCorpExtRequest): ListCorpExtResponse {
  var runtime = new Util.RuntimeOptions{};
  return listCorpExtEx(request, runtime);
}

/**
 * Description: 外部联系人列表
 */
async function listCorpExtEx(request: ListCorpExtRequest, runtime: Util.RuntimeOptions): ListCorpExtResponse {
  Util.validateModel(request);
  var appParams = Util.stringifyMapValue(Util.toMap(request.params));
  return doRequest('dingtalk.corp.ext.list', 'POST', '/router/rest', request.headers, appParams, runtime);
}

model ListlabelgroupsCorpExtParams = {
  size?: int64(description='分页大小,最大100', name='size'),
  offset?: int64(description='偏移位置', name='offset'),
}

model ListlabelgroupsCorpExtRequest = {
  headers?: map[string]string,
  params?:ListlabelgroupsCorpExtParams,
}

model ListlabelgroupsCorpExtResponseBody = {
  result?: string(description='result', name='result'),
}

model ListlabelgroupsCorpExtResponse = {
  headers: map[string]string,
  body: ListlabelgroupsCorpExtResponseBody,
}

/**
 * Description: 拉取标签列表
 */
async function listlabelgroupsCorpExt(request: ListlabelgroupsCorpExtRequest): ListlabelgroupsCorpExtResponse {
  var runtime = new Util.RuntimeOptions{};
  return listlabelgroupsCorpExtEx(request, runtime);
}

/**
 * Description: 拉取标签列表
 */
async function listlabelgroupsCorpExtEx(request: ListlabelgroupsCorpExtRequest, runtime: Util.RuntimeOptions): ListlabelgroupsCorpExtResponse {
  Util.validateModel(request);
  var appParams = Util.stringifyMapValue(Util.toMap(request.params));
  return doRequest('dingtalk.corp.ext.listlabelgroups', 'POST', '/router/rest', request.headers, appParams, runtime);
}

model GetOapiCollectionFormParams = {
  formCode: string(description='code', name='form_code'),
  actionDate: string(description='毫秒级时间戳', name='action_date'),
}

model GetOapiCollectionFormRequest = {
  headers?: map[string]string,
  params:GetOapiCollectionFormParams,
}

model GetOapiCollectionFormResponseBody = {
  errcode?: int64(description='错误码', name='errcode'),
  errmsg?: string(description='错误信息', name='errmsg'),
  result?: {
    content?: string(description='schema', name='content'),
    shouldParticipationCnt?: int64(description='应参与人数', name='should_participation_cnt'),
    visibleList?: [
      {
        type?: int64(description='可见性类型 0部门 1人员 2角色 3群组cid', name='type'),
        value?: string(description='值', name='value'),
      }
    ](description='发送范围', name='visible_list'),
    setting?: {
      formType?: int64(description='是否循环填表', name='form_type'),
      loopTime?: string(description='填表时间', name='loop_time'),
      loopDays?: [ int64 ](description='填表周期，周一到周日分别用1-7表示', name='loop_days'),
      shouldParticipationCnt?: int64(description='应填人数', name='should_participation_cnt'),
      endTime?: string(description='填表截止时间', pattern='\\\\d{4}[-]\\\\d{1,2}[-]\\\\d{1,2}[T]\\\\d{2}:\\\\d{2}:\\\\d{2}[Z]', name='end_time'),
      createTime?: string(description='创建时间', pattern='\\\\d{4}[-]\\\\d{1,2}[-]\\\\d{1,2}[T]\\\\d{2}:\\\\d{2}:\\\\d{2}[Z]', name='create_time'),
      bizType?: int64(description='表单类型', name='biz_type'),
      stop?: boolean(description='填表是否终止的标记', name='stop'),
    }(description='设置', name='setting'),
    name?: string(description='填表名称', name='name'),
    memo?: string(description='填表提示', name='memo'),
    creator?: string(description='创建人', name='creator'),
  }(description='结果', name='result'),
}

model GetOapiCollectionFormResponse = {
  headers: map[string]string,
  body: GetOapiCollectionFormResponseBody,
}

/**
 * Description: 获取智能填表表单详情
 */
async function getOapiCollectionForm(request: GetOapiCollectionFormRequest): GetOapiCollectionFormResponse {
  var runtime = new Util.RuntimeOptions{};
  return getOapiCollectionFormEx(request, runtime);
}

/**
 * Description: 获取智能填表表单详情
 */
async function getOapiCollectionFormEx(request: GetOapiCollectionFormRequest, runtime: Util.RuntimeOptions): GetOapiCollectionFormResponse {
  Util.validateModel(request);
  var appParams = Util.stringifyMapValue(Util.toMap(request.params));
  return doRequestOApi('POST', '/topapi/collection/form/get', request.headers, appParams, runtime);
}

model Test1OapiXiaoxuanPreParams = {
  systemData?: string(description='1', name='systemData'),
  name?: string(description='1', name='name'),
}

model Test1OapiXiaoxuanPreRequest = {
  headers?: map[string]string,
  params?:Test1OapiXiaoxuanPreParams,
}

model Test1OapiXiaoxuanPreResponseBody = {
  resultData?: string(description='result', name='resultData'),
  errcode?: int64(description='errcode', name='errcode'),
  errmsg?: string(description='errmsg', name='errmsg'),
  name?: string(description='1', name='name'),
}

model Test1OapiXiaoxuanPreResponse = {
  headers: map[string]string,
  body: Test1OapiXiaoxuanPreResponseBody,
}

/**
 * Description: test
 */
async function test1OapiXiaoxuanPre(request: Test1OapiXiaoxuanPreRequest): Test1OapiXiaoxuanPreResponse {
  var runtime = new Util.RuntimeOptions{};
  return test1OapiXiaoxuanPreEx(request, runtime);
}

/**
 * Description: test
 */
async function test1OapiXiaoxuanPreEx(request: Test1OapiXiaoxuanPreRequest, runtime: Util.RuntimeOptions): Test1OapiXiaoxuanPreResponse {
  Util.validateModel(request);
  var appParams = Util.stringifyMapValue(Util.toMap(request.params));
  return doRequestOApi('POST', '/topapi/xiaoxuan/pre/test1', request.headers, appParams, runtime);
}

model ListOapiCalendarParams = {
  calendarFolderId?: string(description='钉钉日历文件夹的对外id，默认是自己的默认文件夹', name='calendar_folder_id'),
  timeMin?: {
    dateTime?: string(description='时间 \'yyyy-MM-ddTHH:mm:ssZ\',', name='date_time'),
    timeZone?: string(description='时区', name='time_zone'),
  }(description='查询时间下限', name='time_min'),
  userId: string(description='员工ID', name='user_id'),
  iCalUid?: string(description='日程跨域唯一id，用于唯一标识一组关联日程事件', name='i_cal_uid'),
  singleEvents?: boolean(description='是否需要展开循环日程', name='single_events'),
  pageToken?: string(description='查询对应页，值有上一次请求返回的结果里对应nextPageToken', name='page_token'),
  maxResults?: int64(description='结果返回的最多数量，默认250，最多返回2500', name='max_results'),
  timeMax?: {
    dateTime?: string(description='时间 \'yyyy-MM-ddTHH:mm:ssZ\',', name='date_time'),
    timeZone?: string(description='时区', name='time_zone'),
  }(description='查询时间上限', name='time_max'),
}

model ListOapiCalendarRequest = {
  headers?: map[string]string,
  params:ListOapiCalendarParams,
}

model ListOapiCalendarResponseBody = {
  result?: {
    summary?: string(description='文件夹描述', name='summary'),
    items?: [
      {
        attendees?: [
          {
            organizer?: boolean(description='是否组织者', name='organizer'),
            self?: boolean(description='是否自己', name='self'),
            displayName?: string(description='展示姓名', name='display_name'),
            responseStatus?: string(description='响应状态（accepted, declined, needsAction）', name='response_status'),
            userid?: string(description='员工id', name='userid'),
          }
        ](description='参与者,考虑性能问题，该字段不向外透出', name='attendees'),
        organizer?: {
          self?: boolean(description='是否自己', name='self'),
          displayName?: string(description='展示姓名', name='display_name'),
          userid?: string(description='员工id', name='userid'),
        }(description='组织者', name='organizer'),
        recurrence?: [ string ](description='循环的规则', name='recurrence'),
        end?: {
          date?: string(description='全天事件的时候使用 yyyy-MM-dd（date_time和date不可以同时出现）', name='date'),
          timeZone?: string(description='时区', name='time_zone'),
          dateTime?: string(description='时间 \'yyyy-MM-ddTHH:mm:ssZ\',', name='date_time'),
        }(description='结束时间', name='end'),
        start?: {
          date?: string(description='全天事件的时候使用 yyyy-MM-dd（date_time和date不可以同时出现）', name='date'),
          timeZone?: string(description='时区', name='time_zone'),
          dateTime?: string(description='时间 \'yyyy-MM-ddTHH:mm:ssZ\',', name='date_time'),
        }(description='开始时间', name='start'),
        location?: string(description='地点', name='location'),
        description?: string(description='内容描述', name='description'),
        summary?: string(description='标题简述', name='summary'),
        updated?: {
          date?: string(description='全天事件的时候使用 yyyy-MM-dd（date_time和date不可以同时出现）', name='date'),
          timeZone?: string(description='时区', name='time_zone'),
          dateTime?: string(description='时间 \'yyyy-MM-ddTHH:mm:ssZ\',', name='date_time'),
        }(description='最后一次更新时间', name='updated'),
        created?: {
          date?: string(description='全天事件的时候使用 yyyy-MM-dd（date_time和date不可以同时出现）', name='date'),
          timeZone?: string(description='时区', name='time_zone'),
          dateTime?: string(description='时间 \'yyyy-MM-ddTHH:mm:ssZ\',', name='date_time'),
        }(description='创建时间', name='created'),
        status?: string(description='状态（confirmed、cancelled）', name='status'),
        id?: string(description='日程事件id', name='id'),
        iCalUid?: string(description='日程跨域唯一id，用于唯一标识一组关联日程事件', name='i_cal_uid'),
        responseStatus?: string(description='响应状态（accepted, declined, needsAction）', name='response_status'),
      }
    ](description='日程的实体', name='items'),
    nextPageToken?: string(description='请求结果若还有更多，则返回下一页的token值', name='next_page_token'),
  }(description='api返回的结果对象', name='result'),
  success?: boolean(description='调用成功标识位', name='success'),
  errmsg?: string(description='错误信息', name='errmsg'),
  errcode?: int64(description='错误码', name='errcode'),
}

model ListOapiCalendarResponse = {
  headers: map[string]string,
  body: ListOapiCalendarResponseBody,
}

/**
 * Description: 该api是提供给企业和isv用的，查询企业内员工的日程数据。
 */
async function listOapiCalendar(request: ListOapiCalendarRequest): ListOapiCalendarResponse {
  var runtime = new Util.RuntimeOptions{};
  return listOapiCalendarEx(request, runtime);
}

/**
 * Description: 该api是提供给企业和isv用的，查询企业内员工的日程数据。
 */
async function listOapiCalendarEx(request: ListOapiCalendarRequest, runtime: Util.RuntimeOptions): ListOapiCalendarResponse {
  Util.validateModel(request);
  var appParams = Util.stringifyMapValue(Util.toMap(request.params));
  return doRequestOApi('POST', '/topapi/calendar/list', request.headers, appParams, runtime);
}

model GenerateOapiCspaceAuthParams = {
  duration?: int64(description='授权码有效期，单位为日，为空则表示永久授权', name='duration'),
  path?: string(description='授权访问的路径，如授权访问所有文件传"/"，授权访问/doc文件夹传"/doc/"，需要utf-8 urlEncode, type=add时必须传递', name='path'),
  agentId: int64(description='微应用的agentId', name='agent_id'),
  fileIds?: [ string ](description='授权访问的文件id列表，id之间用英文逗号隔开，如"fileId1,fileId2", type=download时必须传递', maxItems=20, name='file_ids'),
  type: string(description='权限类型，目前支持上传和预览，上传请传add，预览请传download', name='type'),
  appId: int64(description='被授权的应用appId', name='app_id'),
}

model GenerateOapiCspaceAuthRequest = {
  headers?: map[string]string,
  params:GenerateOapiCspaceAuthParams,
}

model GenerateOapiCspaceAuthResponseBody = {
  result?: {
    isvCode?: string(description='isv访问授权码', name='isv_code'),
    expireTime?: string(description='授权码有效期，unix时间戳，单位ms', pattern='\\\\d{4}[-]\\\\d{1,2}[-]\\\\d{1,2}[T]\\\\d{2}:\\\\d{2}:\\\\d{2}[Z]', name='expire_time'),
  }(description='result', name='result'),
  success?: boolean(description='请求是否成功', name='success'),
  errcode?: int64(description='错误码', name='errcode'),
  errmsg?: string(description='错误信息', name='errmsg'),
}

model GenerateOapiCspaceAuthResponse = {
  headers: map[string]string,
  body: GenerateOapiCspaceAuthResponseBody,
}

/**
 * Description: 生成isv的授权码，授权码绑定了两个isv，对应的文件资源以及授权路径。
 */
async function generateOapiCspaceAuth(request: GenerateOapiCspaceAuthRequest): GenerateOapiCspaceAuthResponse {
  var runtime = new Util.RuntimeOptions{};
  return generateOapiCspaceAuthEx(request, runtime);
}

/**
 * Description: 生成isv的授权码，授权码绑定了两个isv，对应的文件资源以及授权路径。
 */
async function generateOapiCspaceAuthEx(request: GenerateOapiCspaceAuthRequest, runtime: Util.RuntimeOptions): GenerateOapiCspaceAuthResponse {
  Util.validateModel(request);
  var appParams = Util.stringifyMapValue(Util.toMap(request.params));
  return doRequestOApi('POST', '/topapi/cspace/auth/generate', request.headers, appParams, runtime);
}

model CancelOapiCspaceAuthParams = {
  isvCode: string(description='isv文件授权码', name='isv_code'),
  agentId: int64(description='微应用的agentId', name='agent_id'),
}

model CancelOapiCspaceAuthRequest = {
  headers?: map[string]string,
  params:CancelOapiCspaceAuthParams,
}

model CancelOapiCspaceAuthResponseBody = {
  result?: boolean(description='取消授权结果', name='result'),
  success?: boolean(description='请求结果', name='success'),
  errcode?: int64(description='错误码', name='errcode'),
  errmsg?: string(description='错误信息', name='errmsg'),
}

model CancelOapiCspaceAuthResponse = {
  headers: map[string]string,
  body: CancelOapiCspaceAuthResponseBody,
}

/**
 * Description: 取消isv对应的授权码
 */
async function cancelOapiCspaceAuth(request: CancelOapiCspaceAuthRequest): CancelOapiCspaceAuthResponse {
  var runtime = new Util.RuntimeOptions{};
  return cancelOapiCspaceAuthEx(request, runtime);
}

/**
 * Description: 取消isv对应的授权码
 */
async function cancelOapiCspaceAuthEx(request: CancelOapiCspaceAuthRequest, runtime: Util.RuntimeOptions): CancelOapiCspaceAuthResponse {
  Util.validateModel(request);
  var appParams = Util.stringifyMapValue(Util.toMap(request.params));
  return doRequestOApi('POST', '/topapi/cspace/auth/cancel', request.headers, appParams, runtime);
}

model UpdateOapiCspaceAuthParams = {
  duration?: int64(description='授权码有效期，单位为日，为空则表示永久授权', name='duration'),
  isvCode: string(description='isv授权码', name='isv_code'),
  agentId: int64(description='微应用的agentId', name='agent_id'),
}

model UpdateOapiCspaceAuthRequest = {
  headers?: map[string]string,
  params:UpdateOapiCspaceAuthParams,
}

model UpdateOapiCspaceAuthResponseBody = {
  result?: {
    expireTime?: string(description='授权码有效期，unix时间戳，单位ms', pattern='\\\\d{4}[-]\\\\d{1,2}[-]\\\\d{1,2}[T]\\\\d{2}:\\\\d{2}:\\\\d{2}[Z]', name='expire_time'),
    isvCode?: string(description='授权码', name='isv_code'),
  }(description='结果', name='result'),
  success?: boolean(description='请求是否成功', name='success'),
  errcode?: int64(description='错误码', name='errcode'),
  errmsg?: string(description='错误信息', name='errmsg'),
}

model UpdateOapiCspaceAuthResponse = {
  headers: map[string]string,
  body: UpdateOapiCspaceAuthResponseBody,
}

/**
 * Description: 更新isv授权码有效期
 */
async function updateOapiCspaceAuth(request: UpdateOapiCspaceAuthRequest): UpdateOapiCspaceAuthResponse {
  var runtime = new Util.RuntimeOptions{};
  return updateOapiCspaceAuthEx(request, runtime);
}

/**
 * Description: 更新isv授权码有效期
 */
async function updateOapiCspaceAuthEx(request: UpdateOapiCspaceAuthRequest, runtime: Util.RuntimeOptions): UpdateOapiCspaceAuthResponse {
  Util.validateModel(request);
  var appParams = Util.stringifyMapValue(Util.toMap(request.params));
  return doRequestOApi('POST', '/topapi/cspace/auth/update', request.headers, appParams, runtime);
}

model SendOapiImGroupappSysmsgParams = {
  msgKey: string(description='申请到的消息模板唯一标识符', name='msg_key'),
  msgParam: string(description='消息模板中，变量本次替换的值', name='msg_param'),
  openConversationId: string(description='开放的群ID', name='open_conversation_id'),
}

model SendOapiImGroupappSysmsgRequest = {
  headers?: map[string]string,
  params:SendOapiImGroupappSysmsgParams,
}

model SendOapiImGroupappSysmsgResponseBody = {
  errcode?: int64(description='错误代码', name='errcode'),
  errmsg?: string(description='错误描述', name='errmsg'),
  success?: boolean(description='是否受理成功', name='success'),
}

model SendOapiImGroupappSysmsgResponse = {
  headers: map[string]string,
  body: SendOapiImGroupappSysmsgResponseBody,
}

/**
 * Description: IM群应用发系统消息
 */
async function sendOapiImGroupappSysmsg(request: SendOapiImGroupappSysmsgRequest): SendOapiImGroupappSysmsgResponse {
  var runtime = new Util.RuntimeOptions{};
  return sendOapiImGroupappSysmsgEx(request, runtime);
}

/**
 * Description: IM群应用发系统消息
 */
async function sendOapiImGroupappSysmsgEx(request: SendOapiImGroupappSysmsgRequest, runtime: Util.RuntimeOptions): SendOapiImGroupappSysmsgResponse {
  Util.validateModel(request);
  var appParams = Util.stringifyMapValue(Util.toMap(request.params));
  return doRequestOApi('POST', '/topapi/im/groupapp/sysmsg/send', request.headers, appParams, runtime);
}

model DeletebyprojectOapiWorkspaceTaskParams = {
  microappAgentId?: int64(description='微应用agentId', name='microapp_agent_id'),
  operatorUserid: string(description='操作者id', name='operator_userid'),
  projectId: string(description='任务所属项目(虚拟企业），基于项目空间的项目', name='project_id'),
}

model DeletebyprojectOapiWorkspaceTaskRequest = {
  headers?: map[string]string,
  params:DeletebyprojectOapiWorkspaceTaskParams,
}

model DeletebyprojectOapiWorkspaceTaskResponseBody = {
  errcode?: int64(description='错误码', name='errcode'),
  errmsg?: string(description='错误描述', name='errmsg'),
}

model DeletebyprojectOapiWorkspaceTaskResponse = {
  headers: map[string]string,
  body: DeletebyprojectOapiWorkspaceTaskResponseBody,
}

/**
 * Description: 按照项目批量删除任务信息
 */
async function deletebyprojectOapiWorkspaceTask(request: DeletebyprojectOapiWorkspaceTaskRequest): DeletebyprojectOapiWorkspaceTaskResponse {
  var runtime = new Util.RuntimeOptions{};
  return deletebyprojectOapiWorkspaceTaskEx(request, runtime);
}

/**
 * Description: 按照项目批量删除任务信息
 */
async function deletebyprojectOapiWorkspaceTaskEx(request: DeletebyprojectOapiWorkspaceTaskRequest, runtime: Util.RuntimeOptions): DeletebyprojectOapiWorkspaceTaskResponse {
  Util.validateModel(request);
  var appParams = Util.stringifyMapValue(Util.toMap(request.params));
  return doRequestOApi('POST', '/topapi/workspace/task/deletebyproject', request.headers, appParams, runtime);
}

model GetusergroupSmartworkAttendsParams = {
  userid: string(description='员工在企业内的UserID，企业用来唯一标识用户的字段。', name='userid'),
}

model GetusergroupSmartworkAttendsRequest = {
  headers?: map[string]string,
  params:GetusergroupSmartworkAttendsParams,
}

model GetusergroupSmartworkAttendsResponseBody = {
  result?: {
    result?: {
      name?: string(description='考勤组名称', name='name'),
      groupId?: int64(description='考勤组id', name='group_id'),
      type?: string(description='考勤组类型', name='type'),
      classes?: [
        {
          classId?: int64(description='班次id', name='class_id'),
          name?: string(description='班次名称', name='name'),
          sections?: [
            {
              times?: [
                {
                  checkTime?: string(description='打卡时间', pattern='\\\\d{4}[-]\\\\d{1,2}[-]\\\\d{1,2}[T]\\\\d{2}:\\\\d{2}:\\\\d{2}[Z]', name='check_time'),
                  checkType?: string(description='打卡类型OnDuty：上班，OffDuty：下班', name='check_type'),
                  across?: int64(description='打卡时间跨几天', name='across'),
                  beginMin?: int64(description='允许的最早提前打卡时间，分钟为单位', name='begin_min'),
                  endMin?: int64(description='允许的最晚延后打卡时间，分钟为单位', name='end_min'),
                }
              ](description='班次中上下班详情列表', name='times'),
            }
          ](description='班次中上下班列表', name='sections'),
          setting?: {
            restBeginTime?: {
              checkTime?: string(description='开始时间', pattern='\\\\d{4}[-]\\\\d{1,2}[-]\\\\d{1,2}[T]\\\\d{2}:\\\\d{2}:\\\\d{2}[Z]', name='check_time'),
              checkType?: string(description='类型OnDuty：休息开始，OffDuty：休息结束', name='check_type'),
            }(description='休息开始时间', name='rest_begin_time'),
            restEndTime?: {
              checkTime?: string(description='结束时间', pattern='\\\\d{4}[-]\\\\d{1,2}[-]\\\\d{1,2}[T]\\\\d{2}:\\\\d{2}:\\\\d{2}[Z]', name='check_time'),
              checkType?: string(description='类型OnDuty：休息开始，OffDuty：休息结束', name='check_type'),
            }(description='休息结束时间', name='rest_end_time'),
          }(description='班次配置', name='setting'),
        }
      ](description='考勤组中的班次列表', name='classes'),
    }(description='result', name='result'),
    dingOpenErrcode?: int64(description='dingOpenErrcode', name='ding_open_errcode'),
    errorMsg?: string(description='errorMsg', name='error_msg'),
    success?: boolean(description='success', name='success'),
  }(description='result', name='result'),
}

model GetusergroupSmartworkAttendsResponse = {
  headers: map[string]string,
  body: GetusergroupSmartworkAttendsResponseBody,
}

/**
 * Description: 在钉钉考勤微应用中，考勤组是一类具有相同的班次、考勤位置等考勤规则的人或部门的组合，一个企业中的一个人只能属于一个考勤组。如果您的企业使用了钉钉考勤并希望获取员工的考勤组信息，可选择使用此接口
 */
async function getusergroupSmartworkAttends(request: GetusergroupSmartworkAttendsRequest): GetusergroupSmartworkAttendsResponse {
  var runtime = new Util.RuntimeOptions{};
  return getusergroupSmartworkAttendsEx(request, runtime);
}

/**
 * Description: 在钉钉考勤微应用中，考勤组是一类具有相同的班次、考勤位置等考勤规则的人或部门的组合，一个企业中的一个人只能属于一个考勤组。如果您的企业使用了钉钉考勤并希望获取员工的考勤组信息，可选择使用此接口
 */
async function getusergroupSmartworkAttendsEx(request: GetusergroupSmartworkAttendsRequest, runtime: Util.RuntimeOptions): GetusergroupSmartworkAttendsResponse {
  Util.validateModel(request);
  var appParams = Util.stringifyMapValue(Util.toMap(request.params));
  return doRequest('dingtalk.smartwork.attends.getusergroup', 'POST', '/router/rest', request.headers, appParams, runtime);
}

model Add_role_groupOapiRoleParams = {
  name: string(description='名称', name='name'),
}

model Add_role_groupOapiRoleRequest = {
  headers?: map[string]string,
  params:Add_role_groupOapiRoleParams,
}

model Add_role_groupOapiRoleResponseBody = {
  errcode?: int64(description='errcode', name='errcode'),
  errmsg?: string(description='errmsg', name='errmsg'),
  groupId?: int64(description='groupId', name='groupId'),
}

model Add_role_groupOapiRoleResponse = {
  headers: map[string]string,
  body: Add_role_groupOapiRoleResponseBody,
}

/**
 * Description: 添加角色组
 */
async function add_role_groupOapiRole(request: Add_role_groupOapiRoleRequest): Add_role_groupOapiRoleResponse {
  var runtime = new Util.RuntimeOptions{};
  return add_role_groupOapiRoleEx(request, runtime);
}

/**
 * Description: 添加角色组
 */
async function add_role_groupOapiRoleEx(request: Add_role_groupOapiRoleRequest, runtime: Util.RuntimeOptions): Add_role_groupOapiRoleResponse {
  Util.validateModel(request);
  var appParams = Util.stringifyMapValue(Util.toMap(request.params));
  return doRequestOApi('POST', '/role/add_role_group', request.headers, appParams, runtime);
}

model QuerypayrelatedtemplateOapiProcessRequest = {
  headers?: map[string]string,
}

model QuerypayrelatedtemplateOapiProcessResponseBody = {
  result?: [
    {
      url?: string(description='url', name='url'),
      name?: string(description='name', name='name'),
      processCode?: string(description='processCode', name='process_code'),
      iconUrl?: string(description='iconUrl', name='icon_url'),
    }
  ](description='result', name='result'),
  errcode?: int64(description='dingOpenErrcode', name='errcode'),
  errmsg?: string(description='errorMsg', name='errmsg'),
  success?: boolean(description='success', name='success'),
}

model QuerypayrelatedtemplateOapiProcessResponse = {
  headers: map[string]string,
  body: QuerypayrelatedtemplateOapiProcessResponseBody,
}

/**
 * Description: 获取企业已设置支付属性的审批模版列表
 */
async function querypayrelatedtemplateOapiProcess(request: QuerypayrelatedtemplateOapiProcessRequest): QuerypayrelatedtemplateOapiProcessResponse {
  var runtime = new Util.RuntimeOptions{};
  return querypayrelatedtemplateOapiProcessEx(request, runtime);
}

/**
 * Description: 获取企业已设置支付属性的审批模版列表
 */
async function querypayrelatedtemplateOapiProcessEx(request: QuerypayrelatedtemplateOapiProcessRequest, runtime: Util.RuntimeOptions): QuerypayrelatedtemplateOapiProcessResponse {
  Util.validateModel(request);
  var appParams : map[string]string = {};
  return doRequestOApi('POST', '/topapi/process/querypayrelatedtemplate', request.headers, appParams, runtime);
}

model Add_roleOapiRoleParams = {
  roleName: string(description='角色名称', name='roleName'),
  groupId: int64(description='角色组id', name='groupId'),
}

model Add_roleOapiRoleRequest = {
  headers?: map[string]string,
  params:Add_roleOapiRoleParams,
}

model Add_roleOapiRoleResponseBody = {
  roleId?: int64(description='roleId', name='roleId'),
  errcode?: int64(description='errcode', name='errcode'),
  errmsg?: string(description='errmsg', name='errmsg'),
}

model Add_roleOapiRoleResponse = {
  headers: map[string]string,
  body: Add_roleOapiRoleResponseBody,
}

/**
 * Description: 添加角色
 */
async function add_roleOapiRole(request: Add_roleOapiRoleRequest): Add_roleOapiRoleResponse {
  var runtime = new Util.RuntimeOptions{};
  return add_roleOapiRoleEx(request, runtime);
}

/**
 * Description: 添加角色
 */
async function add_roleOapiRoleEx(request: Add_roleOapiRoleRequest, runtime: Util.RuntimeOptions): Add_roleOapiRoleResponse {
  Util.validateModel(request);
  var appParams = Util.stringifyMapValue(Util.toMap(request.params));
  return doRequestOApi('POST', '/role/add_role', request.headers, appParams, runtime);
}

model Update_roleOapiRoleParams = {
  roleId: int64(description='角色id', name='roleId'),
  roleName: string(description='角色名称', name='roleName'),
}

model Update_roleOapiRoleRequest = {
  headers?: map[string]string,
  params:Update_roleOapiRoleParams,
}

model Update_roleOapiRoleResponseBody = {
  errcode?: int64(description='errcode', name='errcode'),
  errmsg?: string(description='errmsg', name='errmsg'),
}

model Update_roleOapiRoleResponse = {
  headers: map[string]string,
  body: Update_roleOapiRoleResponseBody,
}

/**
 * Description: 更新角色
 */
async function update_roleOapiRole(request: Update_roleOapiRoleRequest): Update_roleOapiRoleResponse {
  var runtime = new Util.RuntimeOptions{};
  return update_roleOapiRoleEx(request, runtime);
}

/**
 * Description: 更新角色
 */
async function update_roleOapiRoleEx(request: Update_roleOapiRoleRequest, runtime: Util.RuntimeOptions): Update_roleOapiRoleResponse {
  Util.validateModel(request);
  var appParams = Util.stringifyMapValue(Util.toMap(request.params));
  return doRequestOApi('POST', '/role/update_role', request.headers, appParams, runtime);
}

model GetOapiAttendanceTokenParams = {
  opUserid: string(description='操作人id', name='op_userid'),
  userid: string(description='被操作人id', name='userid'),
}

model GetOapiAttendanceTokenRequest = {
  headers?: map[string]string,
  params:GetOapiAttendanceTokenParams,
}

model GetOapiAttendanceTokenResponseBody = {
  result?: {
    result?: {
      token?: string(description='授权码', name='token'),
      expireTime?: int64(description='授权超时时间', name='expire_time'),
    }(description='业务返回结果', name='result'),
    errcode?: int64(description='错误码', name='errcode'),
    errmsg?: string(description='错误信息', name='errmsg'),
    success?: boolean(description='是否成功', name='success'),
  }(description='方法调用结果', name='result'),
}

model GetOapiAttendanceTokenResponse = {
  headers: map[string]string,
  body: GetOapiAttendanceTokenResponseBody,
}

/**
 * Description: 考勤颁发给isv的具有一定实效性的令牌
 */
async function getOapiAttendanceToken(request: GetOapiAttendanceTokenRequest): GetOapiAttendanceTokenResponse {
  var runtime = new Util.RuntimeOptions{};
  return getOapiAttendanceTokenEx(request, runtime);
}

/**
 * Description: 考勤颁发给isv的具有一定实效性的令牌
 */
async function getOapiAttendanceTokenEx(request: GetOapiAttendanceTokenRequest, runtime: Util.RuntimeOptions): GetOapiAttendanceTokenResponse {
  Util.validateModel(request);
  var appParams = Util.stringifyMapValue(Util.toMap(request.params));
  return doRequestOApi('POST', '/topapi/attendance/token/get', request.headers, appParams, runtime);
}

model GetOapiAttendanceClassParams = {
  classId: int64(description='班次id', name='class_id'),
}

model GetOapiAttendanceClassRequest = {
  headers?: map[string]string,
  params:GetOapiAttendanceClassParams,
}

model GetOapiAttendanceClassResponseBody = {
  errmsg?: string(description='异常信息', name='errmsg'),
  errcode?: int64(description='异常错误码', name='errcode'),
  result?: {
    id?: int64(description='classid', name='id'),
    corpId?: string(description='组织id', name='corp_id'),
    name?: string(description='组织名称', name='name'),
    workDays?: [ int64 ](description='固定班次的工作日班次', name='work_days'),
    classSetting?: {
      id?: int64(description='classSettingId', name='id'),
      classId?: int64(description='classId', name='class_id'),
      restBeginTime?: {
        checkTime?: string(description='时间', pattern='\\\\d{4}[-]\\\\d{1,2}[-]\\\\d{1,2}[T]\\\\d{2}:\\\\d{2}:\\\\d{2}[Z]', name='check_time'),
        checkType?: string(description='打卡类型枚举（Onduty和OffDuty）', name='check_type'),
        across?: int64(description='是否跨天', name='across'),
        beginMin?: int64(description='允许开始分钟', name='begin_min'),
        endMin?: int64(description='允许结束分钟', name='end_min'),
      }(description='休息开始时间', name='rest_begin_time'),
      restEndTime?: {
        checkTime?: string(description='时间', pattern='\\\\d{4}[-]\\\\d{1,2}[-]\\\\d{1,2}[T]\\\\d{2}:\\\\d{2}:\\\\d{2}[Z]', name='check_time'),
        checkType?: string(description='打卡类型枚举（Onduty和OffDuty）', name='check_type'),
        across?: int64(description='是否跨天', name='across'),
        beginMin?: int64(description='允许开始分钟', name='begin_min'),
        endMin?: int64(description='允许结束分钟', name='end_min'),
      }(description='休息结束时间', name='rest_end_time'),
    }(description='考勤组班次配置', name='class_setting'),
    sections?: [
      {
        times?: [
          {
            checkTime?: string(description='打卡时间', pattern='\\\\d{4}[-]\\\\d{1,2}[-]\\\\d{1,2}[T]\\\\d{2}:\\\\d{2}:\\\\d{2}[Z]', name='check_time'),
            checkType?: string(description='打卡类型枚举（Onduty和OffDuty）', name='check_type'),
            across?: int64(description='是否跨天', name='across'),
            beginMin?: int64(description='允许开始分钟', name='begin_min'),
            endMin?: int64(description='允许结束分钟', name='end_min'),
          }
        ](description='时间段列表', name='times'),
      }
    ](description='班次打卡时间段,最多', name='sections'),
  }(description='返回对象', name='result'),
}

model GetOapiAttendanceClassResponse = {
  headers: map[string]string,
  body: GetOapiAttendanceClassResponseBody,
}

/**
 * Description: 根据classId查询包含已删除的班次
 */
async function getOapiAttendanceClass(request: GetOapiAttendanceClassRequest): GetOapiAttendanceClassResponse {
  var runtime = new Util.RuntimeOptions{};
  return getOapiAttendanceClassEx(request, runtime);
}

/**
 * Description: 根据classId查询包含已删除的班次
 */
async function getOapiAttendanceClassEx(request: GetOapiAttendanceClassRequest, runtime: Util.RuntimeOptions): GetOapiAttendanceClassResponse {
  Util.validateModel(request);
  var appParams = Util.stringifyMapValue(Util.toMap(request.params));
  return doRequestOApi('POST', '/topapi/attendance/class/get', request.headers, appParams, runtime);
}

model DeleteOapiProcessPrinterTemplateParams = {
  request?: {
    agentId?: int64(description='微应用agentId，ISV必填', name='agent_id'),
    processCode?: string(description='流程code', name='process_code'),
  }(description='请求对象', name='request'),
}

model DeleteOapiProcessPrinterTemplateRequest = {
  headers?: map[string]string,
  params?:DeleteOapiProcessPrinterTemplateParams,
}

model DeleteOapiProcessPrinterTemplateResponseBody = {
  success?: boolean(description='成功标识', name='success'),
  errcode?: int64(description='错误码', name='errcode'),
  errmsg?: string(description='错误信息', name='errmsg'),
}

model DeleteOapiProcessPrinterTemplateResponse = {
  headers: map[string]string,
  body: DeleteOapiProcessPrinterTemplateResponseBody,
}

/**
 * Description: 自定义打印清除模板
 */
async function deleteOapiProcessPrinterTemplate(request: DeleteOapiProcessPrinterTemplateRequest): DeleteOapiProcessPrinterTemplateResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteOapiProcessPrinterTemplateEx(request, runtime);
}

/**
 * Description: 自定义打印清除模板
 */
async function deleteOapiProcessPrinterTemplateEx(request: DeleteOapiProcessPrinterTemplateRequest, runtime: Util.RuntimeOptions): DeleteOapiProcessPrinterTemplateResponse {
  Util.validateModel(request);
  var appParams = Util.stringifyMapValue(Util.toMap(request.params));
  return doRequestOApi('POST', '/topapi/process/printer/template/delete', request.headers, appParams, runtime);
}

model ListbyuseridCorpHealthStepinfoParams = {
  userids: [ string ](description='员工userid列表，最多传50个', maxItems=50, name='userids'),
  statDate: string(description='时间，注意时间格式是YYMMDD', name='stat_date'),
}

model ListbyuseridCorpHealthStepinfoRequest = {
  headers?: map[string]string,
  params:ListbyuseridCorpHealthStepinfoParams,
}

model ListbyuseridCorpHealthStepinfoResponseBody = {
  result?: {
    dingOpenErrcode?: int64(description='dingOpenErrcode', name='ding_open_errcode'),
    errorMsg?: string(description='errorMsg', name='error_msg'),
    success?: boolean(description='success', name='success'),
    stepinfoList?: [
      {
        statDate?: int64(description='统计的时间', name='stat_date'),
        stepCount?: int64(description='步数', name='step_count'),
        userid?: string(description='员工userid', name='userid'),
      }
    ](description='步数列表', name='stepinfo_list'),
  }(description='result', name='result'),
}

model ListbyuseridCorpHealthStepinfoResponse = {
  headers: map[string]string,
  body: ListbyuseridCorpHealthStepinfoResponseBody,
}

/**
 * Description: 根据用户列表和时间列表，批量查询钉钉运动步数
 */
async function listbyuseridCorpHealthStepinfo(request: ListbyuseridCorpHealthStepinfoRequest): ListbyuseridCorpHealthStepinfoResponse {
  var runtime = new Util.RuntimeOptions{};
  return listbyuseridCorpHealthStepinfoEx(request, runtime);
}

/**
 * Description: 根据用户列表和时间列表，批量查询钉钉运动步数
 */
async function listbyuseridCorpHealthStepinfoEx(request: ListbyuseridCorpHealthStepinfoRequest, runtime: Util.RuntimeOptions): ListbyuseridCorpHealthStepinfoResponse {
  Util.validateModel(request);
  var appParams = Util.stringifyMapValue(Util.toMap(request.params));
  return doRequest('dingtalk.corp.health.stepinfo.listbyuserid', 'POST', '/router/rest', request.headers, appParams, runtime);
}

model GetuserstatusCorpHealthStepinfoParams = {
  userid: string(description='用户id', name='userid'),
}

model GetuserstatusCorpHealthStepinfoRequest = {
  headers?: map[string]string,
  params:GetuserstatusCorpHealthStepinfoParams,
}

model GetuserstatusCorpHealthStepinfoResponseBody = {
  result?: {
    dingOpenErrcode?: int64(description='dingOpenErrcode', name='ding_open_errcode'),
    errorMsg?: string(description='errorMsg', name='error_msg'),
    success?: boolean(description='success', name='success'),
    status?: boolean(description='true表示开启，false表示未开启', name='status'),
  }(description='result', name='result'),
}

model GetuserstatusCorpHealthStepinfoResponse = {
  headers: map[string]string,
  body: GetuserstatusCorpHealthStepinfoResponseBody,
}

/**
 * Description: 查询用户是否开启了钉钉运动
 */
async function getuserstatusCorpHealthStepinfo(request: GetuserstatusCorpHealthStepinfoRequest): GetuserstatusCorpHealthStepinfoResponse {
  var runtime = new Util.RuntimeOptions{};
  return getuserstatusCorpHealthStepinfoEx(request, runtime);
}

/**
 * Description: 查询用户是否开启了钉钉运动
 */
async function getuserstatusCorpHealthStepinfoEx(request: GetuserstatusCorpHealthStepinfoRequest, runtime: Util.RuntimeOptions): GetuserstatusCorpHealthStepinfoResponse {
  Util.validateModel(request);
  var appParams = Util.stringifyMapValue(Util.toMap(request.params));
  return doRequest('dingtalk.corp.health.stepinfo.getuserstatus', 'POST', '/router/rest', request.headers, appParams, runtime);
}

model UnfreezeOapiCateringParams = {
  ruleCode: string(description='餐补规则编码', name='rule_code'),
  orderId: string(description='订单编号', name='order_id'),
  userid: string(description='点餐人userid', name='userid'),
}

model UnfreezeOapiCateringRequest = {
  headers?: map[string]string,
  params:UnfreezeOapiCateringParams,
}

model UnfreezeOapiCateringResponseBody = {
  result?: boolean(description='是否成功', name='result'),
  errcode?: int64(description='errcode', name='errcode'),
  errmsg?: string(description='errmsg', name='errmsg'),
}

model UnfreezeOapiCateringResponse = {
  headers: map[string]string,
  body: UnfreezeOapiCateringResponseBody,
}

/**
 * Description: 退单或者取消订单时，释放已经抵扣的餐补金额
 */
async function unfreezeOapiCatering(request: UnfreezeOapiCateringRequest): UnfreezeOapiCateringResponse {
  var runtime = new Util.RuntimeOptions{};
  return unfreezeOapiCateringEx(request, runtime);
}

/**
 * Description: 退单或者取消订单时，释放已经抵扣的餐补金额
 */
async function unfreezeOapiCateringEx(request: UnfreezeOapiCateringRequest, runtime: Util.RuntimeOptions): UnfreezeOapiCateringResponse {
  Util.validateModel(request);
  var appParams = Util.stringifyMapValue(Util.toMap(request.params));
  return doRequestOApi('POST', '/topapi/catering/unfreeze', request.headers, appParams, runtime);
}

model Get_by_mobileOapiUserParams = {
  mobile: string(description='手机号', name='mobile'),
}

model Get_by_mobileOapiUserRequest = {
  headers?: map[string]string,
  params:Get_by_mobileOapiUserParams,
}

model Get_by_mobileOapiUserResponseBody = {
  userid?: string(description='userid', name='userid'),
  errmsg?: string(description='errmsg', name='errmsg'),
  errcode?: int64(description='errcode', name='errcode'),
}

model Get_by_mobileOapiUserResponse = {
  headers: map[string]string,
  body: Get_by_mobileOapiUserResponseBody,
}

/**
 * Description: 根据手机号获取其所对应员工的userid
 */
async function get_by_mobileOapiUser(request: Get_by_mobileOapiUserRequest): Get_by_mobileOapiUserResponse {
  var runtime = new Util.RuntimeOptions{};
  return get_by_mobileOapiUserEx(request, runtime);
}

/**
 * Description: 根据手机号获取其所对应员工的userid
 */
async function get_by_mobileOapiUserEx(request: Get_by_mobileOapiUserRequest, runtime: Util.RuntimeOptions): Get_by_mobileOapiUserResponse {
  Util.validateModel(request);
  var appParams = Util.stringifyMapValue(Util.toMap(request.params));
  return doRequestOApi('GET', '/user/get_by_mobile', request.headers, appParams, runtime);
}

model ScrapOapiRhinoMosExecClothesParams = {
  entityIds: [ int64 ](description='衣服ID列表', maxItems=500, name='entity_ids'),
  tenantId: string(description='租户ID', name='tenant_id'),
  userid?: string(description='业务参数[这里先预留],这里是用户ID,比如钉钉用户ID', name='userid'),
  extProperties?: string(description='扩展属性', name='ext_properties'),
  orderId?: int64(description='订单ID', name='order_id'),
}

model ScrapOapiRhinoMosExecClothesRequest = {
  headers?: map[string]string,
  params:ScrapOapiRhinoMosExecClothesParams,
}

model ScrapOapiRhinoMosExecClothesResponseBody = {
  errmsg?: string(description='错误信息', name='errmsg'),
  model?: boolean(description='执行结果', name='model'),
  success?: boolean(description='是否成功', name='success'),
  errcode?: int64(description='钉钉错误码', name='errcode'),
}

model ScrapOapiRhinoMosExecClothesResponse = {
  headers: map[string]string,
  body: ScrapOapiRhinoMosExecClothesResponseBody,
}

/**
 * Description: 报废衣服
 */
async function scrapOapiRhinoMosExecClothes(request: ScrapOapiRhinoMosExecClothesRequest): ScrapOapiRhinoMosExecClothesResponse {
  var runtime = new Util.RuntimeOptions{};
  return scrapOapiRhinoMosExecClothesEx(request, runtime);
}

/**
 * Description: 报废衣服
 */
async function scrapOapiRhinoMosExecClothesEx(request: ScrapOapiRhinoMosExecClothesRequest, runtime: Util.RuntimeOptions): ScrapOapiRhinoMosExecClothesResponse {
  Util.validateModel(request);
  var appParams = Util.stringifyMapValue(Util.toMap(request.params));
  return doRequestOApi('POST', '/topapi/rhino/mos/exec/clothes/scrap', request.headers, appParams, runtime);
}

model GetOapiServiceaccountMenuParams = {
  unionid: string(description='服务号的unionid', name='unionid'),
}

model GetOapiServiceaccountMenuRequest = {
  headers?: map[string]string,
  params:GetOapiServiceaccountMenuParams,
}

model GetOapiServiceaccountMenuResponseBody = {
  errmsg?: string(description='错误信息', name='errmsg'),
  errcode?: int64(description='错误码', name='errcode'),
  menu?: {
    button?: [
      {
        name?: string(description='名称', name='name'),
        type?: string(description='类型', name='type'),
        key?: string(description='菜单绑定的key值', name='key'),
        url?: string(description='菜单绑定的URL', name='url'),
        subButton?: [
          {
            type?: string(description='类型', name='type'),
            name?: string(description='名称', name='name'),
            key?: string(description='菜单绑定的key值', name='key'),
            url?: string(description='菜单绑定的URL', name='url'),
            mediaId?: string(description='素材id', name='media_id'),
          }
        ](description='子菜单按钮列表', name='sub_button'),
        mediaId?: string(description='素材id', name='media_id'),
      }
    ](description='菜单按钮列表', name='button'),
    enableInput?: boolean(description='是否允许用户输入', name='enable_input'),
    status?: int64(description='状态，0-正常，1-停用', name='status'),
  }(description='菜单', name='menu'),
}

model GetOapiServiceaccountMenuResponse = {
  headers: map[string]string,
  body: GetOapiServiceaccountMenuResponseBody,
}

/**
 * Description: 查询服务号菜单
 */
async function getOapiServiceaccountMenu(request: GetOapiServiceaccountMenuRequest): GetOapiServiceaccountMenuResponse {
  var runtime = new Util.RuntimeOptions{};
  return getOapiServiceaccountMenuEx(request, runtime);
}

/**
 * Description: 查询服务号菜单
 */
async function getOapiServiceaccountMenuEx(request: GetOapiServiceaccountMenuRequest, runtime: Util.RuntimeOptions): GetOapiServiceaccountMenuResponse {
  Util.validateModel(request);
  var appParams = Util.stringifyMapValue(Util.toMap(request.params));
  return doRequestOApi('POST', '/topapi/serviceaccount/menu/get', request.headers, appParams, runtime);
}

model GetOapiRhinoMosExecClothesParams = {
  entityIds: [ int64 ](description='衣服ID列表', maxItems=500, name='entity_ids'),
  tenantId: string(description='租户ID', name='tenant_id'),
  userid?: string(description='业务参数[这里先预留],这里是用户ID,比如钉钉用户ID', name='userid'),
  orderId?: int64(description='订单ID', name='order_id'),
}

model GetOapiRhinoMosExecClothesRequest = {
  headers?: map[string]string,
  params:GetOapiRhinoMosExecClothesParams,
}

model GetOapiRhinoMosExecClothesResponseBody = {
  externalMsgInfo?: string(description='额外错误信息', name='external_msg_info'),
  errmsg?: string(description='错误信息', name='errmsg'),
  model?: [
    {
      colorId?: int64(description='颜色ID', name='color_id'),
      colorName?: string(description='颜色名称', name='color_name'),
      createType?: string(description='创建类型', name='create_type'),
      id?: int64(description='衣服ID', name='id'),
      orderId?: int64(description='订单ID', name='order_id'),
      sizeCode?: string(description='尺码Code', name='size_code'),
      sizeName?: string(description='尺码名称', name='size_name'),
      sourceId?: string(description='来源ID', name='source_id'),
      sourceType?: string(description='来源类型', name='source_type'),
      status?: string(description='状态', name='status'),
      tenantId?: string(description='租户ID', name='tenant_id'),
      bizType?: string(description='业务类型', name='biz_type'),
    }
  ](description='衣服详情', name='model'),
  success?: boolean(description='是否成功', name='success'),
  errcode?: int64(description='钉钉平台错误码', name='errcode'),
}

model GetOapiRhinoMosExecClothesResponse = {
  headers: map[string]string,
  body: GetOapiRhinoMosExecClothesResponseBody,
}

/**
 * Description: 批量获取衣服详情
 */
async function getOapiRhinoMosExecClothes(request: GetOapiRhinoMosExecClothesRequest): GetOapiRhinoMosExecClothesResponse {
  var runtime = new Util.RuntimeOptions{};
  return getOapiRhinoMosExecClothesEx(request, runtime);
}

/**
 * Description: 批量获取衣服详情
 */
async function getOapiRhinoMosExecClothesEx(request: GetOapiRhinoMosExecClothesRequest, runtime: Util.RuntimeOptions): GetOapiRhinoMosExecClothesResponse {
  Util.validateModel(request);
  var appParams = Util.stringifyMapValue(Util.toMap(request.params));
  return doRequestOApi('POST', '/topapi/rhino/mos/exec/clothes/get', request.headers, appParams, runtime);
}

model StartOapiRhinoMosExecPerformConditionalParams = {
  tenantId: string(description='租户ID', name='tenant_id'),
  deviceIds?: [ int64 ](description='执行设备ID列表', maxItems=20, name='device_ids'),
  workNos?: [ string ](description='执行员工列表', maxItems=20, name='work_nos'),
  userid?: string(description='系统参数', name='userid'),
  entityCondition: {
    entityIds?: [ int64 ](description='实体ID列表', maxItems=500, name='entity_ids'),
    entitySource?: {
      sourceId?: string(description='实体来源ID', name='source_id'),
      sourceType?: string(description='实体来源类型', name='source_type'),
    }(description='实体来源', name='entity_source'),
    entityType?: string(description='实体类型', name='entity_type'),
  }(description='实体条件', name='entity_condition'),
  operationUids?: [ int64 ](description='工序ID列表', maxItems=500, name='operation_uids'),
  orderId?: int64(description='订单ID', name='order_id'),
}

model StartOapiRhinoMosExecPerformConditionalRequest = {
  headers?: map[string]string,
  params:StartOapiRhinoMosExecPerformConditionalParams,
}

model StartOapiRhinoMosExecPerformConditionalResponseBody = {
  errmsg?: string(description='错误信息', name='errmsg'),
  model?: boolean(description='操作结果', name='model'),
  success?: boolean(description='是否成功', name='success'),
  errcode?: int64(description='错误码', name='errcode'),
}

model StartOapiRhinoMosExecPerformConditionalResponse = {
  headers: map[string]string,
  body: StartOapiRhinoMosExecPerformConditionalResponseBody,
}

/**
 * Description: 条件开始执行工序
 */
async function startOapiRhinoMosExecPerformConditional(request: StartOapiRhinoMosExecPerformConditionalRequest): StartOapiRhinoMosExecPerformConditionalResponse {
  var runtime = new Util.RuntimeOptions{};
  return startOapiRhinoMosExecPerformConditionalEx(request, runtime);
}

/**
 * Description: 条件开始执行工序
 */
async function startOapiRhinoMosExecPerformConditionalEx(request: StartOapiRhinoMosExecPerformConditionalRequest, runtime: Util.RuntimeOptions): StartOapiRhinoMosExecPerformConditionalResponse {
  Util.validateModel(request);
  var appParams = Util.stringifyMapValue(Util.toMap(request.params));
  return doRequestOApi('POST', '/topapi/rhino/mos/exec/perform/conditional/start', request.headers, appParams, runtime);
}

model GettitleCorpInvoiceRequest = {
  headers?: map[string]string,
}

model GettitleCorpInvoiceResponseBody = {
  result?: {
    invoice?: {
      remark?: string(description='备注', name='remark'),
      address?: string(description='企业注册地址', name='address'),
      contact?: string(description='联系方式', name='contact'),
      bankName?: string(description='开户行', name='bank_name'),
      account?: string(description='银行账户', name='account'),
      dutyPara?: string(description='税号', name='duty_para'),
      title?: string(description='发票抬头', name='title'),
    }(description='result', name='invoice'),
    dingOpenErrcode?: int64(description='dingOpenErrcode', name='ding_open_errcode'),
    errorMsg?: string(description='errorMsg', name='error_msg'),
    success?: boolean(description='success', name='success'),
  }(description='result', name='result'),
}

model GettitleCorpInvoiceResponse = {
  headers: map[string]string,
  body: GettitleCorpInvoiceResponseBody,
}

/**
 * Description: 该接口通过orgId参数可以获取该企业的发票抬头信息。
注意：ISV必须先加入白名单
 */
async function gettitleCorpInvoice(request: GettitleCorpInvoiceRequest): GettitleCorpInvoiceResponse {
  var runtime = new Util.RuntimeOptions{};
  return gettitleCorpInvoiceEx(request, runtime);
}

/**
 * Description: 该接口通过orgId参数可以获取该企业的发票抬头信息。
注意：ISV必须先加入白名单
 */
async function gettitleCorpInvoiceEx(request: GettitleCorpInvoiceRequest, runtime: Util.RuntimeOptions): GettitleCorpInvoiceResponse {
  Util.validateModel(request);
  var appParams : map[string]string = {};
  return doRequest('dingtalk.corp.invoice.gettitle', 'POST', '/router/rest', request.headers, appParams, runtime);
}

model QueryOapiRobotMessageOtotaskParams = {
  chatbotId: string(description='申请到的企业机器人唯一标识符', name='chatbot_id'),
  processQueryKey: string(description='用于查询发送进度的唯一标识', name='process_query_key'),
}

model QueryOapiRobotMessageOtotaskRequest = {
  headers?: map[string]string,
  params:QueryOapiRobotMessageOtotaskParams,
}

model QueryOapiRobotMessageOtotaskResponseBody = {
  success?: boolean(description='是否受理成功', name='success'),
  errcode?: int64(description='错误代码', name='errcode'),
  errmsg?: string(description='错误描述', name='errmsg'),
  result?: {
    sendStatus?: string(description='发送结果码，只有SUCCESS为成功', name='send_status'),
    readStatus?: string(description='READ 已读，UNREAD 未读', name='read_status'),
    readTimestamp?: int64(description='消息已读时间戳，单位：秒', name='read_timestamp'),
  }(description='result', name='result'),
}

model QueryOapiRobotMessageOtotaskResponse = {
  headers: map[string]string,
  body: QueryOapiRobotMessageOtotaskResponseBody,
}

/**
 * Description: 企业机器人单聊消息发送结果查询
 */
async function queryOapiRobotMessageOtotask(request: QueryOapiRobotMessageOtotaskRequest): QueryOapiRobotMessageOtotaskResponse {
  var runtime = new Util.RuntimeOptions{};
  return queryOapiRobotMessageOtotaskEx(request, runtime);
}

/**
 * Description: 企业机器人单聊消息发送结果查询
 */
async function queryOapiRobotMessageOtotaskEx(request: QueryOapiRobotMessageOtotaskRequest, runtime: Util.RuntimeOptions): QueryOapiRobotMessageOtotaskResponse {
  Util.validateModel(request);
  var appParams = Util.stringifyMapValue(Util.toMap(request.params));
  return doRequestOApi('POST', '/topapi/robot/message/ototask/query', request.headers, appParams, runtime);
}

model GetbydeptidOapiImpaasGroupParams = {
  deptId: int64(description='1企业全员群', name='dept_id'),
}

model GetbydeptidOapiImpaasGroupRequest = {
  headers?: map[string]string,
  params:GetbydeptidOapiImpaasGroupParams,
}

model GetbydeptidOapiImpaasGroupResponseBody = {
  result?: {
    owner?: int64(description='owner', name='owner'),
    tag?: int64(description='tag', name='tag'),
    icon?: string(description='icon', name='icon'),
    title?: string(description='title', name='title'),
    openConversationId?: string(description='open_conversation_id', name='open_conversation_id'),
    conversationId?: string(description='conversation_id', name='conversation_id'),
  }(description='result', name='result'),
  errcode?: int64(description='dingOpenErrcode', name='errcode'),
  errmsg?: string(description='errorMsg', name='errmsg'),
  success?: boolean(description='success', name='success'),
}

model GetbydeptidOapiImpaasGroupResponse = {
  headers: map[string]string,
  body: GetbydeptidOapiImpaasGroupResponseBody,
}

/**
 * Description: 新零售场景下，获取企业全员群id
 */
async function getbydeptidOapiImpaasGroup(request: GetbydeptidOapiImpaasGroupRequest): GetbydeptidOapiImpaasGroupResponse {
  var runtime = new Util.RuntimeOptions{};
  return getbydeptidOapiImpaasGroupEx(request, runtime);
}

/**
 * Description: 新零售场景下，获取企业全员群id
 */
async function getbydeptidOapiImpaasGroupEx(request: GetbydeptidOapiImpaasGroupRequest, runtime: Util.RuntimeOptions): GetbydeptidOapiImpaasGroupResponse {
  Util.validateModel(request);
  var appParams = Util.stringifyMapValue(Util.toMap(request.params));
  return doRequestOApi('POST', '/topapi/impaas/group/getbydeptid', request.headers, appParams, runtime);
}

model CountOapiRhinoMosExecClothesParams = {
  request: {
    clothesStatusList?: [ string ](description='衣服状态列表', maxItems=20, name='clothes_status_list'),
    orderId: int64(description='订单ID', name='order_id'),
    tenantId: string(description='租户ID', name='tenant_id'),
    userid?: string(description='userid', name='userid'),
  }(description='request', name='request'),
}

model CountOapiRhinoMosExecClothesRequest = {
  headers?: map[string]string,
  params:CountOapiRhinoMosExecClothesParams,
}

model CountOapiRhinoMosExecClothesResponseBody = {
  errmsg?: string(description='错误信息', name='errmsg'),
  model?: int64(description='结果', name='model'),
  errcode?: int64(description='返回编码', name='errcode'),
}

model CountOapiRhinoMosExecClothesResponse = {
  headers: map[string]string,
  body: CountOapiRhinoMosExecClothesResponseBody,
}

/**
 * Description: 按条件查询衣服数量
 */
async function countOapiRhinoMosExecClothes(request: CountOapiRhinoMosExecClothesRequest): CountOapiRhinoMosExecClothesResponse {
  var runtime = new Util.RuntimeOptions{};
  return countOapiRhinoMosExecClothesEx(request, runtime);
}

/**
 * Description: 按条件查询衣服数量
 */
async function countOapiRhinoMosExecClothesEx(request: CountOapiRhinoMosExecClothesRequest, runtime: Util.RuntimeOptions): CountOapiRhinoMosExecClothesResponse {
  Util.validateModel(request);
  var appParams = Util.stringifyMapValue(Util.toMap(request.params));
  return doRequestOApi('POST', '/topapi/rhino/mos/exec/clothes/count', request.headers, appParams, runtime);
}

model UpdateentranceidOapiImpaasConversationParams = {
  request: {
    extension?: string(description='扩展信息，可选', name='extension'),
    entranceId: int64(description='入口id，数字', name='entrance_id'),
    accounts: [
      {
        channel: string(description='账号通道:eleme,hema等', name='channel'),
        type: string(description='账号类型:channelUser/staff。当类型为channelUser时，填写app自己的账号，当类型为staff时，填写钉钉的staffid', name='type'),
        id: string(description='账号ID', name='id'),
      }
    ](description='要设置的用户列表', maxItems=20, name='accounts'),
    uuid: string(description='该请求的唯一id，用于去重、打日志', name='uuid'),
    channel: string(description='业务channel', name='channel'),
    cid: string(description='会话id', name='cid'),
  }(description='参数结构体', name='request'),
}

model UpdateentranceidOapiImpaasConversationRequest = {
  headers?: map[string]string,
  params:UpdateentranceidOapiImpaasConversationParams,
}

model UpdateentranceidOapiImpaasConversationResponseBody = {
  errcode?: int64(description='dingOpenErrcode', name='errcode'),
  errmsg?: string(description='errorMsg', name='errmsg'),
}

model UpdateentranceidOapiImpaasConversationResponse = {
  headers: map[string]string,
  body: UpdateentranceidOapiImpaasConversationResponseBody,
}

/**
 * Description: 在二级会话功能中，部分场景需要修改会话入口。另外，数据初始化时，也需要该接口做一部分数据订正
 */
async function updateentranceidOapiImpaasConversation(request: UpdateentranceidOapiImpaasConversationRequest): UpdateentranceidOapiImpaasConversationResponse {
  var runtime = new Util.RuntimeOptions{};
  return updateentranceidOapiImpaasConversationEx(request, runtime);
}

/**
 * Description: 在二级会话功能中，部分场景需要修改会话入口。另外，数据初始化时，也需要该接口做一部分数据订正
 */
async function updateentranceidOapiImpaasConversationEx(request: UpdateentranceidOapiImpaasConversationRequest, runtime: Util.RuntimeOptions): UpdateentranceidOapiImpaasConversationResponse {
  Util.validateModel(request);
  var appParams = Util.stringifyMapValue(Util.toMap(request.params));
  return doRequestOApi('POST', '/topapi/impaas/conversation/updateentranceid', request.headers, appParams, runtime);
}

model CreateOapiRhinoMosExecClothesParams = {
  additionalOperations?: [
    {
      deviceIds?: [ int64 ](description='设备ID列表', maxItems=20, name='device_ids'),
      flowVersion: int64(description='排位布局版本', name='flow_version'),
      operationType: string(description='工序类型', name='operation_type'),
      operationUid: int64(description='工序ID', name='operation_uid'),
      performStatus: string(description='工序执行状态', name='perform_status'),
      priority: int64(description='优先级', name='priority'),
      processTypeCode?: string(description='工序能力类型', name='process_type_code'),
      sectionCode?: string(description='工段', name='section_code'),
      workNos?: [ string ](description='执行人', maxItems=20, name='work_nos'),
      workstationCode?: string(description='工位', name='workstation_code'),
      processEndTime?: string(description='工序执行完成时间', pattern='\\\\d{4}[-]\\\\d{1,2}[-]\\\\d{1,2}[T]\\\\d{2}:\\\\d{2}:\\\\d{2}[Z]', name='process_end_time'),
      processStartTime?: string(description='工序执行开始时间', pattern='\\\\d{4}[-]\\\\d{1,2}[-]\\\\d{1,2}[T]\\\\d{2}:\\\\d{2}:\\\\d{2}[Z]', name='process_start_time'),
      context?: string(description='上下文', name='context'),
    }
  ](description='工序信息', maxItems=500, name='additional_operations'),
  autoStart?: boolean(description='衣服状态是否自动开启', name='auto_start'),
  entityType: string(description='实体类型', name='entity_type'),
  orderId: int64(description='订单ID', name='order_id'),
  source: {
    sourceId: string(description='来源ID', name='source_id'),
    sourceType: string(description='来源类型', name='source_type'),
  }(description='来源', name='source'),
  tenantId?: string(description='租户ID', name='tenant_id'),
  userid?: string(description='业务参数[这里先预留],这里是用户ID,比如钉钉用户ID', name='userid'),
  clothes?: [
    {
      colorCode?: string(description='颜色code', name='color_code'),
      colorName?: string(description='颜色名', name='color_name'),
      sizeCode: string(description='尺码code', name='size_code'),
      sizeName?: string(description='尺码名称', name='size_name'),
      count?: int64(description='数量', name='count'),
      finishTime?: string(description='衣服完成时间', pattern='\\\\d{4}[-]\\\\d{1,2}[-]\\\\d{1,2}[T]\\\\d{2}:\\\\d{2}:\\\\d{2}[Z]', name='finish_time'),
      startTime?: string(description='衣服开始时间', pattern='\\\\d{4}[-]\\\\d{1,2}[-]\\\\d{1,2}[T]\\\\d{2}:\\\\d{2}:\\\\d{2}[Z]', name='start_time'),
    }
  ](description='衣服详情', maxItems=20, name='clothes'),
  bizType?: string(description='业务类型', name='biz_type'),
}

model CreateOapiRhinoMosExecClothesRequest = {
  headers?: map[string]string,
  params:CreateOapiRhinoMosExecClothesParams,
}

model CreateOapiRhinoMosExecClothesResponseBody = {
  errmsg?: string(description='错误信息', name='errmsg'),
  model?: [ int64 ](description='衣服ID列表', name='model'),
  success?: boolean(description='是否成功', name='success'),
  errcode?: int64(description='钉钉错误码', name='errcode'),
}

model CreateOapiRhinoMosExecClothesResponse = {
  headers: map[string]string,
  body: CreateOapiRhinoMosExecClothesResponseBody,
}

/**
 * Description: 通过衣服详情，批量创建衣服实体
 */
async function createOapiRhinoMosExecClothes(request: CreateOapiRhinoMosExecClothesRequest): CreateOapiRhinoMosExecClothesResponse {
  var runtime = new Util.RuntimeOptions{};
  return createOapiRhinoMosExecClothesEx(request, runtime);
}

/**
 * Description: 通过衣服详情，批量创建衣服实体
 */
async function createOapiRhinoMosExecClothesEx(request: CreateOapiRhinoMosExecClothesRequest, runtime: Util.RuntimeOptions): CreateOapiRhinoMosExecClothesResponse {
  Util.validateModel(request);
  var appParams = Util.stringifyMapValue(Util.toMap(request.params));
  return doRequestOApi('POST', '/topapi/rhino/mos/exec/clothes/create', request.headers, appParams, runtime);
}

model QueryOapiRhinoMosExecPerformParams = {
  tenantId: string(description='租户ID', name='tenant_id'),
  activeCondition?: string(description='生效条件', name='active_condition'),
  entityType: string(description='实体类型', name='entity_type'),
  performStatusList?: [ string ](description='执行状态', maxItems=20, name='perform_status_list'),
  workstationCodes?: [ string ](description='执行工位列表', maxItems=20, name='workstation_codes'),
  entityIds?: [ int64 ](description='实体ID列表', maxItems=500, name='entity_ids'),
  operationUids?: [ int64 ](description='工序列表', maxItems=500, name='operation_uids'),
  userid?: string(description='业务参数[这里先预留],这里是用户ID,比如钉钉用户ID', name='userid'),
  orderId?: int64(description='订单ID', name='order_id'),
}

model QueryOapiRhinoMosExecPerformRequest = {
  headers?: map[string]string,
  params:QueryOapiRhinoMosExecPerformParams,
}

model QueryOapiRhinoMosExecPerformResponseBody = {
  errmsg?: string(description='错误信息', name='errmsg'),
  model?: [
    {
      active?: string(description='是否有效', name='active'),
      batchId?: int64(description='分批ID', name='batch_id'),
      context?: string(description='上下文', name='context'),
      createType?: string(description='创建类型，是新建的还是已存在的', name='create_type'),
      deviceIds?: [ int64 ](description='设备ID列表', name='device_ids'),
      entityId?: int64(description='实例ID', name='entity_id'),
      entityType?: string(description='实体类型', name='entity_type'),
      flowVersion?: int64(description='排位布局版本', name='flow_version'),
      id?: int64(description='工序执行ID', name='id'),
      operationType?: string(description='工序类型', name='operation_type'),
      operationUid?: int64(description='工序ID', name='operation_uid'),
      orderId?: int64(description='订单ID', name='order_id'),
      performStatus?: string(description='执行状态', name='perform_status'),
      performType?: string(description='执行类型', name='perform_type'),
      priority?: int64(description='优先级', name='priority'),
      processTypeCode?: string(description='工序能力类型', name='process_type_code'),
      processingEndTime?: string(description='工序执行结束时间', pattern='\\\\d{4}[-]\\\\d{1,2}[-]\\\\d{1,2}[T]\\\\d{2}:\\\\d{2}:\\\\d{2}[Z]', name='processing_end_time'),
      processingStartTime?: string(description='工序执行开始时间', pattern='\\\\d{4}[-]\\\\d{1,2}[-]\\\\d{1,2}[T]\\\\d{2}:\\\\d{2}:\\\\d{2}[Z]', name='processing_start_time'),
      sectionCode?: string(description='工段', name='section_code'),
      sourceId?: string(description='来源ID', name='source_id'),
      sourceType?: string(description='来源类型', name='source_type'),
      tenantId?: string(description='租户ID', name='tenant_id'),
      workNos?: [ string ](description='执行人工号', name='work_nos'),
      workstationCode?: string(description='执行工位', name='workstation_code'),
      processCostTime?: string(description='工序执行耗时', name='process_cost_time'),
    }
  ](description='创建后的工段执行记录', name='model'),
  success?: boolean(description='是否成功', name='success'),
  errcode?: int64(description='错误码', name='errcode'),
}

model QueryOapiRhinoMosExecPerformResponse = {
  headers: map[string]string,
  body: QueryOapiRhinoMosExecPerformResponseBody,
}

/**
 * Description: 条件查询执行记录详情
 */
async function queryOapiRhinoMosExecPerform(request: QueryOapiRhinoMosExecPerformRequest): QueryOapiRhinoMosExecPerformResponse {
  var runtime = new Util.RuntimeOptions{};
  return queryOapiRhinoMosExecPerformEx(request, runtime);
}

/**
 * Description: 条件查询执行记录详情
 */
async function queryOapiRhinoMosExecPerformEx(request: QueryOapiRhinoMosExecPerformRequest, runtime: Util.RuntimeOptions): QueryOapiRhinoMosExecPerformResponse {
  Util.validateModel(request);
  var appParams = Util.stringifyMapValue(Util.toMap(request.params));
  return doRequestOApi('POST', '/topapi/rhino/mos/exec/perform/query', request.headers, appParams, runtime);
}

model GetOapiRhinoMosExecClothesUnperformedParams = {
  req?: {
    orderId: int64(description='订单id', name='order_id'),
    operationUids: [ int64 ](description='工序id', maxItems=500, name='operation_uids'),
    tenantId: string(description='租户id', name='tenant_id'),
    sizeCode: string(description='尺码信息', name='size_code'),
    page: {
      start: int64(description='其实位置', name='start'),
      pageSize: int64(description='页大小', name='page_size'),
    }(description='分页', name='page'),
    userid?: string(description='userId', name='userid'),
    status: [ string ](description='状态', maxItems=20, name='status'),
    bizTypes?: [ string ](description='业务类型', maxItems=20, name='biz_types'),
  }(description='入参', name='req'),
}

model GetOapiRhinoMosExecClothesUnperformedRequest = {
  headers?: map[string]string,
  params?:GetOapiRhinoMosExecClothesUnperformedParams,
}

model GetOapiRhinoMosExecClothesUnperformedResponseBody = {
  errmsg?: string(description='错误信息', name='errmsg'),
  model?: {
    currentStart?: int64(description='起始位置', name='current_start'),
    pageSize?: int64(description='页大小', name='page_size'),
    result?: [ int64 ](description='结果', name='result'),
    total?: int64(description='总数', name='total'),
  }(description='衣服ID列表', name='model'),
  success?: boolean(description='是否成功', name='success'),
  errcode?: int64(description='错误码', name='errcode'),
}

model GetOapiRhinoMosExecClothesUnperformedResponse = {
  headers: map[string]string,
  body: GetOapiRhinoMosExecClothesUnperformedResponseBody,
}

/**
 * Description: 获取未完成相应工序的衣服实体
 */
async function getOapiRhinoMosExecClothesUnperformed(request: GetOapiRhinoMosExecClothesUnperformedRequest): GetOapiRhinoMosExecClothesUnperformedResponse {
  var runtime = new Util.RuntimeOptions{};
  return getOapiRhinoMosExecClothesUnperformedEx(request, runtime);
}

/**
 * Description: 获取未完成相应工序的衣服实体
 */
async function getOapiRhinoMosExecClothesUnperformedEx(request: GetOapiRhinoMosExecClothesUnperformedRequest, runtime: Util.RuntimeOptions): GetOapiRhinoMosExecClothesUnperformedResponse {
  Util.validateModel(request);
  var appParams = Util.stringifyMapValue(Util.toMap(request.params));
  return doRequestOApi('POST', '/topapi/rhino/mos/exec/clothes/unperformed/get', request.headers, appParams, runtime);
}

model GetOapiSmartdevicePrintdetailParams = {
  cursor?: int64(description='起始游标，从0开始', name='cursor'),
  size?: int64(description='每页大小，1-100', name='size'),
}

model GetOapiSmartdevicePrintdetailRequest = {
  headers?: map[string]string,
  params?:GetOapiSmartdevicePrintdetailParams,
}

model GetOapiSmartdevicePrintdetailResponseBody = {
  result?: {
    nextCursor?: int64(description='下一个游标', name='next_cursor'),
    nextCursorString?: string(description='下一游标', name='next_cursor_string'),
    hasMore?: boolean(description='是否有更多记录', name='has_more'),
    list?: [
      {
        deptLevel1Name?: string(description='一级部门名', name='dept_level1_name'),
        pageDoubleType?: int64(description='单双面类型，0是单面，1是双面', name='page_double_type'),
        deptLevel3Name?: string(description='三级部门名', name='dept_level3_name'),
        printDate?: string(description='打印时间戳，单位是毫秒', pattern='\\\\d{4}[-]\\\\d{1,2}[-]\\\\d{1,2}[T]\\\\d{2}:\\\\d{2}:\\\\d{2}[Z]', name='print_date'),
        origin?: string(description='打印来源编号，0-5： 0-其他  1-pc驱动  2-二维码   3-审批   4-钉盘  5-IM', name='origin'),
        pageSizeType?: string(description='纸张大小类型 A3', name='page_size_type'),
        pageColorType?: int64(description='彩色或黑白打印类型.0黑白，1彩色', name='page_color_type'),
        deptExtInfo?: string(description='部门扩展信息', name='dept_ext_info'),
        userName?: string(description='用户名', name='user_name'),
        deptFullName?: string(description='部门全称', name='dept_full_name'),
        printerNick?: string(description='打印机名称', name='printer_nick'),
        deptLevel2Name?: string(description='二级部门名', name='dept_level2_name'),
        pages?: int64(description='打印总页数', name='pages'),
      }
    ](description='打印详情列表', name='list'),
  }(description='页数据结果', name='result'),
  errcode?: int64(description='错误码', name='errcode'),
  errmsg?: string(description='错误信息', name='errmsg'),
  success?: boolean(description='请求是否成功', name='success'),
}

model GetOapiSmartdevicePrintdetailResponse = {
  headers: map[string]string,
  body: GetOapiSmartdevicePrintdetailResponseBody,
}

/**
 * Description: 企业获取自己企业的云打印数据详情
 */
async function getOapiSmartdevicePrintdetail(request: GetOapiSmartdevicePrintdetailRequest): GetOapiSmartdevicePrintdetailResponse {
  var runtime = new Util.RuntimeOptions{};
  return getOapiSmartdevicePrintdetailEx(request, runtime);
}

/**
 * Description: 企业获取自己企业的云打印数据详情
 */
async function getOapiSmartdevicePrintdetailEx(request: GetOapiSmartdevicePrintdetailRequest, runtime: Util.RuntimeOptions): GetOapiSmartdevicePrintdetailResponse {
  Util.validateModel(request);
  var appParams = Util.stringifyMapValue(Util.toMap(request.params));
  return doRequestOApi('POST', '/topapi/smartdevice/printdetail/get', request.headers, appParams, runtime);
}

model GetOapiRhinoMosExecClothesConditionParams = {
  getClothesConditionReq: {
    condition?: {
      entityIds?: [ int64 ](description='实体id', maxItems=500, name='entity_ids'),
      entitySource?: {
        sourceId?: string(description='source_id', name='source_id'),
        sourceType?: string(description='source_type', name='source_type'),
      }(description='实体源', name='entity_source'),
      entityType?: string(description='实体类型', name='entity_type'),
    }(description='实体条件', name='condition'),
    page?: {
      pageSize?: int64(description='页大小', name='page_size'),
      start?: int64(description='开始', name='start'),
    }(description='页信息', name='page'),
    sizeCodes?: [ string ](description='尺码', maxItems=20, name='size_codes'),
    status?: [ string ](description='状态', maxItems=20, name='status'),
    tenantId?: string(description='租户id', name='tenant_id'),
    userid?: string(description='user_id', name='userid'),
    orderId?: int64(description='订单ID', name='order_id'),
  }(description='请求', name='get_clothes_condition_req'),
}

model GetOapiRhinoMosExecClothesConditionRequest = {
  headers?: map[string]string,
  params:GetOapiRhinoMosExecClothesConditionParams,
}

model GetOapiRhinoMosExecClothesConditionResponseBody = {
  errmsg?: string(description='系统自动生成', name='errmsg'),
  externalMsgInfo?: string(description='错误信息', name='external_msg_info'),
  model?: {
    currentStart?: int64(description='当前起始', name='current_start'),
    pageSize?: int64(description='页大小', name='page_size'),
    resultList?: [
      {
        colorId?: int64(description='颜色id', name='color_id'),
        colorName?: string(description='颜色名称', name='color_name'),
        createType?: string(description='创建类型', name='create_type'),
        id?: int64(description='实体id', name='id'),
        orderId?: int64(description='订单id', name='order_id'),
        sizeCode?: string(description='尺码code', name='size_code'),
        sizeName?: string(description='尺码名称', name='size_name'),
        sourceId?: string(description='源id', name='source_id'),
        sourceType?: string(description='源类型', name='source_type'),
        status?: string(description='状态', name='status'),
        tenantId?: string(description='租户', name='tenant_id'),
      }
    ](description='页信息', name='result_list'),
    total?: int64(description='总数', name='total'),
  }(description='返回值', name='model'),
  errcode?: int64(description='错误码', name='errcode'),
}

model GetOapiRhinoMosExecClothesConditionResponse = {
  headers: map[string]string,
  body: GetOapiRhinoMosExecClothesConditionResponseBody,
}

/**
 * Description: 按照条件查询生产执行
 */
async function getOapiRhinoMosExecClothesCondition(request: GetOapiRhinoMosExecClothesConditionRequest): GetOapiRhinoMosExecClothesConditionResponse {
  var runtime = new Util.RuntimeOptions{};
  return getOapiRhinoMosExecClothesConditionEx(request, runtime);
}

/**
 * Description: 按照条件查询生产执行
 */
async function getOapiRhinoMosExecClothesConditionEx(request: GetOapiRhinoMosExecClothesConditionRequest, runtime: Util.RuntimeOptions): GetOapiRhinoMosExecClothesConditionResponse {
  Util.validateModel(request);
  var appParams = Util.stringifyMapValue(Util.toMap(request.params));
  return doRequestOApi('POST', '/topapi/rhino/mos/exec/clothes/condition/get', request.headers, appParams, runtime);
}

model QueryOapiRobotMessageGrouptaskParams = {
  token: string(description='群机器人webhook中的token', name='token'),
  processQueryKey: string(description='用于查询发送进度的唯一标识', name='process_query_key'),
}

model QueryOapiRobotMessageGrouptaskRequest = {
  headers?: map[string]string,
  params:QueryOapiRobotMessageGrouptaskParams,
}

model QueryOapiRobotMessageGrouptaskResponseBody = {
  success?: boolean(description='是否受理成功', name='success'),
  errcode?: int64(description='错误代码', name='errcode'),
  errmsg?: string(description='错误描述', name='errmsg'),
  result?: {
    sendStatus?: string(description='发送结果码，只有SUCCESS为成功', name='send_status'),
  }(description='result', name='result'),
}

model QueryOapiRobotMessageGrouptaskResponse = {
  headers: map[string]string,
  body: QueryOapiRobotMessageGrouptaskResponseBody,
}

/**
 * Description: 群机器人推送消息结果查询
 */
async function queryOapiRobotMessageGrouptask(request: QueryOapiRobotMessageGrouptaskRequest): QueryOapiRobotMessageGrouptaskResponse {
  var runtime = new Util.RuntimeOptions{};
  return queryOapiRobotMessageGrouptaskEx(request, runtime);
}

/**
 * Description: 群机器人推送消息结果查询
 */
async function queryOapiRobotMessageGrouptaskEx(request: QueryOapiRobotMessageGrouptaskRequest, runtime: Util.RuntimeOptions): QueryOapiRobotMessageGrouptaskResponse {
  Util.validateModel(request);
  var appParams = Util.stringifyMapValue(Util.toMap(request.params));
  return doRequestOApi('POST', '/topapi/robot/message/grouptask/query', request.headers, appParams, runtime);
}

model SendgroupOapiRobotMessageParams = {
  token: string(description='群机器人webhook中的token', name='token'),
  msgKey: string(description='申请到的消息模板唯一标识符', name='msg_key'),
  msgParam: string(description='消息模板中，变量本次替换的值', name='msg_param'),
}

model SendgroupOapiRobotMessageRequest = {
  headers?: map[string]string,
  params:SendgroupOapiRobotMessageParams,
}

model SendgroupOapiRobotMessageResponseBody = {
  success?: boolean(description='是否受理成功', name='success'),
  errcode?: int64(description='错误代码', name='errcode'),
  errmsg?: string(description='错误描述', name='errmsg'),
  result?: {
    processQueryKey?: string(description='用于查询发送进度的唯一标识', name='process_query_key'),
  }(description='result', name='result'),
}

model SendgroupOapiRobotMessageResponse = {
  headers: map[string]string,
  body: SendgroupOapiRobotMessageResponseBody,
}

/**
 * Description: 群机器人推送消息
 */
async function sendgroupOapiRobotMessage(request: SendgroupOapiRobotMessageRequest): SendgroupOapiRobotMessageResponse {
  var runtime = new Util.RuntimeOptions{};
  return sendgroupOapiRobotMessageEx(request, runtime);
}

/**
 * Description: 群机器人推送消息
 */
async function sendgroupOapiRobotMessageEx(request: SendgroupOapiRobotMessageRequest, runtime: Util.RuntimeOptions): SendgroupOapiRobotMessageResponse {
  Util.validateModel(request);
  var appParams = Util.stringifyMapValue(Util.toMap(request.params));
  return doRequestOApi('POST', '/topapi/robot/message/sendgroup', request.headers, appParams, runtime);
}

model SendotoOapiRobotMessageParams = {
  chatbotId: string(description='申请到的企业机器人唯一标识符', name='chatbot_id'),
  staffId: string(description='员工的userid', name='staff_id'),
  msgKey: string(description='申请到的消息模板唯一标识符', name='msg_key'),
  msgParam: string(description='消息模板中，变量本次替换的值', name='msg_param'),
}

model SendotoOapiRobotMessageRequest = {
  headers?: map[string]string,
  params:SendotoOapiRobotMessageParams,
}

model SendotoOapiRobotMessageResponseBody = {
  success?: boolean(description='是否受理成功', name='success'),
  errcode?: int64(description='错误代码', name='errcode'),
  errmsg?: string(description='错误描述', name='errmsg'),
  result?: {
    processQueryKey?: string(description='用于查询发送进度的唯一标识', name='process_query_key'),
  }(description='result', name='result'),
}

model SendotoOapiRobotMessageResponse = {
  headers: map[string]string,
  body: SendotoOapiRobotMessageResponseBody,
}

/**
 * Description: 企业机器人推送单聊消息
 */
async function sendotoOapiRobotMessage(request: SendotoOapiRobotMessageRequest): SendotoOapiRobotMessageResponse {
  var runtime = new Util.RuntimeOptions{};
  return sendotoOapiRobotMessageEx(request, runtime);
}

/**
 * Description: 企业机器人推送单聊消息
 */
async function sendotoOapiRobotMessageEx(request: SendotoOapiRobotMessageRequest, runtime: Util.RuntimeOptions): SendotoOapiRobotMessageResponse {
  Util.validateModel(request);
  var appParams = Util.stringifyMapValue(Util.toMap(request.params));
  return doRequestOApi('POST', '/topapi/robot/message/sendoto', request.headers, appParams, runtime);
}

model QueryOapiMiniappAppinfoParams = {
  modelKey: string(description='查询参数', name='model_key'),
}

model QueryOapiMiniappAppinfoRequest = {
  headers?: map[string]string,
  params:QueryOapiMiniappAppinfoParams,
}

model QueryOapiMiniappAppinfoResponseBody = {
  data?: {
    gmtModified?: int64(description='更新时间', name='gmt_modified'),
    gmtCreate?: int64(description='更新时间', name='gmt_create'),
    instId?: int64(description='租户ID', name='inst_id'),
    id?: int64(description='ID', name='id'),
    status?: int64(description='状态', name='status'),
    appId?: string(description='应用ID', name='app_id'),
    appChannel?: int64(description='应用通道', name='app_channel'),
    appType?: int64(description='应用类型', name='app_type'),
    autoInstall?: int64(description='自动装载', name='auto_install'),
    clientId?: int64(description='客户端', name='client_id'),
    origin?: int64(description='来源', name='origin'),
    preset?: int64(description='预装载', name='preset'),
    size?: int64(description='大小', name='size'),
    subType?: int64(description='子类型', name='sub_type'),
    appKey?: string(description='应用key', name='app_key'),
    desc?: string(description='描述', name='desc'),
    devId?: string(description='设备ID', name='dev_id'),
    englishName?: string(description='英文名称', name='english_name'),
    iconUrl?: string(description='图标', name='icon_url'),
    lastDiscards?: string(description='lastDiscards', name='last_discards'),
    mainUrl?: string(description='主URL', name='main_url'),
    name?: string(description='名称', name='name'),
    slogan?: string(description='标语', name='slogan'),
    vHost?: string(description='vhost', name='v_host'),
    isDeleted?: int64(description='isDeleted', name='is_deleted'),
    inheritConfig?: string(description='inheritConfig', name='inherit_config'),
    alias?: string(description='alias', name='alias'),
  }(description='返回的数据实体', name='data'),
  errcode?: int64(description='errcode', name='errcode'),
  errmsg?: string(description='errmsg', name='errmsg'),
}

model QueryOapiMiniappAppinfoResponse = {
  headers: map[string]string,
  body: QueryOapiMiniappAppinfoResponseBody,
}

/**
 * Description: 通过主键 id 查询 AppInfo 记录
 */
async function queryOapiMiniappAppinfo(request: QueryOapiMiniappAppinfoRequest): QueryOapiMiniappAppinfoResponse {
  var runtime = new Util.RuntimeOptions{};
  return queryOapiMiniappAppinfoEx(request, runtime);
}

/**
 * Description: 通过主键 id 查询 AppInfo 记录
 */
async function queryOapiMiniappAppinfoEx(request: QueryOapiMiniappAppinfoRequest, runtime: Util.RuntimeOptions): QueryOapiMiniappAppinfoResponse {
  Util.validateModel(request);
  var appParams = Util.stringifyMapValue(Util.toMap(request.params));
  return doRequestOApi('POST', '/topapi/miniapp/appinfo/query', request.headers, appParams, runtime);
}

model QueryOapiMiniappDeploypackageParams = {
  modelKey: string(description='查询参数', name='model_key'),
}

model QueryOapiMiniappDeploypackageRequest = {
  headers?: map[string]string,
  params:QueryOapiMiniappDeploypackageParams,
}

model QueryOapiMiniappDeploypackageResponseBody = {
  data?: {
    gmtModified?: int64(description='更新时间', name='gmt_modified'),
    gmtCreate?: int64(description='更新时间', name='gmt_create'),
    instId?: int64(description='租户ID', name='inst_id'),
    id?: int64(description='ID', name='id'),
    appId?: string(description='应用ID', name='app_id'),
    autoInstall?: int64(description='自动装载', name='auto_install'),
    preset?: int64(description='预装载', name='preset'),
    desc?: string(description='描述', name='desc'),
    iconUrl?: string(description='图标', name='icon_url'),
    mainUrl?: string(description='主URL', name='main_url'),
    name?: string(description='名称', name='name'),
    slogan?: string(description='标语', name='slogan'),
    deployTime?: int64(description='部署时间', name='deploy_time'),
    packageId?: int64(description='包ID', name='package_id'),
    online?: int64(description='在线', name='online'),
    grayTime?: int64(description='灰度时间', name='gray_time'),
    prod?: int64(description='上线状态', name='prod'),
    windowId?: int64(description='发布窗口ID', name='window_id'),
    isDeleted?: int64(description='是否删除', name='is_deleted'),
    gray?: int64(description='灰度', name='gray'),
    fallbackBaseUrl?: string(description='fallbackBaseUrl', name='fallback_base_url'),
    packageUrl?: string(description='包地址', name='package_url'),
    version?: string(description='版本', name='version'),
    preTime?: int64(description='预发布时间', name='pre_time'),
    rollbackFrom?: int64(description='回滚自哪个部署包', name='rollback_from'),
    pre?: int64(description='预发状态', name='pre'),
    size?: int64(description='大小', name='size'),
    clientId?: int64(description='客户端', name='client_id'),
    grayCode?: string(description='灰度码', name='gray_code'),
    englishName?: string(description='英文名', name='english_name'),
    extendInfo?: string(description='扩展信息', name='extend_info'),
    vhost?: string(description='vhost', name='vhost'),
    pluginUrl?: string(description='插件 url', name='plugin_url'),
    pluginSize?: int64(description='插件大小', name='plugin_size'),
    pluginRefs?: string(description='插件映射', name='plugin_refs'),
  }(description='返回的数据实体', name='data'),
  errcode?: int64(description='errcode', name='errcode'),
  errmsg?: string(description='errmsg', name='errmsg'),
}

model QueryOapiMiniappDeploypackageResponse = {
  headers: map[string]string,
  body: QueryOapiMiniappDeploypackageResponseBody,
}

/**
 * Description: 通过主键 id 查询 DeployPackage 记录
 */
async function queryOapiMiniappDeploypackage(request: QueryOapiMiniappDeploypackageRequest): QueryOapiMiniappDeploypackageResponse {
  var runtime = new Util.RuntimeOptions{};
  return queryOapiMiniappDeploypackageEx(request, runtime);
}

/**
 * Description: 通过主键 id 查询 DeployPackage 记录
 */
async function queryOapiMiniappDeploypackageEx(request: QueryOapiMiniappDeploypackageRequest, runtime: Util.RuntimeOptions): QueryOapiMiniappDeploypackageResponse {
  Util.validateModel(request);
  var appParams = Util.stringifyMapValue(Util.toMap(request.params));
  return doRequestOApi('POST', '/topapi/miniapp/deploypackage/query', request.headers, appParams, runtime);
}

model QueryOapiMiniappAppversionParams = {
  modelKey: string(description='查询参数', name='model_key'),
}

model QueryOapiMiniappAppversionRequest = {
  headers?: map[string]string,
  params:QueryOapiMiniappAppversionParams,
}

model QueryOapiMiniappAppversionResponseBody = {
  data?: {
    gmtModified?: int64(description='更新时间', name='gmt_modified'),
    gmtCreate?: int64(description='更新时间', name='gmt_create'),
    instId?: int64(description='租户ID', name='inst_id'),
    id?: int64(description='ID', name='id'),
    mainUrl?: string(description='主URL', name='main_url'),
    isDeleted?: int64(description='是否删除', name='is_deleted'),
    fallbackBaseUrl?: string(description='fallbackBaseUrl', name='fallback_base_url'),
    packageUrl?: string(description='包地址', name='package_url'),
    version?: string(description='版本', name='version'),
    size?: int64(description='大小', name='size'),
    clientId?: int64(description='客户端', name='client_id'),
    extendInfo?: string(description='扩展信息', name='extend_info'),
    buildType?: int64(description='构建类型', name='build_type'),
    qcloudStatus?: int64(description='构建任务状态', name='qcloud_status'),
    mosecStatus?: int64(description='猫爪扫描任务状态', name='mosec_status'),
    templateId?: int64(description='模板ID', name='template_id'),
    extJsonConfig?: string(description='模板实例化小程序的扩展数据', name='ext_json_config'),
    sourceUrl?: string(description='源URL', name='source_url'),
    qcloudJobId?: string(description='构建任务ID', name='qcloud_job_id'),
    tinyCliVersion?: string(description='tinyCliVersion', name='tiny_cli_version'),
    templateVersion?: string(description='模板版本', name='template_version'),
    versionUniqueId?: string(description='版本ID', name='version_unique_id'),
    extra?: string(description='扩展', name='extra'),
    extJsonConfigUrl?: string(description='模板实例化小程序的扩展数据url', name='ext_json_config_url'),
    buildTaskNo?: string(description='构建任务ID', name='build_task_no'),
    templateAppId?: string(description='模板应用ID', name='template_app_id'),
    mosecJobId?: string(description='猫爪任务ID', name='mosec_job_id'),
    md5?: string(description='MD5', name='md5'),
    pluginSize?: int64(description='插件大小', name='plugin_size'),
    pluginRefs?: string(description='插件关联', name='plugin_refs'),
    inheritConfig?: string(description='未知', name='inherit_config'),
    pluginUrl?: string(description='插件url', name='plugin_url'),
    appId?: string(description='appid', name='app_id'),
  }(description='返回的数据实体', name='data'),
  errcode?: int64(description='errcode', name='errcode'),
  errmsg?: string(description='errmsg', name='errmsg'),
}

model QueryOapiMiniappAppversionResponse = {
  headers: map[string]string,
  body: QueryOapiMiniappAppversionResponseBody,
}

/**
 * Description: 通过主键 id 查询 AppVersion 记录
 */
async function queryOapiMiniappAppversion(request: QueryOapiMiniappAppversionRequest): QueryOapiMiniappAppversionResponse {
  var runtime = new Util.RuntimeOptions{};
  return queryOapiMiniappAppversionEx(request, runtime);
}

/**
 * Description: 通过主键 id 查询 AppVersion 记录
 */
async function queryOapiMiniappAppversionEx(request: QueryOapiMiniappAppversionRequest, runtime: Util.RuntimeOptions): QueryOapiMiniappAppversionResponse {
  Util.validateModel(request);
  var appParams = Util.stringifyMapValue(Util.toMap(request.params));
  return doRequestOApi('POST', '/topapi/miniapp/appversion/query', request.headers, appParams, runtime);
}

model QueryOapiMiniappDeploywindowParams = {
  modelKey: string(description='查询参数', name='model_key'),
}

model QueryOapiMiniappDeploywindowRequest = {
  headers?: map[string]string,
  params:QueryOapiMiniappDeploywindowParams,
}

model QueryOapiMiniappDeploywindowResponseBody = {
  data?: {
    gmtModified?: int64(description='更新时间', name='gmt_modified'),
    gmtCreate?: int64(description='更新时间', name='gmt_create'),
    instId?: int64(description='租户ID', name='inst_id'),
    id?: int64(description='ID', name='id'),
    version?: string(description='版本', name='version'),
    clientId?: int64(description='客户端', name='client_id'),
    platformIos?: int64(description='ios平台', name='platform_ios'),
    deployPackageId?: int64(description='包ID', name='deploy_package_id'),
    platformAndroid?: int64(description='安卓平台', name='platform_android'),
    androidInstanceId?: int64(description='安卓实例ID', name='android_instance_id'),
    iosInstanceId?: int64(description='IOS实例ID', name='ios_instance_id'),
    iosClientMax?: string(description='IOS客户端最大版本', name='ios_client_max'),
    androidClientMin?: string(description='安卓最小版本', name='android_client_min'),
    androidClientMax?: string(description='安卓最大版本', name='android_client_max'),
    name?: string(description='名称', name='name'),
    iosClientMin?: string(description='IOS客户端最小版本', name='ios_client_min'),
    appId?: string(description='应用ID', name='app_id'),
  }(description='返回的数据实体', name='data'),
  errcode?: int64(description='errcode', name='errcode'),
  errmsg?: string(description='errmsg', name='errmsg'),
}

model QueryOapiMiniappDeploywindowResponse = {
  headers: map[string]string,
  body: QueryOapiMiniappDeploywindowResponseBody,
}

/**
 * Description: 通过主键 id 查询 DeloyWindow 记录
 */
async function queryOapiMiniappDeploywindow(request: QueryOapiMiniappDeploywindowRequest): QueryOapiMiniappDeploywindowResponse {
  var runtime = new Util.RuntimeOptions{};
  return queryOapiMiniappDeploywindowEx(request, runtime);
}

/**
 * Description: 通过主键 id 查询 DeloyWindow 记录
 */
async function queryOapiMiniappDeploywindowEx(request: QueryOapiMiniappDeploywindowRequest, runtime: Util.RuntimeOptions): QueryOapiMiniappDeploywindowResponse {
  Util.validateModel(request);
  var appParams = Util.stringifyMapValue(Util.toMap(request.params));
  return doRequestOApi('POST', '/topapi/miniapp/deploywindow/query', request.headers, appParams, runtime);
}

model GetOapiEduDeptParams = {
  deptId: int64(description='家校部门id', name='dept_id'),
}

model GetOapiEduDeptRequest = {
  headers?: map[string]string,
  params:GetOapiEduDeptParams,
}

model GetOapiEduDeptResponseBody = {
  result?: {
    detail?: {
      nick?: string(description='部门nick', name='nick'),
      chain?: string(description='部门链，不包括当前部门', name='chain'),
      feature?: string(description='部门节点特有属性', name='feature'),
      name?: string(description='部门名', name='name'),
      contactType?: string(description='通讯录类型。自定义or经典模型', name='contact_type'),
      deptType?: string(description='部门节点类型', name='dept_type'),
      deptId?: int64(description='部门id', name='dept_id'),
    }(description='部门详情', name='detail'),
  }(description='结果集', name='result'),
  success?: boolean(description='是否成功', name='success'),
  errcode?: int64(description='错误码，只有在success为false时才有效', name='errcode'),
  errmsg?: string(description='错误信息，只有在success为false时才有效', name='errmsg'),
}

model GetOapiEduDeptResponse = {
  headers: map[string]string,
  body: GetOapiEduDeptResponseBody,
}

/**
 * Description: 获取部门详情
 */
async function getOapiEduDept(request: GetOapiEduDeptRequest): GetOapiEduDeptResponse {
  var runtime = new Util.RuntimeOptions{};
  return getOapiEduDeptEx(request, runtime);
}

/**
 * Description: 获取部门详情
 */
async function getOapiEduDeptEx(request: GetOapiEduDeptRequest, runtime: Util.RuntimeOptions): GetOapiEduDeptResponse {
  Util.validateModel(request);
  var appParams = Util.stringifyMapValue(Util.toMap(request.params));
  return doRequestOApi('POST', '/topapi/edu/dept/get', request.headers, appParams, runtime);
}

model GetOapiRhinoMosExecOperationConditionParams = {
  getClothesConditionReq: {
    condition?: {
      entityIds?: [ int64 ](description='实体id', maxItems=500, name='entity_ids'),
      entitySource?: {
        sourceId?: string(description='source_id', name='source_id'),
        sourceType?: string(description='source_type', name='source_type'),
      }(description='实体源', name='entity_source'),
      entityType?: string(description='实体类型', name='entity_type'),
    }(description='实体条件', name='condition'),
    page?: {
      pageSize?: int64(description='页大小', name='page_size'),
      start?: int64(description='开始', name='start'),
    }(description='页信息', name='page'),
    sizeCodes?: [ string ](description='尺码', maxItems=20, name='size_codes'),
    status?: [ string ](description='状态', maxItems=20, name='status'),
    tenantId?: string(description='租户id', name='tenant_id'),
    userid?: string(description='user_id', name='userid'),
    orderId?: int64(description='租户', name='order_id'),
  }(description='请求', name='get_clothes_condition_req'),
}

model GetOapiRhinoMosExecOperationConditionRequest = {
  headers?: map[string]string,
  params:GetOapiRhinoMosExecOperationConditionParams,
}

model GetOapiRhinoMosExecOperationConditionResponseBody = {
  externalMsgInfo?: string(description='错误信息', name='external_msg_info'),
  errmsg?: string(description='系统自动生成', name='errmsg'),
  model?: {
    currentStart?: int64(description='当前起始', name='current_start'),
    pageSize?: int64(description='页大小', name='page_size'),
    resultList?: [
      {
        colorId?: int64(description='颜色id', name='color_id'),
        colorName?: string(description='颜色名称', name='color_name'),
        createType?: string(description='创建类型', name='create_type'),
        id?: int64(description='实体id', name='id'),
        orderId?: int64(description='订单id', name='order_id'),
        sizeCode?: string(description='尺码code', name='size_code'),
        sizeName?: string(description='尺码名称', name='size_name'),
        sourceId?: string(description='源id', name='source_id'),
        sourceType?: string(description='源类型', name='source_type'),
        status?: string(description='状态', name='status'),
        tenantId?: string(description='租户', name='tenant_id'),
      }
    ](description='页信息', name='result_list'),
    total?: int64(description='总数', name='total'),
  }(description='返回值', name='model'),
  success?: boolean(description='系统自动生成', name='success'),
  errcode?: int64(description='错误码', name='errcode'),
}

model GetOapiRhinoMosExecOperationConditionResponse = {
  headers: map[string]string,
  body: GetOapiRhinoMosExecOperationConditionResponseBody,
}

/**
 * Description: 按照条件查询生产执行
 */
async function getOapiRhinoMosExecOperationCondition(request: GetOapiRhinoMosExecOperationConditionRequest): GetOapiRhinoMosExecOperationConditionResponse {
  var runtime = new Util.RuntimeOptions{};
  return getOapiRhinoMosExecOperationConditionEx(request, runtime);
}

/**
 * Description: 按照条件查询生产执行
 */
async function getOapiRhinoMosExecOperationConditionEx(request: GetOapiRhinoMosExecOperationConditionRequest, runtime: Util.RuntimeOptions): GetOapiRhinoMosExecOperationConditionResponse {
  Util.validateModel(request);
  var appParams = Util.stringifyMapValue(Util.toMap(request.params));
  return doRequestOApi('POST', '/topapi/rhino/mos/exec/operation/condition/get', request.headers, appParams, runtime);
}

model ListOapiEduDeptParams = {
  pageSize: int64(description='每页大小，最大30', name='page_size'),
  pageNo: int64(description='页码，从1开始', name='page_no'),
  superId?: int64(description='父部门节点id，如果不填，则默认获取第一层级的部门节点', name='super_id'),
}

model ListOapiEduDeptRequest = {
  headers?: map[string]string,
  params:ListOapiEduDeptParams,
}

model ListOapiEduDeptResponseBody = {
  result?: {
    details?: [
      {
        nick?: string(description='可空', name='nick'),
        chain?: string(description='部门链', name='chain'),
        feature?: string(description='节点特有属性', name='feature'),
        name?: string(description='节点名', name='name'),
        contactType?: string(description='家校通讯录类型。自定义or标准', name='contact_type'),
        deptType?: string(description='节点类型', name='dept_type'),
        deptId?: int64(description='节点id', name='dept_id'),
      }
    ](description='部门节点列表，不空。', name='details'),
    hasMore?: boolean(description='是否有更多数据', name='has_more'),
    superId?: int64(description='父部门id', name='super_id'),
  }(description='数据集，不为空。', name='result'),
  success?: boolean(description='是否成功', name='success'),
  errcode?: int64(description='错误码，只有success为false时有效', name='errcode'),
  errmsg?: string(description='错误信息，只有success为false有效', name='errmsg'),
}

model ListOapiEduDeptResponse = {
  headers: map[string]string,
  body: ListOapiEduDeptResponseBody,
}

/**
 * Description: 查看教育行业某个部门节点下的所有子部门列表
 */
async function listOapiEduDept(request: ListOapiEduDeptRequest): ListOapiEduDeptResponse {
  var runtime = new Util.RuntimeOptions{};
  return listOapiEduDeptEx(request, runtime);
}

/**
 * Description: 查看教育行业某个部门节点下的所有子部门列表
 */
async function listOapiEduDeptEx(request: ListOapiEduDeptRequest, runtime: Util.RuntimeOptions): ListOapiEduDeptResponse {
  Util.validateModel(request);
  var appParams = Util.stringifyMapValue(Util.toMap(request.params));
  return doRequestOApi('POST', '/topapi/edu/dept/list', request.headers, appParams, runtime);
}

model InOapiRhinoMosSpaceDeviceCheckParams = {
  request: {
    deviceIds: [ int64 ](description='设备id列表', maxItems=20, name='device_ids'),
    prodWorkstationCode: string(description='站位编码', name='prod_workstation_code'),
    tenantId: string(description='租户ID', name='tenant_id'),
    userid?: string(description='用户ID', name='userid'),
  }(description='param_prod_workstation_device_batch_check_req', name='request'),
}

model InOapiRhinoMosSpaceDeviceCheckRequest = {
  headers?: map[string]string,
  params:InOapiRhinoMosSpaceDeviceCheckParams,
}

model InOapiRhinoMosSpaceDeviceCheckResponseBody = {
  errcode?: int64(description='错误码', name='errcode'),
  errmsg?: string(description='错误信息', name='errmsg'),
  model?: boolean(description='是否成功', name='model'),
}

model InOapiRhinoMosSpaceDeviceCheckResponse = {
  headers: map[string]string,
  body: InOapiRhinoMosSpaceDeviceCheckResponseBody,
}

/**
 * Description: rhino智能制造操作系统空间资源设备登记到站位
 */
async function inOapiRhinoMosSpaceDeviceCheck(request: InOapiRhinoMosSpaceDeviceCheckRequest): InOapiRhinoMosSpaceDeviceCheckResponse {
  var runtime = new Util.RuntimeOptions{};
  return inOapiRhinoMosSpaceDeviceCheckEx(request, runtime);
}

/**
 * Description: rhino智能制造操作系统空间资源设备登记到站位
 */
async function inOapiRhinoMosSpaceDeviceCheckEx(request: InOapiRhinoMosSpaceDeviceCheckRequest, runtime: Util.RuntimeOptions): InOapiRhinoMosSpaceDeviceCheckResponse {
  Util.validateModel(request);
  var appParams = Util.stringifyMapValue(Util.toMap(request.params));
  return doRequestOApi('POST', '/topapi/rhino/mos/space/device/check/in', request.headers, appParams, runtime);
}

model ListOapiEduUserRelationParams = {
  pageNo: int64(description='从1开始', name='page_no'),
  pageSize: int64(description='最大值30，最小值1', name='page_size'),
  classId: int64(description='班级id', name='class_id'),
}

model ListOapiEduUserRelationRequest = {
  headers?: map[string]string,
  params:ListOapiEduUserRelationParams,
}

model ListOapiEduUserRelationResponseBody = {
  result?: {
    hasMore?: boolean(description='是否还存在数据', name='has_more'),
    relations?: [
      {
        classId?: int64(description='班级id', name='class_id'),
        relationName?: string(description='关系名', name='relation_name'),
        relationCode?: string(description='关系code', name='relation_code'),
        fromUserid?: string(description='监护人id', name='from_userid'),
        toUserid?: string(description='学生id', name='to_userid'),
      }
    ](description='关系列表', name='relations'),
  }(description='结果集', name='result'),
  success?: boolean(description='是否成功', name='success'),
  errcode?: int64(description='错误码，只有success为false才有效', name='errcode'),
  errmsg?: string(description='错误信息，只有success为false才有效', name='errmsg'),
}

model ListOapiEduUserRelationResponse = {
  headers: map[string]string,
  body: ListOapiEduUserRelationResponseBody,
}

/**
 * Description: 获取人员关系列表
 */
async function listOapiEduUserRelation(request: ListOapiEduUserRelationRequest): ListOapiEduUserRelationResponse {
  var runtime = new Util.RuntimeOptions{};
  return listOapiEduUserRelationEx(request, runtime);
}

/**
 * Description: 获取人员关系列表
 */
async function listOapiEduUserRelationEx(request: ListOapiEduUserRelationRequest, runtime: Util.RuntimeOptions): ListOapiEduUserRelationResponse {
  Util.validateModel(request);
  var appParams = Util.stringifyMapValue(Util.toMap(request.params));
  return doRequestOApi('POST', '/topapi/edu/user/relation/list', request.headers, appParams, runtime);
}

model ListOapiRhinoMosSpaceDeviceCheckInParams = {
  request: {
    prodWorkstationCode: string(description='站位code', name='prod_workstation_code'),
    tenantId: string(description='租户ID', name='tenant_id'),
    userid?: string(description='userid', name='userid'),
  }(description='request', name='request'),
}

model ListOapiRhinoMosSpaceDeviceCheckInRequest = {
  headers?: map[string]string,
  params:ListOapiRhinoMosSpaceDeviceCheckInParams,
}

model ListOapiRhinoMosSpaceDeviceCheckInResponseBody = {
  errcode?: int64(description='错误码', name='errcode'),
  errmsg?: string(description='错误信息', name='errmsg'),
  model?: [
    {
      checkInTime?: string(description='登入时间', pattern='\\\\d{4}[-]\\\\d{1,2}[-]\\\\d{1,2}[T]\\\\d{2}:\\\\d{2}:\\\\d{2}[Z]', name='check_in_time'),
      checkOutTime?: string(description='登出时间', pattern='\\\\d{4}[-]\\\\d{1,2}[-]\\\\d{1,2}[T]\\\\d{2}:\\\\d{2}:\\\\d{2}[Z]', name='check_out_time'),
      checkStatus?: string(description='登入登出状态', name='check_status'),
      deviceId?: int64(description='device_id', name='device_id'),
      prodWorkstationCode?: string(description='站位code', name='prod_workstation_code'),
      tenantId?: string(description='租户ID', name='tenant_id'),
    }
  ](description='结果', name='model'),
}

model ListOapiRhinoMosSpaceDeviceCheckInResponse = {
  headers: map[string]string,
  body: ListOapiRhinoMosSpaceDeviceCheckInResponseBody,
}

/**
 * Description: rhino空间资源查询站位上登记的设备列表
 */
async function listOapiRhinoMosSpaceDeviceCheckIn(request: ListOapiRhinoMosSpaceDeviceCheckInRequest): ListOapiRhinoMosSpaceDeviceCheckInResponse {
  var runtime = new Util.RuntimeOptions{};
  return listOapiRhinoMosSpaceDeviceCheckInEx(request, runtime);
}

/**
 * Description: rhino空间资源查询站位上登记的设备列表
 */
async function listOapiRhinoMosSpaceDeviceCheckInEx(request: ListOapiRhinoMosSpaceDeviceCheckInRequest, runtime: Util.RuntimeOptions): ListOapiRhinoMosSpaceDeviceCheckInResponse {
  Util.validateModel(request);
  var appParams = Util.stringifyMapValue(Util.toMap(request.params));
  return doRequestOApi('POST', '/topapi/rhino/mos/space/device/check/in/list', request.headers, appParams, runtime);
}

model GetOapiEduUserRelationParams = {
  fromUserid: string(description='监护人id', name='from_userid'),
  classId: int64(description='班级id', name='class_id'),
}

model GetOapiEduUserRelationRequest = {
  headers?: map[string]string,
  params:GetOapiEduUserRelationParams,
}

model GetOapiEduUserRelationResponseBody = {
  result?: {
    relations?: [
      {
        classId?: int64(description='班级id', name='class_id'),
        relationName?: string(description='关系名', name='relation_name'),
        relationCode?: string(description='关系code', name='relation_code'),
        fromUserid?: string(description='监护人id', name='from_userid'),
        toUserid?: string(description='学生id', name='to_userid'),
      }
    ](description='关系详情列表', name='relations'),
  }(description='关系详情', name='result'),
  success?: boolean(description='是否成功', name='success'),
  errcode?: int64(description='错误码', name='errcode'),
  errmsg?: string(description='错误信息', name='errmsg'),
}

model GetOapiEduUserRelationResponse = {
  headers: map[string]string,
  body: GetOapiEduUserRelationResponseBody,
}

/**
 * Description: 获取家校人员关系
 */
async function getOapiEduUserRelation(request: GetOapiEduUserRelationRequest): GetOapiEduUserRelationResponse {
  var runtime = new Util.RuntimeOptions{};
  return getOapiEduUserRelationEx(request, runtime);
}

/**
 * Description: 获取家校人员关系
 */
async function getOapiEduUserRelationEx(request: GetOapiEduUserRelationRequest, runtime: Util.RuntimeOptions): GetOapiEduUserRelationResponse {
  Util.validateModel(request);
  var appParams = Util.stringifyMapValue(Util.toMap(request.params));
  return doRequestOApi('POST', '/topapi/edu/user/relation/get', request.headers, appParams, runtime);
}

model GetOapiRhinoMosSpaceWorkstationParams = {
  request: {
    categoryCode?: string(description='类目code', name='category_code'),
    categorySubCode?: string(description='类目子code', name='category_sub_code'),
    poiCode?: string(description='兴趣点code', name='poi_code'),
    prodWorkstationCode: string(description='站位code', name='prod_workstation_code'),
    tenantId: string(description='租户ID', name='tenant_id'),
    userid?: string(description='userid', name='userid'),
  }(description='request', name='request'),
}

model GetOapiRhinoMosSpaceWorkstationRequest = {
  headers?: map[string]string,
  params:GetOapiRhinoMosSpaceWorkstationParams,
}

model GetOapiRhinoMosSpaceWorkstationResponseBody = {
  errmsg?: string(description='错误信息', name='errmsg'),
  model?: {
    categoryCode?: string(description='类目code', name='category_code'),
    categorySubCode?: string(description='类目子code', name='category_sub_code'),
    poiCode?: string(description='兴趣点code', name='poi_code'),
    prodWorkstationCode?: string(description='站位code', name='prod_workstation_code'),
    prodWorkstationName?: string(description='站位name', name='prod_workstation_name'),
    tenantId?: string(description='租户ID', name='tenant_id'),
  }(description='结果', name='model'),
  errcode?: int64(description='错误码', name='errcode'),
}

model GetOapiRhinoMosSpaceWorkstationResponse = {
  headers: map[string]string,
  body: GetOapiRhinoMosSpaceWorkstationResponseBody,
}

/**
 * Description: rhino智能制造系统空间资源获取站位
 */
async function getOapiRhinoMosSpaceWorkstation(request: GetOapiRhinoMosSpaceWorkstationRequest): GetOapiRhinoMosSpaceWorkstationResponse {
  var runtime = new Util.RuntimeOptions{};
  return getOapiRhinoMosSpaceWorkstationEx(request, runtime);
}

/**
 * Description: rhino智能制造系统空间资源获取站位
 */
async function getOapiRhinoMosSpaceWorkstationEx(request: GetOapiRhinoMosSpaceWorkstationRequest, runtime: Util.RuntimeOptions): GetOapiRhinoMosSpaceWorkstationResponse {
  Util.validateModel(request);
  var appParams = Util.stringifyMapValue(Util.toMap(request.params));
  return doRequestOApi('POST', '/topapi/rhino/mos/space/workstation/get', request.headers, appParams, runtime);
}

model GetOapiEduUserParams = {
  classId: int64(description='班级id', name='class_id'),
  role: string(description='身份', name='role'),
  userid: string(description='人员id', name='userid'),
}

model GetOapiEduUserRequest = {
  headers?: map[string]string,
  params:GetOapiEduUserParams,
}

model GetOapiEduUserResponseBody = {
  result?: {
    details?: [
      {
        classId?: int64(description='班级id', name='class_id'),
        role?: string(description='身份', name='role'),
        feature?: string(description='身份属性', name='feature'),
        name?: string(description='人员名', name='name'),
        userid?: string(description='人员id', name='userid'),
      }
    ](description='人员身份详情列表', name='details'),
  }(description='人员身份详情', name='result'),
  success?: boolean(description='是否成功', name='success'),
  errcode?: int64(description='错误码', name='errcode'),
  errmsg?: string(description='错误信息', name='errmsg'),
}

model GetOapiEduUserResponse = {
  headers: map[string]string,
  body: GetOapiEduUserResponseBody,
}

/**
 * Description: 获取家校人员身份详情
 */
async function getOapiEduUser(request: GetOapiEduUserRequest): GetOapiEduUserResponse {
  var runtime = new Util.RuntimeOptions{};
  return getOapiEduUserEx(request, runtime);
}

/**
 * Description: 获取家校人员身份详情
 */
async function getOapiEduUserEx(request: GetOapiEduUserRequest, runtime: Util.RuntimeOptions): GetOapiEduUserResponse {
  Util.validateModel(request);
  var appParams = Util.stringifyMapValue(Util.toMap(request.params));
  return doRequestOApi('POST', '/topapi/edu/user/get', request.headers, appParams, runtime);
}

model Createo2oOapiImpaasConverstionParams = {
  request: {
    extension?: string(description='扩展数据,业务可以自定义，目前最大支持256B', name='extension'),
    sender: {
      id: string(description='创建者账号ID，类型由type字段决定', name='id'),
      type: string(description='账号ID类型，当type=staff时，id填写staffid，当type=channelUser时，id字段填写channelUserId', name='type'),
    }(description='发送者', name='sender'),
    senderEntranceId: int64(description='发送者二级会话入口ID', name='sender_entrance_id'),
    receiverEntranceId: int64(description='接收者二级会话入口ID', name='receiver_entrance_id'),
    receiver: {
      id: string(description='创建者账号ID，类型由type字段决定', name='id'),
      type: string(description='账号ID类型，当type=staff时，id填写staffid，当type=channelUser时，id字段填写channelUserId', name='type'),
    }(description='接收者', name='receiver'),
    uuid?: string(description='uuid, 用于防止弱网情况下超时导致重复创建, 一分钟内传递相同的uuid会返回同一个群，传空则不去重', name='uuid'),
    channel: string(description='接入方channel信息，该值由接入方接入IMPaaS平台时，向IMPaaS平台申请，例如“hema”“eleme”等。', name='channel'),
  }(description='创建会话请求', name='request'),
}

model Createo2oOapiImpaasConverstionRequest = {
  headers?: map[string]string,
  params:Createo2oOapiImpaasConverstionParams,
}

model Createo2oOapiImpaasConverstionResponseBody = {
  chatid?: string(description='result', name='chatid'),
  errcode?: int64(description='dingOpenErrcode', name='errcode'),
  errmsg?: string(description='errorMsg', name='errmsg'),
}

model Createo2oOapiImpaasConverstionResponse = {
  headers: map[string]string,
  body: Createo2oOapiImpaasConverstionResponseBody,
}

/**
 * Description: 创建单聊会话
 */
async function createo2oOapiImpaasConverstion(request: Createo2oOapiImpaasConverstionRequest): Createo2oOapiImpaasConverstionResponse {
  var runtime = new Util.RuntimeOptions{};
  return createo2oOapiImpaasConverstionEx(request, runtime);
}

/**
 * Description: 创建单聊会话
 */
async function createo2oOapiImpaasConverstionEx(request: Createo2oOapiImpaasConverstionRequest, runtime: Util.RuntimeOptions): Createo2oOapiImpaasConverstionResponse {
  Util.validateModel(request);
  var appParams = Util.stringifyMapValue(Util.toMap(request.params));
  return doRequestOApi('POST', '/topapi/impaas/converstion/createo2o', request.headers, appParams, runtime);
}

model OutOapiRhinoMosSpaceDeviceCheckParams = {
  request: {
    deviceIds: [ int64 ](description='设备id列表', maxItems=20, name='device_ids'),
    prodWorkstationCode: string(description='站位code', name='prod_workstation_code'),
    tenantId: string(description='租户ID', name='tenant_id'),
    userid?: string(description='用户ID', name='userid'),
  }(description='param_prod_workstation_device_batch_check_req', name='request'),
}

model OutOapiRhinoMosSpaceDeviceCheckRequest = {
  headers?: map[string]string,
  params:OutOapiRhinoMosSpaceDeviceCheckParams,
}

model OutOapiRhinoMosSpaceDeviceCheckResponseBody = {
  errmsg?: string(description='错误信息', name='errmsg'),
  model?: boolean(description='是否成功', name='model'),
  errcode?: int64(description='错误码', name='errcode'),
}

model OutOapiRhinoMosSpaceDeviceCheckResponse = {
  headers: map[string]string,
  body: OutOapiRhinoMosSpaceDeviceCheckResponseBody,
}

/**
 * Description: rhino智能制造系统空间资源设备登出站位
 */
async function outOapiRhinoMosSpaceDeviceCheck(request: OutOapiRhinoMosSpaceDeviceCheckRequest): OutOapiRhinoMosSpaceDeviceCheckResponse {
  var runtime = new Util.RuntimeOptions{};
  return outOapiRhinoMosSpaceDeviceCheckEx(request, runtime);
}

/**
 * Description: rhino智能制造系统空间资源设备登出站位
 */
async function outOapiRhinoMosSpaceDeviceCheckEx(request: OutOapiRhinoMosSpaceDeviceCheckRequest, runtime: Util.RuntimeOptions): OutOapiRhinoMosSpaceDeviceCheckResponse {
  Util.validateModel(request);
  var appParams = Util.stringifyMapValue(Util.toMap(request.params));
  return doRequestOApi('POST', '/topapi/rhino/mos/space/device/check/out', request.headers, appParams, runtime);
}

model ListOapiEduUserParams = {
  pageSize: int64(description='最大30条，最小1条', name='page_size'),
  pageNo: int64(description='页码，从1开始', name='page_no'),
  role: string(description='家校人员身份', name='role'),
  classId: int64(description='班级id', name='class_id'),
}

model ListOapiEduUserRequest = {
  headers?: map[string]string,
  params:ListOapiEduUserParams,
}

model ListOapiEduUserResponseBody = {
  result?: {
    hasMore?: boolean(description='是否还有数据', name='has_more'),
    details?: [
      {
        classId?: int64(description='班级id', name='class_id'),
        role?: string(description='角色', name='role'),
        feature?: string(description='人员各个身份属性', name='feature'),
        name?: string(description='在班级中的监护人名', name='name'),
        userid?: string(description='人员id', name='userid'),
      }
    ](description='人员身份列表', name='details'),
  }(description='结果值', name='result'),
  success?: boolean(description='是否成功', name='success'),
  errcode?: int64(description='错误码，只有当success为false时才有效', name='errcode'),
  errmsg?: string(description='错误信息，只有当success为false时才有效', name='errmsg'),
}

model ListOapiEduUserResponse = {
  headers: map[string]string,
  body: ListOapiEduUserResponseBody,
}

/**
 * Description: 获取家校用户身份列表
 */
async function listOapiEduUser(request: ListOapiEduUserRequest): ListOapiEduUserResponse {
  var runtime = new Util.RuntimeOptions{};
  return listOapiEduUserEx(request, runtime);
}

/**
 * Description: 获取家校用户身份列表
 */
async function listOapiEduUserEx(request: ListOapiEduUserRequest, runtime: Util.RuntimeOptions): ListOapiEduUserResponse {
  Util.validateModel(request);
  var appParams = Util.stringifyMapValue(Util.toMap(request.params));
  return doRequestOApi('POST', '/topapi/edu/user/list', request.headers, appParams, runtime);
}

model UpsertOapiRhinoMosSpaceWorkstationParams = {
  request: {
    categoryCode: string(description='类目code', name='category_code'),
    categorySubCode: string(description='类目子code', name='category_sub_code'),
    poiCode?: string(description='兴趣点code', name='poi_code'),
    prodWorkstationCode: string(description='站位code', name='prod_workstation_code'),
    prodWorkstationName?: string(description='站位name', name='prod_workstation_name'),
    tenantId: string(description='租户ID', name='tenant_id'),
    userid?: string(description='userid', name='userid'),
  }(description='request', name='request'),
}

model UpsertOapiRhinoMosSpaceWorkstationRequest = {
  headers?: map[string]string,
  params:UpsertOapiRhinoMosSpaceWorkstationParams,
}

model UpsertOapiRhinoMosSpaceWorkstationResponseBody = {
  errmsg?: string(description='错误信息', name='errmsg'),
  model?: {
    categoryCode?: string(description='类目code', name='category_code'),
    categorySubCode?: string(description='类目子code', name='category_sub_code'),
    poiCode?: string(description='兴趣点code', name='poi_code'),
    prodWorkstationCode?: string(description='站位code', name='prod_workstation_code'),
    prodWorkstationName?: string(description='站位name', name='prod_workstation_name'),
    tenantId?: string(description='租户ID', name='tenant_id'),
  }(description='结果', name='model'),
  errcode?: int64(description='错误码', name='errcode'),
}

model UpsertOapiRhinoMosSpaceWorkstationResponse = {
  headers: map[string]string,
  body: UpsertOapiRhinoMosSpaceWorkstationResponseBody,
}

/**
 * Description: rhino智能制造系统空间资源新增或更新站位
 */
async function upsertOapiRhinoMosSpaceWorkstation(request: UpsertOapiRhinoMosSpaceWorkstationRequest): UpsertOapiRhinoMosSpaceWorkstationResponse {
  var runtime = new Util.RuntimeOptions{};
  return upsertOapiRhinoMosSpaceWorkstationEx(request, runtime);
}

/**
 * Description: rhino智能制造系统空间资源新增或更新站位
 */
async function upsertOapiRhinoMosSpaceWorkstationEx(request: UpsertOapiRhinoMosSpaceWorkstationRequest, runtime: Util.RuntimeOptions): UpsertOapiRhinoMosSpaceWorkstationResponse {
  Util.validateModel(request);
  var appParams = Util.stringifyMapValue(Util.toMap(request.params));
  return doRequestOApi('POST', '/topapi/rhino/mos/space/workstation/upsert', request.headers, appParams, runtime);
}

model AddOapiServiceaccountParams = {
  name: string(description='服务号名称', maxLength=30, name='name'),
  avatarMediaId: string(description='头像图片mediaId', name='avatar_media_id'),
  brief?: string(description='机器人管理列表中的简介', maxLength=60, name='brief'),
  desc: string(description='机器人主页中的服务号功能简介，最多200个字符', maxLength=200, name='desc'),
  previewMediaId: string(description='机器人主页中，消息预览图片的mediaId', name='preview_media_id'),
}

model AddOapiServiceaccountRequest = {
  headers?: map[string]string,
  params:AddOapiServiceaccountParams,
}

model AddOapiServiceaccountResponseBody = {
  errmsg?: string(description='错误信息', name='errmsg'),
  errcode?: int64(description='错误码', name='errcode'),
  unionid?: string(description='服务号的unionid', name='unionid'),
}

model AddOapiServiceaccountResponse = {
  headers: map[string]string,
  body: AddOapiServiceaccountResponseBody,
}

/**
 * Description: 新增服务号
 */
async function addOapiServiceaccount(request: AddOapiServiceaccountRequest): AddOapiServiceaccountResponse {
  var runtime = new Util.RuntimeOptions{};
  return addOapiServiceaccountEx(request, runtime);
}

/**
 * Description: 新增服务号
 */
async function addOapiServiceaccountEx(request: AddOapiServiceaccountRequest, runtime: Util.RuntimeOptions): AddOapiServiceaccountResponse {
  Util.validateModel(request);
  var appParams = Util.stringifyMapValue(Util.toMap(request.params));
  return doRequestOApi('POST', '/topapi/serviceaccount/add', request.headers, appParams, runtime);
}

model CreateOapiRhinoMosExecPerformBatchParams = {
  batchCreateOperationReq?: {
    entityCondition?: {
      entityIds?: [ int64 ](description='实体ids', maxItems=500, name='entity_ids'),
      entitySource?: {
        sourceId?: string(description='sourceId', name='source_id'),
        sourceType?: string(description='sourceType', name='source_type'),
      }(description='实体来源（暂未支持）', name='entity_source'),
      entityType?: string(description='实体type', name='entity_type'),
    }(description='实体条件', name='entity_condition'),
    orderId?: int64(description='订单id', name='order_id'),
    performOperationReqs: [
      {
        context?: string(description='上下文', name='context'),
        deviceIds?: [ int64 ](description='设备id', maxItems=100, name='device_ids'),
        flowVersion: int64(description='flow版本', name='flow_version'),
        operationType: string(description='工序类型', name='operation_type'),
        operationUid: int64(description='工序唯一id', name='operation_uid'),
        performStatus?: string(description='执行状态', name='perform_status'),
        priority: int64(description='优先级', name='priority'),
        processTypeCode: string(description='工序类型码', name='process_type_code'),
        sectionCode: string(description='工段', name='section_code'),
        workNos?: [ string ](description='工号', maxItems=20, name='work_nos'),
        workstationCode?: string(description='工作站', name='workstation_code'),
        processCostTime?: string(description='执行耗时', name='process_cost_time'),
        processEndTime?: string(description='执行完成时间', pattern='\\\\d{4}[-]\\\\d{1,2}[-]\\\\d{1,2}[T]\\\\d{2}:\\\\d{2}:\\\\d{2}[Z]', name='process_end_time'),
        processStartTime?: string(description='执行开始时间', pattern='\\\\d{4}[-]\\\\d{1,2}[-]\\\\d{1,2}[T]\\\\d{2}:\\\\d{2}:\\\\d{2}[Z]', name='process_start_time'),
      }
    ](description='工序请求', maxItems=500, name='perform_operation_reqs'),
    source: {
      sourceId: string(description='sourceId', name='source_id'),
      sourceType: string(description='sourceType', name='source_type'),
    }(description='来源', name='source'),
    tenantId: string(description='租户id', name='tenant_id'),
    userid?: string(description='用户id', name='userid'),
  }(description='入参', name='batch_create_operation_req'),
}

model CreateOapiRhinoMosExecPerformBatchRequest = {
  headers?: map[string]string,
  params?:CreateOapiRhinoMosExecPerformBatchParams,
}

model CreateOapiRhinoMosExecPerformBatchResponseBody = {
  externalMsgInfo?: string(description='错误信息', name='external_msg_info'),
  errmsg?: string(description='返回信息', name='errmsg'),
  model?: [
    {
      active?: string(description='是否生效', name='active'),
      batchId?: int64(description='批量id', name='batch_id'),
      context?: string(description='上下文', name='context'),
      createType?: string(description='创建类型', name='create_type'),
      deviceIds?: [ int64 ](description='设备id', name='device_ids'),
      entityId?: int64(description='实体id', name='entity_id'),
      entityType?: string(description='实体类型', name='entity_type'),
      flowVersion?: int64(description='flow版本', name='flow_version'),
      id?: int64(description='执行记录id', name='id'),
      operationType?: string(description='工序类型', name='operation_type'),
      operationUid?: int64(description='工序uid', name='operation_uid'),
      orderId?: int64(description='订单id', name='order_id'),
      performStatus?: string(description='执行状态', name='perform_status'),
      performType?: string(description='执行类型', name='perform_type'),
      priority?: int64(description='优先级', name='priority'),
      processTypeCode?: string(description='工序类型code', name='process_type_code'),
      processingEndTime?: string(description='工序处理结束时间', pattern='\\\\d{4}[-]\\\\d{1,2}[-]\\\\d{1,2}[T]\\\\d{2}:\\\\d{2}:\\\\d{2}[Z]', name='processing_end_time'),
      processingStartTime?: string(description='工序处理开始时间', pattern='\\\\d{4}[-]\\\\d{1,2}[-]\\\\d{1,2}[T]\\\\d{2}:\\\\d{2}:\\\\d{2}[Z]', name='processing_start_time'),
      sectionCode?: string(description='工段', name='section_code'),
      sourceId?: string(description='sourceId', name='source_id'),
      sourceType?: string(description='source类型', name='source_type'),
      tenantId?: string(description='租户id', name='tenant_id'),
      workNos?: [ string ](description='工号', name='work_nos'),
      workstationCode?: string(description='站位', name='workstation_code'),
    }
  ](description='返回结果', name='model'),
  errcode?: int64(description='错误码', name='errcode'),
}

model CreateOapiRhinoMosExecPerformBatchResponse = {
  headers: map[string]string,
  body: CreateOapiRhinoMosExecPerformBatchResponseBody,
}

/**
 * Description: 批量创建工序
 */
async function createOapiRhinoMosExecPerformBatch(request: CreateOapiRhinoMosExecPerformBatchRequest): CreateOapiRhinoMosExecPerformBatchResponse {
  var runtime = new Util.RuntimeOptions{};
  return createOapiRhinoMosExecPerformBatchEx(request, runtime);
}

/**
 * Description: 批量创建工序
 */
async function createOapiRhinoMosExecPerformBatchEx(request: CreateOapiRhinoMosExecPerformBatchRequest, runtime: Util.RuntimeOptions): CreateOapiRhinoMosExecPerformBatchResponse {
  Util.validateModel(request);
  var appParams = Util.stringifyMapValue(Util.toMap(request.params));
  return doRequestOApi('POST', '/topapi/rhino/mos/exec/perform/batch/create', request.headers, appParams, runtime);
}

model SendOapiMessageMassParams = {
  unionid: string(description='服务号的unionid', maxLength=128, name='unionid'),
  mediaId?: string(description='消息卡片素材id', maxLength=256, name='media_id'),
  isToAll: boolean(description='是否群发给所有订阅者，true-是，false-否', name='is_to_all'),
  msgType: string(description='msg_type, 消息类型：text，文本类型，此时文本内容填在text_content字段中；news_card，消息卡片，此时的media_id通过消息卡片上传接口得到； image，图片，此时的media_id通过图片上传接口得到', maxLength=32, name='msg_type'),
  textContent?: string(description='文本内容，当msg_type为text时有效', maxLength=65535, name='text_content'),
  uuid: string(description='调用时填写随机生成的UUID, 防止消息重复发送', maxLength=128, name='uuid'),
  useridList?: [ string ](description='接收者的用户userid列表', maxItems=10000, name='userid_list'),
  depIdList?: [ int64 ](description='接收者的部门id列表，接收者是部门id下(包括子部门下)的所有用户', maxItems=2000, name='dep_id_list'),
  isPreview?: boolean(description='是否预览推送', name='is_preview'),
  msgBody?: {
    voice?: {
      duration?: int64(description='正整数，小于60，表示音频时长', name='duration'),
      mediaId?: string(description='媒体文件id。2MB，播放长度不超过60s，AMR格式', maxLength=512, name='media_id'),
    }(description='语音消息', name='voice'),
    oa?: {
      head?: {
        bgcolor?: string(description='消息头部的背景颜色。长度限制为8个英文字符，其中前2为表示透明度，后6位表示颜色值。不要添加0x', name='bgcolor'),
        text?: string(description='消息的头部标题 (向普通会话发送时有效，向企业会话发送时会被替换为微应用的名字)，长度限制为最多10个字符', maxLength=20, name='text'),
      }(description='消息头部内容', name='head'),
      messageUrl?: string(description='消息点击链接地址，当发送消息为小程序时支持小程序跳转链接', maxLength=700, name='message_url'),
      body?: {
        image?: string(description='消息体中的图片，支持图片资源@mediaId', maxLength=512, name='image'),
        form?: [
          {
            key?: string(description='消息体的关键字', maxLength=50, name='key'),
            value?: string(description='消息体的关键字对应的值', maxLength=50, name='value'),
          }
        ](description='消息体的表单，最多显示6个，超过会被隐藏', maxItems=20, name='form'),
        author?: string(description='自定义的作者名字', maxLength=20, name='author'),
        rich?: {
          unit?: string(description='单行富文本信息的单位', maxLength=10, name='unit'),
          num?: string(description='单行富文本信息的数目', maxLength=50, name='num'),
        }(description='单行富文本信息', name='rich'),
        title?: string(description='消息体的标题，建议50个字符以内', maxLength=50, name='title'),
        fileCount?: int64(description='自定义的附件数目。此数字仅供显示，钉钉不作验证', name='file_count'),
        content?: string(description='消息体的内容，最多显示3行', maxLength=5000, name='content'),
      }(description='消息体', name='body'),
      pcMessageUrl?: string(description='PC端点击消息时跳转到的地址', maxLength=700, name='pc_message_url'),
    }(description='oa消息', name='oa'),
    file?: {
      mediaId?: string(description='媒体文件id。引用的媒体文件最大10MB', maxLength=512, name='media_id'),
    }(description='文件消息', name='file'),
    link?: {
      picUrl?: string(description='图片地址', maxLength=700, name='pic_url'),
      messageUrl?: string(description='消息点击链接地址，当发送消息为小程序时支持小程序跳转链接', maxLength=700, name='message_url'),
      text?: string(description='消息描述，建议500字符以内', maxLength=500, name='text'),
      title?: string(description='消息标题，建议100字符以内', maxLength=100, name='title'),
    }(description='链接消息', name='link'),
    markdown?: {
      text?: string(description='markdown格式的消息，建议5000字符以内', maxLength=5000, name='text'),
      title?: string(description='首屏会话透出的展示内容', maxLength=500, name='title'),
    }(description='markdown消息', name='markdown'),
    actionCard?: {
      btnOrientation?: string(description='使用独立跳转ActionCard样式时的按钮排列方式，竖直排列(0)，横向排列(1)；必须与button_list同时设置', maxLength=5, name='btn_orientation'),
      singleTitle?: string(description='使用整体跳转ActionCard样式时的标题，必须与single_url同时设置，最长20个字符', maxLength=20, name='single_title'),
      markdown?: string(description='消息内容，支持markdown，语法参考标准markdown语法。建议1000个字符以内', maxLength=1000, name='markdown'),
      buttonList?: [
        {
          title?: string(description='使用独立跳转ActionCard样式时的按钮的标题，最长20个字符', maxLength=20, name='title'),
          actionUrl?: string(description='消息点击链接地址，当发送消息为小程序时支持小程序跳转链接，最长500个字符', maxLength=700, name='action_url'),
        }
      ](description='使用独立跳转ActionCard样式时的按钮列表；必须与btn_orientation同时设置', maxItems=20, name='button_list'),
      singleUrl?: string(description='消息点击链接地址，当发送消息为小程序时支持小程序跳转链接，最长500个字符', maxLength=700, name='single_url'),
      title?: string(description='透出到会话列表和通知的文案，最长64个字符', maxLength=64, name='title'),
    }(description='action_card卡片消息', name='action_card'),
  }(description='消息体', name='msg_body'),
}

model SendOapiMessageMassRequest = {
  headers?: map[string]string,
  params:SendOapiMessageMassParams,
}

model SendOapiMessageMassResponseBody = {
  errmsg?: string(description='错误信息', name='errmsg'),
  errcode?: int64(description='错误码', name='errcode'),
  taskId?: string(description='推送任务id', name='task_id'),
}

model SendOapiMessageMassResponse = {
  headers: map[string]string,
  body: SendOapiMessageMassResponseBody,
}

/**
 * Description: 互动服务窗消息群发接口
 */
async function sendOapiMessageMass(request: SendOapiMessageMassRequest): SendOapiMessageMassResponse {
  var runtime = new Util.RuntimeOptions{};
  return sendOapiMessageMassEx(request, runtime);
}

/**
 * Description: 互动服务窗消息群发接口
 */
async function sendOapiMessageMassEx(request: SendOapiMessageMassRequest, runtime: Util.RuntimeOptions): SendOapiMessageMassResponse {
  Util.validateModel(request);
  var appParams = Util.stringifyMapValue(Util.toMap(request.params));
  return doRequestOApi('POST', '/topapi/message/mass/send', request.headers, appParams, runtime);
}

model ListOapiRhinoMosSpaceWorkerCheckInParams = {
  request: {
    prodWorkstationCode: string(description='站位code', name='prod_workstation_code'),
    tenantId: string(description='租户ID', name='tenant_id'),
    userid?: string(description='userid', name='userid'),
  }(description='request', name='request'),
}

model ListOapiRhinoMosSpaceWorkerCheckInRequest = {
  headers?: map[string]string,
  params:ListOapiRhinoMosSpaceWorkerCheckInParams,
}

model ListOapiRhinoMosSpaceWorkerCheckInResponseBody = {
  errmsg?: string(description='错误信息', name='errmsg'),
  model?: [
    {
      checkInTime?: string(description='登入时间', pattern='\\\\d{4}[-]\\\\d{1,2}[-]\\\\d{1,2}[T]\\\\d{2}:\\\\d{2}:\\\\d{2}[Z]', name='check_in_time'),
      checkOutTime?: string(description='登出时间', pattern='\\\\d{4}[-]\\\\d{1,2}[-]\\\\d{1,2}[T]\\\\d{2}:\\\\d{2}:\\\\d{2}[Z]', name='check_out_time'),
      checkStatus?: string(description='登入登出状态', name='check_status'),
      prodWorkstationCode?: string(description='站位code', name='prod_workstation_code'),
      tenantId?: string(description='租户ID', name='tenant_id'),
      workNo?: string(description='工号', name='work_no'),
    }
  ](description='结果', name='model'),
  errcode?: int64(description='错误码', name='errcode'),
}

model ListOapiRhinoMosSpaceWorkerCheckInResponse = {
  headers: map[string]string,
  body: ListOapiRhinoMosSpaceWorkerCheckInResponseBody,
}

/**
 * Description: 智能制造系统空间资源列出站位上登记的员工列表
 */
async function listOapiRhinoMosSpaceWorkerCheckIn(request: ListOapiRhinoMosSpaceWorkerCheckInRequest): ListOapiRhinoMosSpaceWorkerCheckInResponse {
  var runtime = new Util.RuntimeOptions{};
  return listOapiRhinoMosSpaceWorkerCheckInEx(request, runtime);
}

/**
 * Description: 智能制造系统空间资源列出站位上登记的员工列表
 */
async function listOapiRhinoMosSpaceWorkerCheckInEx(request: ListOapiRhinoMosSpaceWorkerCheckInRequest, runtime: Util.RuntimeOptions): ListOapiRhinoMosSpaceWorkerCheckInResponse {
  Util.validateModel(request);
  var appParams = Util.stringifyMapValue(Util.toMap(request.params));
  return doRequestOApi('POST', '/topapi/rhino/mos/space/worker/check/in/list', request.headers, appParams, runtime);
}

model UpdateOapiServiceaccountMenuParams = {
  unionid: string(description='服务号的unionid', name='unionid'),
  menu?: {
    button?: [
      {
        name: string(description='名称', name='name'),
        type?: string(description='类型', name='type'),
        key?: string(description='菜单绑定的key值', name='key'),
        url?: string(description='菜单绑定的URL', name='url'),
        mediaId?: string(description='素材id', name='media_id'),
        subButton?: [
          {
            name?: string(description='名称', name='name'),
            type?: string(description='类型', name='type'),
            key?: string(description='菜单绑定的key值', name='key'),
            url?: string(description='菜单绑定的URL', name='url'),
            mediaId?: string(description='素材id', name='media_id'),
          }
        ](description='子菜单按钮列表', maxItems=5, name='sub_button'),
      }
    ](description='菜单按钮列表', maxItems=3, name='button'),
    enableInput?: boolean(description='是否允许用户输入', name='enable_input'),
    status?: int64(description='状态，0-正常，1-停用', name='status'),
  }(description='菜单', name='menu'),
}

model UpdateOapiServiceaccountMenuRequest = {
  headers?: map[string]string,
  params:UpdateOapiServiceaccountMenuParams,
}

model UpdateOapiServiceaccountMenuResponseBody = {
  errmsg?: string(description='错误信息', name='errmsg'),
  errcode?: int64(description='错误码', name='errcode'),
}

model UpdateOapiServiceaccountMenuResponse = {
  headers: map[string]string,
  body: UpdateOapiServiceaccountMenuResponseBody,
}

/**
 * Description: 更新服务号会话菜单
 */
async function updateOapiServiceaccountMenu(request: UpdateOapiServiceaccountMenuRequest): UpdateOapiServiceaccountMenuResponse {
  var runtime = new Util.RuntimeOptions{};
  return updateOapiServiceaccountMenuEx(request, runtime);
}

/**
 * Description: 更新服务号会话菜单
 */
async function updateOapiServiceaccountMenuEx(request: UpdateOapiServiceaccountMenuRequest, runtime: Util.RuntimeOptions): UpdateOapiServiceaccountMenuResponse {
  Util.validateModel(request);
  var appParams = Util.stringifyMapValue(Util.toMap(request.params));
  return doRequestOApi('POST', '/topapi/serviceaccount/menu/update', request.headers, appParams, runtime);
}

model InOapiRhinoMosSpaceWorkerCheckParams = {
  request: {
    prodWorkstationCode: string(description='站位code', name='prod_workstation_code'),
    tenantId: string(description='租户ID', name='tenant_id'),
    userid?: string(description='userid', name='userid'),
    workNo: string(description='工号', name='work_no'),
  }(description='request', name='request'),
}

model InOapiRhinoMosSpaceWorkerCheckRequest = {
  headers?: map[string]string,
  params:InOapiRhinoMosSpaceWorkerCheckParams,
}

model InOapiRhinoMosSpaceWorkerCheckResponseBody = {
  errmsg?: string(description='错误信息', name='errmsg'),
  model?: boolean(description='结果', name='model'),
  errcode?: int64(description='错误码', name='errcode'),
}

model InOapiRhinoMosSpaceWorkerCheckResponse = {
  headers: map[string]string,
  body: InOapiRhinoMosSpaceWorkerCheckResponseBody,
}

/**
 * Description: 智能制造系统空间资源工人登陆站位
 */
async function inOapiRhinoMosSpaceWorkerCheck(request: InOapiRhinoMosSpaceWorkerCheckRequest): InOapiRhinoMosSpaceWorkerCheckResponse {
  var runtime = new Util.RuntimeOptions{};
  return inOapiRhinoMosSpaceWorkerCheckEx(request, runtime);
}

/**
 * Description: 智能制造系统空间资源工人登陆站位
 */
async function inOapiRhinoMosSpaceWorkerCheckEx(request: InOapiRhinoMosSpaceWorkerCheckRequest, runtime: Util.RuntimeOptions): InOapiRhinoMosSpaceWorkerCheckResponse {
  Util.validateModel(request);
  var appParams = Util.stringifyMapValue(Util.toMap(request.params));
  return doRequestOApi('POST', '/topapi/rhino/mos/space/worker/check/in', request.headers, appParams, runtime);
}

model UpdateOapiServiceaccountParams = {
  name?: string(description='服务号名称', maxLength=30, name='name'),
  avatarMediaId?: string(description='头像图片mediaId', name='avatar_media_id'),
  brief?: string(description='机器人管理列表中的简介，最多60个字符', maxLength=60, name='brief'),
  desc?: string(description='机器人主页中的服务号功能简介，最多200个字符', maxLength=200, name='desc'),
  previewMediaId?: string(description='机器人主页中，消息预览图片的mediaId', name='preview_media_id'),
  unionid: string(description='服务号的unionid', name='unionid'),
  status?: string(description='normal-正常，disabled-删除', name='status'),
}

model UpdateOapiServiceaccountRequest = {
  headers?: map[string]string,
  params:UpdateOapiServiceaccountParams,
}

model UpdateOapiServiceaccountResponseBody = {
  errmsg?: string(description='错误信息', name='errmsg'),
  errcode?: int64(description='错误码', name='errcode'),
}

model UpdateOapiServiceaccountResponse = {
  headers: map[string]string,
  body: UpdateOapiServiceaccountResponseBody,
}

/**
 * Description: 更新服务号
 */
async function updateOapiServiceaccount(request: UpdateOapiServiceaccountRequest): UpdateOapiServiceaccountResponse {
  var runtime = new Util.RuntimeOptions{};
  return updateOapiServiceaccountEx(request, runtime);
}

/**
 * Description: 更新服务号
 */
async function updateOapiServiceaccountEx(request: UpdateOapiServiceaccountRequest, runtime: Util.RuntimeOptions): UpdateOapiServiceaccountResponse {
  Util.validateModel(request);
  var appParams = Util.stringifyMapValue(Util.toMap(request.params));
  return doRequestOApi('POST', '/topapi/serviceaccount/update', request.headers, appParams, runtime);
}

model ListOapiRhinoMosSpaceWorkstationParams = {
  request: {
    prodWorkstationCodeList?: [ string ](description='站位code列表', maxItems=20, name='prod_workstation_code_list'),
    tenantId: string(description='租户ID', name='tenant_id'),
    userid?: string(description='userid', name='userid'),
  }(description='request', name='request'),
}

model ListOapiRhinoMosSpaceWorkstationRequest = {
  headers?: map[string]string,
  params:ListOapiRhinoMosSpaceWorkstationParams,
}

model ListOapiRhinoMosSpaceWorkstationResponseBody = {
  errmsg?: string(description='错误信息', name='errmsg'),
  model?: [
    {
      categoryCode?: string(description='类目code', name='category_code'),
      categorySubCode?: string(description='类目子code', name='category_sub_code'),
      poiCode?: string(description='兴趣点code', name='poi_code'),
      prodWorkstationCode?: string(description='站位code', name='prod_workstation_code'),
      prodWorkstationName?: string(description='站位name', name='prod_workstation_name'),
      tenantId?: string(description='租户ID', name='tenant_id'),
    }
  ](description='结果', name='model'),
  errcode?: int64(description='错误码', name='errcode'),
}

model ListOapiRhinoMosSpaceWorkstationResponse = {
  headers: map[string]string,
  body: ListOapiRhinoMosSpaceWorkstationResponseBody,
}

/**
 * Description: rhino智能制造系统空间资源站位列表查询
 */
async function listOapiRhinoMosSpaceWorkstation(request: ListOapiRhinoMosSpaceWorkstationRequest): ListOapiRhinoMosSpaceWorkstationResponse {
  var runtime = new Util.RuntimeOptions{};
  return listOapiRhinoMosSpaceWorkstationEx(request, runtime);
}

/**
 * Description: rhino智能制造系统空间资源站位列表查询
 */
async function listOapiRhinoMosSpaceWorkstationEx(request: ListOapiRhinoMosSpaceWorkstationRequest, runtime: Util.RuntimeOptions): ListOapiRhinoMosSpaceWorkstationResponse {
  Util.validateModel(request);
  var appParams = Util.stringifyMapValue(Util.toMap(request.params));
  return doRequestOApi('POST', '/topapi/rhino/mos/space/workstation/list', request.headers, appParams, runtime);
}

model GetOapiServiceaccountParams = {
  unionid: string(description='服务号的unionid', name='unionid'),
}

model GetOapiServiceaccountRequest = {
  headers?: map[string]string,
  params:GetOapiServiceaccountParams,
}

model GetOapiServiceaccountResponseBody = {
  errmsg?: string(description='错误信息', name='errmsg'),
  errcode?: int64(description='错误码', name='errcode'),
  serviceAccount?: {
    status?: string(description='状态，normal-正常，disabled-删除', name='status'),
    unionid?: string(description='服务号的unionid', name='unionid'),
    name?: string(description='服务号名称', name='name'),
    brief?: string(description='机器人管理列表中的简介，最多60个字符', name='brief'),
    desc?: string(description='机器人主页中的服务号功能简介，最多200个字符', name='desc'),
    avatarMediaId?: string(description='头像图片mediaId', name='avatar_media_id'),
    previewMediaId?: string(description='机器人主页中，消息预览图片的mediaId', name='preview_media_id'),
  }(description='服务号详情', name='service_account'),
}

model GetOapiServiceaccountResponse = {
  headers: map[string]string,
  body: GetOapiServiceaccountResponseBody,
}

/**
 * Description: 查询服务号详情
 */
async function getOapiServiceaccount(request: GetOapiServiceaccountRequest): GetOapiServiceaccountResponse {
  var runtime = new Util.RuntimeOptions{};
  return getOapiServiceaccountEx(request, runtime);
}

/**
 * Description: 查询服务号详情
 */
async function getOapiServiceaccountEx(request: GetOapiServiceaccountRequest, runtime: Util.RuntimeOptions): GetOapiServiceaccountResponse {
  Util.validateModel(request);
  var appParams = Util.stringifyMapValue(Util.toMap(request.params));
  return doRequestOApi('POST', '/topapi/serviceaccount/get', request.headers, appParams, runtime);
}

model UnscrapOapiRhinoMosExecClothesBatchParams = {
  batchClothesPerformReq?: {
    tenantId: string(description='租户id', name='tenant_id'),
    userid?: string(description='用户id', name='userid'),
    entityIds?: [ int64 ](description='实体列表', maxItems=500, name='entity_ids'),
    extProperties?: string(description='扩展属性', name='ext_properties'),
    orderId?: int64(description='订单ID', name='order_id'),
  }(description='入参', name='batch_clothes_perform_req'),
}

model UnscrapOapiRhinoMosExecClothesBatchRequest = {
  headers?: map[string]string,
  params?:UnscrapOapiRhinoMosExecClothesBatchParams,
}

model UnscrapOapiRhinoMosExecClothesBatchResponseBody = {
  success?: boolean(description='是否成功', name='success'),
  errcode?: int64(description='错误码', name='errcode'),
  model?: boolean(description='结果', name='model'),
  errmsg?: string(description='错误信息', name='errmsg'),
}

model UnscrapOapiRhinoMosExecClothesBatchResponse = {
  headers: map[string]string,
  body: UnscrapOapiRhinoMosExecClothesBatchResponseBody,
}

/**
 * Description: 批量取消报废
 */
async function unscrapOapiRhinoMosExecClothesBatch(request: UnscrapOapiRhinoMosExecClothesBatchRequest): UnscrapOapiRhinoMosExecClothesBatchResponse {
  var runtime = new Util.RuntimeOptions{};
  return unscrapOapiRhinoMosExecClothesBatchEx(request, runtime);
}

/**
 * Description: 批量取消报废
 */
async function unscrapOapiRhinoMosExecClothesBatchEx(request: UnscrapOapiRhinoMosExecClothesBatchRequest, runtime: Util.RuntimeOptions): UnscrapOapiRhinoMosExecClothesBatchResponse {
  Util.validateModel(request);
  var appParams = Util.stringifyMapValue(Util.toMap(request.params));
  return doRequestOApi('POST', '/topapi/rhino/mos/exec/clothes/batch/unscrap', request.headers, appParams, runtime);
}

model GetflowOapiRhinoMosLayoutOperationdefParams = {
  flowVersion?: int64(description='版本：如果为空，查生效版本；不为空，查指定版本', name='flow_version'),
  needAssignInfo: boolean(description='是否需要分配信息', name='need_assign_info'),
  orderId: int64(description='订单ID', name='order_id'),
  tenantId: string(description='租户ID', name='tenant_id'),
  tmpSave?: boolean(description='查询暂存版本', name='tmp_save'),
  userid?: string(description='用户ID', name='userid'),
}

model GetflowOapiRhinoMosLayoutOperationdefRequest = {
  headers?: map[string]string,
  params:GetflowOapiRhinoMosLayoutOperationdefParams,
}

model GetflowOapiRhinoMosLayoutOperationdefResponseBody = {
  errmsg?: string(description='错误提示', name='errmsg'),
  result?: {
    active?: boolean(description='是否激活/最大版本', name='active'),
    flowVersion?: int64(description='工序定义版本', name='flow_version'),
    operationDefs?: [
      {
        applicableSizeCode?: string(description='适用尺码', name='applicable_size_code'),
        autoSchedule?: boolean(description='是否需要调度', name='auto_schedule'),
        enterCondition?: string(description='进入条件：ANY_MATCH/ALL_MATCH', name='enter_condition'),
        flowId?: int64(description='PaaSflowID（只用于返回，保存会自增）', name='flow_id'),
        flowVersion?: int64(description='工序版本', name='flow_version'),
        name?: string(description='工序名称', name='name'),
        nextOperationExternalIds?: [ string ](description='后续工序外部ID列表', name='next_operation_external_ids'),
        nextOperationUids?: [ int64 ](description='后续工序唯一ID列表', name='next_operation_uids'),
        operationExecutorAssigns?: [
          {
            executorId?: string(description='工序执行器ID', name='executor_id'),
            orderNum?: int64(description='排序值', name='order_num'),
          }
        ](description='工序执行器分配', name='operation_executor_assigns'),
        operationExternalId?: string(description='工序外部ID', name='operation_external_id'),
        operationType?: string(description='工序类型：ASSIST/QUALITY_INSPECT/TECHNOLOGY', name='operation_type'),
        operationUid?: int64(description='工序唯一ID', name='operation_uid'),
        processTypeCode?: string(description='工序能力类型：SJ/PP/TR等', name='process_type_code'),
        sectionCode?: string(description='工段CODE：F-SL/C..', name='section_code'),
        sectionName?: string(description='工段名称：缝制-碎料/裁床..', name='section_name'),
        skip?: boolean(description='是否跳过(不生产)', name='skip'),
        stdCost?: string(description='标准工时/秒', name='std_cost'),
        workUnits?: [
          {
            deviceAssigns?: [
              {
                deviceModelId?: string(description='设备模型ID', name='device_model_id'),
                deviceModelName?: string(description='设备模型名称', name='device_model_name'),
                deviceModelVersion?: string(description='设备模型版本', name='device_model_version'),
                deviceId?: int64(description='设备ID', name='device_id'),
              }
            ](description='设备分配列表', name='device_assigns'),
            workerAssigns?: [
              {
                name?: string(description='姓名', name='name'),
                workNo?: string(description='工号', name='work_no'),
              }
            ](description='人员分配列表', name='worker_assigns'),
            workstationAssigns?: [
              {
                workstationCode?: string(description='站位编码', name='workstation_code'),
              }
            ](description='站位分配', name='workstation_assigns'),
          }
        ](description='分配单元列表', name='work_units'),
        bizCode?: string(description='业务编码', name='biz_code'),
        bizSource?: string(description='业务来源', name='biz_source'),
        execSystem?: string(description='执行系统', name='exec_system'),
      }
    ](description='工序定义列表', name='operation_defs'),
    orderId?: int64(description='订单ID', name='order_id'),
    tenantId?: string(description='租户ID', name='tenant_id'),
    source?: string(description='来源系统', name='source'),
  }(description='工序定义图', name='result'),
  errcode?: int64(description='错误码', name='errcode'),
}

model GetflowOapiRhinoMosLayoutOperationdefResponse = {
  headers: map[string]string,
  body: GetflowOapiRhinoMosLayoutOperationdefResponseBody,
}

/**
 * Description: 获取工序定义图
 */
async function getflowOapiRhinoMosLayoutOperationdef(request: GetflowOapiRhinoMosLayoutOperationdefRequest): GetflowOapiRhinoMosLayoutOperationdefResponse {
  var runtime = new Util.RuntimeOptions{};
  return getflowOapiRhinoMosLayoutOperationdefEx(request, runtime);
}

/**
 * Description: 获取工序定义图
 */
async function getflowOapiRhinoMosLayoutOperationdefEx(request: GetflowOapiRhinoMosLayoutOperationdefRequest, runtime: Util.RuntimeOptions): GetflowOapiRhinoMosLayoutOperationdefResponse {
  Util.validateModel(request);
  var appParams = Util.stringifyMapValue(Util.toMap(request.params));
  return doRequestOApi('POST', '/topapi/rhino/mos/layout/operationdef/getflow', request.headers, appParams, runtime);
}

model EditassignOapiRhinoMosLayoutOperationdefsParams = {
  assignInfoModifyItems: [
    {
      operationExecutorAssigns?: [
        {
          executorId?: string(description='工序执行器ID', name='executor_id'),
          orderNum?: int64(description='排序值', name='order_num'),
        }
      ](description='工序执行器分配列表', maxItems=500, name='operation_executor_assigns'),
      operationExternalId?: string(description='工序外部ID', name='operation_external_id'),
      operationUid?: int64(description='工序唯一ID', name='operation_uid'),
      workUnits?: [
        {
          deviceAssigns?: [
            {
              deviceModelId?: string(description='设备模型ID', name='device_model_id'),
              deviceModelName?: string(description='设备模型名称', name='device_model_name'),
              deviceModelVersion?: string(description='设备模型版本', name='device_model_version'),
              deviceId?: int64(description='设备ID', name='device_id'),
            }
          ](description='设备分配列表', maxItems=500, name='device_assigns'),
          workerAssigns?: [
            {
              name?: string(description='姓名', name='name'),
              workNo?: string(description='工号', name='work_no'),
            }
          ](description='人员分配列表', maxItems=500, name='worker_assigns'),
          workstationAssigns?: [
            {
              workstationCode?: string(description='站位编码', name='workstation_code'),
            }
          ](description='站位分配', maxItems=500, name='workstation_assigns'),
        }
      ](description='分配单元列表', maxItems=500, name='work_units'),
    }
  ](description='分配信息修改明细列表', maxItems=500, name='assign_info_modify_items'),
  orderId: int64(description='订单ID', name='order_id'),
  tenantId: string(description='租户ID', name='tenant_id'),
  userid?: string(description='用户ID', name='userid'),
}

model EditassignOapiRhinoMosLayoutOperationdefsRequest = {
  headers?: map[string]string,
  params:EditassignOapiRhinoMosLayoutOperationdefsParams,
}

model EditassignOapiRhinoMosLayoutOperationdefsResponseBody = {
  errmsg?: string(description='错误提示', name='errmsg'),
  result?: boolean(description='操作结果', name='result'),
  errcode?: int64(description='错误码', name='errcode'),
}

model EditassignOapiRhinoMosLayoutOperationdefsResponse = {
  headers: map[string]string,
  body: EditassignOapiRhinoMosLayoutOperationdefsResponseBody,
}

/**
 * Description: 批量修改工序定义分配信息
 */
async function editassignOapiRhinoMosLayoutOperationdefs(request: EditassignOapiRhinoMosLayoutOperationdefsRequest): EditassignOapiRhinoMosLayoutOperationdefsResponse {
  var runtime = new Util.RuntimeOptions{};
  return editassignOapiRhinoMosLayoutOperationdefsEx(request, runtime);
}

/**
 * Description: 批量修改工序定义分配信息
 */
async function editassignOapiRhinoMosLayoutOperationdefsEx(request: EditassignOapiRhinoMosLayoutOperationdefsRequest, runtime: Util.RuntimeOptions): EditassignOapiRhinoMosLayoutOperationdefsResponse {
  Util.validateModel(request);
  var appParams = Util.stringifyMapValue(Util.toMap(request.params));
  return doRequestOApi('POST', '/topapi/rhino/mos/layout/operationdefs/editassign', request.headers, appParams, runtime);
}

model NextOapiRhinoMosLayoutOperationdefsParams = {
  flowVersion?: int64(description='版本：如果为空，查生效版本；不为空，查指定版本', name='flow_version'),
  needAssignInfo: boolean(description='是否需要分配信息', name='need_assign_info'),
  operationExternalId?: string(description='外部工序ID，和工序唯一ID不能同时为空', name='operation_external_id'),
  operationUid?: int64(description='工序唯一ID', name='operation_uid'),
  orderId: int64(description='订单ID', name='order_id'),
  tenantId: string(description='租户ID', name='tenant_id'),
  tmpSave?: boolean(description='查询暂存版本', name='tmp_save'),
  userid?: string(description='用户ID', name='userid'),
}

model NextOapiRhinoMosLayoutOperationdefsRequest = {
  headers?: map[string]string,
  params:NextOapiRhinoMosLayoutOperationdefsParams,
}

model NextOapiRhinoMosLayoutOperationdefsResponseBody = {
  errmsg?: string(description='错误提示', name='errmsg'),
  result?: [
    {
      applicableSizeCode?: string(description='适用尺码', name='applicable_size_code'),
      autoSchedule?: boolean(description='是否需要调度', name='auto_schedule'),
      enterCondition?: string(description='进入条件：ANY_MATCH/ALL_MATCH', name='enter_condition'),
      flowId?: int64(description='PaaSflowID（只用于返回，保存会自增）', name='flow_id'),
      flowVersion?: int64(description='工序定义版本', name='flow_version'),
      name?: string(description='工序名称', name='name'),
      nextOperationExternalIds?: [ string ](description='后续工序外部ID列表', name='next_operation_external_ids'),
      nextOperationUids?: [ int64 ](description='后续工序唯一ID列表', name='next_operation_uids'),
      operationExecutorAssigns?: [
        {
          executorId?: string(description='工序执行器ID', name='executor_id'),
          orderNum?: int64(description='排序值', name='order_num'),
        }
      ](description='工序执行器分配', name='operation_executor_assigns'),
      operationExternalId?: string(description='工序外部ID', name='operation_external_id'),
      operationType?: string(description='工序类型：ASSIST/QUALITY_INSPECT/TECHNOLOGY', name='operation_type'),
      operationUid?: int64(description='工序唯一ID', name='operation_uid'),
      processTypeCode?: string(description='工序能力类型：SJ/PP/TR等', name='process_type_code'),
      sectionCode?: string(description='工段CODE：F-SL/C..', name='section_code'),
      sectionName?: string(description='工段名称：缝制-碎料/裁床..', name='section_name'),
      skip?: boolean(description='是否跳过(不生产)', name='skip'),
      stdCost?: string(description='标准工时/秒', name='std_cost'),
      workUnits?: [
        {
          deviceAssigns?: [
            {
              deviceModelId?: string(description='设备模型ID', name='device_model_id'),
              deviceModelName?: string(description='设备模型名称', name='device_model_name'),
              deviceModelVersion?: string(description='设备模型版本', name='device_model_version'),
              deviceId?: int64(description='设备ID', name='device_id'),
            }
          ](description='设备分配列表', name='device_assigns'),
          workerAssigns?: [
            {
              name?: string(description='姓名', name='name'),
              workNo?: string(description='工号', name='work_no'),
            }
          ](description='人员分配列表', name='worker_assigns'),
          workstationAssigns?: [
            {
              workstationCode?: string(description='站位编码', name='workstation_code'),
            }
          ](description='站位分配', name='workstation_assigns'),
        }
      ](description='分配单元列表', name='work_units'),
      bizCode?: string(description='业务编码', name='biz_code'),
      bizSource?: string(description='业务来源', name='biz_source'),
      execSystem?: string(description='执行系统', name='exec_system'),
    }
  ](description='工序定义图', name='result'),
  errcode?: int64(description='错误码', name='errcode'),
}

model NextOapiRhinoMosLayoutOperationdefsResponse = {
  headers: map[string]string,
  body: NextOapiRhinoMosLayoutOperationdefsResponseBody,
}

/**
 * Description: 查询后续工序定义
 */
async function nextOapiRhinoMosLayoutOperationdefs(request: NextOapiRhinoMosLayoutOperationdefsRequest): NextOapiRhinoMosLayoutOperationdefsResponse {
  var runtime = new Util.RuntimeOptions{};
  return nextOapiRhinoMosLayoutOperationdefsEx(request, runtime);
}

/**
 * Description: 查询后续工序定义
 */
async function nextOapiRhinoMosLayoutOperationdefsEx(request: NextOapiRhinoMosLayoutOperationdefsRequest, runtime: Util.RuntimeOptions): NextOapiRhinoMosLayoutOperationdefsResponse {
  Util.validateModel(request);
  var appParams = Util.stringifyMapValue(Util.toMap(request.params));
  return doRequestOApi('POST', '/topapi/rhino/mos/layout/operationdefs/next', request.headers, appParams, runtime);
}

model OutOapiRhinoMosSpaceWorkerCheckParams = {
  request: {
    prodWorkstationCode: string(description='站位code', name='prod_workstation_code'),
    tenantId: string(description='租户ID', name='tenant_id'),
    userid?: string(description='userid', name='userid'),
    workNo: string(description='工号', name='work_no'),
  }(description='request', name='request'),
}

model OutOapiRhinoMosSpaceWorkerCheckRequest = {
  headers?: map[string]string,
  params:OutOapiRhinoMosSpaceWorkerCheckParams,
}

model OutOapiRhinoMosSpaceWorkerCheckResponseBody = {
  errmsg?: string(description='错误信息', name='errmsg'),
  model?: boolean(description='结果', name='model'),
  errcode?: int64(description='错误码', name='errcode'),
}

model OutOapiRhinoMosSpaceWorkerCheckResponse = {
  headers: map[string]string,
  body: OutOapiRhinoMosSpaceWorkerCheckResponseBody,
}

/**
 * Description: rhino空间资源设备登出站位
 */
async function outOapiRhinoMosSpaceWorkerCheck(request: OutOapiRhinoMosSpaceWorkerCheckRequest): OutOapiRhinoMosSpaceWorkerCheckResponse {
  var runtime = new Util.RuntimeOptions{};
  return outOapiRhinoMosSpaceWorkerCheckEx(request, runtime);
}

/**
 * Description: rhino空间资源设备登出站位
 */
async function outOapiRhinoMosSpaceWorkerCheckEx(request: OutOapiRhinoMosSpaceWorkerCheckRequest, runtime: Util.RuntimeOptions): OutOapiRhinoMosSpaceWorkerCheckResponse {
  Util.validateModel(request);
  var appParams = Util.stringifyMapValue(Util.toMap(request.params));
  return doRequestOApi('POST', '/topapi/rhino/mos/space/worker/check/out', request.headers, appParams, runtime);
}

model GetOapiRhinoMosSpacePoiParams = {
  request: {
    categoryCode?: string(description='类目code', name='category_code'),
    categorySubCode?: string(description='类目子code', name='category_sub_code'),
    poiCode: string(description='兴趣点code', name='poi_code'),
    tenantId: string(description='租户ID', name='tenant_id'),
    userid?: string(description='userid', name='userid'),
  }(description='request', name='request'),
}

model GetOapiRhinoMosSpacePoiRequest = {
  headers?: map[string]string,
  params:GetOapiRhinoMosSpacePoiParams,
}

model GetOapiRhinoMosSpacePoiResponseBody = {
  errmsg?: string(description='错误信息', name='errmsg'),
  model?: {
    categoryCode?: string(description='类目code', name='category_code'),
    categorySubCode?: string(description='类目子code', name='category_sub_code'),
    poiCode?: string(description='兴趣点code', name='poi_code'),
    poiName?: string(description='兴趣点name', name='poi_name'),
    tenantId?: string(description='租户ID', name='tenant_id'),
  }(description='结果', name='model'),
  errcode?: int64(description='错误码', name='errcode'),
}

model GetOapiRhinoMosSpacePoiResponse = {
  headers: map[string]string,
  body: GetOapiRhinoMosSpacePoiResponseBody,
}

/**
 * Description: rhino空间资源获取兴趣点
 */
async function getOapiRhinoMosSpacePoi(request: GetOapiRhinoMosSpacePoiRequest): GetOapiRhinoMosSpacePoiResponse {
  var runtime = new Util.RuntimeOptions{};
  return getOapiRhinoMosSpacePoiEx(request, runtime);
}

/**
 * Description: rhino空间资源获取兴趣点
 */
async function getOapiRhinoMosSpacePoiEx(request: GetOapiRhinoMosSpacePoiRequest, runtime: Util.RuntimeOptions): GetOapiRhinoMosSpacePoiResponse {
  Util.validateModel(request);
  var appParams = Util.stringifyMapValue(Util.toMap(request.params));
  return doRequestOApi('POST', '/topapi/rhino/mos/space/poi/get', request.headers, appParams, runtime);
}

model ActiveflowOapiRhinoMosLayoutOperationdefParams = {
  orderId: int64(description='订单ID', name='order_id'),
  tenantId: string(description='租户ID', name='tenant_id'),
  flowVersion: int64(description='版本', name='flow_version'),
  userid?: string(description='用户ID', name='userid'),
}

model ActiveflowOapiRhinoMosLayoutOperationdefRequest = {
  headers?: map[string]string,
  params:ActiveflowOapiRhinoMosLayoutOperationdefParams,
}

model ActiveflowOapiRhinoMosLayoutOperationdefResponseBody = {
  errmsg?: string(description='错误提示', name='errmsg'),
  result?: boolean(description='操作结果', name='result'),
  errcode?: int64(description='错误编码', name='errcode'),
}

model ActiveflowOapiRhinoMosLayoutOperationdefResponse = {
  headers: map[string]string,
  body: ActiveflowOapiRhinoMosLayoutOperationdefResponseBody,
}

/**
 * Description: 激活工序定义图
 */
async function activeflowOapiRhinoMosLayoutOperationdef(request: ActiveflowOapiRhinoMosLayoutOperationdefRequest): ActiveflowOapiRhinoMosLayoutOperationdefResponse {
  var runtime = new Util.RuntimeOptions{};
  return activeflowOapiRhinoMosLayoutOperationdefEx(request, runtime);
}

/**
 * Description: 激活工序定义图
 */
async function activeflowOapiRhinoMosLayoutOperationdefEx(request: ActiveflowOapiRhinoMosLayoutOperationdefRequest, runtime: Util.RuntimeOptions): ActiveflowOapiRhinoMosLayoutOperationdefResponse {
  Util.validateModel(request);
  var appParams = Util.stringifyMapValue(Util.toMap(request.params));
  return doRequestOApi('POST', '/topapi/rhino/mos/layout/operationdef/activeflow', request.headers, appParams, runtime);
}

model GetOapiSmartdeviceFocusdetailParams = {
  cursor?: int64(description='起始游标，从0开始', name='cursor'),
  size?: int64(description='每页大小，1-100', name='size'),
}

model GetOapiSmartdeviceFocusdetailRequest = {
  headers?: map[string]string,
  params?:GetOapiSmartdeviceFocusdetailParams,
}

model GetOapiSmartdeviceFocusdetailResponseBody = {
  result?: {
    nextCursor?: int64(description='下一个游标', name='next_cursor'),
    nextCursorString?: string(description='下一游标', name='next_cursor_string'),
    hasMore?: boolean(description='是否有更多记录', name='has_more'),
    list?: [
      {
        userName?: string(description='用户名', name='user_name'),
        deptFullName?: string(description='部门全称', name='dept_full_name'),
        nickName?: string(description='投屏设备呢称', name='nick_name'),
        room?: string(description='会议室', name='room'),
        createDate?: string(description='投屏时间，单位毫秒', pattern='\\\\d{4}[-]\\\\d{1,2}[-]\\\\d{1,2}[T]\\\\d{2}:\\\\d{2}:\\\\d{2}[Z]', name='create_date'),
      }
    ](description='投屏数据列表', name='list'),
  }(description='页数据结果', name='result'),
  errcode?: int64(description='错误码', name='errcode'),
  errmsg?: string(description='错误信息', name='errmsg'),
  success?: boolean(description='请求是否成功', name='success'),
}

model GetOapiSmartdeviceFocusdetailResponse = {
  headers: map[string]string,
  body: GetOapiSmartdeviceFocusdetailResponseBody,
}

/**
 * Description: 企业获取自己企业的投屏数据详情
 */
async function getOapiSmartdeviceFocusdetail(request: GetOapiSmartdeviceFocusdetailRequest): GetOapiSmartdeviceFocusdetailResponse {
  var runtime = new Util.RuntimeOptions{};
  return getOapiSmartdeviceFocusdetailEx(request, runtime);
}

/**
 * Description: 企业获取自己企业的投屏数据详情
 */
async function getOapiSmartdeviceFocusdetailEx(request: GetOapiSmartdeviceFocusdetailRequest, runtime: Util.RuntimeOptions): GetOapiSmartdeviceFocusdetailResponse {
  Util.validateModel(request);
  var appParams = Util.stringifyMapValue(Util.toMap(request.params));
  return doRequestOApi('POST', '/topapi/smartdevice/focusdetail/get', request.headers, appParams, runtime);
}

model CountOapiRhinoMosExecClothesGroupbyoperationParams = {
  request: {
    activeCondition?: string(description='工序生效条件(ACTIVE/INACTIVE)', name='active_condition'),
    clothesStatusList?: [ string ](description='衣服生产状态列表', maxItems=20, name='clothes_status_list'),
    orderId: int64(description='订单ID', name='order_id'),
    performStatusList?: [ string ](description='工序执行状态', maxItems=20, name='perform_status_list'),
    tenantId: string(description='租户ID', name='tenant_id'),
    userid?: string(description='userid', name='userid'),
  }(description='请求参数', name='request'),
}

model CountOapiRhinoMosExecClothesGroupbyoperationRequest = {
  headers?: map[string]string,
  params:CountOapiRhinoMosExecClothesGroupbyoperationParams,
}

model CountOapiRhinoMosExecClothesGroupbyoperationResponseBody = {
  errmsg?: string(description='错误信息', name='errmsg'),
  model?: [
    {
      count?: int64(description='完成数量', name='count'),
      id?: int64(description='工序uid', name='id'),
    }
  ](description='结果', name='model'),
  errcode?: int64(description='返回编码', name='errcode'),
}

model CountOapiRhinoMosExecClothesGroupbyoperationResponse = {
  headers: map[string]string,
  body: CountOapiRhinoMosExecClothesGroupbyoperationResponseBody,
}

/**
 * Description: 智能制造-查询某订单各个工序的数量情况
 */
async function countOapiRhinoMosExecClothesGroupbyoperation(request: CountOapiRhinoMosExecClothesGroupbyoperationRequest): CountOapiRhinoMosExecClothesGroupbyoperationResponse {
  var runtime = new Util.RuntimeOptions{};
  return countOapiRhinoMosExecClothesGroupbyoperationEx(request, runtime);
}

/**
 * Description: 智能制造-查询某订单各个工序的数量情况
 */
async function countOapiRhinoMosExecClothesGroupbyoperationEx(request: CountOapiRhinoMosExecClothesGroupbyoperationRequest, runtime: Util.RuntimeOptions): CountOapiRhinoMosExecClothesGroupbyoperationResponse {
  Util.validateModel(request);
  var appParams = Util.stringifyMapValue(Util.toMap(request.params));
  return doRequestOApi('POST', '/topapi/rhino/mos/exec/clothes/groupbyoperation/count', request.headers, appParams, runtime);
}

model GetOapiEduFaceParams = {
  classId?: int64(description='班级id', name='class_id'),
  userid?: string(description='员工id', name='userid'),
}

model GetOapiEduFaceRequest = {
  headers?: map[string]string,
  params?:GetOapiEduFaceParams,
}

model GetOapiEduFaceResponseBody = {
  errcode?: int64(description='错误码', name='errcode'),
  errmsg?: string(description='错误信息', name='errmsg'),
  success?: boolean(description='调用是否成功', name='success'),
  result?: {
    hasRecordFace?: boolean(description='是否录入过人脸', name='has_record_face'),
  }(description='result', name='result'),
}

model GetOapiEduFaceResponse = {
  headers: map[string]string,
  body: GetOapiEduFaceResponseBody,
}

/**
 * Description: 家校人脸查询
 */
async function getOapiEduFace(request: GetOapiEduFaceRequest): GetOapiEduFaceResponse {
  var runtime = new Util.RuntimeOptions{};
  return getOapiEduFaceEx(request, runtime);
}

/**
 * Description: 家校人脸查询
 */
async function getOapiEduFaceEx(request: GetOapiEduFaceRequest, runtime: Util.RuntimeOptions): GetOapiEduFaceResponse {
  Util.validateModel(request);
  var appParams = Util.stringifyMapValue(Util.toMap(request.params));
  return doRequestOApi('POST', '/topapi/edu/face/get', request.headers, appParams, runtime);
}

model UpsertOapiRhinoMosSpacePoiParams = {
  request: {
    categoryCode: string(description='类目code', name='category_code'),
    categorySubCode: string(description='类目子code', name='category_sub_code'),
    poiCode: string(description='兴趣点code', name='poi_code'),
    poiName?: string(description='兴趣点name', name='poi_name'),
    tenantId: string(description='租户ID', name='tenant_id'),
    userid?: string(description='userid', name='userid'),
  }(description='request', name='request'),
}

model UpsertOapiRhinoMosSpacePoiRequest = {
  headers?: map[string]string,
  params:UpsertOapiRhinoMosSpacePoiParams,
}

model UpsertOapiRhinoMosSpacePoiResponseBody = {
  errmsg?: string(description='错误信息', name='errmsg'),
  model?: {
    categoryCode?: string(description='类目code', name='category_code'),
    categorySubCode?: string(description='类目子code', name='category_sub_code'),
    poiCode?: string(description='兴趣点code', name='poi_code'),
    poiName?: string(description='兴趣点name', name='poi_name'),
    tenantId?: string(description='租户ID', name='tenant_id'),
  }(description='结果', name='model'),
  errcode?: int64(description='错误码', name='errcode'),
}

model UpsertOapiRhinoMosSpacePoiResponse = {
  headers: map[string]string,
  body: UpsertOapiRhinoMosSpacePoiResponseBody,
}

/**
 * Description: rhino空间资源新增或更新兴趣点
 */
async function upsertOapiRhinoMosSpacePoi(request: UpsertOapiRhinoMosSpacePoiRequest): UpsertOapiRhinoMosSpacePoiResponse {
  var runtime = new Util.RuntimeOptions{};
  return upsertOapiRhinoMosSpacePoiEx(request, runtime);
}

/**
 * Description: rhino空间资源新增或更新兴趣点
 */
async function upsertOapiRhinoMosSpacePoiEx(request: UpsertOapiRhinoMosSpacePoiRequest, runtime: Util.RuntimeOptions): UpsertOapiRhinoMosSpacePoiResponse {
  Util.validateModel(request);
  var appParams = Util.stringifyMapValue(Util.toMap(request.params));
  return doRequestOApi('POST', '/topapi/rhino/mos/space/poi/upsert', request.headers, appParams, runtime);
}

model InactiveOapiRhinoMosExecOperationConditionParams = {
  inactiveOperationReq?: {
    condition?: {
      ids?: [ int64 ](description='记录id', maxItems=500, name='ids'),
      source?: {
        sourceId?: string(description='source id', name='source_id'),
        sourceType?: string(description='source type', name='source_type'),
      }(description='来源', name='source'),
    }(description='条件', name='condition'),
    tenantId?: string(description='租户id', name='tenant_id'),
    userid?: string(description='用户id', name='userid'),
    orderId?: int64(description='订单id', name='order_id'),
  }(description='入参', name='inactive_operation_req'),
}

model InactiveOapiRhinoMosExecOperationConditionRequest = {
  headers?: map[string]string,
  params?:InactiveOapiRhinoMosExecOperationConditionParams,
}

model InactiveOapiRhinoMosExecOperationConditionResponseBody = {
  errcode?: int64(description='错误码', name='errcode'),
  model?: boolean(description='返回结果', name='model'),
  errmsg?: string(description='信息', name='errmsg'),
  externalMsgInfo?: string(description='错误信息', name='external_msg_info'),
}

model InactiveOapiRhinoMosExecOperationConditionResponse = {
  headers: map[string]string,
  body: InactiveOapiRhinoMosExecOperationConditionResponseBody,
}

/**
 * Description: 按照条件失效工序
 */
async function inactiveOapiRhinoMosExecOperationCondition(request: InactiveOapiRhinoMosExecOperationConditionRequest): InactiveOapiRhinoMosExecOperationConditionResponse {
  var runtime = new Util.RuntimeOptions{};
  return inactiveOapiRhinoMosExecOperationConditionEx(request, runtime);
}

/**
 * Description: 按照条件失效工序
 */
async function inactiveOapiRhinoMosExecOperationConditionEx(request: InactiveOapiRhinoMosExecOperationConditionRequest, runtime: Util.RuntimeOptions): InactiveOapiRhinoMosExecOperationConditionResponse {
  Util.validateModel(request);
  var appParams = Util.stringifyMapValue(Util.toMap(request.params));
  return doRequestOApi('POST', '/topapi/rhino/mos/exec/operation/condition/inactive', request.headers, appParams, runtime);
}

model ListOapiRhinoMosSpacePoiParams = {
  request: {
    poiCodeList?: [ string ](description='poi_code_list', maxItems=20, name='poi_code_list'),
    tenantId: string(description='租户ID', name='tenant_id'),
    userid?: string(description='userid', name='userid'),
  }(description='request', name='request'),
}

model ListOapiRhinoMosSpacePoiRequest = {
  headers?: map[string]string,
  params:ListOapiRhinoMosSpacePoiParams,
}

model ListOapiRhinoMosSpacePoiResponseBody = {
  errmsg?: string(description='错误信息', name='errmsg'),
  model?: [
    {
      categoryCode?: string(description='类目code', name='category_code'),
      categorySubCode?: string(description='类目子code', name='category_sub_code'),
      poiCode?: string(description='兴趣点code', name='poi_code'),
      poiName?: string(description='兴趣点name', name='poi_name'),
      tenantId?: string(description='租户ID', name='tenant_id'),
    }
  ](description='结果', name='model'),
  errcode?: int64(description='错误码', name='errcode'),
}

model ListOapiRhinoMosSpacePoiResponse = {
  headers: map[string]string,
  body: ListOapiRhinoMosSpacePoiResponseBody,
}

/**
 * Description: rhino制造系统中的空间兴趣点列出
 */
async function listOapiRhinoMosSpacePoi(request: ListOapiRhinoMosSpacePoiRequest): ListOapiRhinoMosSpacePoiResponse {
  var runtime = new Util.RuntimeOptions{};
  return listOapiRhinoMosSpacePoiEx(request, runtime);
}

/**
 * Description: rhino制造系统中的空间兴趣点列出
 */
async function listOapiRhinoMosSpacePoiEx(request: ListOapiRhinoMosSpacePoiRequest, runtime: Util.RuntimeOptions): ListOapiRhinoMosSpacePoiResponse {
  Util.validateModel(request);
  var appParams = Util.stringifyMapValue(Util.toMap(request.params));
  return doRequestOApi('POST', '/topapi/rhino/mos/space/poi/list', request.headers, appParams, runtime);
}

model UnbindCorpBlazersRequest = {
  headers?: map[string]string,
}

model UnbindCorpBlazersResponseBody = {
  result?: {
    dingOpenErrcode?: int64(description='dingOpenErrcode', name='ding_open_errcode'),
    errorMsg?: string(description='errorMsg', name='error_msg'),
    success?: boolean(description='success', name='success'),
  }(description='result', name='result'),
}

model UnbindCorpBlazersResponse = {
  headers: map[string]string,
  body: UnbindCorpBlazersResponseBody,
}

/**
 * Description: 完全解绑
 */
async function unbindCorpBlazers(request: UnbindCorpBlazersRequest): UnbindCorpBlazersResponse {
  var runtime = new Util.RuntimeOptions{};
  return unbindCorpBlazersEx(request, runtime);
}

/**
 * Description: 完全解绑
 */
async function unbindCorpBlazersEx(request: UnbindCorpBlazersRequest, runtime: Util.RuntimeOptions): UnbindCorpBlazersResponse {
  Util.validateModel(request);
  var appParams : map[string]string = {};
  return doRequest('dingtalk.corp.blazers.unbind', 'POST', '/router/rest', request.headers, appParams, runtime);
}

model RemovemappingCorpBlazersParams = {
  bizId?: string(description='商户唯一标识', name='biz_id'),
}

model RemovemappingCorpBlazersRequest = {
  headers?: map[string]string,
  params?:RemovemappingCorpBlazersParams,
}

model RemovemappingCorpBlazersResponseBody = {
  result?: {
    dingOpenErrcode?: int64(description='dingOpenErrcode', name='ding_open_errcode'),
    errorMsg?: string(description='errorMsg', name='error_msg'),
    success?: boolean(description='success', name='success'),
  }(description='result', name='result'),
}

model RemovemappingCorpBlazersResponse = {
  headers: map[string]string,
  body: RemovemappingCorpBlazersResponseBody,
}

/**
 * Description: 移除绑定关系
 */
async function removemappingCorpBlazers(request: RemovemappingCorpBlazersRequest): RemovemappingCorpBlazersResponse {
  var runtime = new Util.RuntimeOptions{};
  return removemappingCorpBlazersEx(request, runtime);
}

/**
 * Description: 移除绑定关系
 */
async function removemappingCorpBlazersEx(request: RemovemappingCorpBlazersRequest, runtime: Util.RuntimeOptions): RemovemappingCorpBlazersResponse {
  Util.validateModel(request);
  var appParams = Util.stringifyMapValue(Util.toMap(request.params));
  return doRequest('dingtalk.corp.blazers.removemapping', 'POST', '/router/rest', request.headers, appParams, runtime);
}

model ListOapiRhinoMosLayoutOperationdefsParams = {
  flowVersion?: int64(description='版本：如果为空，查生效版本；不为空，查指定版本', name='flow_version'),
  needAssignInfo: boolean(description='是否需要分配信息', name='need_assignInfo'),
  operationUids: [ int64 ](description='工序唯一ID', maxItems=2000, name='operation_uids'),
  orderId: int64(description='订单ID', name='order_id'),
  tenantId: string(description='租户ID', name='tenant_id'),
  tmpSave?: boolean(description='查询暂存版本', name='tmp_save'),
  userid?: string(description='用户ID', name='userid'),
}

model ListOapiRhinoMosLayoutOperationdefsRequest = {
  headers?: map[string]string,
  params:ListOapiRhinoMosLayoutOperationdefsParams,
}

model ListOapiRhinoMosLayoutOperationdefsResponseBody = {
  errmsg?: string(description='错误提示', name='errmsg'),
  result?: [
    {
      applicableSizeCode?: string(description='适用尺码', name='applicable_size_code'),
      autoSchedule?: boolean(description='是否需要调度', name='auto_schedule'),
      enterCondition?: string(description='进入条件：ANY_MATCH/ALL_MATCH', name='enter_condition'),
      flowId?: int64(description='PaaSflowID（只用于返回，保存会自增）', name='flow_id'),
      flowVersion?: int64(description='工序定义版本', name='flow_version'),
      name?: string(description='工序名称', name='name'),
      nextOperationExternalIds?: [ string ](description='后续工序外部ID列表', name='next_operation_external_ids'),
      nextOperationUids?: [ int64 ](description='后续工序唯一ID列表', name='next_operation_uids'),
      operationExecutorAssigns?: [
        {
          executorId?: string(description='工序执行器ID', name='executor_id'),
          orderNum?: int64(description='排序值', name='order_num'),
        }
      ](description='工序执行器分配', name='operation_executor_assigns'),
      operationExternalId?: string(description='工序外部ID', name='operation_external_id'),
      operationType?: string(description='工序类型：ASSIST/QUALITY_INSPECT/TECHNOLOGY', name='operation_type'),
      operationUid?: int64(description='工序唯一ID', name='operation_uid'),
      processTypeCode?: string(description='工序能力类型：SJ/PP/TR等', name='process_type_code'),
      sectionCode?: string(description='工段CODE：F-SL/C..', name='section_code'),
      sectionName?: string(description='工段名称：缝制-碎料/裁床..', name='section_name'),
      skip?: boolean(description='是否跳过(不生产)', name='skip'),
      stdCost?: string(description='标准工时/秒', name='std_cost'),
      workUnits?: [
        {
          deviceAssigns?: [
            {
              deviceModelId?: string(description='设备模型ID', name='device_model_id'),
              deviceModelName?: string(description='设备模型名称', name='device_model_name'),
              deviceModelVersion?: string(description='设备模型版本', name='device_model_version'),
              deviceId?: int64(description='设备ID', name='device_id'),
            }
          ](description='设备分配列表', name='device_assigns'),
          workerAssigns?: [
            {
              name?: string(description='姓名', name='name'),
              workNo?: string(description='工号', name='work_no'),
            }
          ](description='人员分配列表', name='worker_assigns'),
          workstationAssigns?: [
            {
              workstationCode?: string(description='站位编码', name='workstation_code'),
            }
          ](description='站位分配', name='workstation_assigns'),
        }
      ](description='分配单元列表', name='work_units'),
      bizCode?: string(description='业务编码', name='biz_code'),
      bizSource?: string(description='业务来源', name='biz_source'),
      execSystem?: string(description='执行系统', name='exec_system'),
    }
  ](description='工序定义图', name='result'),
  errcode?: int64(description='错误码', name='errcode'),
}

model ListOapiRhinoMosLayoutOperationdefsResponse = {
  headers: map[string]string,
  body: ListOapiRhinoMosLayoutOperationdefsResponseBody,
}

/**
 * Description: 批量查询工序定义
 */
async function listOapiRhinoMosLayoutOperationdefs(request: ListOapiRhinoMosLayoutOperationdefsRequest): ListOapiRhinoMosLayoutOperationdefsResponse {
  var runtime = new Util.RuntimeOptions{};
  return listOapiRhinoMosLayoutOperationdefsEx(request, runtime);
}

/**
 * Description: 批量查询工序定义
 */
async function listOapiRhinoMosLayoutOperationdefsEx(request: ListOapiRhinoMosLayoutOperationdefsRequest, runtime: Util.RuntimeOptions): ListOapiRhinoMosLayoutOperationdefsResponse {
  Util.validateModel(request);
  var appParams = Util.stringifyMapValue(Util.toMap(request.params));
  return doRequestOApi('POST', '/topapi/rhino/mos/layout/operationdefs/list', request.headers, appParams, runtime);
}

model SectionlastOapiRhinoMosLayoutOperationdefsParams = {
  flowVersion?: int64(description='版本：如果为空，查生效版本；不为空，查指定版本', name='flow_version'),
  needAssignInfo: boolean(description='是否需要分配信息', name='need_assign_info'),
  orderId: int64(description='订单ID', name='order_id'),
  tenantId: string(description='租户ID', name='tenant_id'),
  tmpSave?: boolean(description='查询暂存版本', name='tmp_save'),
  sectionCode: string(description='工段编码', name='section_code'),
  userid?: string(description='订单ID', name='userid'),
}

model SectionlastOapiRhinoMosLayoutOperationdefsRequest = {
  headers?: map[string]string,
  params:SectionlastOapiRhinoMosLayoutOperationdefsParams,
}

model SectionlastOapiRhinoMosLayoutOperationdefsResponseBody = {
  errmsg?: string(description='错误提示', name='errmsg'),
  result?: [
    {
      applicableSizeCode?: string(description='适用尺码', name='applicable_size_code'),
      autoSchedule?: boolean(description='是否需要调度', name='auto_schedule'),
      enterCondition?: string(description='进入条件：ANY_MATCH/ALL_MATCH', name='enter_condition'),
      flowId?: int64(description='PaaSflowID（只用于返回，保存会自增）', name='flow_id'),
      flowVersion?: int64(description='工序定义版本', name='flow_version'),
      name?: string(description='工序名称', name='name'),
      nextOperationExternalIds?: [ string ](description='后续工序外部ID列表', name='next_operation_external_ids'),
      nextOperationUids?: [ int64 ](description='后续工序唯一ID列表', name='next_operation_uids'),
      operationExecutorAssigns?: [
        {
          executorId?: string(description='工序执行器ID', name='executor_id'),
          orderNum?: int64(description='排序值', name='order_num'),
        }
      ](description='工序执行器分配', name='operation_executor_assigns'),
      operationExternalId?: string(description='工序外部ID', name='operation_external_id'),
      operationType?: string(description='工序类型：ASSIST/QUALITY_INSPECT/TECHNOLOGY', name='operation_type'),
      operationUid?: int64(description='工序唯一ID', name='operation_uid'),
      processTypeCode?: string(description='工序能力类型：SJ/PP/TR等', name='process_type_code'),
      sectionCode?: string(description='工段CODE：F-SL/C..', name='section_code'),
      sectionName?: string(description='工段名称：缝制-碎料/裁床..', name='section_name'),
      skip?: boolean(description='是否跳过(不生产)', name='skip'),
      stdCost?: string(description='标准工时/秒', name='std_cost'),
      workUnits?: [
        {
          deviceAssigns?: [
            {
              deviceModelId?: string(description='设备模型ID', name='device_model_id'),
              deviceModelName?: string(description='设备模型名称', name='device_model_name'),
              deviceModelVersion?: string(description='设备模型版本', name='device_model_version'),
              deviceId?: int64(description='设备ID', name='device_id'),
            }
          ](description='设备分配列表', name='device_assigns'),
          workerAssigns?: [
            {
              name?: string(description='姓名', name='name'),
              workNo?: string(description='工号', name='work_no'),
            }
          ](description='人员分配列表', name='worker_assigns'),
          workstationAssigns?: [
            {
              workstationCode?: string(description='站位编码', name='workstation_code'),
            }
          ](description='站位分配', name='workstation_assigns'),
        }
      ](description='分配单元列表', name='work_units'),
      bizSource?: string(description='业务来源', name='biz_source'),
      bizCode?: string(description='业务编码', name='biz_code'),
      execSystem?: string(description='执行系统', name='exec_system'),
    }
  ](description='工序定义图', name='result'),
  errcode?: int64(description='错误码', name='errcode'),
}

model SectionlastOapiRhinoMosLayoutOperationdefsResponse = {
  headers: map[string]string,
  body: SectionlastOapiRhinoMosLayoutOperationdefsResponseBody,
}

/**
 * Description: 查询工段最后工序定义列表
 */
async function sectionlastOapiRhinoMosLayoutOperationdefs(request: SectionlastOapiRhinoMosLayoutOperationdefsRequest): SectionlastOapiRhinoMosLayoutOperationdefsResponse {
  var runtime = new Util.RuntimeOptions{};
  return sectionlastOapiRhinoMosLayoutOperationdefsEx(request, runtime);
}

/**
 * Description: 查询工段最后工序定义列表
 */
async function sectionlastOapiRhinoMosLayoutOperationdefsEx(request: SectionlastOapiRhinoMosLayoutOperationdefsRequest, runtime: Util.RuntimeOptions): SectionlastOapiRhinoMosLayoutOperationdefsResponse {
  Util.validateModel(request);
  var appParams = Util.stringifyMapValue(Util.toMap(request.params));
  return doRequestOApi('POST', '/topapi/rhino/mos/layout/operationdefs/sectionlast', request.headers, appParams, runtime);
}

model GetOapiRhinoMosLayoutOperationdefParams = {
  flowVersion?: int64(description='版本：如果为空，查生效版本；不为空，查指定版本', name='flow_version'),
  needAssignInfo: boolean(description='是否需要分配信息', name='need_assign_info'),
  operationExternalId?: string(description='外部工序ID，和工序唯一ID不能同时为空', name='operation_external_id'),
  operationUid?: int64(description='工序唯一ID', name='operation_uid'),
  orderId: int64(description='订单ID', name='order_id'),
  tenantId: string(description='租户ID', name='tenant_id'),
  tmpSave?: boolean(description='查询暂存版本', name='tmp_save'),
  userid?: string(description='用户ID', name='userid'),
}

model GetOapiRhinoMosLayoutOperationdefRequest = {
  headers?: map[string]string,
  params:GetOapiRhinoMosLayoutOperationdefParams,
}

model GetOapiRhinoMosLayoutOperationdefResponseBody = {
  errmsg?: string(description='错误提示', name='errmsg'),
  result?: {
    applicableSizeCode?: string(description='适用尺码', name='applicable_size_code'),
    autoSchedule?: boolean(description='是否需要调度', name='auto_schedule'),
    enterCondition?: string(description='进入条件：ANY_MATCH/ALL_MATCH', name='enter_condition'),
    flowId?: int64(description='PaaSflowID（只用于返回，保存会自增）', name='flow_id'),
    flowVersion?: int64(description='工序定义版本', name='flow_version'),
    name?: string(description='工序名称', name='name'),
    nextOperationExternalIds?: [ string ](description='后续工序外部ID列表', name='next_operation_external_ids'),
    nextOperationUids?: [ int64 ](description='后续工序唯一ID列表', name='next_operation_uids'),
    operationExecutorAssigns?: [
      {
        executorId?: string(description='工序执行器ID', name='executor_id'),
        orderNum?: int64(description='排序值', name='order_num'),
      }
    ](description='工序执行器分配', name='operation_executor_assigns'),
    operationExternalId?: string(description='工序外部ID', name='operation_external_id'),
    operationType?: string(description='工序类型：ASSIST/QUALITY_INSPECT/TECHNOLOGY', name='operation_type'),
    operationUid?: int64(description='工序唯一ID', name='operation_uid'),
    processTypeCode?: string(description='工序能力类型：SJ/PP/TR等', name='process_type_code'),
    sectionCode?: string(description='工段CODE：F-SL/C..', name='section_code'),
    sectionName?: string(description='工段名称：缝制-碎料/裁床..', name='section_name'),
    skip?: boolean(description='是否跳过(不生产)', name='skip'),
    stdCost?: string(description='标准工时/秒', name='std_cost'),
    workUnits?: [
      {
        deviceAssigns?: [
          {
            deviceModelId?: string(description='设备模型ID', name='device_model_id'),
            deviceModelName?: string(description='设备模型名称', name='device_model_name'),
            deviceModelVersion?: string(description='设备模型版本', name='device_model_version'),
            deviceId?: int64(description='设备ID', name='device_id'),
          }
        ](description='设备分配列表', name='device_assigns'),
        workerAssigns?: [
          {
            name?: string(description='姓名', name='name'),
            workNo?: string(description='工号', name='work_no'),
          }
        ](description='人员分配列表', name='worker_assigns'),
        workstationAssigns?: [
          {
            workstationCode?: string(description='站位编码', name='workstation_code'),
          }
        ](description='站位分配', name='workstation_assigns'),
      }
    ](description='分配单元列表', name='work_units'),
    bizCode?: string(description='业务编码', name='biz_code'),
    bizSource?: string(description='业务来源', name='biz_source'),
    execSystem?: string(description='执行系统', name='exec_system'),
  }(description='工序定义图', name='result'),
  errcode?: int64(description='错误码', name='errcode'),
}

model GetOapiRhinoMosLayoutOperationdefResponse = {
  headers: map[string]string,
  body: GetOapiRhinoMosLayoutOperationdefResponseBody,
}

/**
 * Description: 获取工序定义详情
 */
async function getOapiRhinoMosLayoutOperationdef(request: GetOapiRhinoMosLayoutOperationdefRequest): GetOapiRhinoMosLayoutOperationdefResponse {
  var runtime = new Util.RuntimeOptions{};
  return getOapiRhinoMosLayoutOperationdefEx(request, runtime);
}

/**
 * Description: 获取工序定义详情
 */
async function getOapiRhinoMosLayoutOperationdefEx(request: GetOapiRhinoMosLayoutOperationdefRequest, runtime: Util.RuntimeOptions): GetOapiRhinoMosLayoutOperationdefResponse {
  Util.validateModel(request);
  var appParams = Util.stringifyMapValue(Util.toMap(request.params));
  return doRequestOApi('POST', '/topapi/rhino/mos/layout/operationdef/get', request.headers, appParams, runtime);
}

model CreateOapiCalendarV2EventParams = {
  event: {
    attendees: [
      {
        userid: string(description='员工工号', maxLength=64, name='userid'),
      }
    ](description='日程参与者，参与者最大人数为100(包括组织者)', maxItems=110, name='attendees'),
    calendarId: string(description='目前只能传primary，表示创建的日程在“我的日程”下', maxLength=64, name='calendar_id'),
    description?: string(description='日程描述', maxLength=512, name='description'),
    end: {
      date?: string(description='日期，全天日程使用，格式必须为\'yyyy-mm-dd\',和timestamp字段互斥，该字段有值时，则忽略timestamp字段', maxLength=10, name='date'),
      timestamp?: int64(description='时间戳，单位为秒。非全天日程使用，与date字段互斥', name='timestamp'),
      timezone?: string(description='时区信息，默认为"Asia/Shanghai"。date有值时，timezone 为 UTC；', maxLength=64, name='timezone'),
    }(description='结束时间', name='end'),
    organizer: {
      userid?: string(description='员工工号', name='userid'),
    }(description='日程组织者', name='organizer'),
    start: {
      date?: string(description='日期，全天日程使用，格式必须为\'yyyy-mm-dd\',和timestamp字段互斥，该字段有值时，则忽略timestamp字段', maxLength=10, name='date'),
      timestamp?: int64(description='时间戳，单位为秒。非全天日程使用，与date字段互斥', name='timestamp'),
      timezone?: string(description='时区信息，默认为"Asia/Shanghai"。date有值时，timezone 为 UTC；', maxLength=64, name='timezone'),
    }(description='开始时间', name='start'),
    summary: string(description='日程主题', maxLength=512, name='summary'),
    reminder?: {
      method?: string(description='提醒方式.app表示应用内提醒', maxLength=16, name='method'),
      minutes?: int64(description='开始前提醒的分钟数,有效值为0，5，15，30，60，1440', maximum=1600, name='minutes'),
    }(description='会议开始前多少分钟提醒', name='reminder'),
    location?: {
      latitude?: string(description='纬度', name='latitude'),
      longitude?: string(description='经度', name='longitude'),
      place?: string(description='地址详情', name='place'),
    }(description='地址信息', name='location'),
    notificationType?: string(description='受限字段,仅支持传NONE或者APP', name='notification_type'),
  }(description='日程创建对象', name='event'),
  agentid?: int64(description='开放平台应用对应的AgentId', name='agentid'),
}

model CreateOapiCalendarV2EventRequest = {
  headers?: map[string]string,
  params:CreateOapiCalendarV2EventParams,
}

model CreateOapiCalendarV2EventResponseBody = {
  result?: {
    attendees?: [
      {
        userid?: string(description='员工工号', name='userid'),
      }
    ](description='日程参与者', name='attendees'),
    calendarId?: string(description='primary表示创建的日程在“我的日程”下', name='calendar_id'),
    description?: string(description='日程描述', name='description'),
    end?: {
      date?: string(description='日期，全天日程使用，格式必须为\'yyyy-mm-dd\',和timestamp字段互斥，该字段有值时，则忽略timestamp字段', name='date'),
      timestamp?: int64(description='时间戳，单位为秒。非全天日程使用，与date字段互斥', name='timestamp'),
      timezone?: string(description='时区信息，默认为"Asia/Shanghai"。date有值时，timezone 为 UTC；', name='timezone'),
    }(description='结束时间', name='end'),
    eventId?: string(description='日程id', name='event_id'),
    organizer?: {
      userid?: string(description='员工工号', name='userid'),
    }(description='日程组织者', name='organizer'),
    start?: {
      date?: string(description='日期，全天日程使用，格式必须为\'yyyy-mm-dd\',和timestamp字段互斥，该字段有值时，则忽略timestamp字段', name='date'),
      timestamp?: int64(description='时间戳，单位为秒。非全天日程使用，与date字段互斥', name='timestamp'),
      timezone?: string(description='时区信息，默认为"Asia/Shanghai"。date有值时，timezone 为 UTC；', name='timezone'),
    }(description='开始时间', name='start'),
    summary?: string(description='日程主题', name='summary'),
    reminder?: {
      method?: string(description='提醒方式.app表示应用内提醒', name='method'),
      minutes?: int64(description='会议开始前多少分钟提醒', name='minutes'),
    }(description='会议开始前提醒', name='reminder'),
    location?: {
      latitude?: string(description='纬度', name='latitude'),
      longitude?: string(description='经度', name='longitude'),
      place?: string(description='地址', name='place'),
    }(description='地址', name='location'),
    notificationType?: string(description='提醒方式', name='notification_type'),
  }(description='日程对象', name='result'),
  success?: boolean(description='结果是否正确', name='success'),
  errcode?: int64(description='错误编码', name='errcode'),
  errmsg?: string(description='错误信息', name='errmsg'),
}

model CreateOapiCalendarV2EventResponse = {
  headers: map[string]string,
  body: CreateOapiCalendarV2EventResponseBody,
}

/**
 * Description: 通过此接口可以创建钉钉日程，在对应的日历中展示
该接口处于内部灰度阶段, 申请使用请邮件联系:wusuan.yby@alibaba-inc.com
 */
async function createOapiCalendarV2Event(request: CreateOapiCalendarV2EventRequest): CreateOapiCalendarV2EventResponse {
  var runtime = new Util.RuntimeOptions{};
  return createOapiCalendarV2EventEx(request, runtime);
}

/**
 * Description: 通过此接口可以创建钉钉日程，在对应的日历中展示
该接口处于内部灰度阶段, 申请使用请邮件联系:wusuan.yby@alibaba-inc.com
 */
async function createOapiCalendarV2EventEx(request: CreateOapiCalendarV2EventRequest, runtime: Util.RuntimeOptions): CreateOapiCalendarV2EventResponse {
  Util.validateModel(request);
  var appParams = Util.stringifyMapValue(Util.toMap(request.params));
  return doRequestOApi('POST', '/topapi/calendar/v2/event/create', request.headers, appParams, runtime);
}

model SaveflowOapiRhinoMosLayoutOperationdefParams = {
  active: boolean(description='是否生效', name='active'),
  flowVersion?: int64(description='工序版本(指定版本时版本如果已经存在则幂等)', name='flow_version'),
  operationDefs: [
    {
      applicableSizeCode?: string(description='适用尺码', name='applicable_size_code'),
      autoSchedule: boolean(description='是否需要自动调度', name='auto_schedule'),
      enterCondition: string(description='进入条件：ANY_MATCH/ALL_MATCH', name='enter_condition'),
      flowId?: int64(description='PaaSflowID（只用于返回，保存会自增）', name='flow_id'),
      flowVersion?: int64(description='工序版本(指定版本时版本如果已经存在则幂等)', name='flow_version'),
      name: string(description='工序名称', name='name'),
      nextOperationExternalIds?: [ string ](description='后续工序外部ID列表', maxItems=500, name='next_operation_external_ids'),
      nextOperationUids?: [ int64 ](description='后续工序ID列表（只用于返回，保存请设置nextVirtualIds）', maxItems=500, name='next_operation_uids'),
      operationExecutorAssigns?: [
        {
          executorId?: string(description='工序执行器ID', name='executor_id'),
          orderNum?: int64(description='排序值', name='order_num'),
        }
      ](description='工序执行器分配', maxItems=500, name='operation_executor_assigns'),
      operationExternalId: string(description='工序外部ID', name='operation_external_id'),
      operationType: string(description='工序类型：ASSIST/QUALITY_INSPECT/TECHNOLOGY', name='operation_type'),
      operationUid?: int64(description='工序唯一ID（保存时已存在则复用，不存在会自增）', name='operation_uid'),
      processTypeCode?: string(description='工序能力类型：SJ/PP/TR等', name='process_type_code'),
      sectionCode: string(description='工段CODE：F-SL/C..', name='section_code'),
      sectionName: string(description='工段名称：缝制-碎料/裁床..', name='section_name'),
      skip: boolean(description='是否跳过(不生产)', name='skip'),
      stdCost: string(description='标准工时/秒', name='std_cost'),
      workUnits?: [
        {
          deviceAssigns?: [
            {
              deviceModelId?: string(description='设备模型ID', name='device_model_id'),
              deviceModelName?: string(description='设备模型名称', name='device_model_name'),
              deviceModelVersion?: string(description='设备模型版本', name='device_model_version'),
              deviceId?: int64(description='设备ID', name='device_id'),
            }
          ](description='设备分配列表', maxItems=500, name='device_assigns'),
          workerAssigns?: [
            {
              name?: string(description='姓名', name='name'),
              workNo?: string(description='工号', name='work_no'),
            }
          ](description='人员分配列表', maxItems=500, name='worker_assigns'),
          workstationAssigns?: [
            {
              workstationCode?: string(description='站位编码', name='workstation_code'),
            }
          ](description='站位分配', maxItems=500, name='workstation_assigns'),
        }
      ](description='分配单元列表', maxItems=500, name='work_units'),
      bizCode?: string(description='业务编码', name='biz_code'),
      bizSource?: string(description='业务来源', name='biz_source'),
      execSystem?: string(description='执行系统', name='exec_system'),
    }
  ](description='工序定义列表', maxItems=500, name='operation_defs'),
  orderId: int64(description='订单ID', name='order_id'),
  tenantId: string(description='租户ID', name='tenant_id'),
  tmpSave?: boolean(description='是否暂存', name='tmp_save'),
  userid?: string(description='用户ID', name='userid'),
  source?: string(description='来源系统', name='source'),
}

model SaveflowOapiRhinoMosLayoutOperationdefRequest = {
  headers?: map[string]string,
  params:SaveflowOapiRhinoMosLayoutOperationdefParams,
}

model SaveflowOapiRhinoMosLayoutOperationdefResponseBody = {
  errmsg?: string(description='错误提示', name='errmsg'),
  result?: int64(description='操作结果', name='result'),
  errcode?: int64(description='错误码', name='errcode'),
}

model SaveflowOapiRhinoMosLayoutOperationdefResponse = {
  headers: map[string]string,
  body: SaveflowOapiRhinoMosLayoutOperationdefResponseBody,
}

/**
 * Description: 保存工序定义图
 */
async function saveflowOapiRhinoMosLayoutOperationdef(request: SaveflowOapiRhinoMosLayoutOperationdefRequest): SaveflowOapiRhinoMosLayoutOperationdefResponse {
  var runtime = new Util.RuntimeOptions{};
  return saveflowOapiRhinoMosLayoutOperationdefEx(request, runtime);
}

/**
 * Description: 保存工序定义图
 */
async function saveflowOapiRhinoMosLayoutOperationdefEx(request: SaveflowOapiRhinoMosLayoutOperationdefRequest, runtime: Util.RuntimeOptions): SaveflowOapiRhinoMosLayoutOperationdefResponse {
  Util.validateModel(request);
  var appParams = Util.stringifyMapValue(Util.toMap(request.params));
  return doRequestOApi('POST', '/topapi/rhino/mos/layout/operationdef/saveflow', request.headers, appParams, runtime);
}

model DetailOapiCalendarV2EventParams = {
  calendarId: string(description='日历ID,目前仅支持传primary,表示修改当前用户“我的日程”下的日程', maxLength=64, name='calendar_id'),
  eventId: string(description='日程Id', maxLength=64, name='event_id'),
  agentid?: int64(description='开放平台应用对应的AgentId', name='agentid'),
}

model DetailOapiCalendarV2EventRequest = {
  headers?: map[string]string,
  params:DetailOapiCalendarV2EventParams,
}

model DetailOapiCalendarV2EventResponseBody = {
  result?: {
    attendees?: [
      {
        userid?: string(description='员工工号', name='userid'),
      }
    ](description='日程参与者', name='attendees'),
    calendarId?: string(description='primary表示创建的日程在“我的日程”下', name='calendar_id'),
    description?: string(description='日程描述', name='description'),
    end?: {
      date?: string(description='日期，全天日程使用，格式必须为\'yyyy-mm-dd\',和timestamp字段互斥，该字段有值时，则忽略timestamp字段', name='date'),
      timestamp?: int64(description='时间戳，单位为秒。非全天日程使用，与date字段互斥', name='timestamp'),
      timezone?: string(description='时区信息，默认为"Asia/Shanghai"。date有值时，timezone 为 UTC；', name='timezone'),
    }(description='结束时间', name='end'),
    eventId?: string(description='日程id', name='event_id'),
    organizer?: {
      userid?: string(description='员工工号', name='userid'),
    }(description='日程组织者', name='organizer'),
    start?: {
      date?: string(description='日期，全天日程使用，格式必须为\'yyyy-mm-dd\',和timestamp字段互斥，该字段有值时，则忽略timestamp字段', name='date'),
      timestamp?: int64(description='时间戳，单位为秒。非全天日程使用，与date字段互斥', name='timestamp'),
      timezone?: string(description='时区信息，默认为"Asia/Shanghai"。date有值时，timezone 为 UTC；', name='timezone'),
    }(description='开始时间', name='start'),
    summary?: string(description='日程主题', name='summary'),
    reminder?: {
      method?: string(description='提醒方式.app表示应用内提醒', name='method'),
      minutes?: int64(description='会议开始前多少分钟提醒', name='minutes'),
    }(description='会议开始前提醒', name='reminder'),
    location?: {
      latitude?: string(description='经度', name='latitude'),
      longitude?: string(description='纬度', name='longitude'),
      place?: string(description='地址详情', name='place'),
    }(description='地址', name='location'),
    notificationType?: string(description='会前提醒方式', name='notification_type'),
  }(description='日程对象', name='result'),
  success?: boolean(description='结果是否正确', name='success'),
  errcode?: int64(description='错误编码', name='errcode'),
  errmsg?: string(description='错误信息', name='errmsg'),
}

model DetailOapiCalendarV2EventResponse = {
  headers: map[string]string,
  body: DetailOapiCalendarV2EventResponseBody,
}

/**
 * Description: 日程2.0获取日程详情，在对应的日历中展示
该接口处于内部灰度阶段, 申请使用请邮件联系:wusuan.yby@alibaba-inc.com
 */
async function detailOapiCalendarV2Event(request: DetailOapiCalendarV2EventRequest): DetailOapiCalendarV2EventResponse {
  var runtime = new Util.RuntimeOptions{};
  return detailOapiCalendarV2EventEx(request, runtime);
}

/**
 * Description: 日程2.0获取日程详情，在对应的日历中展示
该接口处于内部灰度阶段, 申请使用请邮件联系:wusuan.yby@alibaba-inc.com
 */
async function detailOapiCalendarV2EventEx(request: DetailOapiCalendarV2EventRequest, runtime: Util.RuntimeOptions): DetailOapiCalendarV2EventResponse {
  Util.validateModel(request);
  var appParams = Util.stringifyMapValue(Util.toMap(request.params));
  return doRequestOApi('POST', '/topapi/calendar/v2/event/detail', request.headers, appParams, runtime);
}

model PrevOapiRhinoMosLayoutOperationdefsParams = {
  flowVersion?: int64(description='版本：如果为空，查生效版本；不为空，查指定版本', name='flow_version'),
  needAssignInfo: boolean(description='是否需要分配信息', name='need_assign_info'),
  operationExternalId?: string(description='外部工序ID，和工序唯一ID不能同时为空', name='operation_external_id'),
  operationUid?: int64(description='工序唯一ID', name='operation_uid'),
  orderId: int64(description='订单ID', name='order_id'),
  tenantId: string(description='租户ID', name='tenant_id'),
  tmpSave?: boolean(description='查询暂存版本', name='tmp_save'),
  userid?: string(description='用户ID', name='userid'),
}

model PrevOapiRhinoMosLayoutOperationdefsRequest = {
  headers?: map[string]string,
  params:PrevOapiRhinoMosLayoutOperationdefsParams,
}

model PrevOapiRhinoMosLayoutOperationdefsResponseBody = {
  errmsg?: string(description='错误提示', name='errmsg'),
  result?: [
    {
      applicableSizeCode?: string(description='适用尺码', name='applicable_size_code'),
      autoSchedule?: boolean(description='是否需要调度', name='auto_schedule'),
      enterCondition?: string(description='进入条件：ANY_MATCH/ALL_MATCH', name='enter_condition'),
      flowId?: int64(description='PaaSflowID（只用于返回，保存会自增）', name='flow_id'),
      flowVersion?: int64(description='工序定义版本', name='flow_version'),
      name?: string(description='工序名称', name='name'),
      nextOperationExternalIds?: [ string ](description='后续工序外部ID列表', name='next_operation_external_ids'),
      nextOperationUids?: [ int64 ](description='后续工序唯一ID列表', name='next_operation_uids'),
      operationExecutorAssigns?: [
        {
          executorId?: string(description='工序执行器ID', name='executor_id'),
          orderNum?: int64(description='排序值', name='order_num'),
        }
      ](description='工序执行器分配', name='operation_executor_assigns'),
      operationExternalId?: string(description='工序外部ID', name='operation_external_id'),
      operationType?: string(description='工序类型：ASSIST/QUALITY_INSPECT/TECHNOLOGY', name='operation_type'),
      operationUid?: int64(description='工序唯一ID', name='operation_uid'),
      processTypeCode?: string(description='工序能力类型：SJ/PP/TR等', name='process_type_code'),
      sectionCode?: string(description='工段CODE：F-SL/C..', name='section_code'),
      sectionName?: string(description='工段名称：缝制-碎料/裁床..', name='section_name'),
      skip?: boolean(description='是否跳过(不生产)', name='skip'),
      stdCost?: string(description='标准工时/秒', name='std_cost'),
      workUnits?: [
        {
          deviceAssigns?: [
            {
              deviceModelId?: string(description='设备模型ID', name='device_model_id'),
              deviceModelName?: string(description='设备模型名称', name='device_model_name'),
              deviceModelVersion?: string(description='设备模型版本', name='device_model_version'),
              deviceId?: int64(description='设备ID', name='device_id'),
            }
          ](description='设备分配列表', name='device_assigns'),
          workerAssigns?: [
            {
              name?: string(description='姓名', name='name'),
              workNo?: string(description='工号', name='work_no'),
            }
          ](description='人员分配列表', name='worker_assigns'),
          workstationAssigns?: [
            {
              workstationCode?: string(description='站位编码', name='workstation_code'),
            }
          ](description='站位分配', name='workstation_assigns'),
        }
      ](description='分配单元列表', name='work_units'),
      bizCode?: string(description='业务编码', name='biz_code'),
      bizSource?: string(description='业务来源', name='biz_source'),
      execSystem?: string(description='执行系统', name='exec_system'),
    }
  ](description='工序定义图', name='result'),
  errcode?: int64(description='错误码', name='errcode'),
}

model PrevOapiRhinoMosLayoutOperationdefsResponse = {
  headers: map[string]string,
  body: PrevOapiRhinoMosLayoutOperationdefsResponseBody,
}

/**
 * Description: 查询前续工序定义
 */
async function prevOapiRhinoMosLayoutOperationdefs(request: PrevOapiRhinoMosLayoutOperationdefsRequest): PrevOapiRhinoMosLayoutOperationdefsResponse {
  var runtime = new Util.RuntimeOptions{};
  return prevOapiRhinoMosLayoutOperationdefsEx(request, runtime);
}

/**
 * Description: 查询前续工序定义
 */
async function prevOapiRhinoMosLayoutOperationdefsEx(request: PrevOapiRhinoMosLayoutOperationdefsRequest, runtime: Util.RuntimeOptions): PrevOapiRhinoMosLayoutOperationdefsResponse {
  Util.validateModel(request);
  var appParams = Util.stringifyMapValue(Util.toMap(request.params));
  return doRequestOApi('POST', '/topapi/rhino/mos/layout/operationdefs/prev', request.headers, appParams, runtime);
}

model ModifyOapiAlitripBtripApprovalParams = {
  rq: {
    thirdpartBusinessId?: string(description='用户展示的外部审批单id信息', name='thirdpart_business_id'),
    status?: int64(description='审批单状态，不传入默认为0：0审批中，1同意，2拒绝', name='status'),
    corpid: string(description='企业id', name='corpid'),
    travelerList: [
      {
        userName?: string(description='出行人名称', name='user_name'),
        userid: string(description='出行人id', name='userid'),
      }
    ](description='出行人列表', maxItems=100, name='traveler_list'),
    deptid?: string(description='部门id，如果不传，会根据user相关信息去获取对应的部门信息，如果传的是错误的部门信息，后面无法做部门的费用归属；部门ID只能是数字', name='deptid'),
    userName?: string(description='用户名称，如果要传必须传真实姓名，如果不传则会以系统当前维护userId对应的名称进行预订', name='user_name'),
    userid: string(description='用户id', name='userid'),
    corpName?: string(description='企业名称', name='corp_name'),
    tripCause: string(description='出差事由', name='trip_cause'),
    deptName?: string(description='部门名称', name='dept_name'),
    itineraryList: [
      {
        projectCode?: string(description='项目编码', name='project_code'),
        projectTitle?: string(description='项目名称', name='project_title'),
        arrDate: string(description='到达日期', pattern='\\\\d{4}[-]\\\\d{1,2}[-]\\\\d{1,2}[T]\\\\d{2}:\\\\d{2}:\\\\d{2}[Z]', name='arr_date'),
        depDate: string(description='出发日期', pattern='\\\\d{4}[-]\\\\d{1,2}[-]\\\\d{1,2}[T]\\\\d{2}:\\\\d{2}:\\\\d{2}[Z]', name='dep_date'),
        invoiceId: int64(description='发票id', name='invoice_id'),
        thirdpartCostCenterId?: string(description='第三方成本中心id，若不填则商旅成本中心id必填', name='thirdpart_cost_center_id'),
        costCenterId?: int64(description='商旅成本中心id，若不填则第三方成本中心id必填', name='cost_center_id'),
        arrCityCode?: string(description='到达城市编码', name='arr_city_code'),
        arrCity: string(description='到达城市', name='arr_city'),
        depCityCode?: string(description='出发城市编码', name='dep_city_code'),
        depCity: string(description='出发城市', name='dep_city'),
        trafficType: int64(description='交通方式：0飞机, 1,火车, 2汽车, 3其他', name='traffic_type'),
        itineraryId: string(description='行程id', name='itinerary_id'),
        tripWay: int64(description='行程类型：0单程，1往返', name='trip_way'),
      }
    ](description='行程列表', maxItems=100, name='itinerary_list'),
    tripTitle: string(description='申请单标题', name='trip_title'),
    thirdpartApplyId: string(description='外部申请单id', name='thirdpart_apply_id'),
    tripDay?: int64(description='出差天数', name='trip_day'),
  }(description='请求对象', name='rq'),
}

model ModifyOapiAlitripBtripApprovalRequest = {
  headers?: map[string]string,
  params:ModifyOapiAlitripBtripApprovalParams,
}

model ModifyOapiAlitripBtripApprovalResponseBody = {
  success?: boolean(description='成功标识', name='success'),
  errcode?: int64(description='错误码', name='errcode'),
  errmsg?: string(description='错误信息', name='errmsg'),
  module?: {
    applyId?: int64(description='商旅申请单id', name='apply_id'),
    thirdpartApplyId?: string(description='外部申请单id', name='thirdpart_apply_id'),
  }(description='结果对象', name='module'),
}

model ModifyOapiAlitripBtripApprovalResponse = {
  headers: map[string]string,
  body: ModifyOapiAlitripBtripApprovalResponseBody,
}

/**
 * Description: 企业客户修改商旅申请单
 */
async function modifyOapiAlitripBtripApproval(request: ModifyOapiAlitripBtripApprovalRequest): ModifyOapiAlitripBtripApprovalResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifyOapiAlitripBtripApprovalEx(request, runtime);
}

/**
 * Description: 企业客户修改商旅申请单
 */
async function modifyOapiAlitripBtripApprovalEx(request: ModifyOapiAlitripBtripApprovalRequest, runtime: Util.RuntimeOptions): ModifyOapiAlitripBtripApprovalResponse {
  Util.validateModel(request);
  var appParams = Util.stringifyMapValue(Util.toMap(request.params));
  return doRequestOApi('POST', '/topapi/alitrip/btrip/approval/modify', request.headers, appParams, runtime);
}

model CancelOapiCalendarV2EventParams = {
  calendarId: string(description='日历id,目前仅支持传“primary”，表示“我的日程”下的日程', maxLength=64, name='calendar_id'),
  eventId: string(description='加密后的日程Id', maxLength=64, name='event_id'),
  agentid?: int64(description='开放平台应用对应的AgentId', name='agentid'),
}

model CancelOapiCalendarV2EventRequest = {
  headers?: map[string]string,
  params:CancelOapiCalendarV2EventParams,
}

model CancelOapiCalendarV2EventResponseBody = {
  errcode?: int64(description='错误编码', name='errcode'),
  errmsg?: string(description='错误信息', name='errmsg'),
  success?: boolean(description='结果是否正确', name='success'),
}

model CancelOapiCalendarV2EventResponse = {
  headers: map[string]string,
  body: CancelOapiCalendarV2EventResponseBody,
}

/**
 * Description: DING日程2.0取消日程
 */
async function cancelOapiCalendarV2Event(request: CancelOapiCalendarV2EventRequest): CancelOapiCalendarV2EventResponse {
  var runtime = new Util.RuntimeOptions{};
  return cancelOapiCalendarV2EventEx(request, runtime);
}

/**
 * Description: DING日程2.0取消日程
 */
async function cancelOapiCalendarV2EventEx(request: CancelOapiCalendarV2EventRequest, runtime: Util.RuntimeOptions): CancelOapiCalendarV2EventResponse {
  Util.validateModel(request);
  var appParams = Util.stringifyMapValue(Util.toMap(request.params));
  return doRequestOApi('POST', '/topapi/calendar/v2/event/cancel', request.headers, appParams, runtime);
}

model UpdateOapiCalendarV2AttendeeParams = {
  calendarId: string(description='日历id,目前仅支持传primary，表示修改的是“我的日程”下的日程', maxLength=64, name='calendar_id'),
  eventId: string(description='加密后的日程Id', maxLength=64, name='event_id'),
  attendees: [
    {
      attendeeStatus: string(description='添加或者删除状态，add:添加；remove:删除', maxLength=32, name='attendee_status'),
      userid: string(description='员工工号', maxLength=64, name='userid'),
    }
  ](description='参与者列表', maxItems=20, name='attendees'),
  agentid?: int64(description='开放平台应用对应的AgentId', name='agentid'),
}

model UpdateOapiCalendarV2AttendeeRequest = {
  headers?: map[string]string,
  params:UpdateOapiCalendarV2AttendeeParams,
}

model UpdateOapiCalendarV2AttendeeResponseBody = {
  errcode?: int64(description='错误编码', name='errcode'),
  errmsg?: string(description='错误信息', name='errmsg'),
  success?: boolean(description='结果是否正确', name='success'),
}

model UpdateOapiCalendarV2AttendeeResponse = {
  headers: map[string]string,
  body: UpdateOapiCalendarV2AttendeeResponseBody,
}

/**
 * Description: 日程2.0参与者修改
 */
async function updateOapiCalendarV2Attendee(request: UpdateOapiCalendarV2AttendeeRequest): UpdateOapiCalendarV2AttendeeResponse {
  var runtime = new Util.RuntimeOptions{};
  return updateOapiCalendarV2AttendeeEx(request, runtime);
}

/**
 * Description: 日程2.0参与者修改
 */
async function updateOapiCalendarV2AttendeeEx(request: UpdateOapiCalendarV2AttendeeRequest, runtime: Util.RuntimeOptions): UpdateOapiCalendarV2AttendeeResponse {
  Util.validateModel(request);
  var appParams = Util.stringifyMapValue(Util.toMap(request.params));
  return doRequestOApi('POST', '/topapi/calendar/v2/attendee/update', request.headers, appParams, runtime);
}

model PlaybackOapiLiveParams = {
  request: {
    startTime?: string(description='直播开始时间', pattern='\\\\d{4}[-]\\\\d{1,2}[-]\\\\d{1,2}[T]\\\\d{2}:\\\\d{2}:\\\\d{2}[Z]', name='start_time'),
    pageSize?: int64(description='直播结束时间', name='page_size'),
    offset?: int64(description='页面大小', name='offset'),
    endTime?: string(description='偏移量', pattern='\\\\d{4}[-]\\\\d{1,2}[-]\\\\d{1,2}[T]\\\\d{2}:\\\\d{2}:\\\\d{2}[Z]', name='end_time'),
  }(description='回放查询请求model', name='request'),
}

model PlaybackOapiLiveRequest = {
  headers?: map[string]string,
  params:PlaybackOapiLiveParams,
}

model PlaybackOapiLiveResponseBody = {
  result?: {
    hasMore?: boolean(description='是否还有', name='has_more'),
    offset?: int64(description='偏移量', name='offset'),
    pageSize?: int64(description='页面大小', name='page_size'),
    allCount?: int64(description='结果总数', name='all_count'),
    playBackList?: [
      {
        totalViewCount?: int64(description='总共访问次数,PV', name='total_view_count'),
        totalJoinCount?: int64(description='总共参加人数,UV', name='total_join_count'),
        playbackUrl?: string(description='回放地址', name='playback_url'),
        timeLength?: int64(description='直播时长', name='time_length'),
        endTime?: string(description='直播结束时间', pattern='\\\\d{4}[-]\\\\d{1,2}[-]\\\\d{1,2}[T]\\\\d{2}:\\\\d{2}:\\\\d{2}[Z]', name='end_time'),
        startTime?: string(description='直播开始时间', pattern='\\\\d{4}[-]\\\\d{1,2}[-]\\\\d{1,2}[T]\\\\d{2}:\\\\d{2}:\\\\d{2}[Z]', name='start_time'),
        uuid?: string(description='直播UUID', name='uuid'),
        landScape?: boolean(description='横竖屏: false 竖屏, true 横屏(默认)', name='land_scape'),
        coverUrl?: string(description='封面图', name='cover_url'),
        shared?: boolean(description='直播可观看类型: false 受限制的直播, true 公开的直播(默认)', name='shared'),
        intro?: string(description='简介', name='intro'),
        title?: string(description='标题', name='title'),
        userNick?: string(description='别名', name='user_nick'),
        userid?: string(description='主播ID', name='userid'),
      }
    ](description='分页查询结果', name='play_back_list'),
  }(description='回放查询响应model', name='result'),
  errcode?: int64(description='错误码', name='errcode'),
  errmsg?: string(description='错误描述', name='errmsg'),
}

model PlaybackOapiLiveResponse = {
  headers: map[string]string,
  body: PlaybackOapiLiveResponseBody,
}

/**
 * Description: 提供ISV开放回访获取能力：ISV通过该接口调用，根据直播的开始和结束时间，分页获取到所有的直播回放信息。
 */
async function playbackOapiLive(request: PlaybackOapiLiveRequest): PlaybackOapiLiveResponse {
  var runtime = new Util.RuntimeOptions{};
  return playbackOapiLiveEx(request, runtime);
}

/**
 * Description: 提供ISV开放回访获取能力：ISV通过该接口调用，根据直播的开始和结束时间，分页获取到所有的直播回放信息。
 */
async function playbackOapiLiveEx(request: PlaybackOapiLiveRequest, runtime: Util.RuntimeOptions): PlaybackOapiLiveResponse {
  Util.validateModel(request);
  var appParams = Util.stringifyMapValue(Util.toMap(request.params));
  return doRequestOApi('POST', '/topapi/live/playback', request.headers, appParams, runtime);
}

model QueryOapiMiniappMiniappversionParams = {
  modelKey: string(description='查询参数', name='model_key'),
}

model QueryOapiMiniappMiniappversionRequest = {
  headers?: map[string]string,
  params:QueryOapiMiniappMiniappversionParams,
}

model QueryOapiMiniappMiniappversionResponseBody = {
  data?: {
    gmtModified?: int64(description='更新时间', name='gmt_modified'),
    gmtCreate?: int64(description='更新时间', name='gmt_create'),
    instId?: int64(description='租户ID', name='inst_id'),
    rollbackTime?: int64(description='回滚时间', name='rollback_time'),
    auditFinishTime?: int64(description='审核结束时间', name='audit_finish_time'),
    id?: int64(description='ID', name='id'),
    expVersion?: int64(description='过期版本', name='exp_version'),
    description?: string(description='描述', name='description'),
    grayStrategy?: string(description='灰度策略', name='gray_strategy'),
    templateExtra?: string(description='模板拓展参数', name='template_extra'),
    version?: string(description='版本', name='version'),
    packageUrl?: string(description='包地址', name='package_url'),
    buildSource?: string(description='构建源', name='build_source'),
    pid?: string(description='商户ID', name='pid'),
    status?: string(description='状态', name='status'),
    appId?: string(description='应用ID', name='appId'),
    subStatus?: string(description='子状态', name='sub_status'),
    extraInfo?: string(description='扩展信息', name='extra_info'),
    offlineTime?: int64(description='下线时间', name='offline_time'),
    shelfTime?: int64(description='上架时间', name='shelf_time'),
    grayStartTime?: int64(description='灰度开始时间', name='gray_start_time'),
    auditSubmitTime?: int64(description='审核提交时间', name='audit_submit_time'),
    clientType?: int64(description='客户端类型', name='client_type'),
    isDeleted?: int64(description='isDeleted', name='is_deleted'),
  }(description='返回的数据实体', name='data'),
  errcode?: int64(description='errcode', name='errcode'),
  errmsg?: string(description='errmsg', name='errmsg'),
}

model QueryOapiMiniappMiniappversionResponse = {
  headers: map[string]string,
  body: QueryOapiMiniappMiniappversionResponseBody,
}

/**
 * Description: 通过主键 id 查询 MiniAppVersion 记录
 */
async function queryOapiMiniappMiniappversion(request: QueryOapiMiniappMiniappversionRequest): QueryOapiMiniappMiniappversionResponse {
  var runtime = new Util.RuntimeOptions{};
  return queryOapiMiniappMiniappversionEx(request, runtime);
}

/**
 * Description: 通过主键 id 查询 MiniAppVersion 记录
 */
async function queryOapiMiniappMiniappversionEx(request: QueryOapiMiniappMiniappversionRequest, runtime: Util.RuntimeOptions): QueryOapiMiniappMiniappversionResponse {
  Util.validateModel(request);
  var appParams = Util.stringifyMapValue(Util.toMap(request.params));
  return doRequestOApi('POST', '/topapi/miniapp/miniappversion/query', request.headers, appParams, runtime);
}

model CreateOapiLiveParams = {
  request: {
    userid: string(description='主播ID,必填', name='userid'),
    userNick?: string(description='别名,选填', name='user_nick'),
    title: string(description='标题,必填', name='title'),
    intro?: string(description='简介,选填', name='intro'),
    shared?: boolean(description='直播可观看类型类型,必填: false 受限制的直播, true 公开的直播(默认)', name='shared'),
    coverUrl?: string(description='封面图,选填: 如果不填写, 则采用默认', name='cover_url'),
    landScape?: boolean(description='横竖屏,选填: false 竖屏, true 横屏(默认)', name='land_scape'),
    apptBeginTime?: string(description='直播计划开始时间,选填: 如果不填写, 则取当前时间', pattern='\\\\d{4}[-]\\\\d{1,2}[-]\\\\d{1,2}[T]\\\\d{2}:\\\\d{2}:\\\\d{2}[Z]', name='appt_begin_time'),
    apptEndTime?: string(description='直播计划结束时间,选填', pattern='\\\\d{4}[-]\\\\d{1,2}[-]\\\\d{1,2}[T]\\\\d{2}:\\\\d{2}:\\\\d{2}[Z]', name='appt_end_time'),
    preVideoPlayUrl?: string(description='预告视频Url,选填', name='pre_video_play_url'),
  }(description='直播创建请求model', name='request'),
}

model CreateOapiLiveRequest = {
  headers?: map[string]string,
  params:CreateOapiLiveParams,
}

model CreateOapiLiveResponseBody = {
  result?: {
    playbackUrl?: string(description='直播回放地址', name='playback_url'),
    liveUrlHls?: string(description='原始HLS直播地址', name='live_url_hls'),
    liveUrlExt?: {
      liveUrlHigh?: string(description='播放地址flv,超清-720p', name='live_url_high'),
      liveUrlNormal?: string(description='播放地址flv,高清-480p', name='live_url_normal'),
      liveUrlLow?: string(description='播放地址flv,标清-360p', name='live_url_low'),
      liveUrlVeryLow?: string(description='播放地址flv,流畅', name='live_url_very_low'),
      liveUrlUltraLow?: string(description='播放地址flv,极速', name='live_url_ultra_low'),
    }(description='转码直播地址', name='live_url_ext'),
    liveUrl?: string(description='原始直播地址', name='live_url'),
    inputStreamUrl?: string(description='推流地址', name='input_stream_url'),
    appointmentTime?: string(description='预约直播时间', pattern='\\\\d{4}[-]\\\\d{1,2}[-]\\\\d{1,2}[T]\\\\d{2}:\\\\d{2}:\\\\d{2}[Z]', name='appointment_time'),
    uuid?: string(description='直播UUID', name='uuid'),
  }(description='直播创建响应model', name='result'),
  errcode?: int64(description='错误码', name='errcode'),
  errmsg?: string(description='错误描述', name='errmsg'),
}

model CreateOapiLiveResponse = {
  headers: map[string]string,
  body: CreateOapiLiveResponseBody,
}

/**
 * Description: 提供ISV开放直播创建能力：ISV通过该接口调用，提供直播的基本信息，在钉钉创建直播，并获取到直播的推流地址。
 */
async function createOapiLive(request: CreateOapiLiveRequest): CreateOapiLiveResponse {
  var runtime = new Util.RuntimeOptions{};
  return createOapiLiveEx(request, runtime);
}

/**
 * Description: 提供ISV开放直播创建能力：ISV通过该接口调用，提供直播的基本信息，在钉钉创建直播，并获取到直播的推流地址。
 */
async function createOapiLiveEx(request: CreateOapiLiveRequest, runtime: Util.RuntimeOptions): CreateOapiLiveResponse {
  Util.validateModel(request);
  var appParams = Util.stringifyMapValue(Util.toMap(request.params));
  return doRequestOApi('POST', '/topapi/live/create', request.headers, appParams, runtime);
}

model ListOapiRhinoHumanresEmployeeProductionteamParams = {
  queryEmployeeProductionTeamParam?: {
    uicIds?: [ int64 ](description='uicic 列表', maxItems=500, name='uic_ids'),
    tenantId?: string(description='资产ID', name='tenant_id'),
    userid?: string(description='userid', name='userid'),
  }(description='查询参数', name='query_employee_production_team_param'),
}

model ListOapiRhinoHumanresEmployeeProductionteamRequest = {
  headers?: map[string]string,
  params?:ListOapiRhinoHumanresEmployeeProductionteamParams,
}

model ListOapiRhinoHumanresEmployeeProductionteamResponseBody = {
  statusCode?: int64(description='status_code', name='status_code'),
  success?: boolean(description='是否成功', name='success'),
  errcode?: int64(description='errcode', name='errcode'),
  corpEmployeeInfo?: [
    {
      workStatus?: int64(description='工作状态', name='work_status'),
      hireDate?: string(description='入职日期', pattern='\\\\d{4}[-]\\\\d{1,2}[-]\\\\d{1,2}[T]\\\\d{2}:\\\\d{2}:\\\\d{2}[Z]', name='hire_date'),
      corpId?: string(description='企业ID', name='corp_id'),
      dingtalkUserId?: string(description='企业下钉钉员工ID', name='dingtalk_user_id'),
      mobile?: string(description='手机号', name='mobile'),
      uicId?: int64(description='uicId', name='uic_id'),
      dingtalkNo?: string(description='全局钉钉员工ID', name='dingtalk_no'),
      workNo?: string(description='工号', name='work_no'),
      bucId?: int64(description='bucId', name='buc_id'),
      imgUrl?: string(description='头像地址', name='img_url'),
      productionTeamList?: [
        {
          capacityType?: string(description='产能类型', name='capacity_type'),
          productionTeamName?: string(description='生产组名称', name='production_team_name'),
          modifier?: string(description='modifier', name='modifier'),
          deleted?: boolean(description='是否删除', name='deleted'),
          empNum?: int64(description='员工数量', name='emp_num'),
          tenantId?: string(description='资产ID', name='tenant_id'),
          bizId?: string(description='生产组业务ID', name='biz_id'),
          productionTeamCode?: string(description='生产组code', name='production_team_code'),
          groupCode?: string(description='分组code', name='group_code'),
        }
      ](description='拥有的生产组', name='production_team_list'),
      name?: string(description='姓名', name='name'),
      tenantId?: string(description='资产ID', name='tenant_id'),
      buMail?: string(description='部门邮箱', name='bu_mail'),
      id?: int64(description='主键ID', name='id'),
      departureDate?: string(description='离职日期', pattern='\\\\d{4}[-]\\\\d{1,2}[-]\\\\d{1,2}[T]\\\\d{2}:\\\\d{2}:\\\\d{2}[Z]', name='departure_date'),
      job?: string(description='职位', name='job'),
      status?: int64(description='状态', name='status'),
    }
  ](description='员工信息', name='corp_employee_info'),
  errmsg?: string(description='错误信息', name='errmsg'),
  externalMsgInfo?: string(description='扩展信息', name='external_msg_info'),
}

model ListOapiRhinoHumanresEmployeeProductionteamResponse = {
  headers: map[string]string,
  body: ListOapiRhinoHumanresEmployeeProductionteamResponseBody,
}

/**
 * Description: 通过租户ID和UICID批量查询生产组
 */
async function listOapiRhinoHumanresEmployeeProductionteam(request: ListOapiRhinoHumanresEmployeeProductionteamRequest): ListOapiRhinoHumanresEmployeeProductionteamResponse {
  var runtime = new Util.RuntimeOptions{};
  return listOapiRhinoHumanresEmployeeProductionteamEx(request, runtime);
}

/**
 * Description: 通过租户ID和UICID批量查询生产组
 */
async function listOapiRhinoHumanresEmployeeProductionteamEx(request: ListOapiRhinoHumanresEmployeeProductionteamRequest, runtime: Util.RuntimeOptions): ListOapiRhinoHumanresEmployeeProductionteamResponse {
  Util.validateModel(request);
  var appParams = Util.stringifyMapValue(Util.toMap(request.params));
  return doRequestOApi('POST', '/topapi/rhino/humanres/employee/productionteam/list', request.headers, appParams, runtime);
}

model QueryOapiLiveParams = {
  request: {
    uuid: string(description='直播UUID,必填', name='uuid'),
  }(description='直播查询请求model', name='request'),
}

model QueryOapiLiveRequest = {
  headers?: map[string]string,
  params:QueryOapiLiveParams,
}

model QueryOapiLiveResponseBody = {
  result?: {
    totalViewCount?: int64(description='总共访问次数,PV', name='total_view_count'),
    totalJoinCount?: int64(description='总共参加人数,UV', name='total_join_count'),
    playbackUrl?: string(description='直播回放地址', name='playback_url'),
    liveUrlHls?: string(description='原始HLS直播地址', name='live_url_hls'),
    liveUrlExt?: {
      liveUrlHigh?: string(description='播放地址flv,超清-720p', name='live_url_high'),
      liveUrlNormal?: string(description='播放地址flv,高清-480p', name='live_url_normal'),
      liveUrlLow?: string(description='播放地址flv,标清-360p', name='live_url_low'),
      liveUrlVeryLow?: string(description='播放地址flv,流畅', name='live_url_very_low'),
      liveUrlUltraLow?: string(description='播放地址flv,极速', name='live_url_ultra_low'),
    }(description='转码直播地址', name='live_url_ext'),
    liveUrl?: string(description='原始直播地址', name='live_url'),
    inputStreamUrl?: string(description='推流地址', name='input_stream_url'),
    timeLength?: int64(description='直播时长', name='time_length'),
    endTime?: string(description='直播结束时间', pattern='\\\\d{4}[-]\\\\d{1,2}[-]\\\\d{1,2}[T]\\\\d{2}:\\\\d{2}:\\\\d{2}[Z]', name='end_time'),
    startTime?: string(description='直播开始时间', pattern='\\\\d{4}[-]\\\\d{1,2}[-]\\\\d{1,2}[T]\\\\d{2}:\\\\d{2}:\\\\d{2}[Z]', name='start_time'),
    status?: int64(description='直播间状态:0 预告, 1 直播中, 2 直播结束', name='status'),
    appointmentTime?: string(description='预约直播时间', pattern='\\\\d{4}[-]\\\\d{1,2}[-]\\\\d{1,2}[T]\\\\d{2}:\\\\d{2}:\\\\d{2}[Z]', name='appointment_time'),
    uuid?: string(description='直播UUID', name='uuid'),
    preVideoPlayUrl?: string(description='预告视频Url', name='pre_video_play_url'),
    apptEndTime?: string(description='直播计划结束时间', pattern='\\\\d{4}[-]\\\\d{1,2}[-]\\\\d{1,2}[T]\\\\d{2}:\\\\d{2}:\\\\d{2}[Z]', name='appt_end_time'),
    apptBeginTime?: string(description='直播计划开始时间', pattern='\\\\d{4}[-]\\\\d{1,2}[-]\\\\d{1,2}[T]\\\\d{2}:\\\\d{2}:\\\\d{2}[Z]', name='appt_begin_time'),
    landScape?: boolean(description='横竖屏:false 竖屏, true 横屏(默认)', name='land_scape'),
    coverUrl?: string(description='封面图,16:9长宽比', name='cover_url'),
    shared?: boolean(description='直播可观看类型类型:false 受限制的直播, true 公开的直播(默认)', name='shared'),
    intro?: string(description='简介', name='intro'),
    title?: string(description='标题', name='title'),
    userNick?: string(description='别名', name='user_nick'),
    userid?: string(description='主播ID', name='userid'),
  }(description='直播查询响应model', name='result'),
  errcode?: int64(description='错误码', name='errcode'),
  errmsg?: string(description='错误描述', name='errmsg'),
}

model QueryOapiLiveResponse = {
  headers: map[string]string,
  body: QueryOapiLiveResponseBody,
}

/**
 * Description: 提供ISV开放直播查询能力：ISV通过该接口调用，根据直播uuid获取直播的详细信息。
 */
async function queryOapiLive(request: QueryOapiLiveRequest): QueryOapiLiveResponse {
  var runtime = new Util.RuntimeOptions{};
  return queryOapiLiveEx(request, runtime);
}

/**
 * Description: 提供ISV开放直播查询能力：ISV通过该接口调用，根据直播uuid获取直播的详细信息。
 */
async function queryOapiLiveEx(request: QueryOapiLiveRequest, runtime: Util.RuntimeOptions): QueryOapiLiveResponse {
  Util.validateModel(request);
  var appParams = Util.stringifyMapValue(Util.toMap(request.params));
  return doRequestOApi('POST', '/topapi/live/query', request.headers, appParams, runtime);
}

model GetOapiRhinoHumanresCorpemployeeParams = {
  queryCorpEmployeeParam?: {
    workNo?: string(description='工号', name='work_no'),
    tenantId?: string(description='资产ID', name='tenant_id'),
    userid?: string(description='员工ID', name='userid'),
  }(description='查询员工入参', name='query_corp_employee_param'),
}

model GetOapiRhinoHumanresCorpemployeeRequest = {
  headers?: map[string]string,
  params?:GetOapiRhinoHumanresCorpemployeeParams,
}

model GetOapiRhinoHumanresCorpemployeeResponseBody = {
  statusCode?: int64(description='status_code', name='status_code'),
  success?: boolean(description='是否成功', name='success'),
  errcode?: int64(description='错误码', name='errcode'),
  corpEmployeeInfo?: {
    workStatus?: int64(description='工作状态', name='work_status'),
    hireDate?: string(description='入职日期', pattern='\\\\d{4}[-]\\\\d{1,2}[-]\\\\d{1,2}[T]\\\\d{2}:\\\\d{2}:\\\\d{2}[Z]', name='hire_date'),
    corpId?: string(description='企业ID', name='corp_id'),
    dingtalkUserId?: string(description='钉钉企业下员工ID', name='dingtalk_user_id'),
    mobile?: string(description='手机号', name='mobile'),
    uicId?: int64(description='uic ID', name='uic_id'),
    dingtalkNo?: string(description='钉钉全局员工ID', name='dingtalk_no'),
    workNo?: string(description='工号', name='work_no'),
    bucId?: int64(description='buc ID', name='buc_id'),
    imgUrl?: string(description='头像', name='img_url'),
    name?: string(description='姓名', name='name'),
    buMail?: string(description='部门邮箱', name='bu_mail'),
    id?: int64(description='主键ID', name='id'),
    departureDate?: string(description='离职日期', pattern='\\\\d{4}[-]\\\\d{1,2}[-]\\\\d{1,2}[T]\\\\d{2}:\\\\d{2}:\\\\d{2}[Z]', name='departure_date'),
    job?: string(description='职位', name='job'),
    status?: int64(description='状态', name='status'),
  }(description='员工详情', name='corp_employee_info'),
  errmsg?: string(description='message', name='errmsg'),
  externalMsgInfo?: string(description='扩展信息', name='external_msg_info'),
}

model GetOapiRhinoHumanresCorpemployeeResponse = {
  headers: map[string]string,
  body: GetOapiRhinoHumanresCorpemployeeResponseBody,
}

/**
 * Description: 获员工信息
 */
async function getOapiRhinoHumanresCorpemployee(request: GetOapiRhinoHumanresCorpemployeeRequest): GetOapiRhinoHumanresCorpemployeeResponse {
  var runtime = new Util.RuntimeOptions{};
  return getOapiRhinoHumanresCorpemployeeEx(request, runtime);
}

/**
 * Description: 获员工信息
 */
async function getOapiRhinoHumanresCorpemployeeEx(request: GetOapiRhinoHumanresCorpemployeeRequest, runtime: Util.RuntimeOptions): GetOapiRhinoHumanresCorpemployeeResponse {
  Util.validateModel(request);
  var appParams = Util.stringifyMapValue(Util.toMap(request.params));
  return doRequestOApi('POST', '/topapi/rhino/humanres/corpemployee/get', request.headers, appParams, runtime);
}

model GetOapiRhinoCooperationCarrierParams = {
  tenantId?: string(description='租户id', name='tenant_id'),
  carrierId?: int64(description='载具id', name='carrier_id'),
  userid?: string(description='业务参数[这里先预留],这里是用户ID,比如钉钉用户ID', name='userid'),
}

model GetOapiRhinoCooperationCarrierRequest = {
  headers?: map[string]string,
  params?:GetOapiRhinoCooperationCarrierParams,
}

model GetOapiRhinoCooperationCarrierResponseBody = {
  success?: boolean(description='是否成功', name='success'),
  model?: {
    carrierName?: string(description='载具名称', name='carrier_name'),
    carrierCode?: string(description='载具code', name='carrier_code'),
    carrierType?: int64(description='载具类型', name='carrier_type'),
    tenantId?: string(description='租户id', name='tenant_id'),
    carrierId?: int64(description='载具id', name='carrier_id'),
    carrierTypeName?: string(description='载具类型名称', name='carrier_type_name'),
    enabled?: boolean(description='是否可用', name='enabled'),
    status?: int64(description='状态', name='status'),
  }(description='返回数据', name='model'),
  errmsg?: string(description='错误信息', name='errmsg'),
  externalMsgInfo?: string(description='扩展信息', name='external_msg_info'),
  errcode?: int64(description='错误码', name='errcode'),
}

model GetOapiRhinoCooperationCarrierResponse = {
  headers: map[string]string,
  body: GetOapiRhinoCooperationCarrierResponseBody,
}

/**
 * Description: 通过载具id获取载具详情
 */
async function getOapiRhinoCooperationCarrier(request: GetOapiRhinoCooperationCarrierRequest): GetOapiRhinoCooperationCarrierResponse {
  var runtime = new Util.RuntimeOptions{};
  return getOapiRhinoCooperationCarrierEx(request, runtime);
}

/**
 * Description: 通过载具id获取载具详情
 */
async function getOapiRhinoCooperationCarrierEx(request: GetOapiRhinoCooperationCarrierRequest, runtime: Util.RuntimeOptions): GetOapiRhinoCooperationCarrierResponse {
  Util.validateModel(request);
  var appParams = Util.stringifyMapValue(Util.toMap(request.params));
  return doRequestOApi('POST', '/topapi/rhino/cooperation/carrier/get', request.headers, appParams, runtime);
}

model GetOapiAtsJobParams = {
  bizCode: string(description='业务唯一标识，接入前请提前沟通', name='biz_code'),
  jobId: string(description='职位唯一标识', name='job_id'),
}

model GetOapiAtsJobRequest = {
  headers?: map[string]string,
  params:GetOapiAtsJobParams,
}

model GetOapiAtsJobResponseBody = {
  errcode?: int64(description='错误码', name='errcode'),
  errmsg?: string(description='错误信息', name='errmsg'),
  result?: {
    headCount?: int64(description='招募人数', name='head_count'),
    address?: {
      latitude?: string(description='经度', name='latitude'),
      longitude?: string(description='纬度', name='longitude'),
      detail?: string(description='地点详情', name='detail'),
      name?: string(description='地点名', name='name'),
    }(description='职位地址详情', name='address'),
    district?: string(description='职位地址 区/县', name='district'),
    city?: string(description='职位地址 市', name='city'),
    province?: string(description='职位地址 升', name='province'),
    maxSalary?: int64(description='最高薪水，单位元', name='max_salary'),
    minSalary?: int64(description='最低薪水，单位元', name='min_salary'),
    salaryNegotiable?: boolean(description='是否薪资面议', name='salary_negotiable'),
    description?: string(description='职位描述', name='description'),
    requiredEdu?: int64(description='1小学 2初中 3高中 4中专 5大专 6本科 7硕士 8 博士 9其他', name='required_edu'),
    jobCode?: string(description='职位编码', name='job_code'),
    jobId?: string(description='职位唯一标识', name='job_id'),
    corpid?: string(description='企业id', name='corpid'),
    name?: string(description='职位名称', name='name'),
    salaryPeriod?: string(description='薪资类型，HOUR:小时，DAY:天，WEEK:周，MONTH:月，BY_TIME:次', name='salary_period'),
    salaryMonth?: int64(description='薪资月数', name='salary_month'),
    category?: string(description='职位分类', name='category'),
    campus?: boolean(description='true :校招，false：社招', name='campus'),
    jobNature?: string(description='职位类型：FULL-TIME:全职，PART-TIME:兼职，INTERNSHIP:实习，OTHER:其他', name='job_nature'),
    maxJobExperience?: int64(description='最高工作年限', name='max_job_experience'),
    minJobExperience?: int64(description='最低工作年限', name='min_job_experience'),
    mainDeptId?: int64(description='职位部门id', name='main_dept_id'),
    tags?: [ string ](description='职位标签', name='tags'),
  }(description='职位结果', name='result'),
}

model GetOapiAtsJobResponse = {
  headers: map[string]string,
  body: GetOapiAtsJobResponseBody,
}

/**
 * Description: 招聘平台，获取职位信息
 */
async function getOapiAtsJob(request: GetOapiAtsJobRequest): GetOapiAtsJobResponse {
  var runtime = new Util.RuntimeOptions{};
  return getOapiAtsJobEx(request, runtime);
}

/**
 * Description: 招聘平台，获取职位信息
 */
async function getOapiAtsJobEx(request: GetOapiAtsJobRequest, runtime: Util.RuntimeOptions): GetOapiAtsJobResponse {
  Util.validateModel(request);
  var appParams = Util.stringifyMapValue(Util.toMap(request.params));
  return doRequestOApi('POST', '/topapi/ats/job/get', request.headers, appParams, runtime);
}

model GetOapiRhinoDeviceUniquecodeParams = {
  uniqueCode: string(description='设备uniqueCode', name='unique_code'),
  userid?: string(description='业务参数[这里先预留],这里是用户ID,比如钉钉用户ID', name='userid'),
}

model GetOapiRhinoDeviceUniquecodeRequest = {
  headers?: map[string]string,
  params:GetOapiRhinoDeviceUniquecodeParams,
}

model GetOapiRhinoDeviceUniquecodeResponseBody = {
  success?: boolean(description='是否成功', name='success'),
  model?: {
    supplierSn?: string(description='厂商SN', name='supplier_sn'),
    deleted?: boolean(description='是否已删除', name='deleted'),
    instanceId?: string(description='设备instanceId', name='instance_id'),
    modelId?: int64(description='行业设备型号id', name='model_id'),
    globalModelId?: string(description='行业设备型号', name='global_model_id'),
    tenantId?: string(description='租户id', name='tenant_id'),
    attributes?: string(description='属性值', name='attributes'),
    id?: int64(description='设备id', name='id'),
    supplierModelId?: int64(description='厂商设备型号id', name='supplier_model_id'),
    version?: string(description='版本', name='version'),
  }(description='返回数据', name='model'),
  errmsg?: string(description='错误信息', name='errmsg'),
  externalMsgInfo?: string(description='扩展信息', name='external_msg_info'),
  errcode?: int64(description='错误码', name='errcode'),
}

model GetOapiRhinoDeviceUniquecodeResponse = {
  headers: map[string]string,
  body: GetOapiRhinoDeviceUniquecodeResponseBody,
}

/**
 * Description: 通过uniqueCode获取设备信息
 */
async function getOapiRhinoDeviceUniquecode(request: GetOapiRhinoDeviceUniquecodeRequest): GetOapiRhinoDeviceUniquecodeResponse {
  var runtime = new Util.RuntimeOptions{};
  return getOapiRhinoDeviceUniquecodeEx(request, runtime);
}

/**
 * Description: 通过uniqueCode获取设备信息
 */
async function getOapiRhinoDeviceUniquecodeEx(request: GetOapiRhinoDeviceUniquecodeRequest, runtime: Util.RuntimeOptions): GetOapiRhinoDeviceUniquecodeResponse {
  Util.validateModel(request);
  var appParams = Util.stringifyMapValue(Util.toMap(request.params));
  return doRequestOApi('POST', '/topapi/rhino/device/uniquecode/get', request.headers, appParams, runtime);
}

model AddOapiAtsJobDeliverParams = {
  bizCode: string(description='业务唯一标识，接入前请提前沟通', name='biz_code'),
  deliverStatus: string(description='投递中:created,投递失败:fail,投递成功:success,已下架:off_shelf', name='deliver_status'),
  deliverChannel: string(description='投递渠道, 接入前请提前沟通', name='deliver_channel'),
  jobId: string(description='智能招聘职位id', name='job_id'),
  deliverOuterId?: string(description='渠道中的一次职位外投的唯一id，如需要更新deliver_status该入参必传', name='deliver_outer_id'),
  deliverMsg?: string(description='失败原因', name='deliver_msg'),
}

model AddOapiAtsJobDeliverRequest = {
  headers?: map[string]string,
  params:AddOapiAtsJobDeliverParams,
}

model AddOapiAtsJobDeliverResponseBody = {
  deliverId?: string(description='投递id', name='deliver_id'),
  errmsg?: string(description='错误信息', name='errmsg'),
  errcode?: int64(description='错误码', name='errcode'),
}

model AddOapiAtsJobDeliverResponse = {
  headers: map[string]string,
  body: AddOapiAtsJobDeliverResponseBody,
}

/**
 * Description: 招聘平台，新增职位投递信息
 */
async function addOapiAtsJobDeliver(request: AddOapiAtsJobDeliverRequest): AddOapiAtsJobDeliverResponse {
  var runtime = new Util.RuntimeOptions{};
  return addOapiAtsJobDeliverEx(request, runtime);
}

/**
 * Description: 招聘平台，新增职位投递信息
 */
async function addOapiAtsJobDeliverEx(request: AddOapiAtsJobDeliverRequest, runtime: Util.RuntimeOptions): AddOapiAtsJobDeliverResponse {
  Util.validateModel(request);
  var appParams = Util.stringifyMapValue(Util.toMap(request.params));
  return doRequestOApi('POST', '/topapi/ats/job/deliver/add', request.headers, appParams, runtime);
}

model CollectOapiAtsRpaResumeMailParams = {
  param: {
    originMail?: {
      fromMailAddress?: string(description='发件人邮件地址，可选', name='from_mail_address'),
      bodyHtml?: string(description='邮件正文，可选', name='body_html'),
      title?: string(description='邮件标题，可选', name='title'),
      mailAddress?: string(description='邮件地址，可选', name='mail_address'),
      fromMailAlias?: string(description='发件人姓名', name='from_mail_alias'),
    }(description='原始邮件信息，可选', name='origin_mail'),
    resumeFile?: {
      downloadUrl?: string(description='下载地址', name='download_url'),
      fileType?: string(description='文件类型', name='file_type'),
      fileName?: string(description='文件名，需要带后缀', name='file_name'),
    }(description='简历文件信息', name='resume_file'),
    channel: string(description='渠道来源，接入前请提前沟通', name='channel'),
    matchedJobs?: [ string ](description='匹配到的职位列表', maxItems=999, name='matched_jobs'),
    resumeDetailInfo?: {
      name?: string(description='姓名，必传', name='name'),
      phoneNum?: string(description='电话，必传', name='phone_num'),
      email?: string(description='邮箱地址', name='email'),
      sex?: string(description='男性，女性', name='sex'),
      birth?: string(description='出生日期', name='birth'),
      graduateTime?: string(description='毕业时间', name='graduate_time'),
      beginWorkTime?: string(description='开始工作时间', name='begin_work_time'),
      nationality?: string(description='国籍', name='nationality'),
      married?: string(description='已婚，未婚，离婚', name='married'),
      nativePlace?: string(description='籍贯', name='native_place'),
      nowLocation?: string(description='先居住地', name='now_location'),
      forwardLocation?: string(description='期望工作地', name='forward_location'),
      school?: string(description='毕业院校', name='school'),
      education?: string(description='小学，初中，高中，中专，大专，本科，硕士，博士，其他', name='education'),
      advancedDegree?: string(description='学位', name='advanced_degree'),
      studentType?: string(description='学历情况', name='student_type'),
      schoolType?: string(description='学校类别', name='school_type'),
      speciality?: string(description='专业', name='speciality'),
      salary?: string(description='当前薪资', name='salary'),
      aimSalary?: string(description='期望薪资', name='aim_salary'),
      titleStandard?: string(description='职位名称', name='title_standard'),
      vocationStandard?: string(description='行业名称', name='vocation_standard'),
      political?: string(description='政治面貌', name='political'),
      jobStatus?: string(description='求职状态', name='job_status'),
      gradeOfEnglish?: string(description='英语等级', name='grade_of_english'),
      educationInfoList?: [
        {
          startDate?: string(description='开始时间', name='start_date'),
          endDate?: string(description='结束时间', name='end_date'),
          school?: string(description='学校名称', name='school'),
          speciality?: string(description='专业', name='speciality'),
          education?: string(description='学历', name='education'),
          summary?: string(description='详细介绍', name='summary'),
        }
      ](description='教育经历', maxItems=999, name='education_info_list'),
      experienceInfoList?: [
        {
          startDate?: string(description='开始时间', name='start_date'),
          endDate?: string(description='结束时间', name='end_date'),
          company?: string(description='公司名称', name='company'),
          title?: string(description='职位名称', name='title'),
          summary?: string(description='工作内容', name='summary'),
        }
      ](description='工作经历', maxItems=999, name='experience_info_list'),
      trainingInfoList?: [
        {
          startDate?: string(description='开始时间', name='start_date'),
          endDate?: string(description='结束时间', name='end_date'),
          trainingInstitution?: string(description='培训机构名称', name='training_institution'),
          certificate?: string(description='所获证书', name='certificate'),
          descriptionInDetails?: string(description='培训详情', name='description_in_details'),
        }
      ](description='培训经历', maxItems=999, name='training_info_list'),
      projectInfoList?: [
        {
          startDate?: string(description='开始时间', name='start_date'),
          endDate?: string(description='结束时间', name='end_date'),
          projectName?: string(description='项目名称', name='project_name'),
          projectDescription?: string(description='项目描述', name='project_description'),
        }
      ](description='项目经历', maxItems=999, name='project_info_list'),
    }(description='结构化的简历详情', name='resume_detail_info'),
  }(description='简历文件参数', name='param'),
  bizCode: string(description='业务唯一标识，接入前请提前沟通', name='biz_code'),
}

model CollectOapiAtsRpaResumeMailRequest = {
  headers?: map[string]string,
  params:CollectOapiAtsRpaResumeMailParams,
}

model CollectOapiAtsRpaResumeMailResponseBody = {
  errmsg?: string(description='错误信息', name='errmsg'),
  errcode?: int64(description='错误码', name='errcode'),
  result?: boolean(description='处理结果', name='result'),
}

model CollectOapiAtsRpaResumeMailResponse = {
  headers: map[string]string,
  body: CollectOapiAtsRpaResumeMailResponseBody,
}

/**
 * Description: 招聘平台，简历文件回流信息
 */
async function collectOapiAtsRpaResumeMail(request: CollectOapiAtsRpaResumeMailRequest): CollectOapiAtsRpaResumeMailResponse {
  var runtime = new Util.RuntimeOptions{};
  return collectOapiAtsRpaResumeMailEx(request, runtime);
}

/**
 * Description: 招聘平台，简历文件回流信息
 */
async function collectOapiAtsRpaResumeMailEx(request: CollectOapiAtsRpaResumeMailRequest, runtime: Util.RuntimeOptions): CollectOapiAtsRpaResumeMailResponse {
  Util.validateModel(request);
  var appParams = Util.stringifyMapValue(Util.toMap(request.params));
  return doRequestOApi('POST', '/topapi/ats/rpa/resume/mail/collect', request.headers, appParams, runtime);
}

model QueryOapiRhinoHumanresProcessStructuralClusterParams = {
  bizIdProcessList?: [ string ](description='1', maxItems=20, name='biz_id_process_list'),
  userid?: string(description='系统自动生成', name='userid'),
}

model QueryOapiRhinoHumanresProcessStructuralClusterRequest = {
  headers?: map[string]string,
  params?:QueryOapiRhinoHumanresProcessStructuralClusterParams,
}

model QueryOapiRhinoHumanresProcessStructuralClusterResponseBody = {
  hsfcode?: int64(description='code', name='hsfcode'),
  success?: boolean(description='是否成功', name='success'),
  model?: [
    {
      processStructuralCluster?: {
        stitch?: string(description='线迹', name='stitch'),
        part?: string(description='部件', name='part'),
        action?: string(description='动作', name='action'),
        position?: string(description='部位', name='position'),
        id?: int64(description='主键', name='id'),
        accessory?: string(description='辅料', name='accessory'),
      }(description='结构化工序详情', name='process_structural_cluster'),
      bizIdProcess?: string(description='工序id', name='biz_id_process'),
    }
  ](description='结构化工序关联dto', name='model'),
  errmsg?: string(description='message', name='errmsg'),
  errcode?: int64(description='1', name='errcode'),
  externalMsgInfo?: string(description='1', name='external_msg_info'),
}

model QueryOapiRhinoHumanresProcessStructuralClusterResponse = {
  headers: map[string]string,
  body: QueryOapiRhinoHumanresProcessStructuralClusterResponseBody,
}

/**
 * Description: 通过工序id获取工序结构化信息
 */
async function queryOapiRhinoHumanresProcessStructuralCluster(request: QueryOapiRhinoHumanresProcessStructuralClusterRequest): QueryOapiRhinoHumanresProcessStructuralClusterResponse {
  var runtime = new Util.RuntimeOptions{};
  return queryOapiRhinoHumanresProcessStructuralClusterEx(request, runtime);
}

/**
 * Description: 通过工序id获取工序结构化信息
 */
async function queryOapiRhinoHumanresProcessStructuralClusterEx(request: QueryOapiRhinoHumanresProcessStructuralClusterRequest, runtime: Util.RuntimeOptions): QueryOapiRhinoHumanresProcessStructuralClusterResponse {
  Util.validateModel(request);
  var appParams = Util.stringifyMapValue(Util.toMap(request.params));
  return doRequestOApi('POST', '/topapi/rhino/humanres/process/structural/cluster/query', request.headers, appParams, runtime);
}

model QueryOapiRhinoHumanresProductionteamParams = {
  queryProductionTeamParam?: {
    workshopSectionCode?: string(description='工段CODE', name='workshop_section_code'),
    tenantId?: string(description='资产ID', name='tenant_id'),
    startTime?: string(description='开始时间', pattern='\\\\d{4}[-]\\\\d{1,2}[-]\\\\d{1,2}[T]\\\\d{2}:\\\\d{2}:\\\\d{2}[Z]', name='start_time'),
    endTime?: string(description='结束时间', pattern='\\\\d{4}[-]\\\\d{1,2}[-]\\\\d{1,2}[T]\\\\d{2}:\\\\d{2}:\\\\d{2}[Z]', name='end_time'),
    userid?: string(description='预业务参数[这里先预留],这里是用户ID,比如钉钉用户ID', name='userid'),
  }(description='查询生产组入参', name='query_production_team_param'),
}

model QueryOapiRhinoHumanresProductionteamRequest = {
  headers?: map[string]string,
  params?:QueryOapiRhinoHumanresProductionteamParams,
}

model QueryOapiRhinoHumanresProductionteamResponseBody = {
  statusCode?: int64(description='status_code', name='status_code'),
  success?: boolean(description='是否成功', name='success'),
  errcode?: int64(description='errcode', name='errcode'),
  model?: [
    {
      workshopSectionCodeList?: [ string ](description='工段列表', name='workshop_section_code_list'),
      empList?: [
        {
          workStatus?: int64(description='在岗状态', name='work_status'),
          hireDate?: string(description='入职日期', pattern='\\\\d{4}[-]\\\\d{1,2}[-]\\\\d{1,2}[T]\\\\d{2}:\\\\d{2}:\\\\d{2}[Z]', name='hire_date'),
          dingtalkUserId?: string(description='企业下员工id', name='dingtalk_user_id'),
          uicId?: int64(description='uicId', name='uic_id'),
          dingtalkNo?: string(description='钉钉全局员工ID', name='dingtalk_no'),
          workNo?: string(description='工号', name='work_no'),
          bucId?: int64(description='BUC员工ID', name='buc_id'),
          imgUrl?: string(description='头像地址', name='img_url'),
          name?: string(description='姓名', name='name'),
          buMail?: string(description='部门邮箱', name='bu_mail'),
          departureDate?: string(description='离职日期', pattern='\\\\d{4}[-]\\\\d{1,2}[-]\\\\d{1,2}[T]\\\\d{2}:\\\\d{2}:\\\\d{2}[Z]', name='departure_date'),
          job?: string(description='职位', name='job'),
          status?: int64(description='状态', name='status'),
        }
      ](description='员工列表', name='empList'),
      empNum?: int64(description='拥有的员工数量', name='emp_num'),
      weekdayConfigList?: [
        {
          weekDay?: string(description='工作日', name='week_day'),
          startTime?: string(description='开始时间', pattern='\\\\d{4}[-]\\\\d{1,2}[-]\\\\d{1,2}[T]\\\\d{2}:\\\\d{2}:\\\\d{2}[Z]', name='start_time'),
          endTime?: string(description='结束时间', pattern='\\\\d{4}[-]\\\\d{1,2}[-]\\\\d{1,2}[T]\\\\d{2}:\\\\d{2}:\\\\d{2}[Z]', name='end_time'),
          type?: int64(description='类型', name='type'),
          productionTeamCode?: string(description='生产组code', name='production_team_code'),
          day?: int64(description='星期', name='day'),
        }
      ](description='工作日配置', name='weekday_config_list'),
      capacityType?: string(description='产能类型', name='capacity_type'),
      productionTeamName?: string(description='生产组名称', name='production_team_name'),
      tenantId?: string(description='资产ID', name='tenant_id'),
      bizId?: string(description='业务ID', name='biz_id'),
      id?: int64(description='系统自动生成', name='id'),
      productionTeamCode?: string(description='生产组code', name='production_team_code'),
      groupCode?: string(description='分组code', name='group_code'),
    }
  ](description='model', name='model'),
  errmsg?: string(description='message', name='errmsg'),
  externalMsgInfo?: string(description='扩展信息', name='external_msg_info'),
}

model QueryOapiRhinoHumanresProductionteamResponse = {
  headers: map[string]string,
  body: QueryOapiRhinoHumanresProductionteamResponseBody,
}

/**
 * Description: 查询生产组
 */
async function queryOapiRhinoHumanresProductionteam(request: QueryOapiRhinoHumanresProductionteamRequest): QueryOapiRhinoHumanresProductionteamResponse {
  var runtime = new Util.RuntimeOptions{};
  return queryOapiRhinoHumanresProductionteamEx(request, runtime);
}

/**
 * Description: 查询生产组
 */
async function queryOapiRhinoHumanresProductionteamEx(request: QueryOapiRhinoHumanresProductionteamRequest, runtime: Util.RuntimeOptions): QueryOapiRhinoHumanresProductionteamResponse {
  Util.validateModel(request);
  var appParams = Util.stringifyMapValue(Util.toMap(request.params));
  return doRequestOApi('POST', '/topapi/rhino/humanres/productionteam/query', request.headers, appParams, runtime);
}

model GetleavestatusOapiAttendanceParams = {
  useridList: [ string ](description='待查询用户id列表，支持最多100个用户的批量查询', maxItems=100, name='userid_list'),
  startTime: int64(description='开始时间 ，时间戳，支持最多180天的查询', name='start_time'),
  endTime: int64(description='结束时间，时间戳，支持最多180天的查询', name='end_time'),
  offset: int64(description='分页偏移，非负整数', name='offset'),
  size: int64(description='分页大小，正整数，最大20', maximum=20, name='size'),
}

model GetleavestatusOapiAttendanceRequest = {
  headers?: map[string]string,
  params:GetleavestatusOapiAttendanceParams,
}

model GetleavestatusOapiAttendanceResponseBody = {
  errmsg?: string(description='错误消息', name='errmsg'),
  errcode?: int64(description='错误码', name='errcode'),
  result?: {
    hasMore?: boolean(description='是否有更多数据', name='has_more'),
    leaveStatus?: [
      {
        durationUnit?: string(description='请假单位：“percent_day”表示天，“percent_hour”表示小时', name='duration_unit'),
        durationPercent?: int64(description='假期时长*100，例如用户请假时长为1天，该值就等于100', name='duration_percent'),
        endTime?: int64(description='请假结束时间，时间戳', name='end_time'),
        startTime?: int64(description='请假开始时间，时间戳', name='start_time'),
        userid?: string(description='用户id', name='userid'),
      }
    ](description='请假状态列表', name='leave_status'),
  }(description='业务结果', name='result'),
  success?: boolean(description='请求是否成功', name='success'),
}

model GetleavestatusOapiAttendanceResponse = {
  headers: map[string]string,
  body: GetleavestatusOapiAttendanceResponseBody,
}

/**
 * Description: 该接口用于查询指定企业下的指定用户在指定时间段内的请假状态
 */
async function getleavestatusOapiAttendance(request: GetleavestatusOapiAttendanceRequest): GetleavestatusOapiAttendanceResponse {
  var runtime = new Util.RuntimeOptions{};
  return getleavestatusOapiAttendanceEx(request, runtime);
}

/**
 * Description: 该接口用于查询指定企业下的指定用户在指定时间段内的请假状态
 */
async function getleavestatusOapiAttendanceEx(request: GetleavestatusOapiAttendanceRequest, runtime: Util.RuntimeOptions): GetleavestatusOapiAttendanceResponse {
  Util.validateModel(request);
  var appParams = Util.stringifyMapValue(Util.toMap(request.params));
  return doRequestOApi('POST', '/topapi/attendance/getleavestatus', request.headers, appParams, runtime);
}

model SearchOapiEduFaceParams = {
  classId: int64(description='班级id', name='class_id'),
  url: string(description='https://img.alicdn.com/tfs/TB1._LRfUz1gK0jSZLeXXb9kVXa-36-32.png', name='url'),
  width?: int64(description='图片宽度，同步调用时候必须', name='width'),
  height?: int64(description='图片宽度，同步调用时候必须', name='height'),
  userid?: string(description='用户id', name='userid'),
  synchronous?: boolean(description='是否同步调用，默认不同步', name='synchronous'),
}

model SearchOapiEduFaceRequest = {
  headers?: map[string]string,
  params:SearchOapiEduFaceParams,
}

model SearchOapiEduFaceResponseBody = {
  result?: {
    faces?: [
      {
        score?: string(description='人脸相似度', name='score'),
        tagId?: string(description='标签id', name='tag_id'),
        faceType?: string(description='来自录入还是标记', name='face_type'),
        userid?: string(description='用户id', name='userid'),
      }
    ](description='人脸列表', name='faces'),
    taskId?: string(description='任务id', name='task_id'),
  }(description='response', name='result'),
  success?: boolean(description='是否调用成功', name='success'),
  errcode?: int64(description='系统错误', name='errcode'),
  errmsg?: string(description='错误信息', name='errmsg'),
}

model SearchOapiEduFaceResponse = {
  headers: map[string]string,
  body: SearchOapiEduFaceResponseBody,
}

/**
 * Description: 家校人脸识别接口
 */
async function searchOapiEduFace(request: SearchOapiEduFaceRequest): SearchOapiEduFaceResponse {
  var runtime = new Util.RuntimeOptions{};
  return searchOapiEduFaceEx(request, runtime);
}

/**
 * Description: 家校人脸识别接口
 */
async function searchOapiEduFaceEx(request: SearchOapiEduFaceRequest, runtime: Util.RuntimeOptions): SearchOapiEduFaceResponse {
  Util.validateModel(request);
  var appParams = Util.stringifyMapValue(Util.toMap(request.params));
  return doRequestOApi('POST', '/topapi/edu/face/search', request.headers, appParams, runtime);
}

model ListOapiRhinoDtechProcessTypeRequest = {
  headers?: map[string]string,
}

model ListOapiRhinoDtechProcessTypeResponseBody = {
  success?: boolean(description='是否成功', name='success'),
  model?: [
    {
      sourceFactoryId?: string(description='春晓工厂id', name='source_factory_id'),
      processTypeName?: string(description='工序能力名称', name='process_type_name'),
      processTypeCode?: string(description='工序能力编码', name='process_type_code'),
      id?: int64(description='id', name='id'),
    }
  ](description='model', name='model'),
  errmsg?: string(description='message', name='errmsg'),
  errcode?: int64(description='错误码', name='errcode'),
}

model ListOapiRhinoDtechProcessTypeResponse = {
  headers: map[string]string,
  body: ListOapiRhinoDtechProcessTypeResponseBody,
}

/**
 * Description: 智能制造-查询工序能力列表
 */
async function listOapiRhinoDtechProcessType(request: ListOapiRhinoDtechProcessTypeRequest): ListOapiRhinoDtechProcessTypeResponse {
  var runtime = new Util.RuntimeOptions{};
  return listOapiRhinoDtechProcessTypeEx(request, runtime);
}

/**
 * Description: 智能制造-查询工序能力列表
 */
async function listOapiRhinoDtechProcessTypeEx(request: ListOapiRhinoDtechProcessTypeRequest, runtime: Util.RuntimeOptions): ListOapiRhinoDtechProcessTypeResponse {
  Util.validateModel(request);
  var appParams : map[string]string = {};
  return doRequestOApi('POST', '/topapi/rhino/dtech/process/type/list', request.headers, appParams, runtime);
}

model UpdateroleOapiRoleParams = {
  roleId: int64(description='1', name='roleId'),
  roleName: string(description='1', name='roleName'),
}

model UpdateroleOapiRoleRequest = {
  headers?: map[string]string,
  params:UpdateroleOapiRoleParams,
}

model UpdateroleOapiRoleResponseBody = {
  errcode?: int64(description='errcode', name='errcode'),
  errmsg?: string(description='errmsg', name='errmsg'),
}

model UpdateroleOapiRoleResponse = {
  headers: map[string]string,
  body: UpdateroleOapiRoleResponseBody,
}

/**
 * Description: 更新角色
 */
async function updateroleOapiRole(request: UpdateroleOapiRoleRequest): UpdateroleOapiRoleResponse {
  var runtime = new Util.RuntimeOptions{};
  return updateroleOapiRoleEx(request, runtime);
}

/**
 * Description: 更新角色
 */
async function updateroleOapiRoleEx(request: UpdateroleOapiRoleRequest, runtime: Util.RuntimeOptions): UpdateroleOapiRoleResponse {
  Util.validateModel(request);
  var appParams = Util.stringifyMapValue(Util.toMap(request.params));
  return doRequestOApi('POST', '/role/updaterole', request.headers, appParams, runtime);
}

model AddroleOapiRoleParams = {
  roleName: string(description='test', name='roleName'),
  groupId: int64(description='test', name='groupId'),
}

model AddroleOapiRoleRequest = {
  headers?: map[string]string,
  params:AddroleOapiRoleParams,
}

model AddroleOapiRoleResponseBody = {
  roleId?: int64(description='roleId', name='roleId'),
  errcode?: int64(description='errcode', name='errcode'),
  errmsg?: string(description='errmsg', name='errmsg'),
}

model AddroleOapiRoleResponse = {
  headers: map[string]string,
  body: AddroleOapiRoleResponseBody,
}

/**
 * Description: 添加角色
 */
async function addroleOapiRole(request: AddroleOapiRoleRequest): AddroleOapiRoleResponse {
  var runtime = new Util.RuntimeOptions{};
  return addroleOapiRoleEx(request, runtime);
}

/**
 * Description: 添加角色
 */
async function addroleOapiRoleEx(request: AddroleOapiRoleRequest, runtime: Util.RuntimeOptions): AddroleOapiRoleResponse {
  Util.validateModel(request);
  var appParams = Util.stringifyMapValue(Util.toMap(request.params));
  return doRequestOApi('POST', '/role/addrole', request.headers, appParams, runtime);
}

model AddrolegroupOapiRoleParams = {
  name: string(description='名称', name='name'),
}

model AddrolegroupOapiRoleRequest = {
  headers?: map[string]string,
  params:AddrolegroupOapiRoleParams,
}

model AddrolegroupOapiRoleResponseBody = {
  errcode?: int64(description='errcode', name='errcode'),
  errmsg?: string(description='errmsg', name='errmsg'),
  groupId?: int64(description='groupId', name='groupId'),
}

model AddrolegroupOapiRoleResponse = {
  headers: map[string]string,
  body: AddrolegroupOapiRoleResponseBody,
}

/**
 * Description: 添加角色组
 */
async function addrolegroupOapiRole(request: AddrolegroupOapiRoleRequest): AddrolegroupOapiRoleResponse {
  var runtime = new Util.RuntimeOptions{};
  return addrolegroupOapiRoleEx(request, runtime);
}

/**
 * Description: 添加角色组
 */
async function addrolegroupOapiRoleEx(request: AddrolegroupOapiRoleRequest, runtime: Util.RuntimeOptions): AddrolegroupOapiRoleResponse {
  Util.validateModel(request);
  var appParams = Util.stringifyMapValue(Util.toMap(request.params));
  return doRequestOApi('POST', '/role/addrolegroup', request.headers, appParams, runtime);
}

model ListbycertOapiSmartworkHrmEmployeeParams = {
  params: [
    {
      certNo?: string(description='身份证号', name='cert_no'),
      realName?: string(description='姓名', name='real_name'),
    }
  ](description='查询参数', maxItems=100, name='params'),
}

model ListbycertOapiSmartworkHrmEmployeeRequest = {
  headers?: map[string]string,
  params:ListbycertOapiSmartworkHrmEmployeeParams,
}

model ListbycertOapiSmartworkHrmEmployeeResponseBody = {
  result?: [
    {
      userid?: string(description='员工id', name='userid'),
      certNo?: string(description='身份证号', name='cert_no'),
    }
  ](description='结果列表', name='result'),
  errcode?: int64(description='错误码', name='errcode'),
  errmsg?: string(description='错误信息', name='errmsg'),
  success?: boolean(description='调用是否成功', name='success'),
}

model ListbycertOapiSmartworkHrmEmployeeResponse = {
  headers: map[string]string,
  body: ListbycertOapiSmartworkHrmEmployeeResponseBody,
}

/**
 * Description: 根据姓名和身份证号获取staffId（仅拥有指定权限的ISV调用）
 */
async function listbycertOapiSmartworkHrmEmployee(request: ListbycertOapiSmartworkHrmEmployeeRequest): ListbycertOapiSmartworkHrmEmployeeResponse {
  var runtime = new Util.RuntimeOptions{};
  return listbycertOapiSmartworkHrmEmployeeEx(request, runtime);
}

/**
 * Description: 根据姓名和身份证号获取staffId（仅拥有指定权限的ISV调用）
 */
async function listbycertOapiSmartworkHrmEmployeeEx(request: ListbycertOapiSmartworkHrmEmployeeRequest, runtime: Util.RuntimeOptions): ListbycertOapiSmartworkHrmEmployeeResponse {
  Util.validateModel(request);
  var appParams = Util.stringifyMapValue(Util.toMap(request.params));
  return doRequestOApi('POST', '/topapi/smartwork/hrm/employee/listbycert', request.headers, appParams, runtime);
}

model ListOapiServiceaccountParams = {
  pageStart?: int64(description='页码，第几页，从1开始算', minimum=1, name='pageStart'),
  pageSize?: int64(description='每页条数', maximum=50, minimum=1, name='pageSize'),
}

model ListOapiServiceaccountRequest = {
  headers?: map[string]string,
  params?:ListOapiServiceaccountParams,
}

model ListOapiServiceaccountResponseBody = {
  errmsg?: string(description='错误信息', name='errmsg'),
  errcode?: int64(description='错误码', name='errcode'),
  totalCount?: int64(description='总记录数', name='total_count'),
  itemCount?: int64(description='当前记录数', name='item_count'),
  items?: [
    {
      desc?: string(description='机器人主页中的服务号功能简介', name='desc'),
      previewMediaId?: string(description='机器人主页中，消息预览图片的mediaId', name='preview_media_id'),
      brief?: string(description='机器人管理列表中的简介', name='brief'),
      avatarMediaId?: string(description='头像图片mediaId', name='avatar_media_id'),
      name?: string(description='服务号名称', name='name'),
      status?: string(description='状态，normal-正常，disabled-停用', name='status'),
      unionid?: string(description='服务号的unionid', name='unionid'),
    }
  ](description='服务号列表', name='items'),
}

model ListOapiServiceaccountResponse = {
  headers: map[string]string,
  body: ListOapiServiceaccountResponseBody,
}

/**
 * Description: 查询服务号列表
 */
async function listOapiServiceaccount(request: ListOapiServiceaccountRequest): ListOapiServiceaccountResponse {
  var runtime = new Util.RuntimeOptions{};
  return listOapiServiceaccountEx(request, runtime);
}

/**
 * Description: 查询服务号列表
 */
async function listOapiServiceaccountEx(request: ListOapiServiceaccountRequest, runtime: Util.RuntimeOptions): ListOapiServiceaccountResponse {
  Util.validateModel(request);
  var appParams = Util.stringifyMapValue(Util.toMap(request.params));
  return doRequestOApi('POST', '/topapi/serviceaccount/list', request.headers, appParams, runtime);
}

model UpdateOapiCalendarV2EventParams = {
  event: {
    attendees?: [
      {
        userid?: string(description='员工工号,若通过该接口新增或删除参会人，则该字段必填', maxLength=64, name='userid'),
        attendeeStatus?: string(description='添加或者删除状态，add:添加；remove:删除；若通过该接口新增或删除参会人，则该字段必填', name='attendee_status'),
      }
    ](description='日程参与者，参与人数最多100人，包括组织者', maxItems=110, name='attendees'),
    calendarId: string(description='日历ID,目前仅支持传primary,表示修改当前用户“我的日程”下的日程', maxLength=64, name='calendar_id'),
    description: string(description='日程描述', maxLength=512, name='description'),
    end: {
      date?: string(description='日期，全天日程使用，格式必须为\'yyyy-mm-dd\',和timestamp字段互斥，该字段有值时，则忽略timestamp字段', maxLength=10, name='date'),
      timestamp?: int64(description='时间戳，单位为秒。非全天日程使用，与date字段互斥', name='timestamp'),
      timezone?: string(description='时区信息，默认为"Asia/Shanghai"。date有值时，timezone 为 UTC；', name='timezone'),
    }(description='结束时间', name='end'),
    organizer?: {
      userid: string(description='员工工号', maxLength=64, name='userid'),
    }(description='日程组织者,暂不支持修改', name='organizer'),
    start: {
      date?: string(description='日期，全天日程使用，格式必须为\'yyyy-mm-dd\',和timestamp字段互斥，该字段有值时，则忽略timestamp字段', maxLength=10, name='date'),
      timestamp?: int64(description='时间戳，单位为秒。非全天日程使用，与date字段互斥', name='timestamp'),
      timezone?: string(description='时区信息，默认为"Asia/Shanghai"。date有值时，timezone 为 UTC；', name='timezone'),
    }(description='开始时间', name='start'),
    summary: string(description='日程主题', maxLength=512, name='summary'),
    eventId: string(description='日程Id', maxLength=64, name='event_id'),
    reminder?: {
      method?: string(description='提醒方式.app表示应用内提醒', maxLength=16, name='method'),
      minutes?: int64(description='开始前提醒的分钟数,有效值为0，5，15，30，60，1440', maximum=1600, name='minutes'),
    }(description='会议开始前提醒', name='reminder'),
    location?: {
      latitude?: string(description='纬度', name='latitude'),
      longitude?: string(description='经度', name='longitude'),
      place?: string(description='地址详情', name='place'),
    }(description='地址', name='location'),
  }(description='日程创建对象', name='event'),
  agentid?: int64(description='开放平台应用对应的AgentId', name='agentid'),
}

model UpdateOapiCalendarV2EventRequest = {
  headers?: map[string]string,
  params:UpdateOapiCalendarV2EventParams,
}

model UpdateOapiCalendarV2EventResponseBody = {
  success?: boolean(description='结果是否正确', name='success'),
  errcode?: int64(description='错误编码', name='errcode'),
  errmsg?: string(description='错误信息', name='errmsg'),
}

model UpdateOapiCalendarV2EventResponse = {
  headers: map[string]string,
  body: UpdateOapiCalendarV2EventResponseBody,
}

/**
 * Description: 通过此接口可以修改钉钉日程，在对应的日历中展示
该接口处于内部灰度阶段, 申请使用请邮件联系:wusuan.yby@alibaba-inc.com
 */
async function updateOapiCalendarV2Event(request: UpdateOapiCalendarV2EventRequest): UpdateOapiCalendarV2EventResponse {
  var runtime = new Util.RuntimeOptions{};
  return updateOapiCalendarV2EventEx(request, runtime);
}

/**
 * Description: 通过此接口可以修改钉钉日程，在对应的日历中展示
该接口处于内部灰度阶段, 申请使用请邮件联系:wusuan.yby@alibaba-inc.com
 */
async function updateOapiCalendarV2EventEx(request: UpdateOapiCalendarV2EventRequest, runtime: Util.RuntimeOptions): UpdateOapiCalendarV2EventResponse {
  Util.validateModel(request);
  var appParams = Util.stringifyMapValue(Util.toMap(request.params));
  return doRequestOApi('POST', '/topapi/calendar/v2/event/update', request.headers, appParams, runtime);
}

model SendmessageOapiKefuParams = {
  serviceid: int64(description='客服服务id', name='serviceid'),
  userid: string(description='客服id', name='userid'),
  customerid: string(description='消费者id', name='customerid'),
  token: string(description='消息token', name='token'),
  msgtype: string(description='消息类型', name='msgtype'),
  content: string(description='消息体', name='content'),
}

model SendmessageOapiKefuRequest = {
  headers?: map[string]string,
  params:SendmessageOapiKefuParams,
}

model SendmessageOapiKefuResponseBody = {
  taskid?: int64(description='result', name='taskid'),
  errcode?: int64(description='dingOpenErrcode', name='errcode'),
  errmsg?: string(description='errorMsg', name='errmsg'),
}

model SendmessageOapiKefuResponse = {
  headers: map[string]string,
  body: SendmessageOapiKefuResponseBody,
}

/**
 * Description: 提供给bc客服消息发送的接口，一期提供给新零售店小蜜
 */
async function sendmessageOapiKefu(request: SendmessageOapiKefuRequest): SendmessageOapiKefuResponse {
  var runtime = new Util.RuntimeOptions{};
  return sendmessageOapiKefuEx(request, runtime);
}

/**
 * Description: 提供给bc客服消息发送的接口，一期提供给新零售店小蜜
 */
async function sendmessageOapiKefuEx(request: SendmessageOapiKefuRequest, runtime: Util.RuntimeOptions): SendmessageOapiKefuResponse {
  Util.validateModel(request);
  var appParams = Util.stringifyMapValue(Util.toMap(request.params));
  return doRequestOApi('POST', '/topapi/kefu/sendmessage', request.headers, appParams, runtime);
}

model FinishOapiRhinoMosExecPerformConditionalParams = {
  tenantId: string(description='租户ID', name='tenant_id'),
  deviceIds?: [ int64 ](description='执行设备ID列表', maxItems=20, name='device_ids'),
  workNos?: [ string ](description='执行员工列表', maxItems=20, name='work_nos'),
  userid?: string(description='系统参数', name='userid'),
  entityCondition: {
    entityIds?: [ int64 ](description='实体ID列表', maxItems=20, name='entity_ids'),
    entitySource?: {
      sourceId?: string(description='实体来源ID', name='source_id'),
      sourceType?: string(description='实体来源类型', name='source_type'),
    }(description='实体来源', name='entity_source'),
    entityType?: string(description='实体类型', name='entity_type'),
  }(description='实体条件', name='entity_condition'),
  operationUids?: [ int64 ](description='工序ID列表', maxItems=20, name='operation_uids'),
  orderId?: int64(description='订单ID', name='order_id'),
}

model FinishOapiRhinoMosExecPerformConditionalRequest = {
  headers?: map[string]string,
  params:FinishOapiRhinoMosExecPerformConditionalParams,
}

model FinishOapiRhinoMosExecPerformConditionalResponseBody = {
  externalMsgInfo?: string(description='错误信息', name='external_msg_info'),
  errmsg?: string(description='错误信息', name='errmsg'),
  model?: boolean(description='操作结果', name='model'),
  success?: boolean(description='是否成功', name='success'),
  errcode?: int64(description='错误码', name='errcode'),
}

model FinishOapiRhinoMosExecPerformConditionalResponse = {
  headers: map[string]string,
  body: FinishOapiRhinoMosExecPerformConditionalResponseBody,
}

/**
 * Description: 条件完成工序
 */
async function finishOapiRhinoMosExecPerformConditional(request: FinishOapiRhinoMosExecPerformConditionalRequest): FinishOapiRhinoMosExecPerformConditionalResponse {
  var runtime = new Util.RuntimeOptions{};
  return finishOapiRhinoMosExecPerformConditionalEx(request, runtime);
}

/**
 * Description: 条件完成工序
 */
async function finishOapiRhinoMosExecPerformConditionalEx(request: FinishOapiRhinoMosExecPerformConditionalRequest, runtime: Util.RuntimeOptions): FinishOapiRhinoMosExecPerformConditionalResponse {
  Util.validateModel(request);
  var appParams = Util.stringifyMapValue(Util.toMap(request.params));
  return doRequestOApi('POST', '/topapi/rhino/mos/exec/perform/conditional/finish', request.headers, appParams, runtime);
}

model QueryOapiRhinoHumanresEmployeeProcessCapacityParams = {
  userid?: string(description='1', name='userid'),
  tenantId?: string(description='1', name='tenant_id'),
  workNos?: [ string ](description='1', maxItems=20, name='work_nos'),
  category?: string(description='1', name='category'),
  processStructuralClusterIdList?: [ int64 ](description='1', maxItems=20, name='process_structural_cluster_id_list'),
}

model QueryOapiRhinoHumanresEmployeeProcessCapacityRequest = {
  headers?: map[string]string,
  params?:QueryOapiRhinoHumanresEmployeeProcessCapacityParams,
}

model QueryOapiRhinoHumanresEmployeeProcessCapacityResponseBody = {
  hsfcode?: int64(description='返回code', name='hsfcode'),
  success?: boolean(description='是否成功', name='success'),
  model?: [
    {
      workNo?: string(description='工号', name='work_no'),
      statisticsValue?: string(description='统计值', name='statistics_value'),
      statisticCategory?: int64(description='统计类型', name='statistic_category'),
      productionQuantity?: int64(description='经验值', name='production_quantity'),
      tenantId?: string(description='租户', name='tenant_id'),
      processStructuralClusterId?: int64(description='结构化工序id', name='process_structural_cluster_id'),
      processCapacityId?: int64(description='工序技能id', name='process_capacity_id'),
      category?: string(description='订单品类', name='category'),
    }
  ](description='返回结果', name='model'),
  errmsg?: string(description='文案', name='errmsg'),
  errcode?: int64(description='1', name='errcode'),
  externalMsgInfo?: string(description='1', name='externalMsgInfo'),
}

model QueryOapiRhinoHumanresEmployeeProcessCapacityResponse = {
  headers: map[string]string,
  body: QueryOapiRhinoHumanresEmployeeProcessCapacityResponseBody,
}

/**
 * Description: 获取人员技能经验值
 */
async function queryOapiRhinoHumanresEmployeeProcessCapacity(request: QueryOapiRhinoHumanresEmployeeProcessCapacityRequest): QueryOapiRhinoHumanresEmployeeProcessCapacityResponse {
  var runtime = new Util.RuntimeOptions{};
  return queryOapiRhinoHumanresEmployeeProcessCapacityEx(request, runtime);
}

/**
 * Description: 获取人员技能经验值
 */
async function queryOapiRhinoHumanresEmployeeProcessCapacityEx(request: QueryOapiRhinoHumanresEmployeeProcessCapacityRequest, runtime: Util.RuntimeOptions): QueryOapiRhinoHumanresEmployeeProcessCapacityResponse {
  Util.validateModel(request);
  var appParams = Util.stringifyMapValue(Util.toMap(request.params));
  return doRequestOApi('POST', '/topapi/rhino/humanres/employee/process/capacity/query', request.headers, appParams, runtime);
}

model QueryOapiRhinoHumanresEmployeeProcessBestdeviceParams = {
  tenantId?: string(description='租户', name='tenant_id'),
  availableDeviceModels?: [
    {
      deviceModelVersion?: string(description='设备型号版本', name='device_model_version'),
      deviceModelId?: string(description='设备型号id', name='device_model_id'),
    }
  ](description='可用设备型号', maxItems=20, name='available_device_models'),
  employeeProcessCapacityUnits?: [
    {
      workNo?: string(description='工号', name='work_no'),
      processCapacityId?: int64(description='结构化工序id', name='process_capacity_id'),
    }
  ](description='人员工序关系', maxItems=20, name='employee_process_capacity_units'),
  userid?: string(description='1', name='userid'),
}

model QueryOapiRhinoHumanresEmployeeProcessBestdeviceRequest = {
  headers?: map[string]string,
  params?:QueryOapiRhinoHumanresEmployeeProcessBestdeviceParams,
}

model QueryOapiRhinoHumanresEmployeeProcessBestdeviceResponseBody = {
  hsfcode?: int64(description='code', name='hsfcode'),
  success?: boolean(description='是否成功', name='success'),
  model?: [
    {
      workNo?: string(description='工号', name='work_no'),
      deviceModelVersion?: string(description='设备型号版本', name='device_model_version'),
      productionQuantity?: int64(description='生产次数', name='production_quantity'),
      deviceModelId?: string(description='设备型号id', name='device_model_id'),
      tenantId?: string(description='租户', name='tenant_id'),
      processCapacityId?: int64(description='结构化工序id', name='process_capacity_id'),
    }
  ](description='结果', name='model'),
  errmsg?: string(description='返回文案', name='errmsg'),
  externalMsgInfo?: string(description='额外返回信息', name='external_msg_info'),
  errcode?: int64(description='1', name='errcode'),
}

model QueryOapiRhinoHumanresEmployeeProcessBestdeviceResponse = {
  headers: map[string]string,
  body: QueryOapiRhinoHumanresEmployeeProcessBestdeviceResponseBody,
}

/**
 * Description: 获取人员在工序上使用最多的设备
 */
async function queryOapiRhinoHumanresEmployeeProcessBestdevice(request: QueryOapiRhinoHumanresEmployeeProcessBestdeviceRequest): QueryOapiRhinoHumanresEmployeeProcessBestdeviceResponse {
  var runtime = new Util.RuntimeOptions{};
  return queryOapiRhinoHumanresEmployeeProcessBestdeviceEx(request, runtime);
}

/**
 * Description: 获取人员在工序上使用最多的设备
 */
async function queryOapiRhinoHumanresEmployeeProcessBestdeviceEx(request: QueryOapiRhinoHumanresEmployeeProcessBestdeviceRequest, runtime: Util.RuntimeOptions): QueryOapiRhinoHumanresEmployeeProcessBestdeviceResponse {
  Util.validateModel(request);
  var appParams = Util.stringifyMapValue(Util.toMap(request.params));
  return doRequestOApi('POST', '/topapi/rhino/humanres/employee/process/bestdevice/query', request.headers, appParams, runtime);
}

model ForecastOapiProcessApproversParams = {
  request: {
    agentid?: int64(description='应用id', name='agentid'),
    processCode: string(description='模板唯一码', name='process_code'),
    originatorUserid: string(description='发起人id', name='originator_userid'),
    originatorDeptid: int64(description='发起人所在部门', name='originator_deptid'),
    formComponentValues: [
      {
        name: string(description='组件名称', name='name'),
        value: string(description='组件值', name='value'),
      }
    ](description='表单数据', maxItems=20, name='form_component_values'),
  }(description='请求', name='request'),
}

model ForecastOapiProcessApproversRequest = {
  headers?: map[string]string,
  params:ForecastOapiProcessApproversParams,
}

model ForecastOapiProcessApproversResponseBody = {
  errcode?: int64(description='错误码', name='errcode'),
  errmsg?: string(description='错误信息', name='errmsg'),
  result?: [
    {
      nodeName?: string(description='节点名称', name='node_name'),
      nodeShowName?: string(description='节点展示名称', name='node_show_name'),
      approvers?: [
        {
          userid?: string(description='审批人id', name='userid'),
          name?: string(description='审批人姓名', name='name'),
        }
      ](description='审批人列表', name='approvers'),
    }
  ](description='结果', name='result'),
}

model ForecastOapiProcessApproversResponse = {
  headers: map[string]string,
  body: ForecastOapiProcessApproversResponseBody,
}

/**
 * Description: 预测审批人
 */
async function forecastOapiProcessApprovers(request: ForecastOapiProcessApproversRequest): ForecastOapiProcessApproversResponse {
  var runtime = new Util.RuntimeOptions{};
  return forecastOapiProcessApproversEx(request, runtime);
}

/**
 * Description: 预测审批人
 */
async function forecastOapiProcessApproversEx(request: ForecastOapiProcessApproversRequest, runtime: Util.RuntimeOptions): ForecastOapiProcessApproversResponse {
  Util.validateModel(request);
  var appParams = Util.stringifyMapValue(Util.toMap(request.params));
  return doRequestOApi('POST', '/topapi/process/approvers/forecast', request.headers, appParams, runtime);
}

model AddOapiImpaasRelationParams = {
  request: {
    srcImOpenid: string(description='发送者钉钉的openid', name='src_im_openid'),
    dstImOpenid: string(description='接收者钉钉的openid', name='dst_im_openid'),
    isDoubleWay: boolean(description='是否双向关系', name='is_double_way'),
    beginTime: int64(description='时间戳精确到毫秒', name='begin_time'),
    endTime: int64(description='时间戳精确到毫秒', name='end_time'),
  }(description='关系', name='request'),
}

model AddOapiImpaasRelationRequest = {
  headers?: map[string]string,
  params:AddOapiImpaasRelationParams,
}

model AddOapiImpaasRelationResponseBody = {
  errcode?: int64(description='dingOpenErrcode', name='errcode'),
  errmsg?: string(description='errorMsg', name='errmsg'),
  success?: boolean(description='success', name='success'),
}

model AddOapiImpaasRelationResponse = {
  headers: map[string]string,
  body: AddOapiImpaasRelationResponseBody,
}

/**
 * Description: 二方关系导入钉钉
 */
async function addOapiImpaasRelation(request: AddOapiImpaasRelationRequest): AddOapiImpaasRelationResponse {
  var runtime = new Util.RuntimeOptions{};
  return addOapiImpaasRelationEx(request, runtime);
}

/**
 * Description: 二方关系导入钉钉
 */
async function addOapiImpaasRelationEx(request: AddOapiImpaasRelationRequest, runtime: Util.RuntimeOptions): AddOapiImpaasRelationResponse {
  Util.validateModel(request);
  var appParams = Util.stringifyMapValue(Util.toMap(request.params));
  return doRequestOApi('POST', '/topapi/impaas/relation/add', request.headers, appParams, runtime);
}

model TransformOapiChatParams = {
  openConversationId: string(description='开放cid', name='open_conversation_id'),
}

model TransformOapiChatRequest = {
  headers?: map[string]string,
  params:TransformOapiChatParams,
}

model TransformOapiChatResponseBody = {
  result?: string(description='result', name='result'),
  errcode?: int64(description='dingOpenErrcode', name='errcode'),
  errmsg?: string(description='errorMsg', name='errmsg'),
}

model TransformOapiChatResponse = {
  headers: map[string]string,
  body: TransformOapiChatResponseBody,
}

/**
 * Description: 将conversationId转换成chatId
 */
async function transformOapiChat(request: TransformOapiChatRequest): TransformOapiChatResponse {
  var runtime = new Util.RuntimeOptions{};
  return transformOapiChatEx(request, runtime);
}

/**
 * Description: 将conversationId转换成chatId
 */
async function transformOapiChatEx(request: TransformOapiChatRequest, runtime: Util.RuntimeOptions): TransformOapiChatResponse {
  Util.validateModel(request);
  var appParams = Util.stringifyMapValue(Util.toMap(request.params));
  return doRequestOApi('POST', '/topapi/chat/transform', request.headers, appParams, runtime);
}

model AddprofileOapiImpaasUserParams = {
  request: {
    id: string(description='账号id', name='id'),
    nick: string(description='账号nick', name='nick'),
    channel: string(description='渠道', name='channel'),
    extension?: string(description='附加信息', name='extension'),
    avatarMediaid?: string(description='头像mediaid', name='avatar_mediaid'),
  }(description='添加的账号信息', name='request'),
}

model AddprofileOapiImpaasUserRequest = {
  headers?: map[string]string,
  params:AddprofileOapiImpaasUserParams,
}

model AddprofileOapiImpaasUserResponseBody = {
  result?: {
    imOpenid?: string(description='imOpenId', name='im_openid'),
  }(description='result', name='result'),
  errcode?: int64(description='dingOpenErrcode', name='errcode'),
  errmsg?: string(description='errorMsg', name='errmsg'),
  success?: boolean(description='success', name='success'),
}

model AddprofileOapiImpaasUserResponse = {
  headers: map[string]string,
  body: AddprofileOapiImpaasUserResponseBody,
}

/**
 * Description: 二方渠道导入账号
 */
async function addprofileOapiImpaasUser(request: AddprofileOapiImpaasUserRequest): AddprofileOapiImpaasUserResponse {
  var runtime = new Util.RuntimeOptions{};
  return addprofileOapiImpaasUserEx(request, runtime);
}

/**
 * Description: 二方渠道导入账号
 */
async function addprofileOapiImpaasUserEx(request: AddprofileOapiImpaasUserRequest, runtime: Util.RuntimeOptions): AddprofileOapiImpaasUserResponse {
  Util.validateModel(request);
  var appParams = Util.stringifyMapValue(Util.toMap(request.params));
  return doRequestOApi('POST', '/topapi/impaas/user/addprofile', request.headers, appParams, runtime);
}

model DelOapiImpaasRelationParams = {
  request: {
    srcImOpenid: string(description='发送者的im的openid', name='src_im_openid'),
    dstImOpenid: string(description='接受者的im的openid', name='dst_im_openid'),
    isDoubleWay: boolean(description='是否双向关系', name='is_double_way'),
  }(description='关系', name='request'),
}

model DelOapiImpaasRelationRequest = {
  headers?: map[string]string,
  params:DelOapiImpaasRelationParams,
}

model DelOapiImpaasRelationResponseBody = {
  errcode?: int64(description='dingOpenErrcode', name='errcode'),
  errmsg?: string(description='errorMsg', name='errmsg'),
  success?: boolean(description='success', name='success'),
}

model DelOapiImpaasRelationResponse = {
  headers: map[string]string,
  body: DelOapiImpaasRelationResponseBody,
}

/**
 * Description: 删除二方关系
 */
async function delOapiImpaasRelation(request: DelOapiImpaasRelationRequest): DelOapiImpaasRelationResponse {
  var runtime = new Util.RuntimeOptions{};
  return delOapiImpaasRelationEx(request, runtime);
}

/**
 * Description: 删除二方关系
 */
async function delOapiImpaasRelationEx(request: DelOapiImpaasRelationRequest, runtime: Util.RuntimeOptions): DelOapiImpaasRelationResponse {
  Util.validateModel(request);
  var appParams = Util.stringifyMapValue(Util.toMap(request.params));
  return doRequestOApi('POST', '/topapi/impaas/relation/del', request.headers, appParams, runtime);
}

model GetprofileOapiImpaasUserParams = {
  request: {
    accountInfo: {
      id: string(description='待操作成员id，ID类型由type字段确定。当type为“staff”时，本字段填写staffid，当type为“channelUser”时，本字段填写channelUserId。', name='id'),
      type: string(description='代操作成员ID类型，目前支持“staff” “channelUser”两种类型', name='type'),
      channel?: string(description='type为channelUser时有效。接入方channel信息，该值由接入方接入IMPaaS平台时，向IMPaaS平台申请，例如“hema”“eleme”等。', name='channel'),
    }(description='用户信息', name='accountInfo'),
  }(description='获取用户属性入参', name='request'),
}

model GetprofileOapiImpaasUserRequest = {
  headers?: map[string]string,
  params:GetprofileOapiImpaasUserParams,
}

model GetprofileOapiImpaasUserResponseBody = {
  result?: {
    nick?: string(description='昵称', name='nick'),
    imOpenid?: string(description='im的唯一id', name='im_openid'),
    extension?: string(description='附件信息', name='extension'),
    avatarMediaid?: string(description='头像的mediaid', name='avatar_mediaid'),
    status?: int64(description='用户状态 1 未激活 2 已激活 3 已注销', name='status'),
    channel?: string(description='业务方渠道ID', name='channel'),
    appUserid?: string(description='业务方的唯一id', name='app_userid'),
  }(description='用户属性', name='result'),
  errcode?: int64(description='错误码  -1 系统异常 40035 参数错误 400023 用户不存在', name='errcode'),
  errmsg?: string(description='errorMsg', name='errmsg'),
  success?: boolean(description='接口是否调用成功', name='success'),
}

model GetprofileOapiImpaasUserResponse = {
  headers: map[string]string,
  body: GetprofileOapiImpaasUserResponseBody,
}

/**
 * Description: 根据用户账号，获取用户属性
 */
async function getprofileOapiImpaasUser(request: GetprofileOapiImpaasUserRequest): GetprofileOapiImpaasUserResponse {
  var runtime = new Util.RuntimeOptions{};
  return getprofileOapiImpaasUserEx(request, runtime);
}

/**
 * Description: 根据用户账号，获取用户属性
 */
async function getprofileOapiImpaasUserEx(request: GetprofileOapiImpaasUserRequest, runtime: Util.RuntimeOptions): GetprofileOapiImpaasUserResponse {
  Util.validateModel(request);
  var appParams = Util.stringifyMapValue(Util.toMap(request.params));
  return doRequestOApi('POST', '/topapi/impaas/user/getprofile', request.headers, appParams, runtime);
}

model ListCorpEncryptionKeyRequest = {
  headers?: map[string]string,
}

model ListCorpEncryptionKeyResponseBody = {
  result?: {
    result?: string(description='result', name='result'),
    dingOpenErrcode?: int64(description='dingOpenErrcode', name='ding_open_errcode'),
    errorMsg?: string(description='errorMsg', name='error_msg'),
    success?: boolean(description='success', name='success'),
  }(description='result', name='result'),
}

model ListCorpEncryptionKeyResponse = {
  headers: map[string]string,
  body: ListCorpEncryptionKeyResponseBody,
}

/**
 * Description: 查询企业密钥列表
 */
async function listCorpEncryptionKey(request: ListCorpEncryptionKeyRequest): ListCorpEncryptionKeyResponse {
  var runtime = new Util.RuntimeOptions{};
  return listCorpEncryptionKeyEx(request, runtime);
}

/**
 * Description: 查询企业密钥列表
 */
async function listCorpEncryptionKeyEx(request: ListCorpEncryptionKeyRequest, runtime: Util.RuntimeOptions): ListCorpEncryptionKeyResponse {
  Util.validateModel(request);
  var appParams : map[string]string = {};
  return doRequest('dingtalk.corp.encryption.key.list', 'POST', '/router/rest', request.headers, appParams, runtime);
}

model ListOapiProcessBaseinfoParams = {
  processCodes?: [ string ](description='模板code列表', maxItems=20, name='process_codes'),
}

model ListOapiProcessBaseinfoRequest = {
  headers?: map[string]string,
  params?:ListOapiProcessBaseinfoParams,
}

model ListOapiProcessBaseinfoResponseBody = {
  result?: [
    {
      managerUserIds?: [ string ](description='管理员userId列表', name='manager_user_ids'),
      description?: string(description='描述', name='description'),
      name?: string(description='模板名称', name='name'),
      processCode?: string(description='模板code', name='process_code'),
      openCustomPrint?: boolean(description='是否开启自定义打印', name='open_custom_print'),
      bizCategoryId?: string(description='业务套件bizType', name='biz_category_id'),
    }
  ](description='模板对象列表', name='result'),
  errcode?: int64(description='错误码', name='errcode'),
  errmsg?: string(description='错误信息', name='errmsg'),
  success?: boolean(description='成功标识', name='success'),
}

model ListOapiProcessBaseinfoResponse = {
  headers: map[string]string,
  body: ListOapiProcessBaseinfoResponseBody,
}

/**
 * Description: 查询企业下的模板基础信息，包括名称，图片，管理员等
 */
async function listOapiProcessBaseinfo(request: ListOapiProcessBaseinfoRequest): ListOapiProcessBaseinfoResponse {
  var runtime = new Util.RuntimeOptions{};
  return listOapiProcessBaseinfoEx(request, runtime);
}

/**
 * Description: 查询企业下的模板基础信息，包括名称，图片，管理员等
 */
async function listOapiProcessBaseinfoEx(request: ListOapiProcessBaseinfoRequest, runtime: Util.RuntimeOptions): ListOapiProcessBaseinfoResponse {
  Util.validateModel(request);
  var appParams = Util.stringifyMapValue(Util.toMap(request.params));
  return doRequestOApi('POST', '/topapi/process/baseinfo/list', request.headers, appParams, runtime);
}

model QueryCorpConferenceDetailsParams = {
  sinceTime?: string(description='查询起始时间', pattern='\\\\d{4}[-]\\\\d{1,2}[-]\\\\d{1,2}[T]\\\\d{2}:\\\\d{2}:\\\\d{2}[Z]', name='since_time'),
  limit?: int64(description='查询个数，上限100', name='limit'),
  callerUserId?: string(description='主叫userId', name='caller_user_id'),
  memberUserId?: string(description='成员userId', name='member_user_id'),
}

model QueryCorpConferenceDetailsRequest = {
  headers?: map[string]string,
  params?:QueryCorpConferenceDetailsParams,
}

model QueryCorpConferenceDetailsResponseBody = {
  result?: string(description='返回结果', name='result'),
}

model QueryCorpConferenceDetailsResponse = {
  headers: map[string]string,
  body: QueryCorpConferenceDetailsResponseBody,
}

/**
 * Description: 查询企业电话会议详情记录
 */
async function queryCorpConferenceDetails(request: QueryCorpConferenceDetailsRequest): QueryCorpConferenceDetailsResponse {
  var runtime = new Util.RuntimeOptions{};
  return queryCorpConferenceDetailsEx(request, runtime);
}

/**
 * Description: 查询企业电话会议详情记录
 */
async function queryCorpConferenceDetailsEx(request: QueryCorpConferenceDetailsRequest, runtime: Util.RuntimeOptions): QueryCorpConferenceDetailsResponse {
  Util.validateModel(request);
  var appParams = Util.stringifyMapValue(Util.toMap(request.params));
  return doRequest('dingtalk.corp.conference.details.query', 'POST', '/router/rest', request.headers, appParams, runtime);
}

model BetaOapiCateringCooplistGetParams = {
  offSet: int64(description='数据起始index', name='off_set'),
  pgSize: int64(description='pageSize', name='pg_size'),
  shopId: string(description='店铺id', name='shop_id'),
  coopStatus: int64(description='合作状态：1-申请合作 2-已合作', name='coop_status'),
}

model BetaOapiCateringCooplistGetRequest = {
  headers?: map[string]string,
  params:BetaOapiCateringCooplistGetParams,
}

model BetaOapiCateringCooplistGetResponseBody = {
  result?: {
    list?: [
      {
        mealItemList?: [
          {
            deliveryTime?: string(description='送达时间 HH:mm', name='delivery_time'),
            title?: string(description='点餐项名称', name='title'),
            id?: int64(description='id', name='id'),
          }
        ](description='mealItemList', name='meal_item_list'),
        mealTime?: int64(description='点餐时间枚举值：2-法定工作日3-双休及节假日', name='meal_time'),
        address?: string(description='缩略地址，可为空', name='address'),
        addressDetail?: string(description='送餐详细地址', name='address_detail'),
        corpId?: string(description='企业corpId', name='corp_id'),
        corpName?: string(description='企业名称', name='corp_name'),
        logo?: string(description='企业logo的url', name='logo'),
      }
    ](description='list', name='list'),
    hasNext?: boolean(description='是否有下一项数据', name='has_next'),
  }(description='result', name='result'),
  success?: boolean(description='success or not', name='success'),
  errcode?: int64(description='错误代码', name='errcode'),
  errmsg?: string(description='错误信息', name='errmsg'),
}

model BetaOapiCateringCooplistGetResponse = {
  headers: map[string]string,
  body: BetaOapiCateringCooplistGetResponseBody,
}

/**
 * Description: 分页获取合作企业点餐设置列表
 */
async function betaOapiCateringCooplistGet(request: BetaOapiCateringCooplistGetRequest): BetaOapiCateringCooplistGetResponse {
  var runtime = new Util.RuntimeOptions{};
  return betaOapiCateringCooplistGetEx(request, runtime);
}

/**
 * Description: 分页获取合作企业点餐设置列表
 */
async function betaOapiCateringCooplistGetEx(request: BetaOapiCateringCooplistGetRequest, runtime: Util.RuntimeOptions): BetaOapiCateringCooplistGetResponse {
  Util.validateModel(request);
  var appParams = Util.stringifyMapValue(Util.toMap(request.params));
  return doRequestOApi('POST', '/topapi/catering/cooplist/get/beta', request.headers, appParams, runtime);
}

model BetaOapiCateringMealconfigGetParams = {
  mealDayOffset: int64(description='获取未来n天的可点餐时间（包括今天）如： 1， 则返回今天和明天的可点餐日期，最大值为13', name='meal_day_offset'),
}

model BetaOapiCateringMealconfigGetRequest = {
  headers?: map[string]string,
  params:BetaOapiCateringMealconfigGetParams,
}

model BetaOapiCateringMealconfigGetResponseBody = {
  errmsg?: string(description='错误信息', name='errmsg'),
  errcode?: int64(description='错误代码', name='errcode'),
  success?: boolean(description='是否成功', name='success'),
  result?: {
    mealItemList?: [
      {
        deliveryTime?: string(description='送达时间 HH:mm', name='delivery_time'),
        title?: string(description='点餐项名称', name='title'),
        id?: int64(description='id', name='id'),
      }
    ](description='Mealitemlist', name='meal_item_list'),
    corpId?: string(description='企业corpId', name='corp_id'),
    addressDetail?: string(description='送餐详细地址', name='address_detail'),
    address?: string(description='缩略地址，可为空', name='address'),
    mealTime?: int64(description='点餐时间枚举值：2-法定工作日3-双休及节假日4- 每天', name='meal_time'),
    comingMealDayList?: [ string ](description='可点餐时间', name='coming_meal_day_list'),
    addressId?: int64(description='默认地址的id', name='address_id'),
    addressList?: [
      {
        address?: string(description='缩略地址，可为空', name='address'),
        addressDetail?: string(description='送餐详细地址', name='address_detail'),
        addressId?: int64(description='地址id', name='address_id'),
      }
    ](description='Addressvos', name='address_list'),
  }(description='GroupMealSettingVo', name='result'),
}

model BetaOapiCateringMealconfigGetResponse = {
  headers: map[string]string,
  body: BetaOapiCateringMealconfigGetResponseBody,
}

/**
 * Description: 当前企业的点餐设置
 */
async function betaOapiCateringMealconfigGet(request: BetaOapiCateringMealconfigGetRequest): BetaOapiCateringMealconfigGetResponse {
  var runtime = new Util.RuntimeOptions{};
  return betaOapiCateringMealconfigGetEx(request, runtime);
}

/**
 * Description: 当前企业的点餐设置
 */
async function betaOapiCateringMealconfigGetEx(request: BetaOapiCateringMealconfigGetRequest, runtime: Util.RuntimeOptions): BetaOapiCateringMealconfigGetResponse {
  Util.validateModel(request);
  var appParams = Util.stringifyMapValue(Util.toMap(request.params));
  return doRequestOApi('POST', '/topapi/catering/mealconfig/get/beta', request.headers, appParams, runtime);
}

model BetaOapiCateringApplylistCorpidlistGetParams = {
  shopIdList: [ string ](description='店铺id列表', maxItems=20, name='shop_id_list'),
}

model BetaOapiCateringApplylistCorpidlistGetRequest = {
  headers?: map[string]string,
  params:BetaOapiCateringApplylistCorpidlistGetParams,
}

model BetaOapiCateringApplylistCorpidlistGetResponseBody = {
  result?: [
    {
      corpId?: string(description='申请合作企业的corpId', name='corp_id'),
      shopId?: string(description='申请合作的商铺id', name='shop_id'),
    }
  ](description='result', name='result'),
  success?: boolean(description='是否成功', name='success'),
  errcode?: int64(description='错误代码', name='errcode'),
  errmsg?: string(description='错误信息', name='errmsg'),
}

model BetaOapiCateringApplylistCorpidlistGetResponse = {
  headers: map[string]string,
  body: BetaOapiCateringApplylistCorpidlistGetResponseBody,
}

/**
 * Description: 获取所有申请合作企业id列表
 */
async function betaOapiCateringApplylistCorpidlistGet(request: BetaOapiCateringApplylistCorpidlistGetRequest): BetaOapiCateringApplylistCorpidlistGetResponse {
  var runtime = new Util.RuntimeOptions{};
  return betaOapiCateringApplylistCorpidlistGetEx(request, runtime);
}

/**
 * Description: 获取所有申请合作企业id列表
 */
async function betaOapiCateringApplylistCorpidlistGetEx(request: BetaOapiCateringApplylistCorpidlistGetRequest, runtime: Util.RuntimeOptions): BetaOapiCateringApplylistCorpidlistGetResponse {
  Util.validateModel(request);
  var appParams = Util.stringifyMapValue(Util.toMap(request.params));
  return doRequestOApi('POST', '/topapi/catering/applylist/corpidlist/get/beta', request.headers, appParams, runtime);
}

model BetaOapiCateringCoopDealParams = {
  corpEndCorpId: string(description='申请企业的corpId', name='corp_end_corp_id'),
  shopId: string(description='商铺id', name='shop_id'),
  coopStatus: int64(description='2同意申请，3拒绝申请，7已合作时解除合作', name='coop_status'),
}

model BetaOapiCateringCoopDealRequest = {
  headers?: map[string]string,
  params:BetaOapiCateringCoopDealParams,
}

model BetaOapiCateringCoopDealResponseBody = {
  success?: boolean(description='是否成功', name='success'),
  errcode?: int64(description='错误代码', name='errcode'),
  errmsg?: string(description='错误信息', name='errmsg'),
}

model BetaOapiCateringCoopDealResponse = {
  headers: map[string]string,
  body: BetaOapiCateringCoopDealResponseBody,
}

/**
 * Description: 商户端处理合作关系
 */
async function betaOapiCateringCoopDeal(request: BetaOapiCateringCoopDealRequest): BetaOapiCateringCoopDealResponse {
  var runtime = new Util.RuntimeOptions{};
  return betaOapiCateringCoopDealEx(request, runtime);
}

/**
 * Description: 商户端处理合作关系
 */
async function betaOapiCateringCoopDealEx(request: BetaOapiCateringCoopDealRequest, runtime: Util.RuntimeOptions): BetaOapiCateringCoopDealResponse {
  Util.validateModel(request);
  var appParams = Util.stringifyMapValue(Util.toMap(request.params));
  return doRequestOApi('POST', '/topapi/catering/coop/deal/beta', request.headers, appParams, runtime);
}

model DeleteOapiProcessWorkrecordParams = {
  request: {
    agentid?: int64(description='应用id', name='agentid'),
    processInstanceId: string(description='实例id', name='process_instance_id'),
  }(description='request', name='request'),
}

model DeleteOapiProcessWorkrecordRequest = {
  headers?: map[string]string,
  params:DeleteOapiProcessWorkrecordParams,
}

model DeleteOapiProcessWorkrecordResponseBody = {
  errcode?: int64(description='0', name='errcode'),
  errmsg?: string(description='成功', name='errmsg'),
}

model DeleteOapiProcessWorkrecordResponse = {
  headers: map[string]string,
  body: DeleteOapiProcessWorkrecordResponseBody,
}

/**
 * Description: 删除假流程实例
 */
async function deleteOapiProcessWorkrecord(request: DeleteOapiProcessWorkrecordRequest): DeleteOapiProcessWorkrecordResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteOapiProcessWorkrecordEx(request, runtime);
}

/**
 * Description: 删除假流程实例
 */
async function deleteOapiProcessWorkrecordEx(request: DeleteOapiProcessWorkrecordRequest, runtime: Util.RuntimeOptions): DeleteOapiProcessWorkrecordResponse {
  Util.validateModel(request);
  var appParams = Util.stringifyMapValue(Util.toMap(request.params));
  return doRequestOApi('POST', '/topapi/process/workrecord/delete', request.headers, appParams, runtime);
}

model GetOapiCollectionInstanceParams = {
  formInstanceId: string(description='实例id', name='formInstance_id'),
  bizType?: int64(description='0表示通用填表，1表示教育版填表', name='biz_type'),
}

model GetOapiCollectionInstanceRequest = {
  headers?: map[string]string,
  params:GetOapiCollectionInstanceParams,
}

model GetOapiCollectionInstanceResponseBody = {
  errcode?: int64(description='错误码', name='errcode'),
  errmsg?: string(description='错误信息', name='errmsg'),
  result?: {
    formCode?: string(description='表单code', name='form_code'),
    title?: string(description='标题', name='title'),
    creator?: string(description='创建者userid', name='creator'),
    createTime?: string(description='创建时间', pattern='\\\\d{4}[-]\\\\d{1,2}[-]\\\\d{1,2}[T]\\\\d{2}:\\\\d{2}:\\\\d{2}[Z]', name='create_time'),
    modifyTime?: string(description='修改时间', pattern='\\\\d{4}[-]\\\\d{1,2}[-]\\\\d{1,2}[T]\\\\d{2}:\\\\d{2}:\\\\d{2}[Z]', name='modify_time'),
    formList?: [
      {
        label?: string(description='表单标签名', name='label'),
        key?: string(description='控件名', name='key'),
        value?: string(description='表单值', name='value'),
      }
    ](description='表单具体数据', name='form_list'),
  }(description='结果', name='result'),
}

model GetOapiCollectionInstanceResponse = {
  headers: map[string]string,
  body: GetOapiCollectionInstanceResponseBody,
}

/**
 * Description: 获取实例详情
 */
async function getOapiCollectionInstance(request: GetOapiCollectionInstanceRequest): GetOapiCollectionInstanceResponse {
  var runtime = new Util.RuntimeOptions{};
  return getOapiCollectionInstanceEx(request, runtime);
}

/**
 * Description: 获取实例详情
 */
async function getOapiCollectionInstanceEx(request: GetOapiCollectionInstanceRequest, runtime: Util.RuntimeOptions): GetOapiCollectionInstanceResponse {
  Util.validateModel(request);
  var appParams = Util.stringifyMapValue(Util.toMap(request.params));
  return doRequestOApi('POST', '/topapi/collection/instance/get', request.headers, appParams, runtime);
}

model UpgradeOapiImChatServicegroupParams = {
  chatId: string(description='开放的chatId', maxLength=128, name='chat_id'),
}

model UpgradeOapiImChatServicegroupRequest = {
  headers?: map[string]string,
  params:UpgradeOapiImChatServicegroupParams,
}

model UpgradeOapiImChatServicegroupResponseBody = {
  errcode?: int64(description='错误代码', name='errcode'),
  errmsg?: string(description='错误文案', name='errmsg'),
  success?: boolean(description='是否成功', name='success'),
}

model UpgradeOapiImChatServicegroupResponse = {
  headers: map[string]string,
  body: UpgradeOapiImChatServicegroupResponseBody,
}

/**
 * Description: 内部群升级到服务群
 */
async function upgradeOapiImChatServicegroup(request: UpgradeOapiImChatServicegroupRequest): UpgradeOapiImChatServicegroupResponse {
  var runtime = new Util.RuntimeOptions{};
  return upgradeOapiImChatServicegroupEx(request, runtime);
}

/**
 * Description: 内部群升级到服务群
 */
async function upgradeOapiImChatServicegroupEx(request: UpgradeOapiImChatServicegroupRequest, runtime: Util.RuntimeOptions): UpgradeOapiImChatServicegroupResponse {
  Util.validateModel(request);
  var appParams = Util.stringifyMapValue(Util.toMap(request.params));
  return doRequestOApi('POST', '/topapi/im/chat/servicegroup/upgrade', request.headers, appParams, runtime);
}

model PushOapiCateringOrderParams = {
  orderDetails?: string(description='订单详情', name='order_details'),
  feeOriginal?: int64(description='原始费用(分)', name='fee_original'),
  feeAfterDiscount?: int64(description='折后费用(分)', name='fee_after_discount'),
  orderId?: string(description='订单id', name='order_id'),
  shopName?: string(description='店铺名称', name='shop_name'),
  shopId?: string(description='店铺id', name='shop_id'),
  feeActuallyPay?: int64(description='实收总额(分)', name='fee_actually_pay'),
  paymentTime?: string(description='订单支付时间', pattern='\\\\d{4}[-]\\\\d{1,2}[-]\\\\d{1,2}[T]\\\\d{2}:\\\\d{2}:\\\\d{2}[Z]', name='payment_time'),
  feeShouldPay?: int64(description='应付总额(分)', name='fee_should_pay'),
  ordererUserId?: string(description='下单人的userId', name='orderer_user_id'),
}

model PushOapiCateringOrderRequest = {
  headers?: map[string]string,
  params?:PushOapiCateringOrderParams,
}

model PushOapiCateringOrderResponseBody = {
  result?: boolean(description='是否成功', name='result'),
  errmsg?: string(description='errmsg', name='errmsg'),
  errcode?: int64(description='errcode', name='errcode'),
}

model PushOapiCateringOrderResponse = {
  headers: map[string]string,
  body: PushOapiCateringOrderResponseBody,
}

/**
 * Description: 团餐ISV可通过该api上传餐饮商家的订单信息
 */
async function pushOapiCateringOrder(request: PushOapiCateringOrderRequest): PushOapiCateringOrderResponse {
  var runtime = new Util.RuntimeOptions{};
  return pushOapiCateringOrderEx(request, runtime);
}

/**
 * Description: 团餐ISV可通过该api上传餐饮商家的订单信息
 */
async function pushOapiCateringOrderEx(request: PushOapiCateringOrderRequest, runtime: Util.RuntimeOptions): PushOapiCateringOrderResponse {
  Util.validateModel(request);
  var appParams = Util.stringifyMapValue(Util.toMap(request.params));
  return doRequestOApi('POST', '/topapi/catering/order/push', request.headers, appParams, runtime);
}

model UpdateOapiChatSubadminParams = {
  chatid: string(description='群会话id', name='chatid'),
  userids: [ string ](description='群成员id', maxItems=12, name='userids'),
  role: int64(description='设置2添加为管理员，设置3删除该管理员', name='role'),
}

model UpdateOapiChatSubadminRequest = {
  headers?: map[string]string,
  params:UpdateOapiChatSubadminParams,
}

model UpdateOapiChatSubadminResponseBody = {
  success?: boolean(description='是否调用成功', name='success'),
  errcode?: int64(description='错误码', name='errcode'),
  errmsg?: string(description='错误信息', name='errmsg'),
}

model UpdateOapiChatSubadminResponse = {
  headers: map[string]string,
  body: UpdateOapiChatSubadminResponseBody,
}

/**
 * Description: 增加和删除群管理员接口
 */
async function updateOapiChatSubadmin(request: UpdateOapiChatSubadminRequest): UpdateOapiChatSubadminResponse {
  var runtime = new Util.RuntimeOptions{};
  return updateOapiChatSubadminEx(request, runtime);
}

/**
 * Description: 增加和删除群管理员接口
 */
async function updateOapiChatSubadminEx(request: UpdateOapiChatSubadminRequest, runtime: Util.RuntimeOptions): UpdateOapiChatSubadminResponse {
  Util.validateModel(request);
  var appParams = Util.stringifyMapValue(Util.toMap(request.params));
  return doRequestOApi('POST', '/topapi/chat/subadmin/update', request.headers, appParams, runtime);
}

model GetbyuseridOapiWorkrecordParams = {
  userid: string(description='用户唯一ID', name='userid'),
  offset: int64(description='分页游标，从0开始，如返回结果中has_more为true，则表示还有数据，offset再传上一次的offset+limit', name='offset'),
  limit: int64(description='分页大小，最多50', name='limit'),
  status: int64(description='待办事项状态，0表示未完成，1表示完成', name='status'),
}

model GetbyuseridOapiWorkrecordRequest = {
  headers?: map[string]string,
  params:GetbyuseridOapiWorkrecordParams,
}

model GetbyuseridOapiWorkrecordResponseBody = {
  errcode?: int64(description='dingOpenErrcode', name='errcode'),
  errmsg?: string(description='errorMsg', name='errmsg'),
  records?: {
    hasMore?: boolean(description='hasMore', name='has_more'),
    list?: [
      {
        recordId?: string(description='recordId', name='record_id'),
        createTime?: int64(description='createAt', name='create_time'),
        title?: string(description='title', name='title'),
        url?: string(description='url', name='url'),
        forms?: [
          {
            title?: string(description='title', name='title'),
            content?: string(description='content', name='content'),
          }
        ](description='forms', name='forms'),
      }
    ](description='list', name='list'),
  }(description='result', name='records'),
}

model GetbyuseridOapiWorkrecordResponse = {
  headers: map[string]string,
  body: GetbyuseridOapiWorkrecordResponseBody,
}

/**
 * Description: 获取用户的待办事项
 */
async function getbyuseridOapiWorkrecord(request: GetbyuseridOapiWorkrecordRequest): GetbyuseridOapiWorkrecordResponse {
  var runtime = new Util.RuntimeOptions{};
  return getbyuseridOapiWorkrecordEx(request, runtime);
}

/**
 * Description: 获取用户的待办事项
 */
async function getbyuseridOapiWorkrecordEx(request: GetbyuseridOapiWorkrecordRequest, runtime: Util.RuntimeOptions): GetbyuseridOapiWorkrecordResponse {
  Util.validateModel(request);
  var appParams = Util.stringifyMapValue(Util.toMap(request.params));
  return doRequestOApi('POST', '/topapi/workrecord/getbyuserid', request.headers, appParams, runtime);
}

model ModifymemberinfoOapiImpaasGroupmemberParams = {
  request: {
    chatid: string(description='群ID', name='chatid'),
    memberInfo: {
      type: string(description='类型', name='type'),
      id: string(description='用户id', name='id'),
      nick: string(description='用户昵称，要修改到的值', name='nick'),
      ext?: string(description='扩展属性', name='ext'),
    }(description='要修改的成员信息', name='member_info'),
  }(description='请求', name='request'),
}

model ModifymemberinfoOapiImpaasGroupmemberRequest = {
  headers?: map[string]string,
  params:ModifymemberinfoOapiImpaasGroupmemberParams,
}

model ModifymemberinfoOapiImpaasGroupmemberResponseBody = {
  errcode?: int64(description='dingOpenErrcode', name='errcode'),
  errmsg?: string(description='errorMsg', name='errmsg'),
}

model ModifymemberinfoOapiImpaasGroupmemberResponse = {
  headers: map[string]string,
  body: ModifymemberinfoOapiImpaasGroupmemberResponseBody,
}

/**
 * Description: 修改群成员信息
 */
async function modifymemberinfoOapiImpaasGroupmember(request: ModifymemberinfoOapiImpaasGroupmemberRequest): ModifymemberinfoOapiImpaasGroupmemberResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifymemberinfoOapiImpaasGroupmemberEx(request, runtime);
}

/**
 * Description: 修改群成员信息
 */
async function modifymemberinfoOapiImpaasGroupmemberEx(request: ModifymemberinfoOapiImpaasGroupmemberRequest, runtime: Util.RuntimeOptions): ModifymemberinfoOapiImpaasGroupmemberResponse {
  Util.validateModel(request);
  var appParams = Util.stringifyMapValue(Util.toMap(request.params));
  return doRequestOApi('POST', '/topapi/impaas/groupmember/modifymemberinfo', request.headers, appParams, runtime);
}

model DismissOapiImpaasGroupParams = {
  request?: {
    chatid: string(description='群ID', name='chatid'),
  }(description='解散群请求', name='request'),
}

model DismissOapiImpaasGroupRequest = {
  headers?: map[string]string,
  params?:DismissOapiImpaasGroupParams,
}

model DismissOapiImpaasGroupResponseBody = {
  errcode?: int64(description='dingOpenErrcode', name='errcode'),
  errmsg?: string(description='errorMsg', name='errmsg'),
}

model DismissOapiImpaasGroupResponse = {
  headers: map[string]string,
  body: DismissOapiImpaasGroupResponseBody,
}

/**
 * Description: IMPAAS解散群接口
 */
async function dismissOapiImpaasGroup(request: DismissOapiImpaasGroupRequest): DismissOapiImpaasGroupResponse {
  var runtime = new Util.RuntimeOptions{};
  return dismissOapiImpaasGroupEx(request, runtime);
}

/**
 * Description: IMPAAS解散群接口
 */
async function dismissOapiImpaasGroupEx(request: DismissOapiImpaasGroupRequest, runtime: Util.RuntimeOptions): DismissOapiImpaasGroupResponse {
  Util.validateModel(request);
  var appParams = Util.stringifyMapValue(Util.toMap(request.params));
  return doRequestOApi('POST', '/topapi/impaas/group/dismiss', request.headers, appParams, runtime);
}

model GetmemberlistOapiImpaasGroupmemberParams = {
  request: {
    chatid: string(description='群ID', name='chatid'),
    offset?: int64(description='群成员列表偏移', name='offset'),
    length?: int64(description='本次请求返回的群成员列表数量', name='length'),
  }(description='请求结构体', name='request'),
}

model GetmemberlistOapiImpaasGroupmemberRequest = {
  headers?: map[string]string,
  params:GetmemberlistOapiImpaasGroupmemberParams,
}

model GetmemberlistOapiImpaasGroupmemberResponseBody = {
  memberList?: [
    {
      id?: string(description='id', name='id'),
      type?: string(description='type', name='type'),
      nick?: string(description='nick', name='nick'),
      role?: int64(description='role', name='role'),
      ext?: string(description='ext', name='ext'),
    }
  ](description='result', name='member_list'),
  errcode?: int64(description='dingOpenErrcode', name='errcode'),
  errmsg?: string(description='errorMsg', name='errmsg'),
}

model GetmemberlistOapiImpaasGroupmemberResponse = {
  headers: map[string]string,
  body: GetmemberlistOapiImpaasGroupmemberResponseBody,
}

/**
 * Description: 获取群成员列表
 */
async function getmemberlistOapiImpaasGroupmember(request: GetmemberlistOapiImpaasGroupmemberRequest): GetmemberlistOapiImpaasGroupmemberResponse {
  var runtime = new Util.RuntimeOptions{};
  return getmemberlistOapiImpaasGroupmemberEx(request, runtime);
}

/**
 * Description: 获取群成员列表
 */
async function getmemberlistOapiImpaasGroupmemberEx(request: GetmemberlistOapiImpaasGroupmemberRequest, runtime: Util.RuntimeOptions): GetmemberlistOapiImpaasGroupmemberResponse {
  Util.validateModel(request);
  var appParams = Util.stringifyMapValue(Util.toMap(request.params));
  return doRequestOApi('POST', '/topapi/impaas/groupmember/getmemberlist', request.headers, appParams, runtime);
}

model CreateOapiImpaasGroupParams = {
  request: {
    name: string(description='群名称', name='name'),
    creater: {
      id: string(description='创建者账号ID，类型由type字段决定', name='id'),
      type: string(description='账号ID类型，当type=staff时，id填写staffid，当type=channelUser时，id字段填写channelUserId', name='type'),
    }(description='创建者', name='creater'),
    type: int64(description='群类型,目前没有使用，填0即可', name='type'),
    channel: string(description='接入方channel信息，该值由接入方接入IMPaaS平台时，向IMPaaS平台申请，例如“hema”“eleme”等。', name='channel'),
    memberList: [
      {
        id: string(description='群成员账号账号ID，类型由type字段决定', name='id'),
        type: string(description='账号ID类型，当type=staff时，id填写staffid，当type=channelUser时，id字段填写channelUserId', name='type'),
      }
    ](description='群成员列表', maxItems=100, name='member_list'),
    extension?: string(description='扩展数据,业务可以自定义，目前最大支持256B', name='extension'),
    uuid?: string(description='uuid, 用于防止弱网情况下超时导致重复创建, 一分钟内传递相同的uuid会返回同一个群，传空则不去重', name='uuid'),
    entranceId?: int64(description='二级会话入口ID', name='entrance_id'),
    showHistoryType?: int64(description='新人进群是否能查看最近100条记录。0:不能；1:可以查看最近100条记录；不填默认为0', name='show_history_type'),
  }(description='创建群请求对象', name='request'),
}

model CreateOapiImpaasGroupRequest = {
  headers?: map[string]string,
  params:CreateOapiImpaasGroupParams,
}

model CreateOapiImpaasGroupResponseBody = {
  chatid?: string(description='群ID', name='chatid'),
  errcode?: int64(description='错误码，0为成功', name='errcode'),
  errmsg?: string(description='错误信息描述', name='errmsg'),
}

model CreateOapiImpaasGroupResponse = {
  headers: map[string]string,
  body: CreateOapiImpaasGroupResponseBody,
}

/**
 * Description: IMPAAS平台创建群接口
 */
async function createOapiImpaasGroup(request: CreateOapiImpaasGroupRequest): CreateOapiImpaasGroupResponse {
  var runtime = new Util.RuntimeOptions{};
  return createOapiImpaasGroupEx(request, runtime);
}

/**
 * Description: IMPAAS平台创建群接口
 */
async function createOapiImpaasGroupEx(request: CreateOapiImpaasGroupRequest, runtime: Util.RuntimeOptions): CreateOapiImpaasGroupResponse {
  Util.validateModel(request);
  var appParams = Util.stringifyMapValue(Util.toMap(request.params));
  return doRequestOApi('POST', '/topapi/impaas/group/create', request.headers, appParams, runtime);
}

model QueryOapiImpaasGroupParams = {
  request: {
    chatid: string(description='群ID', name='chatid'),
  }(description='请求对象', name='request'),
}

model QueryOapiImpaasGroupRequest = {
  headers?: map[string]string,
  params:QueryOapiImpaasGroupParams,
}

model QueryOapiImpaasGroupResponseBody = {
  result?: {
    chatid?: string(description='群ID', name='chatid'),
    groupName?: string(description='群名称', name='group_name'),
    type?: int64(description='群类型', name='type'),
    memberLimit?: int64(description='群成员人数上限', name='member_limit'),
    memberCount?: int64(description='群成员人数', name='member_count'),
    creater?: {
      id?: string(description='群主ID，类型由type字段决定', name='id'),
      type?: string(description='账号ID类型，当type=staff时，id填写staffid，当type=channelUser时，id字段填写channelUserId', name='type'),
    }(description='群主', name='creater'),
  }(description='群信息', name='result'),
  errcode?: int64(description='错误码', name='errcode'),
  errmsg?: string(description='错误信息描述', name='errmsg'),
}

model QueryOapiImpaasGroupResponse = {
  headers: map[string]string,
  body: QueryOapiImpaasGroupResponseBody,
}

/**
 * Description: impaas查询群信息接口
 */
async function queryOapiImpaasGroup(request: QueryOapiImpaasGroupRequest): QueryOapiImpaasGroupResponse {
  var runtime = new Util.RuntimeOptions{};
  return queryOapiImpaasGroupEx(request, runtime);
}

/**
 * Description: impaas查询群信息接口
 */
async function queryOapiImpaasGroupEx(request: QueryOapiImpaasGroupRequest, runtime: Util.RuntimeOptions): QueryOapiImpaasGroupResponse {
  Util.validateModel(request);
  var appParams = Util.stringifyMapValue(Util.toMap(request.params));
  return doRequestOApi('POST', '/topapi/impaas/group/query', request.headers, appParams, runtime);
}

model GetOapiKacDatavVideoliveParams = {
  paramVideoLiveSummaryRequest: {
    dataId: string(description='日期标识', name='data_id'),
  }(description='请求参数对象', name='param_video_live_summary_request'),
}

model GetOapiKacDatavVideoliveRequest = {
  headers?: map[string]string,
  params:GetOapiKacDatavVideoliveParams,
}

model GetOapiKacDatavVideoliveResponseBody = {
  errcode?: int64(description='错误码', name='errcode'),
  errmsg?: string(description='错误描述信息', name='errmsg'),
  result?: {
    liveLaunchSucc5minCnt?: int64(description='成功发起5分钟直播次数', name='live_launch_succ5min_cnt'),
    liveLaunchSuccCnt?: int64(description='成功发起直播次数', name='live_launch_succ_cnt'),
    livePlayCnt?: int64(description='观看直播次数', name='live_play_cnt'),
    livePlayUserCnt?: int64(description='观看直播人数', name='live_play_user_cnt'),
    liveSuccTimeLen?: string(description='成功发起直播时长', name='live_succ_time_len'),
    maxUserCnt?: int64(description='观看人数最多直播的观看人数', name='max_user_cnt'),
    watchGroupLiveUserCnt?: int64(description='最近一天看直播的人数（包含观看和回放', name='watch_group_live_user_cnt'),
  }(description='统计数据对象', name='result'),
}

model GetOapiKacDatavVideoliveResponse = {
  headers: map[string]string,
  body: GetOapiKacDatavVideoliveResponseBody,
}

/**
 * Description: 获取大客户对应的直播统计数据
 */
async function getOapiKacDatavVideolive(request: GetOapiKacDatavVideoliveRequest): GetOapiKacDatavVideoliveResponse {
  var runtime = new Util.RuntimeOptions{};
  return getOapiKacDatavVideoliveEx(request, runtime);
}

/**
 * Description: 获取大客户对应的直播统计数据
 */
async function getOapiKacDatavVideoliveEx(request: GetOapiKacDatavVideoliveRequest, runtime: Util.RuntimeOptions): GetOapiKacDatavVideoliveResponse {
  Util.validateModel(request);
  var appParams = Util.stringifyMapValue(Util.toMap(request.params));
  return doRequestOApi('POST', '/topapi/kac/datav/videolive/get', request.headers, appParams, runtime);
}

model QueryOapiProcessTemplateUpgradeinfoParams = {
  processCodes: [ string ](description='流程编码List<String>类型', maxItems=20, name='process_codes'),
}

model QueryOapiProcessTemplateUpgradeinfoRequest = {
  headers?: map[string]string,
  params:QueryOapiProcessTemplateUpgradeinfoParams,
}

model QueryOapiProcessTemplateUpgradeinfoResponseBody = {
  result?: [
    {
      canBeUpgraded?: boolean(description='是否可升级', name='can_be_upgraded'),
      processCode?: string(description='模板code', name='process_code'),
    }
  ](description='List<Object>类型，Object含processCode和canBeUpgraded两个属性', name='result'),
  errmsg?: string(description='errorMsg', name='errmsg'),
  errcode?: int64(description='dingOpenErrcode', name='errcode'),
}

model QueryOapiProcessTemplateUpgradeinfoResponse = {
  headers: map[string]string,
  body: QueryOapiProcessTemplateUpgradeinfoResponseBody,
}

/**
 * Description: 获取模板升级信息,模板是否可升级
 */
async function queryOapiProcessTemplateUpgradeinfo(request: QueryOapiProcessTemplateUpgradeinfoRequest): QueryOapiProcessTemplateUpgradeinfoResponse {
  var runtime = new Util.RuntimeOptions{};
  return queryOapiProcessTemplateUpgradeinfoEx(request, runtime);
}

/**
 * Description: 获取模板升级信息,模板是否可升级
 */
async function queryOapiProcessTemplateUpgradeinfoEx(request: QueryOapiProcessTemplateUpgradeinfoRequest, runtime: Util.RuntimeOptions): QueryOapiProcessTemplateUpgradeinfoResponse {
  Util.validateModel(request);
  var appParams = Util.stringifyMapValue(Util.toMap(request.params));
  return doRequestOApi('POST', '/topapi/process/template/upgradeinfo/query', request.headers, appParams, runtime);
}

model GetOapiKacDatavVideoconfParams = {
  paramMcsSummaryRequest: {
    dataId: string(description='日期标识', name='data_id'),
  }(description='请求对象类型', name='param_mcs_summary_request'),
}

model GetOapiKacDatavVideoconfRequest = {
  headers?: map[string]string,
  params:GetOapiKacDatavVideoconfParams,
}

model GetOapiKacDatavVideoconfResponseBody = {
  errcode?: int64(description='错误码', name='errcode'),
  errormsg?: string(description='错误描述', name='errormsg'),
  result?: {
    joinVideoConfLen?: int64(description='视频会议企业的累积消耗时长（即参会者入会总时长，且算到发起企业上）(毫秒)', name='join_video_conf_len'),
    joinVideoConfSeccUsrCnt?: int64(description='视频会议成功参与人次', name='join_video_conf_secc_usr_cnt'),
    joinVideoConfSeccUsrNum?: int64(description='视频会议成功参与用户数', name='join_video_conf_secc_usr_num'),
    joinVideoConfUsrCnt?: int64(description='参与视频会议用户数', name='join_video_conf_usr_cnt'),
    startVideoConfCnt?: int64(description='视频会议发起次数', name='start_video_conf_cnt'),
    startVideoConfSeccCnt?: int64(description='成功发起视频会议数', name='start_video_conf_secc_cnt'),
    startVideoConfUsrNum?: int64(description='视频会议发起用户数', name='start_video_conf_usr_num'),
    videoConfAveUsrNum?: int64(description='视频会议平均每通参与人次', name='video_conf_ave_usr_num'),
  }(description='返回结果对象', name='result'),
}

model GetOapiKacDatavVideoconfResponse = {
  headers: map[string]string,
  body: GetOapiKacDatavVideoconfResponseBody,
}

/**
 * Description: 大客户视频会议统计数据查询
 */
async function getOapiKacDatavVideoconf(request: GetOapiKacDatavVideoconfRequest): GetOapiKacDatavVideoconfResponse {
  var runtime = new Util.RuntimeOptions{};
  return getOapiKacDatavVideoconfEx(request, runtime);
}

/**
 * Description: 大客户视频会议统计数据查询
 */
async function getOapiKacDatavVideoconfEx(request: GetOapiKacDatavVideoconfRequest, runtime: Util.RuntimeOptions): GetOapiKacDatavVideoconfResponse {
  Util.validateModel(request);
  var appParams = Util.stringifyMapValue(Util.toMap(request.params));
  return doRequestOApi('POST', '/topapi/kac/datav/videoconf/get', request.headers, appParams, runtime);
}

model UpgradeOapiProcessTemplateParams = {
  processCode: string(description='流程code', name='process_code'),
  formComponentId: string(description='数组或金额类组件id', name='form_component_id'),
  detailComponentId?: string(description='明细组件id', name='detail_component_id'),
  userid: string(description='其实是staffId', name='userid'),
}

model UpgradeOapiProcessTemplateRequest = {
  headers?: map[string]string,
  params:UpgradeOapiProcessTemplateParams,
}

model UpgradeOapiProcessTemplateResponseBody = {
  result?: boolean(description='返回是否升级成功', name='result'),
  errcode?: int64(description='错误code', name='errcode'),
  errmsg?: string(description='错误信息', name='errmsg'),
  success?: boolean(description='服务调用时候成功', name='success'),
}

model UpgradeOapiProcessTemplateResponse = {
  headers: map[string]string,
  body: UpgradeOapiProcessTemplateResponseBody,
}

/**
 * Description: 升级企业审批模板中的金额类组件到新的支付套件
 */
async function upgradeOapiProcessTemplate(request: UpgradeOapiProcessTemplateRequest): UpgradeOapiProcessTemplateResponse {
  var runtime = new Util.RuntimeOptions{};
  return upgradeOapiProcessTemplateEx(request, runtime);
}

/**
 * Description: 升级企业审批模板中的金额类组件到新的支付套件
 */
async function upgradeOapiProcessTemplateEx(request: UpgradeOapiProcessTemplateRequest, runtime: Util.RuntimeOptions): UpgradeOapiProcessTemplateResponse {
  Util.validateModel(request);
  var appParams = Util.stringifyMapValue(Util.toMap(request.params));
  return doRequestOApi('POST', '/topapi/process/template/upgrade', request.headers, appParams, runtime);
}

model TerminateOapiDingpayOrderParams = {
  extension?: string(description='扩展信息', name='extension'),
  orderNos: [ string ](description='dingpay单号列表', maxItems=20, name='order_nos'),
  operator: string(description='操作者员工号', name='operator'),
  reason: string(description='中止原因', name='reason'),
}

model TerminateOapiDingpayOrderRequest = {
  headers?: map[string]string,
  params:TerminateOapiDingpayOrderParams,
}

model TerminateOapiDingpayOrderResponseBody = {
  result?: {
    terminateResult?: [
      {
        orderNo?: string(description='订单号', name='order_no'),
        terminated?: boolean(description='是否终止', name='terminated'),
      }
    ](description='终止结果列表', name='terminate_result'),
  }(description='result', name='result'),
  errcode?: int64(description='钉钉错误代码', name='errcode'),
  errmsg?: string(description='result', name='errmsg'),
  success?: boolean(description='是否成功', name='success'),
}

model TerminateOapiDingpayOrderResponse = {
  headers: map[string]string,
  body: TerminateOapiDingpayOrderResponseBody,
}

/**
 * Description: 中止dingpay订单的支付
 */
async function terminateOapiDingpayOrder(request: TerminateOapiDingpayOrderRequest): TerminateOapiDingpayOrderResponse {
  var runtime = new Util.RuntimeOptions{};
  return terminateOapiDingpayOrderEx(request, runtime);
}

/**
 * Description: 中止dingpay订单的支付
 */
async function terminateOapiDingpayOrderEx(request: TerminateOapiDingpayOrderRequest, runtime: Util.RuntimeOptions): TerminateOapiDingpayOrderResponse {
  Util.validateModel(request);
  var appParams = Util.stringifyMapValue(Util.toMap(request.params));
  return doRequestOApi('POST', '/topapi/dingpay/order/terminate', request.headers, appParams, runtime);
}

model GetCorpDeviceManageParams = {
  deviceServiceId: int64(description='设备服务商ID', name='device_service_id'),
  deviceId: string(description='设备ID', name='device_id'),
}

model GetCorpDeviceManageRequest = {
  headers?: map[string]string,
  params:GetCorpDeviceManageParams,
}

model GetCorpDeviceManageResponseBody = {
  result?: {
    result?: {
      nick?: string(description='设备昵称', name='nick'),
      deviceId?: string(description='设备ID', name='device_id'),
      deviceTypeName?: string(description='设备类型名称', name='device_type_name'),
      deviceMac?: string(description='设备Mac地址', name='device_mac'),
      version?: string(description='设备硬件版本号', name='version'),
    }(description='result', name='result'),
    dingOpenErrcode?: int64(description='错误码', name='ding_open_errcode'),
    errorMsg?: string(description='错误信息', name='error_msg'),
    success?: boolean(description='请求是否成功', name='success'),
  }(description='result', name='result'),
}

model GetCorpDeviceManageResponse = {
  headers: map[string]string,
  body: GetCorpDeviceManageResponseBody,
}

/**
 * Description: ISV或者企业通过deviceId来获取设备详情
 */
async function getCorpDeviceManage(request: GetCorpDeviceManageRequest): GetCorpDeviceManageResponse {
  var runtime = new Util.RuntimeOptions{};
  return getCorpDeviceManageEx(request, runtime);
}

/**
 * Description: ISV或者企业通过deviceId来获取设备详情
 */
async function getCorpDeviceManageEx(request: GetCorpDeviceManageRequest, runtime: Util.RuntimeOptions): GetCorpDeviceManageResponse {
  Util.validateModel(request);
  var appParams = Util.stringifyMapValue(Util.toMap(request.params));
  return doRequest('dingtalk.corp.device.manage.get', 'POST', '/router/rest', request.headers, appParams, runtime);
}

model QuerylistCorpDeviceManageParams = {
  deviceServiceId: int64(description='设备服务商ID', name='device_service_id'),
  cursor: int64(description='分页拉取设备列表的游标，首次拉取可传Null或者0', name='cursor'),
  size: int64(description='单次请求的大小，最大不超过20', maximum=20, name='size'),
}

model QuerylistCorpDeviceManageRequest = {
  headers?: map[string]string,
  params:QuerylistCorpDeviceManageParams,
}

model QuerylistCorpDeviceManageResponseBody = {
  result?: {
    result?: {
      list?: [
        {
          nick?: string(description='设备昵称', name='nick'),
          deviceId?: string(description='设备ID', name='device_id'),
          avatar?: string(description='设备头像', name='avatar'),
          deviceTypeName?: string(description='设备类型名称', name='device_type_name'),
          onLineStatus?: int64(description='设备在线状态{1:在线，0:不在线}', name='on_line_status'),
          deviceSn?: string(description='设备SN', name='device_sn'),
          deviceMac?: string(description='设备MAC地址', name='device_mac'),
        }
      ](description='设备列表', name='list'),
      nextCursor?: int64(description='下次拉取列表的游标，如果为Null，代表没有数据了', name='next_cursor'),
    }(description='返回的Page对象', name='result'),
    errorMsg?: string(description='错误信息', name='error_msg'),
    dingOpenErrcode?: int64(description='错误码', name='ding_open_errcode'),
    success?: boolean(description='request是否成功', name='success'),
  }(description='返回结果', name='result'),
}

model QuerylistCorpDeviceManageResponse = {
  headers: map[string]string,
  body: QuerylistCorpDeviceManageResponseBody,
}

/**
 * Description: 此接口用于展示企业已经绑定的设备列表(分页接口)
 */
async function querylistCorpDeviceManage(request: QuerylistCorpDeviceManageRequest): QuerylistCorpDeviceManageResponse {
  var runtime = new Util.RuntimeOptions{};
  return querylistCorpDeviceManageEx(request, runtime);
}

/**
 * Description: 此接口用于展示企业已经绑定的设备列表(分页接口)
 */
async function querylistCorpDeviceManageEx(request: QuerylistCorpDeviceManageRequest, runtime: Util.RuntimeOptions): QuerylistCorpDeviceManageResponse {
  Util.validateModel(request);
  var appParams = Util.stringifyMapValue(Util.toMap(request.params));
  return doRequest('dingtalk.corp.device.manage.querylist', 'POST', '/router/rest', request.headers, appParams, runtime);
}

model CleanOapiProcessParams = {
  processCode: string(description='模板唯一码', name='process_code'),
  corpid?: string(description='企业id', name='corpid'),
}

model CleanOapiProcessRequest = {
  headers?: map[string]string,
  params:CleanOapiProcessParams,
}

model CleanOapiProcessResponseBody = {
  errcode?: int64(description='错误码', name='errcode'),
  errmsg?: string(description='错误信息', name='errmsg'),
}

model CleanOapiProcessResponse = {
  headers: map[string]string,
  body: CleanOapiProcessResponseBody,
}

/**
 * Description: 企业解除授权后，isv清理工作流数据
 */
async function cleanOapiProcess(request: CleanOapiProcessRequest): CleanOapiProcessResponse {
  var runtime = new Util.RuntimeOptions{};
  return cleanOapiProcessEx(request, runtime);
}

/**
 * Description: 企业解除授权后，isv清理工作流数据
 */
async function cleanOapiProcessEx(request: CleanOapiProcessRequest, runtime: Util.RuntimeOptions): CleanOapiProcessResponse {
  Util.validateModel(request);
  var appParams = Util.stringifyMapValue(Util.toMap(request.params));
  return doRequestOApi('POST', '/topapi/process/clean', request.headers, appParams, runtime);
}

model BatchupdateOapiProcessWorkrecordParams = {
  request: {
    instances: [
      {
        processInstanceId: string(description='实例id，通过创建待办实例接口获取', name='process_instance_id'),
        status: string(description='实例状态，分为COMPLETED, TERMINATED', name='status'),
        result: string(description='任务结果，分为agree和refuse', name='result'),
      }
    ](description='实例列表', maxItems=2000, name='instances'),
    agentid?: int64(description='企业应用标识', name='agentid'),
  }(description='请求', name='request'),
}

model BatchupdateOapiProcessWorkrecordRequest = {
  headers?: map[string]string,
  params:BatchupdateOapiProcessWorkrecordParams,
}

model BatchupdateOapiProcessWorkrecordResponseBody = {
  errcode?: int64(description='错误码', name='errcode'),
  errmsg?: string(description='错误信息', name='errmsg'),
}

model BatchupdateOapiProcessWorkrecordResponse = {
  headers: map[string]string,
  body: BatchupdateOapiProcessWorkrecordResponseBody,
}

/**
 * Description: 批量更新实例状态
 */
async function batchupdateOapiProcessWorkrecord(request: BatchupdateOapiProcessWorkrecordRequest): BatchupdateOapiProcessWorkrecordResponse {
  var runtime = new Util.RuntimeOptions{};
  return batchupdateOapiProcessWorkrecordEx(request, runtime);
}

/**
 * Description: 批量更新实例状态
 */
async function batchupdateOapiProcessWorkrecordEx(request: BatchupdateOapiProcessWorkrecordRequest, runtime: Util.RuntimeOptions): BatchupdateOapiProcessWorkrecordResponse {
  Util.validateModel(request);
  var appParams = Util.stringifyMapValue(Util.toMap(request.params));
  return doRequestOApi('POST', '/topapi/process/workrecord/batchupdate', request.headers, appParams, runtime);
}

model UpdateCorpDeviceNickParams = {
  deviceServiceId: int64(description='设备服务商ID', name='device_service_id'),
  deviceId: string(description='设备ID', name='device_id'),
  newNick: string(description='设备新昵称', name='new_nick'),
}

model UpdateCorpDeviceNickRequest = {
  headers?: map[string]string,
  params:UpdateCorpDeviceNickParams,
}

model UpdateCorpDeviceNickResponseBody = {
  result?: {
    dingOpenErrcode?: int64(description='错误码', name='ding_open_errcode'),
    errorMsg?: string(description='错误信息', name='error_msg'),
    success?: boolean(description='success', name='success'),
  }(description='result', name='result'),
}

model UpdateCorpDeviceNickResponse = {
  headers: map[string]string,
  body: UpdateCorpDeviceNickResponseBody,
}

/**
 * Description: 修改企业绑定的智能硬件对应的昵称
 */
async function updateCorpDeviceNick(request: UpdateCorpDeviceNickRequest): UpdateCorpDeviceNickResponse {
  var runtime = new Util.RuntimeOptions{};
  return updateCorpDeviceNickEx(request, runtime);
}

/**
 * Description: 修改企业绑定的智能硬件对应的昵称
 */
async function updateCorpDeviceNickEx(request: UpdateCorpDeviceNickRequest, runtime: Util.RuntimeOptions): UpdateCorpDeviceNickResponse {
  Util.validateModel(request);
  var appParams = Util.stringifyMapValue(Util.toMap(request.params));
  return doRequest('dingtalk.corp.device.nick.update', 'POST', '/router/rest', request.headers, appParams, runtime);
}

model ChangegroupownerOapiImpaasConversaionParams = {
  chatid?: string(description='钉钉会话id', name='chatid'),
  userid?: string(description='员工id', name='userid'),
  channel?: string(description='应用channel', name='channel'),
}

model ChangegroupownerOapiImpaasConversaionRequest = {
  headers?: map[string]string,
  params?:ChangegroupownerOapiImpaasConversaionParams,
}

model ChangegroupownerOapiImpaasConversaionResponseBody = {
  result?: string(description='result', name='result'),
  errcode?: int64(description='dingOpenErrcode', name='errcode'),
  errmsg?: string(description='errorMsg', name='errmsg'),
}

model ChangegroupownerOapiImpaasConversaionResponse = {
  headers: map[string]string,
  body: ChangegroupownerOapiImpaasConversaionResponseBody,
}

/**
 * Description: 盒马接入钉钉sdk，群主转交功能
 */
async function changegroupownerOapiImpaasConversaion(request: ChangegroupownerOapiImpaasConversaionRequest): ChangegroupownerOapiImpaasConversaionResponse {
  var runtime = new Util.RuntimeOptions{};
  return changegroupownerOapiImpaasConversaionEx(request, runtime);
}

/**
 * Description: 盒马接入钉钉sdk，群主转交功能
 */
async function changegroupownerOapiImpaasConversaionEx(request: ChangegroupownerOapiImpaasConversaionRequest, runtime: Util.RuntimeOptions): ChangegroupownerOapiImpaasConversaionResponse {
  Util.validateModel(request);
  var appParams = Util.stringifyMapValue(Util.toMap(request.params));
  return doRequestOApi('POST', '/topapi/impaas/conversaion/changegroupowner', request.headers, appParams, runtime);
}

model GetclassOapiAttendanceTestParams = {
  classId?: int64(description='班次', name='classId'),
}

model GetclassOapiAttendanceTestRequest = {
  headers?: map[string]string,
  params?:GetclassOapiAttendanceTestParams,
}

model GetclassOapiAttendanceTestResponseBody = {
  errmsg?: string(description='异常信息', name='errmsg'),
  errcode?: int64(description='异常错误码', name='errcode'),
  success?: boolean(description='是否成功', name='success'),
  result?: string(description='返回对象', name='result'),
}

model GetclassOapiAttendanceTestResponse = {
  headers: map[string]string,
  body: GetclassOapiAttendanceTestResponseBody,
}

/**
 * Description: 测试
 */
async function getclassOapiAttendanceTest(request: GetclassOapiAttendanceTestRequest): GetclassOapiAttendanceTestResponse {
  var runtime = new Util.RuntimeOptions{};
  return getclassOapiAttendanceTestEx(request, runtime);
}

/**
 * Description: 测试
 */
async function getclassOapiAttendanceTestEx(request: GetclassOapiAttendanceTestRequest, runtime: Util.RuntimeOptions): GetclassOapiAttendanceTestResponse {
  Util.validateModel(request);
  var appParams = Util.stringifyMapValue(Util.toMap(request.params));
  return doRequestOApi('POST', '/topapi/attendance/test/getclass', request.headers, appParams, runtime);
}

model AsyncsendOapiImpaasMessageParams = {
  request: {
    groupId?: string(description='群ID', name='group_id'),
    msgContent: string(description='消息内容，根据msgtype不同，解析方式不同', name='msg_content'),
    msgExtension?: string(description='消息的可扩展字段，透传', name='msg_extension'),
    receiveridList?: [ string ](description='接受者，暂不支持，可不填', maxItems=20, name='receiverid_list'),
    senderid?: {
      id?: string(description='账号ID', name='id'),
      type?: string(description='账号类型:channelUser/staff。当类型为channelUser时，填写app自己的账号，当类型为staff时，填写钉钉的staffid', name='type'),
      channel?: string(description='账号通道:eleme,hema等', name='channel'),
    }(description='发送者，暂不支持，可不填', name='senderid'),
    msgFeature?: string(description='消息的特性：静默消息，系统消息', name='msg_feature'),
    msgType: string(description='消息类型：text，image，user-defined', name='msg_type'),
    xpnModel?: {
      alertContent?: string(description='推送文案', name='alert_content'),
      params?: string(description='推送参数，透传', name='params'),
    }(description='推送信息', name='xpn_model'),
  }(description='发送消息的结构', name='request'),
}

model AsyncsendOapiImpaasMessageRequest = {
  headers?: map[string]string,
  params:AsyncsendOapiImpaasMessageParams,
}

model AsyncsendOapiImpaasMessageResponseBody = {
  taskid?: int64(description='异步任务返回的ID', name='taskid'),
  errmsg?: string(description='返回描述信息', name='errmsg'),
  errcode?: int64(description='返回码', name='errcode'),
}

model AsyncsendOapiImpaasMessageResponse = {
  headers: map[string]string,
  body: AsyncsendOapiImpaasMessageResponseBody,
}

/**
 * Description: 消息异步发送，返回taskid，根据taskid获取消息是否成功
 */
async function asyncsendOapiImpaasMessage(request: AsyncsendOapiImpaasMessageRequest): AsyncsendOapiImpaasMessageResponse {
  var runtime = new Util.RuntimeOptions{};
  return asyncsendOapiImpaasMessageEx(request, runtime);
}

/**
 * Description: 消息异步发送，返回taskid，根据taskid获取消息是否成功
 */
async function asyncsendOapiImpaasMessageEx(request: AsyncsendOapiImpaasMessageRequest, runtime: Util.RuntimeOptions): AsyncsendOapiImpaasMessageResponse {
  Util.validateModel(request);
  var appParams = Util.stringifyMapValue(Util.toMap(request.params));
  return doRequestOApi('POST', '/topapi/impaas/message/asyncsend', request.headers, appParams, runtime);
}

model UnbindCorpDeviceManageParams = {
  deviceServiceId: int64(description='设备服务商ID', name='device_service_id'),
  deviceId: string(description='设备ID', name='device_id'),
}

model UnbindCorpDeviceManageRequest = {
  headers?: map[string]string,
  params:UnbindCorpDeviceManageParams,
}

model UnbindCorpDeviceManageResponseBody = {
  result?: {
    dingOpenErrcode?: int64(description='错误码', name='ding_open_errcode'),
    errorMsg?: string(description='错误信息', name='error_msg'),
    success?: boolean(description='请求是否成功', name='success'),
  }(description='result', name='result'),
}

model UnbindCorpDeviceManageResponse = {
  headers: map[string]string,
  body: UnbindCorpDeviceManageResponseBody,
}

/**
 * Description: 此接口用于解绑已经绑定到xx企业的某个设备
 */
async function unbindCorpDeviceManage(request: UnbindCorpDeviceManageRequest): UnbindCorpDeviceManageResponse {
  var runtime = new Util.RuntimeOptions{};
  return unbindCorpDeviceManageEx(request, runtime);
}

/**
 * Description: 此接口用于解绑已经绑定到xx企业的某个设备
 */
async function unbindCorpDeviceManageEx(request: UnbindCorpDeviceManageRequest, runtime: Util.RuntimeOptions): UnbindCorpDeviceManageResponse {
  Util.validateModel(request);
  var appParams = Util.stringifyMapValue(Util.toMap(request.params));
  return doRequest('dingtalk.corp.device.manage.unbind', 'POST', '/router/rest', request.headers, appParams, runtime);
}

model SuggestOapiAlitripBtripTrainCityParams = {
  rq: {
    keyword: string(description='搜索关键字', name='keyword'),
    userid: string(description='用户id', name='userid'),
    corpid: string(description='企业id', name='corpid'),
  }(description='请求对象', name='rq'),
}

model SuggestOapiAlitripBtripTrainCityRequest = {
  headers?: map[string]string,
  params:SuggestOapiAlitripBtripTrainCityParams,
}

model SuggestOapiAlitripBtripTrainCityResponseBody = {
  result?: {
    cities?: [
      {
        name?: string(description='城市名称', name='name'),
        code?: string(description='城市码', name='code'),
      }
    ](description='城市列表', name='cities'),
  }(description='结果对象', name='result'),
  errmsg?: string(description='错误信息', name='errmsg'),
  errcode?: int64(description='错误码', name='errcode'),
  success?: boolean(description='成功标识', name='success'),
}

model SuggestOapiAlitripBtripTrainCityResponse = {
  headers: map[string]string,
  body: SuggestOapiAlitripBtripTrainCityResponseBody,
}

/**
 * Description: 火车票城市搜索
 */
async function suggestOapiAlitripBtripTrainCity(request: SuggestOapiAlitripBtripTrainCityRequest): SuggestOapiAlitripBtripTrainCityResponse {
  var runtime = new Util.RuntimeOptions{};
  return suggestOapiAlitripBtripTrainCityEx(request, runtime);
}

/**
 * Description: 火车票城市搜索
 */
async function suggestOapiAlitripBtripTrainCityEx(request: SuggestOapiAlitripBtripTrainCityRequest, runtime: Util.RuntimeOptions): SuggestOapiAlitripBtripTrainCityResponse {
  Util.validateModel(request);
  var appParams = Util.stringifyMapValue(Util.toMap(request.params));
  return doRequestOApi('POST', '/topapi/alitrip/btrip/train/city/suggest', request.headers, appParams, runtime);
}

model GetmessagestatusOapiImpaasMessageParams = {
  request: {
    taskid: int64(description='异步返回的任务ID', name='taskid'),
    senderid?: {
      id?: string(description='账号ID', name='id'),
      type?: string(description='账号的类型', name='type'),
      channel?: string(description='账号的通道', name='channel'),
    }(description='账号信息', name='senderid'),
  }(description='根据异步发送时返回的taskid获取消息', name='request'),
}

model GetmessagestatusOapiImpaasMessageRequest = {
  headers?: map[string]string,
  params:GetmessagestatusOapiImpaasMessageParams,
}

model GetmessagestatusOapiImpaasMessageResponseBody = {
  errcode?: int64(description='dingOpenErrcode', name='errcode'),
  errmsg?: string(description='errorMsg', name='errmsg'),
  result?: {
    taskMsg?: string(description='错误信息', name='task_msg'),
    taskCode?: int64(description='消息任务执行返回码 0表示成功', name='task_code'),
    taskStatus?: int64(description='消息任务执行状态 0：初始化，刚提交时的状态 3：处理中 4：处理完成 5：撤销', name='task_status'),
  }(description='result', name='result'),
}

model GetmessagestatusOapiImpaasMessageResponse = {
  headers: map[string]string,
  body: GetmessagestatusOapiImpaasMessageResponseBody,
}

/**
 * Description: 获取消息发送的状态
 */
async function getmessagestatusOapiImpaasMessage(request: GetmessagestatusOapiImpaasMessageRequest): GetmessagestatusOapiImpaasMessageResponse {
  var runtime = new Util.RuntimeOptions{};
  return getmessagestatusOapiImpaasMessageEx(request, runtime);
}

/**
 * Description: 获取消息发送的状态
 */
async function getmessagestatusOapiImpaasMessageEx(request: GetmessagestatusOapiImpaasMessageRequest, runtime: Util.RuntimeOptions): GetmessagestatusOapiImpaasMessageResponse {
  Util.validateModel(request);
  var appParams = Util.stringifyMapValue(Util.toMap(request.params));
  return doRequestOApi('POST', '/topapi/impaas/message/getmessagestatus', request.headers, appParams, runtime);
}

model DeleteOapiAlitripBtripCostCenterEntityParams = {
  rq: {
    delAll?: boolean(description='是否全部删除', name='del_all'),
    thirdpartId: string(description='第三方成本中心id', name='thirdpart_id'),
    entityList?: [
      {
        entityId: string(description='员工/部门/角色id', name='entity_id'),
        entityType: string(description='人员类型:1员工，2部门，3角色', name='entity_type'),
      }
    ](description='删除的成员信息列表,del_all为true时可不填', maxItems=100, name='entity_list'),
    corpid: string(description='企业id', name='corpid'),
  }(description='请求对象', name='rq'),
}

model DeleteOapiAlitripBtripCostCenterEntityRequest = {
  headers?: map[string]string,
  params:DeleteOapiAlitripBtripCostCenterEntityParams,
}

model DeleteOapiAlitripBtripCostCenterEntityResponseBody = {
  result?: {
    selectedUserNum?: int64(description='该成本中心下员工总数', name='selected_user_num'),
    removeNum?: int64(description='删除的人员信息条数', name='remove_num'),
  }(description='结果对象', name='result'),
  errmsg?: string(description='错误信息', name='errmsg'),
  errcode?: int64(description='错误码', name='errcode'),
  success?: boolean(description='成功标识', name='success'),
}

model DeleteOapiAlitripBtripCostCenterEntityResponse = {
  headers: map[string]string,
  body: DeleteOapiAlitripBtripCostCenterEntityResponseBody,
}

/**
 * Description: 删除成本中心人员信息
 */
async function deleteOapiAlitripBtripCostCenterEntity(request: DeleteOapiAlitripBtripCostCenterEntityRequest): DeleteOapiAlitripBtripCostCenterEntityResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteOapiAlitripBtripCostCenterEntityEx(request, runtime);
}

/**
 * Description: 删除成本中心人员信息
 */
async function deleteOapiAlitripBtripCostCenterEntityEx(request: DeleteOapiAlitripBtripCostCenterEntityRequest, runtime: Util.RuntimeOptions): DeleteOapiAlitripBtripCostCenterEntityResponse {
  Util.validateModel(request);
  var appParams = Util.stringifyMapValue(Util.toMap(request.params));
  return doRequestOApi('POST', '/topapi/alitrip/btrip/cost/center/entity/delete', request.headers, appParams, runtime);
}

model NewOapiAlitripBtripApprovalParams = {
  rq: {
    tripDay?: int64(description='出差天数', name='trip_day'),
    thirdpartApplyId: string(description='外部申请单id', name='thirdpart_apply_id'),
    tripTitle: string(description='申请单标题', name='trip_title'),
    itineraryList: [
      {
        tripWay: int64(description='行程类型：0单程，1往返', name='trip_way'),
        itineraryId: string(description='行程id', name='itinerary_id'),
        trafficType: int64(description='交通方式：0飞机, 1,火车, 2汽车, 3其他', name='traffic_type'),
        depCity: string(description='出发城市', name='dep_city'),
        depCityCode?: string(description='出发城市编码', name='dep_city_code'),
        arrCity: string(description='到达城市', name='arr_city'),
        arrCityCode?: string(description='到达城市编码', name='arr_city_code'),
        costCenterId?: int64(description='商旅成本中心id，若不填则第三方成本中心id必填', name='cost_center_id'),
        thirdpartCostCenterId?: string(description='第三方成本中心id，若不填则商旅成本中心id必填', name='thirdpart_cost_center_id'),
        invoiceId: int64(description='发票id', name='invoice_id'),
        depDate: string(description='出发日期', pattern='\\\\d{4}[-]\\\\d{1,2}[-]\\\\d{1,2}[T]\\\\d{2}:\\\\d{2}:\\\\d{2}[Z]', name='dep_date'),
        arrDate: string(description='到达日期', pattern='\\\\d{4}[-]\\\\d{1,2}[-]\\\\d{1,2}[T]\\\\d{2}:\\\\d{2}:\\\\d{2}[Z]', name='arr_date'),
        projectTitle?: string(description='项目名称', name='project_title'),
        projectCode?: string(description='项目编号', name='project_code'),
      }
    ](description='行程列表', maxItems=100, name='itinerary_list'),
    deptName?: string(description='部门名称', name='dept_name'),
    tripCause: string(description='出差事由', name='trip_cause'),
    corpName?: string(description='企业名称', name='corp_name'),
    userid: string(description='用户id', name='userid'),
    userName?: string(description='用户名称，如果要传必须传真实姓名，如果不传则会以系统当前维护userId对应的名称进行预订', name='user_name'),
    deptid?: string(description='部门id，如果不传，会根据user相关信息去获取对应的部门信息，如果传的是错误的部门信息，后面无法做部门的费用归属；部门ID只能是数字', name='deptid'),
    travelerList: [
      {
        userid: string(description='出行人id', name='userid'),
        userName?: string(description='出行人名称', name='user_name'),
      }
    ](description='出行人列表', maxItems=100, name='traveler_list'),
    corpid: string(description='企业id', name='corpid'),
    status?: int64(description='审批单状态，不传入默认为0：0审批中，1同意，2拒绝', name='status'),
    thirdpartBusinessId?: string(description='用户展示的外部审批单id信息', name='thirdpart_business_id'),
  }(description='请求对象', name='rq'),
}

model NewOapiAlitripBtripApprovalRequest = {
  headers?: map[string]string,
  params:NewOapiAlitripBtripApprovalParams,
}

model NewOapiAlitripBtripApprovalResponseBody = {
  module?: {
    thirdpartApplyId?: string(description='外部申请单id', name='thirdpart_apply_id'),
    applyId?: int64(description='商旅申请单id', name='apply_id'),
  }(description='结果对象', name='module'),
  errmsg?: string(description='错误信息', name='errmsg'),
  errcode?: int64(description='错误码', name='errcode'),
  success?: boolean(description='成功标识', name='success'),
}

model NewOapiAlitripBtripApprovalResponse = {
  headers: map[string]string,
  body: NewOapiAlitripBtripApprovalResponseBody,
}

/**
 * Description: 用户新建审批单
 */
async function newOapiAlitripBtripApproval(request: NewOapiAlitripBtripApprovalRequest): NewOapiAlitripBtripApprovalResponse {
  var runtime = new Util.RuntimeOptions{};
  return newOapiAlitripBtripApprovalEx(request, runtime);
}

/**
 * Description: 用户新建审批单
 */
async function newOapiAlitripBtripApprovalEx(request: NewOapiAlitripBtripApprovalRequest, runtime: Util.RuntimeOptions): NewOapiAlitripBtripApprovalResponse {
  Util.validateModel(request);
  var appParams = Util.stringifyMapValue(Util.toMap(request.params));
  return doRequestOApi('POST', '/topapi/alitrip/btrip/approval/new', request.headers, appParams, runtime);
}

model GetOapiAlitripBtripCategoryAddressParams = {
  rq: {
    itineraryId: string(description='第三方行程id', name='itinerary_id'),
    userid: string(description='用户id', name='userid'),
    type: int64(description='跳转类型：1机票，2火车票，3酒店', name='type'),
    corpid: string(description='企业id', name='corpid'),
  }(description='请求对象', name='rq'),
}

model GetOapiAlitripBtripCategoryAddressRequest = {
  headers?: map[string]string,
  params:GetOapiAlitripBtripCategoryAddressParams,
}

model GetOapiAlitripBtripCategoryAddressResponseBody = {
  result?: {
    url?: string(description='跳转url', name='url'),
  }(description='module', name='result'),
  errmsg?: string(description='错误信息', name='errmsg'),
  errcode?: int64(description='错误码', name='errcode'),
  success?: boolean(description='成功标识', name='success'),
}

model GetOapiAlitripBtripCategoryAddressResponse = {
  headers: map[string]string,
  body: GetOapiAlitripBtripCategoryAddressResponseBody,
}

/**
 * Description: 获取类目预定页跳转地址
 */
async function getOapiAlitripBtripCategoryAddress(request: GetOapiAlitripBtripCategoryAddressRequest): GetOapiAlitripBtripCategoryAddressResponse {
  var runtime = new Util.RuntimeOptions{};
  return getOapiAlitripBtripCategoryAddressEx(request, runtime);
}

/**
 * Description: 获取类目预定页跳转地址
 */
async function getOapiAlitripBtripCategoryAddressEx(request: GetOapiAlitripBtripCategoryAddressRequest, runtime: Util.RuntimeOptions): GetOapiAlitripBtripCategoryAddressResponse {
  Util.validateModel(request);
  var appParams = Util.stringifyMapValue(Util.toMap(request.params));
  return doRequestOApi('POST', '/topapi/alitrip/btrip/category/address/get', request.headers, appParams, runtime);
}

model UpdateOapiChatThemeParams = {
  chatid: string(description='会话id', name='chatid'),
  mediaid: string(description='图片id', name='mediaid'),
}

model UpdateOapiChatThemeRequest = {
  headers?: map[string]string,
  params:UpdateOapiChatThemeParams,
}

model UpdateOapiChatThemeResponseBody = {
  success?: boolean(description='调用成功', name='success'),
  errcode?: int64(description='调用成功', name='errcode'),
  errmsg?: string(description='错误信息', name='errmsg'),
}

model UpdateOapiChatThemeResponse = {
  headers: map[string]string,
  body: UpdateOapiChatThemeResponseBody,
}

/**
 * Description: 修改群中全员可见的群背景
 */
async function updateOapiChatTheme(request: UpdateOapiChatThemeRequest): UpdateOapiChatThemeResponse {
  var runtime = new Util.RuntimeOptions{};
  return updateOapiChatThemeEx(request, runtime);
}

/**
 * Description: 修改群中全员可见的群背景
 */
async function updateOapiChatThemeEx(request: UpdateOapiChatThemeRequest, runtime: Util.RuntimeOptions): UpdateOapiChatThemeResponse {
  Util.validateModel(request);
  var appParams = Util.stringifyMapValue(Util.toMap(request.params));
  return doRequestOApi('POST', '/topapi/chat/theme/update', request.headers, appParams, runtime);
}

model QueryOapiRetailSellerParams = {
  userid: string(description='staffId', name='userid'),
}

model QueryOapiRetailSellerRequest = {
  headers?: map[string]string,
  params:QueryOapiRetailSellerParams,
}

model QueryOapiRetailSellerResponseBody = {
  result?: [
    {
      sellerId?: int64(description='卖家ID', name='seller_id'),
      sellerNick?: string(description='卖家nick', name='seller_nick'),
      type?: string(description='天猫店|淘宝店', name='type'),
    }
  ](description='卖家列表', name='result'),
  success?: boolean(description='调用成功于否', name='success'),
  errcode?: int64(description='错误代码', name='errcode'),
  errmsg?: string(description='错误信息', name='errmsg'),
}

model QueryOapiRetailSellerResponse = {
  headers: map[string]string,
  body: QueryOapiRetailSellerResponseBody,
}

/**
 * Description: 查询用户组织绑定的卖家列表
 */
async function queryOapiRetailSeller(request: QueryOapiRetailSellerRequest): QueryOapiRetailSellerResponse {
  var runtime = new Util.RuntimeOptions{};
  return queryOapiRetailSellerEx(request, runtime);
}

/**
 * Description: 查询用户组织绑定的卖家列表
 */
async function queryOapiRetailSellerEx(request: QueryOapiRetailSellerRequest, runtime: Util.RuntimeOptions): QueryOapiRetailSellerResponse {
  Util.validateModel(request);
  var appParams = Util.stringifyMapValue(Util.toMap(request.params));
  return doRequestOApi('POST', '/topapi/retail/seller/query', request.headers, appParams, runtime);
}

model QueryOapiRetailSellerOrgdetailParams = {
  userid: string(description='staffId', name='userid'),
}

model QueryOapiRetailSellerOrgdetailRequest = {
  headers?: map[string]string,
  params:QueryOapiRetailSellerOrgdetailParams,
}

model QueryOapiRetailSellerOrgdetailResponseBody = {
  result?: [
    {
      corpId?: string(description='corpId', name='corp_id'),
      orgName?: string(description='组织名', name='org_name'),
      gmtCreate?: string(description='组织创建时间', pattern='\\\\d{4}[-]\\\\d{1,2}[-]\\\\d{1,2}[T]\\\\d{2}:\\\\d{2}:\\\\d{2}[Z]', name='gmt_create'),
      bindSellers?: [
        {
          sellerId?: int64(description='卖家ID', name='seller_id'),
          sellerNick?: string(description='卖家昵称', name='seller_nick'),
          shopEmpList?: [
            {
              userid?: string(description='staffId', name='userid'),
              name?: string(description='员工姓名', name='name'),
              sellerNick?: string(description='绑定淘宝账号nick', name='seller_nick'),
              empType?: string(description='主子账号', name='emp_type'),
              outerId?: string(description='卖家ID', name='outer_id'),
              outerSubId?: string(description='卖家子账号ID', name='outer_sub_id'),
            }
          ](description='卖家绑定的员工list', name='shop_emp_list'),
          type?: string(description='天猫店 淘宝店', name='type'),
          userid?: string(description='staffId', name='userid'),
        }
      ](description='组织绑定卖家List', name='bind_sellers'),
    }
  ](description='组织列表', name='result'),
  success?: boolean(description='调用结果', name='success'),
  errcode?: int64(description='错误代码', name='errcode'),
  errmsg?: string(description='错误信息', name='errmsg'),
}

model QueryOapiRetailSellerOrgdetailResponse = {
  headers: map[string]string,
  body: QueryOapiRetailSellerOrgdetailResponseBody,
}

/**
 * Description: 钉钉新零售查询组织店铺人员结构关系
 */
async function queryOapiRetailSellerOrgdetail(request: QueryOapiRetailSellerOrgdetailRequest): QueryOapiRetailSellerOrgdetailResponse {
  var runtime = new Util.RuntimeOptions{};
  return queryOapiRetailSellerOrgdetailEx(request, runtime);
}

/**
 * Description: 钉钉新零售查询组织店铺人员结构关系
 */
async function queryOapiRetailSellerOrgdetailEx(request: QueryOapiRetailSellerOrgdetailRequest, runtime: Util.RuntimeOptions): QueryOapiRetailSellerOrgdetailResponse {
  Util.validateModel(request);
  var appParams = Util.stringifyMapValue(Util.toMap(request.params));
  return doRequestOApi('POST', '/topapi/retail/seller/orgdetail/query', request.headers, appParams, runtime);
}

model CheckOapiRetailSellerOrgParams = {
  userid: string(description='staffId', name='userid'),
}

model CheckOapiRetailSellerOrgRequest = {
  headers?: map[string]string,
  params:CheckOapiRetailSellerOrgParams,
}

model CheckOapiRetailSellerOrgResponseBody = {
  result?: boolean(description='是否绑定', name='result'),
  success?: boolean(description='调用是否成功', name='success'),
  errcode?: int64(description='错误代码', name='errcode'),
  errmsg?: string(description='错误信息', name='errmsg'),
}

model CheckOapiRetailSellerOrgResponse = {
  headers: map[string]string,
  body: CheckOapiRetailSellerOrgResponseBody,
}

/**
 * Description: 钉钉新零售组织绑定校验
 */
async function checkOapiRetailSellerOrg(request: CheckOapiRetailSellerOrgRequest): CheckOapiRetailSellerOrgResponse {
  var runtime = new Util.RuntimeOptions{};
  return checkOapiRetailSellerOrgEx(request, runtime);
}

/**
 * Description: 钉钉新零售组织绑定校验
 */
async function checkOapiRetailSellerOrgEx(request: CheckOapiRetailSellerOrgRequest, runtime: Util.RuntimeOptions): CheckOapiRetailSellerOrgResponse {
  Util.validateModel(request);
  var appParams = Util.stringifyMapValue(Util.toMap(request.params));
  return doRequestOApi('POST', '/topapi/retail/seller/org/check', request.headers, appParams, runtime);
}

model DeleteOapiChatTagParams = {
  chatid: string(description='内部群的id', name='chatid'),
  groupTag: int64(description='群标签的类型。1表示经销群；2表示销管群', name='group_tag'),
}

model DeleteOapiChatTagRequest = {
  headers?: map[string]string,
  params:DeleteOapiChatTagParams,
}

model DeleteOapiChatTagResponseBody = {
  success?: boolean(description='true表示操作成功；false表示操作失败', name='success'),
  errcode?: int64(description='错误码', name='errcode'),
  errmsg?: string(description='错误信息', name='errmsg'),
}

model DeleteOapiChatTagResponse = {
  headers: map[string]string,
  body: DeleteOapiChatTagResponseBody,
}

/**
 * Description: 企业内部应用通过该接口取消内部群的特殊标签。取消后，后续进入该群聊会话不会请求该标签特有的群插件列表
 */
async function deleteOapiChatTag(request: DeleteOapiChatTagRequest): DeleteOapiChatTagResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteOapiChatTagEx(request, runtime);
}

/**
 * Description: 企业内部应用通过该接口取消内部群的特殊标签。取消后，后续进入该群聊会话不会请求该标签特有的群插件列表
 */
async function deleteOapiChatTagEx(request: DeleteOapiChatTagRequest, runtime: Util.RuntimeOptions): DeleteOapiChatTagResponse {
  Util.validateModel(request);
  var appParams = Util.stringifyMapValue(Util.toMap(request.params));
  return doRequestOApi('POST', '/topapi/chat/tag/delete', request.headers, appParams, runtime);
}

model SetOapiChatTagParams = {
  chatid: string(description='内部群的id', name='chatid'),
  groupTag: int64(description='群标签的类型。1表示经销群；2表示销管群', name='group_tag'),
}

model SetOapiChatTagRequest = {
  headers?: map[string]string,
  params:SetOapiChatTagParams,
}

model SetOapiChatTagResponseBody = {
  success?: boolean(description='true表示操作成功；false表示操作失败', name='success'),
  errcode?: int64(description='错误码', name='errcode'),
  errmsg?: string(description='错误信息', name='errmsg'),
}

model SetOapiChatTagResponse = {
  headers: map[string]string,
  body: SetOapiChatTagResponseBody,
}

/**
 * Description: 企业内部应用通过该接口给内部群打上特殊的标签。后续进入群聊会话会请求并显示特殊的群插件列表
 */
async function setOapiChatTag(request: SetOapiChatTagRequest): SetOapiChatTagResponse {
  var runtime = new Util.RuntimeOptions{};
  return setOapiChatTagEx(request, runtime);
}

/**
 * Description: 企业内部应用通过该接口给内部群打上特殊的标签。后续进入群聊会话会请求并显示特殊的群插件列表
 */
async function setOapiChatTagEx(request: SetOapiChatTagRequest, runtime: Util.RuntimeOptions): SetOapiChatTagResponse {
  Util.validateModel(request);
  var appParams = Util.stringifyMapValue(Util.toMap(request.params));
  return doRequestOApi('POST', '/topapi/chat/tag/set', request.headers, appParams, runtime);
}

model ListOapiRhinoDtechMachineParamParams = {
  bizIdProcessList: [ string ](description='工序bizid列表', maxItems=20, name='biz_id_process_list'),
}

model ListOapiRhinoDtechMachineParamRequest = {
  headers?: map[string]string,
  params:ListOapiRhinoDtechMachineParamParams,
}

model ListOapiRhinoDtechMachineParamResponseBody = {
  success?: boolean(description='是否成功', name='success'),
  model?: [
    {
      machineCode?: string(description='设备编码', name='machine_code'),
      name?: string(description='设备名称', name='name'),
      description?: string(description='描述', name='description'),
      machineVersion?: string(description='版本', name='machine_version'),
      bizIdProcess?: string(description='工序bizid', name='biz_id_process'),
      type?: int64(description='类型', name='type'),
      value?: string(description='参数值', name='value'),
      machineName?: string(description='设备名称', name='machine_name'),
      bizIdMachineParam?: string(description='设备参数bizid', name='biz_id_machine_param'),
    }
  ](description='model', name='model'),
  errmsg?: string(description='message', name='errmsg'),
  errcode?: int64(description='错误码', name='errcode'),
}

model ListOapiRhinoDtechMachineParamResponse = {
  headers: map[string]string,
  body: ListOapiRhinoDtechMachineParamResponseBody,
}

/**
 * Description: 智能制造-提供批量获取设备参数功能
 */
async function listOapiRhinoDtechMachineParam(request: ListOapiRhinoDtechMachineParamRequest): ListOapiRhinoDtechMachineParamResponse {
  var runtime = new Util.RuntimeOptions{};
  return listOapiRhinoDtechMachineParamEx(request, runtime);
}

/**
 * Description: 智能制造-提供批量获取设备参数功能
 */
async function listOapiRhinoDtechMachineParamEx(request: ListOapiRhinoDtechMachineParamRequest, runtime: Util.RuntimeOptions): ListOapiRhinoDtechMachineParamResponse {
  Util.validateModel(request);
  var appParams = Util.stringifyMapValue(Util.toMap(request.params));
  return doRequestOApi('POST', '/topapi/rhino/dtech/machine/param/list', request.headers, appParams, runtime);
}

model IsignoreproblemcheckOapiCcoserviceServicegroupParams = {
  openConversationId: string(description='群id', name='open_conversation_id'),
  dingtalkId: string(description='用户dingtalk加密id', name='dingtalk_id'),
}

model IsignoreproblemcheckOapiCcoserviceServicegroupRequest = {
  headers?: map[string]string,
  params:IsignoreproblemcheckOapiCcoserviceServicegroupParams,
}

model IsignoreproblemcheckOapiCcoserviceServicegroupResponseBody = {
  errcode?: int64(description='dingOpenErrcode', name='errcode'),
  errmsg?: string(description='errorMsg', name='errmsg'),
  result?: boolean(description='result', name='result'),
  success?: boolean(description='success', name='success'),
}

model IsignoreproblemcheckOapiCcoserviceServicegroupResponse = {
  headers: map[string]string,
  body: IsignoreproblemcheckOapiCcoserviceServicegroupResponseBody,
}

/**
 * Description: 接口描述：是否忽略问题模型判断，返回值：true: 可以忽略; false: 不能忽略,走正常逻辑;
 */
async function isignoreproblemcheckOapiCcoserviceServicegroup(request: IsignoreproblemcheckOapiCcoserviceServicegroupRequest): IsignoreproblemcheckOapiCcoserviceServicegroupResponse {
  var runtime = new Util.RuntimeOptions{};
  return isignoreproblemcheckOapiCcoserviceServicegroupEx(request, runtime);
}

/**
 * Description: 接口描述：是否忽略问题模型判断，返回值：true: 可以忽略; false: 不能忽略,走正常逻辑;
 */
async function isignoreproblemcheckOapiCcoserviceServicegroupEx(request: IsignoreproblemcheckOapiCcoserviceServicegroupRequest, runtime: Util.RuntimeOptions): IsignoreproblemcheckOapiCcoserviceServicegroupResponse {
  Util.validateModel(request);
  var appParams = Util.stringifyMapValue(Util.toMap(request.params));
  return doRequestOApi('POST', '/topapi/ccoservice/servicegroup/isignoreproblemcheck', request.headers, appParams, runtime);
}

model GrantOapiMedalCorpmedalParams = {
  userid: string(description='员工ID', name='userid'),
  templateId: int64(description='勋章模板ID', name='template_id'),
}

model GrantOapiMedalCorpmedalRequest = {
  headers?: map[string]string,
  params:GrantOapiMedalCorpmedalParams,
}

model GrantOapiMedalCorpmedalResponseBody = {
  result?: boolean(description='勋章授予结果', name='result'),
  success?: boolean(description='调用结果', name='success'),
  errcode?: int64(description='错误码', name='errcode'),
  errmsg?: string(description='错误描述', name='errmsg'),
}

model GrantOapiMedalCorpmedalResponse = {
  headers: map[string]string,
  body: GrantOapiMedalCorpmedalResponseBody,
}

/**
 * Description: 企业将企业勋章授予员工
 */
async function grantOapiMedalCorpmedal(request: GrantOapiMedalCorpmedalRequest): GrantOapiMedalCorpmedalResponse {
  var runtime = new Util.RuntimeOptions{};
  return grantOapiMedalCorpmedalEx(request, runtime);
}

/**
 * Description: 企业将企业勋章授予员工
 */
async function grantOapiMedalCorpmedalEx(request: GrantOapiMedalCorpmedalRequest, runtime: Util.RuntimeOptions): GrantOapiMedalCorpmedalResponse {
  Util.validateModel(request);
  var appParams = Util.stringifyMapValue(Util.toMap(request.params));
  return doRequestOApi('POST', '/topapi/medal/corpmedal/grant', request.headers, appParams, runtime);
}

model WearOapiMedalCorpmedalParams = {
  userid: string(description='员工ID', name='userid'),
  templateId: int64(description='勋章模板ID', name='template_id'),
  operation: int64(description='1 佩戴，2 摘除', name='operation'),
}

model WearOapiMedalCorpmedalRequest = {
  headers?: map[string]string,
  params:WearOapiMedalCorpmedalParams,
}

model WearOapiMedalCorpmedalResponseBody = {
  result?: boolean(description='勋章授予结果', name='result'),
  success?: boolean(description='接口调用结果', name='success'),
  errcode?: int64(description='错误码', name='errcode'),
  errmsg?: string(description='错误描述', name='errmsg'),
}

model WearOapiMedalCorpmedalResponse = {
  headers: map[string]string,
  body: WearOapiMedalCorpmedalResponseBody,
}

/**
 * Description: 用户佩戴/摘除被授予的企业勋章
 */
async function wearOapiMedalCorpmedal(request: WearOapiMedalCorpmedalRequest): WearOapiMedalCorpmedalResponse {
  var runtime = new Util.RuntimeOptions{};
  return wearOapiMedalCorpmedalEx(request, runtime);
}

/**
 * Description: 用户佩戴/摘除被授予的企业勋章
 */
async function wearOapiMedalCorpmedalEx(request: WearOapiMedalCorpmedalRequest, runtime: Util.RuntimeOptions): WearOapiMedalCorpmedalResponse {
  Util.validateModel(request);
  var appParams = Util.stringifyMapValue(Util.toMap(request.params));
  return doRequestOApi('POST', '/topapi/medal/corpmedal/wear', request.headers, appParams, runtime);
}

model DeleteOapiBlackboardParams = {
  blackboardId: string(description='公告id,可以通过https://oapi.dingtalk.com/blackboard/listids获取有效值', name='blackboard_id'),
  operationUserid: string(description='操作人userId(必须是公告管理员)', name='operation_userid'),
}

model DeleteOapiBlackboardRequest = {
  headers?: map[string]string,
  params:DeleteOapiBlackboardParams,
}

model DeleteOapiBlackboardResponseBody = {
  result?: boolean(description='success为true时，该值不为空，否则值为空', name='result'),
  success?: boolean(description='本次调用是否成功，该值为false时，根据errcode和errMsg排查失败原因', name='success'),
  errcode?: int64(description='请求失败返回的错误码', name='errcode'),
  errmsg?: string(description='请求失败返回的错误信息', name='errmsg'),
}

model DeleteOapiBlackboardResponse = {
  headers: map[string]string,
  body: DeleteOapiBlackboardResponseBody,
}

/**
 * Description: 根据公告id删除企业公告，只有以下身份可以删除
1、主管理员
2、公告子管理员并且是待删除公告创建者
 */
async function deleteOapiBlackboard(request: DeleteOapiBlackboardRequest): DeleteOapiBlackboardResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteOapiBlackboardEx(request, runtime);
}

/**
 * Description: 根据公告id删除企业公告，只有以下身份可以删除
1、主管理员
2、公告子管理员并且是待删除公告创建者
 */
async function deleteOapiBlackboardEx(request: DeleteOapiBlackboardRequest, runtime: Util.RuntimeOptions): DeleteOapiBlackboardResponse {
  Util.validateModel(request);
  var appParams = Util.stringifyMapValue(Util.toMap(request.params));
  return doRequestOApi('POST', '/topapi/blackboard/delete', request.headers, appParams, runtime);
}

model UpdateOapiBlackboardParams = {
  updateRequest?: {
    author?: string(description='公告作者', name='author'),
    ding?: boolean(description='是否发送应用内钉提醒', name='ding'),
    blackboardId: string(description='公告id', name='blackboard_id'),
    title: string(description='公告标题', name='title'),
    content: string(description='公告内容', name='content'),
    categoryId?: string(description='公告分类id，可以通过https://oapi.dingtalk.com/blackboard/category/get获取有效值', name='category_id'),
    notify?: boolean(description='修改后是否再次通知接收人', name='notify'),
    operationUserid: string(description='操作人userId(必须是公告管理员)', name='operation_userid'),
    coverpicMediaid?: string(description='封面图,需要使用mediaId,可以通过https://oapi.dingtalk.com/media/upload上传图片获取mediaId', name='coverpic_mediaid'),
  }(description='请求入参', name='update_request'),
}

model UpdateOapiBlackboardRequest = {
  headers?: map[string]string,
  params?:UpdateOapiBlackboardParams,
}

model UpdateOapiBlackboardResponseBody = {
  result?: boolean(description='success为true时，该值不为空，否则值为空', name='result'),
  success?: boolean(description='本次调用是否成功，该值为false时，根据errcode和errMsg排查失败原因', name='success'),
  errcode?: int64(description='请求失败返回的错误码', name='errcode'),
  errmsg?: string(description='请求失败返回的错误信息', name='errmsg'),
}

model UpdateOapiBlackboardResponse = {
  headers: map[string]string,
  body: UpdateOapiBlackboardResponseBody,
}

/**
 * Description: 根据公告id修改企业公告，只有以下身份可以修改：
1、主管理员
2、公告子管理员并且是待修改公告的创建者
 */
async function updateOapiBlackboard(request: UpdateOapiBlackboardRequest): UpdateOapiBlackboardResponse {
  var runtime = new Util.RuntimeOptions{};
  return updateOapiBlackboardEx(request, runtime);
}

/**
 * Description: 根据公告id修改企业公告，只有以下身份可以修改：
1、主管理员
2、公告子管理员并且是待修改公告的创建者
 */
async function updateOapiBlackboardEx(request: UpdateOapiBlackboardRequest, runtime: Util.RuntimeOptions): UpdateOapiBlackboardResponse {
  Util.validateModel(request);
  var appParams = Util.stringifyMapValue(Util.toMap(request.params));
  return doRequestOApi('POST', '/topapi/blackboard/update', request.headers, appParams, runtime);
}

model CreateOapiBlackboardParams = {
  createRequest: {
    operationUserid: string(description='操作人的userId(必须是公告管理员)', name='operation_userid'),
    author?: string(description='公告作者', name='author'),
    privateLevel?: int64(description='保密等级，仅支持以下值(0:普通公告，20：保密公告)', name='private_level'),
    ding?: boolean(description='是否发送应用内钉提醒', name='ding'),
    blackboardReceiver: {
      deptidList?: [ int64 ](description='接收部门id列表', maxItems=20, name='deptid_list'),
      useridList?: [ string ](description='接收人userId列表', maxItems=1000, name='userid_list'),
    }(description='入参', name='blackboard_receiver'),
    title: string(description='公告标题', name='title'),
    pushTop?: boolean(description='公告是否置顶', name='push_top'),
    content: string(description='公告内容', name='content'),
    categoryId?: string(description='公告分类id，可以通过公告开放接口：（获取企业公告未删除分类列表）获取有效值', name='category_id'),
    coverpicMediaid?: string(description='封面图,需要使用mediaId,可以通过钉钉开放接口：https://ding-doc.dingtalk.com/doc#/serverapi2/bcmg0i 上传图片获取mediaId', name='coverpic_mediaid'),
  }(description='请求入参', name='create_request'),
}

model CreateOapiBlackboardRequest = {
  headers?: map[string]string,
  params:CreateOapiBlackboardParams,
}

model CreateOapiBlackboardResponseBody = {
  result?: boolean(description='success为true时，该值不为空，否则值为空', name='result'),
  success?: boolean(description='本次调用是否成功，该值为false时，根据errcode和errMsg排查失败原因', name='success'),
  errcode?: int64(description='请求失败返回的错误码', name='errcode'),
  errmsg?: string(description='请求失败返回的错误信息', name='errmsg'),
}

model CreateOapiBlackboardResponse = {
  headers: map[string]string,
  body: CreateOapiBlackboardResponseBody,
}

/**
 * Description: 管理员可以通过该接口创建钉钉企业公告
 */
async function createOapiBlackboard(request: CreateOapiBlackboardRequest): CreateOapiBlackboardResponse {
  var runtime = new Util.RuntimeOptions{};
  return createOapiBlackboardEx(request, runtime);
}

/**
 * Description: 管理员可以通过该接口创建钉钉企业公告
 */
async function createOapiBlackboardEx(request: CreateOapiBlackboardRequest, runtime: Util.RuntimeOptions): CreateOapiBlackboardResponse {
  Util.validateModel(request);
  var appParams = Util.stringifyMapValue(Util.toMap(request.params));
  return doRequestOApi('POST', '/topapi/blackboard/create', request.headers, appParams, runtime);
}

model ListidsOapiBlackboardParams = {
  queryRequest?: {
    operationUserid: string(description='操作人userId(必须是公告管理员)', name='operation_userid'),
    pageSize: int64(description='分页大小，必须为正整数，且不超过30', name='page_size'),
    startTime?: string(description='开始时间(闭区间）', pattern='\\\\d{4}[-]\\\\d{1,2}[-]\\\\d{1,2}[T]\\\\d{2}:\\\\d{2}:\\\\d{2}[Z]', name='start_time'),
    endTime?: string(description='结束时间(开区间）', pattern='\\\\d{4}[-]\\\\d{1,2}[-]\\\\d{1,2}[T]\\\\d{2}:\\\\d{2}:\\\\d{2}[Z]', name='end_time'),
    page: int64(description='页码，从1开始且必须为正整数', name='page'),
    categoryId?: string(description='分类id，可以通过https://oapi.dingtalk.com/blackboard/category/get获取有效值', name='category_id'),
  }(description='请求入参', name='query_request'),
}

model ListidsOapiBlackboardRequest = {
  headers?: map[string]string,
  params?:ListidsOapiBlackboardParams,
}

model ListidsOapiBlackboardResponseBody = {
  result?: [ string ](description='success为true时，返回公告id列表。否则值为空', name='result'),
  success?: boolean(description='本次调用是否成功，该值为false时，根据errcode和errMsg排查失败原因', name='success'),
  errcode?: int64(description='请求失败的错误码', name='errcode'),
  errmsg?: string(description='请求失败的错误原因', name='errmsg'),
}

model ListidsOapiBlackboardResponse = {
  headers: map[string]string,
  body: ListidsOapiBlackboardResponseBody,
}

/**
 * Description: 通过接口可以获取到企业未删除的钉钉公告id列表
 */
async function listidsOapiBlackboard(request: ListidsOapiBlackboardRequest): ListidsOapiBlackboardResponse {
  var runtime = new Util.RuntimeOptions{};
  return listidsOapiBlackboardEx(request, runtime);
}

/**
 * Description: 通过接口可以获取到企业未删除的钉钉公告id列表
 */
async function listidsOapiBlackboardEx(request: ListidsOapiBlackboardRequest, runtime: Util.RuntimeOptions): ListidsOapiBlackboardResponse {
  Util.validateModel(request);
  var appParams = Util.stringifyMapValue(Util.toMap(request.params));
  return doRequestOApi('POST', '/topapi/blackboard/listids', request.headers, appParams, runtime);
}

model UpdateCorpExtParams = {
  contact: {
    title?: string(description='职位', name='title'),
    shareDeptIds?: [ int64 ](description='共享给的部门ID', maxItems=20, name='share_dept_ids'),
    labelIds: [ int64 ](description='标签列表', maxItems=20, name='label_ids'),
    remark?: string(description='备注', name='remark'),
    address?: string(description='地址', name='address'),
    userId: string(description='该外部联系人的userId', name='user_id'),
    name: string(description='名称', name='name'),
    followerUserid: string(description='负责人userId', name='follower_userid'),
    companyName?: string(description='企业名', name='company_name'),
    shareUserids?: [ string ](description='共享给的员工userId列表', maxItems=20, name='share_userids'),
  }(description='外部联系人信息', name='contact'),
}

model UpdateCorpExtRequest = {
  headers?: map[string]string,
  params:UpdateCorpExtParams,
}

model UpdateCorpExtResponse = {
  headers: map[string]string,
}

/**
 * Description: 更新外部联系人
 */
async function updateCorpExt(request: UpdateCorpExtRequest): UpdateCorpExtResponse {
  var runtime = new Util.RuntimeOptions{};
  return updateCorpExtEx(request, runtime);
}

/**
 * Description: 更新外部联系人
 */
async function updateCorpExtEx(request: UpdateCorpExtRequest, runtime: Util.RuntimeOptions): UpdateCorpExtResponse {
  Util.validateModel(request);
  var appParams = Util.stringifyMapValue(Util.toMap(request.params));
  return doRequest('dingtalk.corp.ext.update', 'POST', '/router/rest', request.headers, appParams, runtime);
}

model GetOapiBlackboardParams = {
  blackboardId: string(description='公告id', name='blackboard_id'),
  operationUserid: string(description='操作人userId', name='operation_userid'),
}

model GetOapiBlackboardRequest = {
  headers?: map[string]string,
  params:GetOapiBlackboardParams,
}

model GetOapiBlackboardResponseBody = {
  result?: {
    id?: string(description='公告id', name='id'),
    author?: string(description='公告作者', name='author'),
    title?: string(description='公告标题', name='title'),
    content?: string(description='公告内容', name='content'),
    categoryId?: string(description='公告分类', name='category_id'),
    privateLevel?: int64(description='保密等级(0：普通公告，20：保密公告)', name='private_level'),
    depnameList?: [ string ](description='接收部门列表', name='depname_list'),
    usernameList?: [ string ](description='接收人列表', name='username_list'),
    gmtCreate?: string(description='公告创建时间', pattern='\\\\d{4}[-]\\\\d{1,2}[-]\\\\d{1,2}[T]\\\\d{2}:\\\\d{2}:\\\\d{2}[Z]', name='gmt_create'),
    gmtModified?: string(description='公告最后修改时间', pattern='\\\\d{4}[-]\\\\d{1,2}[-]\\\\d{1,2}[T]\\\\d{2}:\\\\d{2}:\\\\d{2}[Z]', name='gmt_modified'),
    readCount?: int64(description='已读人数', name='read_count'),
    unreadCount?: int64(description='未读人数', name='unread_count'),
    coverpicUrl?: string(description='封面图的url链接', name='coverpic_url'),
  }(description='出参，success为true时，该值不为空，否则值为空', name='result'),
  success?: boolean(description='本次调用是否成功，该值为false时，根据errcode和errMsg排查失败原因', name='success'),
  errcode?: int64(description='请求失败返回错误码，0代表无错误', name='errcode'),
  errmsg?: string(description='请求失败返回错误信息', name='errmsg'),
}

model GetOapiBlackboardResponse = {
  headers: map[string]string,
  body: GetOapiBlackboardResponseBody,
}

/**
 * Description: 根据公告ID获取企业未删除公告详情，只有以下身份可以查看：
1、保密公告
     1.1 公告管理员
     1.2 公告的接收人
2、非保密公告
     2.1 企业内的人都可见
 */
async function getOapiBlackboard(request: GetOapiBlackboardRequest): GetOapiBlackboardResponse {
  var runtime = new Util.RuntimeOptions{};
  return getOapiBlackboardEx(request, runtime);
}

/**
 * Description: 根据公告ID获取企业未删除公告详情，只有以下身份可以查看：
1、保密公告
     1.1 公告管理员
     1.2 公告的接收人
2、非保密公告
     2.1 企业内的人都可见
 */
async function getOapiBlackboardEx(request: GetOapiBlackboardRequest, runtime: Util.RuntimeOptions): GetOapiBlackboardResponse {
  Util.validateModel(request);
  var appParams = Util.stringifyMapValue(Util.toMap(request.params));
  return doRequestOApi('POST', '/topapi/blackboard/get', request.headers, appParams, runtime);
}

model QueryOapiMedalCorpmedalParams = {
  userid: string(description='员工ID', name='userid'),
}

model QueryOapiMedalCorpmedalRequest = {
  headers?: map[string]string,
  params:QueryOapiMedalCorpmedalParams,
}

model QueryOapiMedalCorpmedalResponseBody = {
  result?: {
    corpMedalList?: [
      {
        grantTime?: string(description='勋章授予时间', pattern='\\\\d{4}[-]\\\\d{1,2}[-]\\\\d{1,2}[T]\\\\d{2}:\\\\d{2}:\\\\d{2}[Z]', name='grant_time'),
        wear?: boolean(description='是否佩戴勋章', name='wear'),
        templateId?: int64(description='勋章模板ID', name='template_id'),
      }
    ](description='勋章列表', name='corp_medal_list'),
  }(description='返回结果', name='result'),
  success?: boolean(description='调用结果', name='success'),
  errcode?: int64(description='错误码', name='errcode'),
  errmsg?: string(description='错误描述', name='errmsg'),
}

model QueryOapiMedalCorpmedalResponse = {
  headers: map[string]string,
  body: QueryOapiMedalCorpmedalResponseBody,
}

/**
 * Description: 钉钉企业用户查询被授予的勋章
 */
async function queryOapiMedalCorpmedal(request: QueryOapiMedalCorpmedalRequest): QueryOapiMedalCorpmedalResponse {
  var runtime = new Util.RuntimeOptions{};
  return queryOapiMedalCorpmedalEx(request, runtime);
}

/**
 * Description: 钉钉企业用户查询被授予的勋章
 */
async function queryOapiMedalCorpmedalEx(request: QueryOapiMedalCorpmedalRequest, runtime: Util.RuntimeOptions): QueryOapiMedalCorpmedalResponse {
  Util.validateModel(request);
  var appParams = Util.stringifyMapValue(Util.toMap(request.params));
  return doRequestOApi('POST', '/topapi/medal/corpmedal/query', request.headers, appParams, runtime);
}

model UpdateservicetimeOapiCcoserviceServicegroupParams = {
  openConversationId: string(description='群加密id', name='open_conversation_id'),
  startTime: string(description='服务开始时间', name='start_time'),
  endTime: string(description='服务结束时间', name='end_time'),
  timeType?: int64(description='日期类型,0-工作日;1-每日;99-端上不显示', name='time_type'),
}

model UpdateservicetimeOapiCcoserviceServicegroupRequest = {
  headers?: map[string]string,
  params:UpdateservicetimeOapiCcoserviceServicegroupParams,
}

model UpdateservicetimeOapiCcoserviceServicegroupResponseBody = {
  errmsg?: string(description='errorMsg', name='errmsg'),
  errcode?: int64(description='dingOpenErrcode', name='errcode'),
  success?: boolean(description='success', name='success'),
}

model UpdateservicetimeOapiCcoserviceServicegroupResponse = {
  headers: map[string]string,
  body: UpdateservicetimeOapiCcoserviceServicegroupResponseBody,
}

/**
 * Description: 修改服务群入群文案时间
 */
async function updateservicetimeOapiCcoserviceServicegroup(request: UpdateservicetimeOapiCcoserviceServicegroupRequest): UpdateservicetimeOapiCcoserviceServicegroupResponse {
  var runtime = new Util.RuntimeOptions{};
  return updateservicetimeOapiCcoserviceServicegroupEx(request, runtime);
}

/**
 * Description: 修改服务群入群文案时间
 */
async function updateservicetimeOapiCcoserviceServicegroupEx(request: UpdateservicetimeOapiCcoserviceServicegroupRequest, runtime: Util.RuntimeOptions): UpdateservicetimeOapiCcoserviceServicegroupResponse {
  Util.validateModel(request);
  var appParams = Util.stringifyMapValue(Util.toMap(request.params));
  return doRequestOApi('POST', '/topapi/ccoservice/servicegroup/updateservicetime', request.headers, appParams, runtime);
}

model SearchOapiAlitripBtripApplyParams = {
  rq: {
    gmtModified?: string(description='更新时间大于等于此时间的审批单', pattern='\\\\d{4}[-]\\\\d{1,2}[-]\\\\d{1,2}[T]\\\\d{2}:\\\\d{2}:\\\\d{2}[Z]', name='gmt_modified'),
    pageSize?: int64(description='每页返回数量，默认10，最多50', name='page_size'),
    endTime?: string(description='结束时间', pattern='\\\\d{4}[-]\\\\d{1,2}[-]\\\\d{1,2}[T]\\\\d{2}:\\\\d{2}:\\\\d{2}[Z]', name='end_time'),
    startTime?: string(description='开始时间', pattern='\\\\d{4}[-]\\\\d{1,2}[-]\\\\d{1,2}[T]\\\\d{2}:\\\\d{2}:\\\\d{2}[Z]', name='start_time'),
    page?: int64(description='页数，从1开始', name='page'),
    userid?: string(description='用户id', name='userid'),
    deptid?: string(description='部门id', name='deptid'),
    corpid: string(description='企业id', name='corpid'),
  }(description='请求对象', name='rq'),
}

model SearchOapiAlitripBtripApplyRequest = {
  headers?: map[string]string,
  params:SearchOapiAlitripBtripApplyParams,
}

model SearchOapiAlitripBtripApplyResponseBody = {
  module?: [
    {
      id?: int64(description='商旅审批单id', name='id'),
      applyShowId?: string(description='商旅审批展示id', name='apply_show_id'),
      gmtCreate?: string(description='创建时间', pattern='\\\\d{4}[-]\\\\d{1,2}[-]\\\\d{1,2}[T]\\\\d{2}:\\\\d{2}:\\\\d{2}[Z]', name='gmt_create'),
      gmtModified?: string(description='更新时间', pattern='\\\\d{4}[-]\\\\d{1,2}[-]\\\\d{1,2}[T]\\\\d{2}:\\\\d{2}:\\\\d{2}[Z]', name='gmt_modified'),
      thirdpartId?: string(description='第三方审批单id,如果非第三方审批单则为空', name='thirdpart_id'),
      corpid?: string(description='企业id', name='corpid'),
      userid?: string(description='用户id', name='userid'),
      deptid?: string(description='部门id', name='deptid'),
      corpName?: string(description='企业名称', name='corp_name'),
      userName?: string(description='用户名称', name='user_name'),
      deptName?: string(description='部门名称', name='dept_name'),
      tripDay?: int64(description='出差天数', name='trip_day'),
      tripCause?: string(description='出差事由', name='trip_cause'),
      tripTitle?: string(description='申请单标题', name='trip_title'),
      status?: int64(description='申请单状态：0申请 1同意 2拒绝 3转交 4取消 5修改已同意 6撤销已同意 7修改审批中 8已同意(修改被拒绝) 9撤销审批中 10已同意(撤销被拒绝) 11已同意(修改被取消) 12已同意(撤销被取消)', name='status'),
      statusDesc?: string(description='审批单状态描述', name='status_desc'),
      itineraryList?: [
        {
          tripWay?: int64(description='行程方式：0单程 1往返', name='trip_way'),
          itineraryId?: string(description='行程id', name='itinerary_id'),
          trafficType?: int64(description='交通方式：0飞机 1火车 2汽车 3其他', name='traffic_type'),
          depCity?: string(description='出发城市', name='dep_city'),
          arrCity?: string(description='到达城市', name='arr_city'),
          costCenterName?: string(description='成本中心', name='cost_center_name'),
          invoiceName?: string(description='发票抬头', name='invoice_name'),
          depDate?: string(description='出发日期', pattern='\\\\d{4}[-]\\\\d{1,2}[-]\\\\d{1,2}[T]\\\\d{2}:\\\\d{2}:\\\\d{2}[Z]', name='dep_date'),
          arrDate?: string(description='到达日期', pattern='\\\\d{4}[-]\\\\d{1,2}[-]\\\\d{1,2}[T]\\\\d{2}:\\\\d{2}:\\\\d{2}[Z]', name='arr_date'),
          projectCode?: string(description='项目代码', name='project_code'),
          projectTitle?: string(description='项目名称', name='project_title'),
        }
      ](description='行程列表', name='itinerary_list'),
      travelerList?: [
        {
          userid?: string(description='用户id', name='userid'),
          userName?: string(description='用户名称', name='user_name'),
        }
      ](description='出行人列表', name='traveler_list'),
      approverList?: [
        {
          order?: int64(description='审批人顺序', name='order'),
          userName?: string(description='审批人名称', name='user_name'),
          userid?: string(description='审批人id', name='userid'),
          status?: int64(description='审批状态：0审批中 1已同意 2已拒绝 3已转交，4已取消 5已终止 6发起审批 7评论', name='status'),
          statusDesc?: string(description='审批状态描述', name='status_desc'),
          note?: string(description='审批意见', name='note'),
          operateTime?: string(description='操作时间', pattern='\\\\d{4}[-]\\\\d{1,2}[-]\\\\d{1,2}[T]\\\\d{2}:\\\\d{2}:\\\\d{2}[Z]', name='operate_time'),
        }
      ](description='approverList', name='approver_list'),
    }
  ](description='审批单列表', name='module'),
  errmsg?: string(description='错误信息', name='errmsg'),
  errcode?: int64(description='错误码', name='errcode'),
  success?: boolean(description='成功标识', name='success'),
}

model SearchOapiAlitripBtripApplyResponse = {
  headers: map[string]string,
  body: SearchOapiAlitripBtripApplyResponseBody,
}

/**
 * Description: 搜索企业审批单数据
 */
async function searchOapiAlitripBtripApply(request: SearchOapiAlitripBtripApplyRequest): SearchOapiAlitripBtripApplyResponse {
  var runtime = new Util.RuntimeOptions{};
  return searchOapiAlitripBtripApplyEx(request, runtime);
}

/**
 * Description: 搜索企业审批单数据
 */
async function searchOapiAlitripBtripApplyEx(request: SearchOapiAlitripBtripApplyRequest, runtime: Util.RuntimeOptions): SearchOapiAlitripBtripApplyResponse {
  Util.validateModel(request);
  var appParams = Util.stringifyMapValue(Util.toMap(request.params));
  return doRequestOApi('POST', '/topapi/alitrip/btrip/apply/search', request.headers, appParams, runtime);
}

model GetOapiAlitripBtripApplyParams = {
  rq: {
    thirdpartApplyId?: string(description='外部审批单id', name='thirdpart_apply_id'),
    applyId?: int64(description='阿里商旅审批单id', name='apply_id'),
    applyShowId?: string(description='阿里商旅审批单展示id', name='apply_show_id'),
    corpid: string(description='企业id', name='corpid'),
  }(description='请求对象', name='rq'),
}

model GetOapiAlitripBtripApplyRequest = {
  headers?: map[string]string,
  params:GetOapiAlitripBtripApplyParams,
}

model GetOapiAlitripBtripApplyResponseBody = {
  module?: {
    id?: int64(description='商旅审批单id', name='id'),
    applyShowId?: string(description='商旅审批展示id', name='apply_show_id'),
    gmtCreate?: string(description='创建时间', pattern='\\\\d{4}[-]\\\\d{1,2}[-]\\\\d{1,2}[T]\\\\d{2}:\\\\d{2}:\\\\d{2}[Z]', name='gmt_create'),
    gmtModified?: string(description='更新时间', pattern='\\\\d{4}[-]\\\\d{1,2}[-]\\\\d{1,2}[T]\\\\d{2}:\\\\d{2}:\\\\d{2}[Z]', name='gmt_modified'),
    thirdpartId?: string(description='第三方审批单id,如果非第三方审批单则为空', name='thirdpart_id'),
    corpid?: string(description='企业id', name='corpid'),
    corpName?: string(description='企业名称', name='corp_name'),
    userid?: string(description='用户id', name='userid'),
    userName?: string(description='用户名称', name='user_name'),
    deptid?: string(description='部门id', name='deptid'),
    tripDay?: int64(description='出差天数', name='trip_day'),
    deptName?: string(description='部门名称', name='dept_name'),
    tripCause?: string(description='出差事由', name='trip_cause'),
    tripTitle?: string(description='审批单标题', name='trip_title'),
    status?: int64(description='申请单状态：0申请 1同意 2拒绝 3转交 4取消 5修改已同意 6撤销已同意 7修改审批中 8已同意(修改被拒绝) 9撤销审批中 10已同意(撤销被拒绝) 11已同意(修改被取消) 12已同意(撤销被取消)', name='status'),
    statusDesc?: string(description='审批单状态描述', name='status_desc'),
    itineraryList?: [
      {
        tripWay?: int64(description='行程方式：0单程 1往返', name='trip_way'),
        itineraryId?: string(description='行程id', name='itinerary_id'),
        trafficType?: int64(description='交通方式：0飞机 1火车 2汽车 3其他', name='traffic_type'),
        depCity?: string(description='出发城市', name='dep_city'),
        arrCity?: string(description='到达城市', name='arr_city'),
        depDate?: string(description='出发时间', pattern='\\\\d{4}[-]\\\\d{1,2}[-]\\\\d{1,2}[T]\\\\d{2}:\\\\d{2}:\\\\d{2}[Z]', name='dep_date'),
        costCenterName?: string(description='成本中心', name='cost_center_name'),
        arrDate?: string(description='到达时间', pattern='\\\\d{4}[-]\\\\d{1,2}[-]\\\\d{1,2}[T]\\\\d{2}:\\\\d{2}:\\\\d{2}[Z]', name='arr_date'),
        invoiceName?: string(description='发票抬头', name='invoice_name'),
        projectTitle?: string(description='项目名称', name='project_title'),
        projectCode?: string(description='项目编号', name='project_code'),
      }
    ](description='行程列表', name='itinerary_list'),
    travelerList?: [
      {
        userid?: string(description='出行人id', name='userid'),
        userName?: string(description='出行人名称', name='user_name'),
      }
    ](description='出行人列表', name='traveler_list'),
    approverList?: [
      {
        order?: int64(description='审批人顺序', name='order'),
        userid?: string(description='审批人id', name='userid'),
        userName?: string(description='审批人名称', name='user_name'),
        status?: int64(description='审批状态：0审批中 1已同意 2已拒绝 3已转交，4已取消 5已终止 6发起审批 7评论', name='status'),
        statusDesc?: string(description='审批状态描述', name='status_desc'),
        note?: string(description='审批意见', name='note'),
        operateTime?: string(description='操作时间', pattern='\\\\d{4}[-]\\\\d{1,2}[-]\\\\d{1,2}[T]\\\\d{2}:\\\\d{2}:\\\\d{2}[Z]', name='operate_time'),
      }
    ](description='审批人列表', name='approver_list'),
  }(description='审批单对象', name='module'),
  errmsg?: string(description='错误信息', name='errmsg'),
  errcode?: int64(description='错误码', name='errcode'),
  success?: boolean(description='成功标识', name='success'),
}

model GetOapiAlitripBtripApplyResponse = {
  headers: map[string]string,
  body: GetOapiAlitripBtripApplyResponseBody,
}

/**
 * Description: 获取单个申请单的详情数据
 */
async function getOapiAlitripBtripApply(request: GetOapiAlitripBtripApplyRequest): GetOapiAlitripBtripApplyResponse {
  var runtime = new Util.RuntimeOptions{};
  return getOapiAlitripBtripApplyEx(request, runtime);
}

/**
 * Description: 获取单个申请单的详情数据
 */
async function getOapiAlitripBtripApplyEx(request: GetOapiAlitripBtripApplyRequest, runtime: Util.RuntimeOptions): GetOapiAlitripBtripApplyResponse {
  Util.validateModel(request);
  var appParams = Util.stringifyMapValue(Util.toMap(request.params));
  return doRequestOApi('POST', '/topapi/alitrip/btrip/apply/get', request.headers, appParams, runtime);
}

model BetaOapiCateringCoopcontactGetParams = {
  corpEndCorpId: string(description='合作企业的corpId', name='corp_end_corp_id'),
  shopId: string(description='店铺id', name='shop_id'),
  callerUserid: string(description='呼叫方的userId', name='caller_userid'),
}

model BetaOapiCateringCoopcontactGetRequest = {
  headers?: map[string]string,
  params:BetaOapiCateringCoopcontactGetParams,
}

model BetaOapiCateringCoopcontactGetResponseBody = {
  success?: boolean(description='是否成功', name='success'),
  errcode?: int64(description='错误代码', name='errcode'),
  errmsg?: string(description='错误信息', name='errmsg'),
  expiration?: int64(description='号码过期时间戳(毫秒)', name='expiration'),
  priMobile?: string(description='临时隐私号', name='pri_mobile'),
}

model BetaOapiCateringCoopcontactGetResponse = {
  headers: map[string]string,
  body: BetaOapiCateringCoopcontactGetResponseBody,
}

/**
 * Description: 获取企业的临时联系方式
 */
async function betaOapiCateringCoopcontactGet(request: BetaOapiCateringCoopcontactGetRequest): BetaOapiCateringCoopcontactGetResponse {
  var runtime = new Util.RuntimeOptions{};
  return betaOapiCateringCoopcontactGetEx(request, runtime);
}

/**
 * Description: 获取企业的临时联系方式
 */
async function betaOapiCateringCoopcontactGetEx(request: BetaOapiCateringCoopcontactGetRequest, runtime: Util.RuntimeOptions): BetaOapiCateringCoopcontactGetResponse {
  Util.validateModel(request);
  var appParams = Util.stringifyMapValue(Util.toMap(request.params));
  return doRequestOApi('POST', '/topapi/catering/coopcontact/get/beta', request.headers, appParams, runtime);
}

model PreviewOapiProcessinstanceCspaceParams = {
  request: {
    agentid?: int64(description='应用id', name='agentid'),
    processInstanceId: string(description='实例id', name='process_instance_id'),
    fileId?: string(description='附件id', name='file_id'),
    userid: string(description='授权用户id', name='userid'),
    fileidList?: [ string ](description='附件id列表，支持批量授权', maxItems=20, name='fileid_list'),
  }(description='request', name='request'),
}

model PreviewOapiProcessinstanceCspaceRequest = {
  headers?: map[string]string,
  params:PreviewOapiProcessinstanceCspaceParams,
}

model PreviewOapiProcessinstanceCspaceResponseBody = {
  errmsg?: string(description='错误信息', name='errmsg'),
  result?: {
    spaceId?: int64(description='spaceId', name='space_id'),
  }(description='结果', name='result'),
  errcode?: int64(description='返回码', name='errcode'),
}

model PreviewOapiProcessinstanceCspaceResponse = {
  headers: map[string]string,
  body: PreviewOapiProcessinstanceCspaceResponseBody,
}

/**
 * Description: 授权预览审批附件
 */
async function previewOapiProcessinstanceCspace(request: PreviewOapiProcessinstanceCspaceRequest): PreviewOapiProcessinstanceCspaceResponse {
  var runtime = new Util.RuntimeOptions{};
  return previewOapiProcessinstanceCspaceEx(request, runtime);
}

/**
 * Description: 授权预览审批附件
 */
async function previewOapiProcessinstanceCspaceEx(request: PreviewOapiProcessinstanceCspaceRequest, runtime: Util.RuntimeOptions): PreviewOapiProcessinstanceCspaceResponse {
  Util.validateModel(request);
  var appParams = Util.stringifyMapValue(Util.toMap(request.params));
  return doRequestOApi('POST', '/topapi/processinstance/cspace/preview', request.headers, appParams, runtime);
}

model Sync_activityOapiSnsParams = {
  unionId?: string(description='11', name='unionId'),
}

model Sync_activityOapiSnsRequest = {
  headers?: map[string]string,
  params?:Sync_activityOapiSnsParams,
}

model Sync_activityOapiSnsResponseBody = {
  errcode?: int64(description='1', name='errcode'),
  errmsg?: string(description='1', name='errmsg'),
}

model Sync_activityOapiSnsResponse = {
  headers: map[string]string,
  body: Sync_activityOapiSnsResponseBody,
}

/**
 * Description: test
 */
async function sync_activityOapiSns(request: Sync_activityOapiSnsRequest): Sync_activityOapiSnsResponse {
  var runtime = new Util.RuntimeOptions{};
  return sync_activityOapiSnsEx(request, runtime);
}

/**
 * Description: test
 */
async function sync_activityOapiSnsEx(request: Sync_activityOapiSnsRequest, runtime: Util.RuntimeOptions): Sync_activityOapiSnsResponse {
  Util.validateModel(request);
  var appParams = Util.stringifyMapValue(Util.toMap(request.params));
  return doRequestOApi('POST', '/sns/sync_activity', request.headers, appParams, runtime);
}

model TransferOapiAlitripBtripCostCenterParams = {
  rq: {
    thirdpartId: string(description='第三方成本中心id', name='thirdpart_id'),
    costCenterId: int64(description='商旅成本中心id', name='cost_center_id'),
    corpid: string(description='企业id', name='corpid'),
  }(description='请求对象', name='rq'),
}

model TransferOapiAlitripBtripCostCenterRequest = {
  headers?: map[string]string,
  params:TransferOapiAlitripBtripCostCenterParams,
}

model TransferOapiAlitripBtripCostCenterResponseBody = {
  success?: boolean(description='成功标识', name='success'),
  errcode?: int64(description='错误码', name='errcode'),
  errmsg?: string(description='错误信息', name='errmsg'),
}

model TransferOapiAlitripBtripCostCenterResponse = {
  headers: map[string]string,
  body: TransferOapiAlitripBtripCostCenterResponseBody,
}

/**
 * Description: 商旅成本中心转换为外部成本中心
 */
async function transferOapiAlitripBtripCostCenter(request: TransferOapiAlitripBtripCostCenterRequest): TransferOapiAlitripBtripCostCenterResponse {
  var runtime = new Util.RuntimeOptions{};
  return transferOapiAlitripBtripCostCenterEx(request, runtime);
}

/**
 * Description: 商旅成本中心转换为外部成本中心
 */
async function transferOapiAlitripBtripCostCenterEx(request: TransferOapiAlitripBtripCostCenterRequest, runtime: Util.RuntimeOptions): TransferOapiAlitripBtripCostCenterResponse {
  Util.validateModel(request);
  var appParams = Util.stringifyMapValue(Util.toMap(request.params));
  return doRequestOApi('POST', '/topapi/alitrip/btrip/cost/center/transfer', request.headers, appParams, runtime);
}

model SearchOapiAlitripBtripInvoiceParams = {
  rq: {
    title?: string(description='发票抬头', name='title'),
    userid: string(description='用户id', name='userid'),
    corpid: string(description='企业id', name='corpid'),
  }(description='请求对象', name='rq'),
}

model SearchOapiAlitripBtripInvoiceRequest = {
  headers?: map[string]string,
  params:SearchOapiAlitripBtripInvoiceParams,
}

model SearchOapiAlitripBtripInvoiceResponseBody = {
  invoice?: [
    {
      id?: int64(description='商旅发票id', name='id'),
      title?: string(description='发票抬头', name='title'),
    }
  ](description='发票列表', name='invoice'),
  success?: boolean(description='成功标识', name='success'),
  errmsg?: string(description='错误信息', name='errmsg'),
  errcode?: int64(description='错误码', name='errcode'),
}

model SearchOapiAlitripBtripInvoiceResponse = {
  headers: map[string]string,
  body: SearchOapiAlitripBtripInvoiceResponseBody,
}

/**
 * Description: 差旅申请用户搜索可用发票列表
 */
async function searchOapiAlitripBtripInvoice(request: SearchOapiAlitripBtripInvoiceRequest): SearchOapiAlitripBtripInvoiceResponse {
  var runtime = new Util.RuntimeOptions{};
  return searchOapiAlitripBtripInvoiceEx(request, runtime);
}

/**
 * Description: 差旅申请用户搜索可用发票列表
 */
async function searchOapiAlitripBtripInvoiceEx(request: SearchOapiAlitripBtripInvoiceRequest, runtime: Util.RuntimeOptions): SearchOapiAlitripBtripInvoiceResponse {
  Util.validateModel(request);
  var appParams = Util.stringifyMapValue(Util.toMap(request.params));
  return doRequestOApi('POST', '/topapi/alitrip/btrip/invoice/search', request.headers, appParams, runtime);
}

model SearchOapiAlitripBtripFlightOrderParams = {
  rq: {
    startTime?: string(description='开始时间', pattern='\\\\d{4}[-]\\\\d{1,2}[-]\\\\d{1,2}[T]\\\\d{2}:\\\\d{2}:\\\\d{2}[Z]', name='start_time'),
    applyId?: int64(description='商旅申请单id', name='apply_id'),
    page?: int64(description='页数，从1开始', name='page'),
    userid?: string(description='用户id', name='userid'),
    pageSize?: int64(description='每页数据量，默认10，最高50', name='page_size'),
    deptid?: string(description='部门id', name='deptid'),
    endTime?: string(description='结束时间', pattern='\\\\d{4}[-]\\\\d{1,2}[-]\\\\d{1,2}[T]\\\\d{2}:\\\\d{2}:\\\\d{2}[Z]', name='end_time'),
    corpid: string(description='企业id', name='corpid'),
    updateEndTime?: string(description='更新结束时间', pattern='\\\\d{4}[-]\\\\d{1,2}[-]\\\\d{1,2}[T]\\\\d{2}:\\\\d{2}:\\\\d{2}[Z]', name='update_end_time'),
    updateStartTime?: string(description='更新开始时间', pattern='\\\\d{4}[-]\\\\d{1,2}[-]\\\\d{1,2}[T]\\\\d{2}:\\\\d{2}:\\\\d{2}[Z]', name='update_start_time'),
  }(description='请求对象', name='rq'),
}

model SearchOapiAlitripBtripFlightOrderRequest = {
  headers?: map[string]string,
  params:SearchOapiAlitripBtripFlightOrderParams,
}

model SearchOapiAlitripBtripFlightOrderResponseBody = {
  success?: boolean(description='成功标识', name='success'),
  errcode?: int64(description='错误码', name='errcode'),
  errmsg?: string(description='错误信息', name='errmsg'),
  flightOrderList?: [
    {
      id?: int64(description='机票订单id', name='id'),
      gmtModified?: string(description='更新时间', pattern='\\\\d{4}[-]\\\\d{1,2}[-]\\\\d{1,2}[T]\\\\d{2}:\\\\d{2}:\\\\d{2}[Z]', name='gmt_modified'),
      userid?: string(description='用户id', name='userid'),
      corpName?: string(description='企业名称', name='corp_name'),
      corpid?: string(description='企业id', name='corpid'),
      gmtCreate?: string(description='创建时间', pattern='\\\\d{4}[-]\\\\d{1,2}[-]\\\\d{1,2}[T]\\\\d{2}:\\\\d{2}:\\\\d{2}[Z]', name='gmt_create'),
      userName?: string(description='用户名称', name='user_name'),
      deptid?: string(description='部门id', name='deptid'),
      deptName?: string(description='部门名称', name='dept_name'),
      applyId?: string(description='商旅申请单id', name='apply_id'),
      contactName?: string(description='联系人', name='contact_name'),
      depCity?: string(description='出发城市', name='dep_city'),
      arrCity?: string(description='到达城市', name='arr_city'),
      depDate?: string(description='出发日期', pattern='\\\\d{4}[-]\\\\d{1,2}[-]\\\\d{1,2}[T]\\\\d{2}:\\\\d{2}:\\\\d{2}[Z]', name='dep_date'),
      retDate?: string(description='到达日期', pattern='\\\\d{4}[-]\\\\d{1,2}[-]\\\\d{1,2}[T]\\\\d{2}:\\\\d{2}:\\\\d{2}[Z]', name='ret_date'),
      tripType?: int64(description='行程类型。0:单程，1:往返，2:中转', name='trip_type'),
      passengerCount?: int64(description='乘机人数量', name='passenger_count'),
      cabinClass?: string(description='舱位类型', name='cabin_class'),
      status?: int64(description='订单状态：0待支付,1出票中,2已关闭,3有改签单,4有退票单,5出票成功,6退票申请中,7改签申请中', name='status'),
      discount?: string(description='折扣', name='discount'),
      flightNo?: string(description='航班号', name='flight_no'),
      passengerName?: string(description='乘机人，多个用‘,’分割', name='passenger_name'),
      depAirport?: string(description='出发机场', name='dep_airport'),
      arrAirport?: string(description='到达机场', name='arr_airport'),
      invoice?: {
        id?: int64(description='商旅发票id', name='id'),
        title?: string(description='发票抬头', name='title'),
      }(description='发票信息对象', name='invoice'),
      costCenter?: {
        id?: int64(description='商旅成本中心id', name='id'),
        corpid?: string(description='企业id', name='corpid'),
        number?: string(description='成本中心编号', name='number'),
        name?: string(description='成本中心名称', name='name'),
      }(description='成本中心对象', name='cost_center'),
      priceInfoList?: [
        {
          price?: string(description='价格', name='price'),
          type?: int64(description='资金流向:1:支出，2:收入', name='type'),
          category?: string(description='交易类目', name='category'),
          payType?: int64(description='结算方式:1：个人现付，2:企业现付,4:企业月结，8、企业预存', name='pay_type'),
          gmtCreate?: string(description='流水创建时间', pattern='\\\\d{4}[-]\\\\d{1,2}[-]\\\\d{1,2}[T]\\\\d{2}:\\\\d{2}:\\\\d{2}[Z]', name='gmt_create'),
          passengerName?: string(description='乘机人，多个用‘,’分割', name='passenger_name'),
        }
      ](description='价目信息', name='price_info_list'),
      insureInfoList?: [
        {
          insureNo?: string(description='保单号', name='insure_no'),
          status?: int64(description='状态：1已出保 2已退保', name='status'),
          name?: string(description='乘机人(保险人)姓名', name='name'),
        }
      ](description='保险信息', name='insureInfo_list'),
      thirdpartItineraryId?: string(description='第三方行程id', name='thirdpart_itinerary_id'),
      userAffiliateList?: [
        {
          userid?: string(description='出行人ID', name='userid'),
          userName?: string(description='出行人名称', name='user_name'),
        }
      ](description='出行人列表', name='user_affiliate_list'),
    }
  ](description='机票列表', name='flight_order_list'),
}

model SearchOapiAlitripBtripFlightOrderResponse = {
  headers: map[string]string,
  body: SearchOapiAlitripBtripFlightOrderResponseBody,
}

/**
 * Description: 获取企业机票订单数据
 */
async function searchOapiAlitripBtripFlightOrder(request: SearchOapiAlitripBtripFlightOrderRequest): SearchOapiAlitripBtripFlightOrderResponse {
  var runtime = new Util.RuntimeOptions{};
  return searchOapiAlitripBtripFlightOrderEx(request, runtime);
}

/**
 * Description: 获取企业机票订单数据
 */
async function searchOapiAlitripBtripFlightOrderEx(request: SearchOapiAlitripBtripFlightOrderRequest, runtime: Util.RuntimeOptions): SearchOapiAlitripBtripFlightOrderResponse {
  Util.validateModel(request);
  var appParams = Util.stringifyMapValue(Util.toMap(request.params));
  return doRequestOApi('POST', '/topapi/alitrip/btrip/flight/order/search', request.headers, appParams, runtime);
}

model ListOapiBlackboardCategoryParams = {
  operationUserid: string(description='操作人userId(必须是公告管理员)', name='operation_userid'),
}

model ListOapiBlackboardCategoryRequest = {
  headers?: map[string]string,
  params:ListOapiBlackboardCategoryParams,
}

model ListOapiBlackboardCategoryResponseBody = {
  result?: [
    {
      id?: string(description='分类id', name='id'),
      name?: string(description='分类名', name='name'),
    }
  ](description='出参，success为true时，该值不为空，否则值为空', name='result'),
  success?: boolean(description='本次调用是否成功，该值为false时，根据errcode和errMsg排查失败原因', name='success'),
  errcode?: int64(description='请求失败返回错误码', name='errcode'),
  errmsg?: string(description='请求失败返回错误信息', name='errmsg'),
}

model ListOapiBlackboardCategoryResponse = {
  headers: map[string]string,
  body: ListOapiBlackboardCategoryResponseBody,
}

/**
 * Description: 获取企业公告未删除分类列表
 */
async function listOapiBlackboardCategory(request: ListOapiBlackboardCategoryRequest): ListOapiBlackboardCategoryResponse {
  var runtime = new Util.RuntimeOptions{};
  return listOapiBlackboardCategoryEx(request, runtime);
}

/**
 * Description: 获取企业公告未删除分类列表
 */
async function listOapiBlackboardCategoryEx(request: ListOapiBlackboardCategoryRequest, runtime: Util.RuntimeOptions): ListOapiBlackboardCategoryResponse {
  Util.validateModel(request);
  var appParams = Util.stringifyMapValue(Util.toMap(request.params));
  return doRequestOApi('POST', '/topapi/blackboard/category/list', request.headers, appParams, runtime);
}

model SearchOapiAlitripBtripTrainOrderParams = {
  rq: {
    startTime?: string(description='开始时间', pattern='\\\\d{4}[-]\\\\d{1,2}[-]\\\\d{1,2}[T]\\\\d{2}:\\\\d{2}:\\\\d{2}[Z]', name='start_time'),
    applyId?: int64(description='商旅审批单id', name='apply_id'),
    page?: int64(description='页数，从1开始', name='page'),
    userid?: string(description='用户id', name='userid'),
    pageSize?: int64(description='每页返回数量，默认10，最大50', name='page_size'),
    deptid?: string(description='部门id', name='deptid'),
    endTime?: string(description='结束时间', pattern='\\\\d{4}[-]\\\\d{1,2}[-]\\\\d{1,2}[T]\\\\d{2}:\\\\d{2}:\\\\d{2}[Z]', name='end_time'),
    corpid: string(description='企业id', name='corpid'),
    updateEndTime?: string(description='更新结束时间', pattern='\\\\d{4}[-]\\\\d{1,2}[-]\\\\d{1,2}[T]\\\\d{2}:\\\\d{2}:\\\\d{2}[Z]', name='update_end_time'),
    updateStartTime?: string(description='更新开始时间', pattern='\\\\d{4}[-]\\\\d{1,2}[-]\\\\d{1,2}[T]\\\\d{2}:\\\\d{2}:\\\\d{2}[Z]', name='update_start_time'),
  }(description='请求对象', name='rq'),
}

model SearchOapiAlitripBtripTrainOrderRequest = {
  headers?: map[string]string,
  params:SearchOapiAlitripBtripTrainOrderParams,
}

model SearchOapiAlitripBtripTrainOrderResponseBody = {
  success?: boolean(description='成功标识', name='success'),
  errcode?: int64(description='错误码', name='errcode'),
  errmsg?: string(description='错误信息', name='errmsg'),
  trainOrderList?: [
    {
      id?: int64(description='订单id', name='id'),
      gmtCreate?: string(description='创建时间', pattern='\\\\d{4}[-]\\\\d{1,2}[-]\\\\d{1,2}[T]\\\\d{2}:\\\\d{2}:\\\\d{2}[Z]', name='gmt_create'),
      gmtModified?: string(description='更新时间', pattern='\\\\d{4}[-]\\\\d{1,2}[-]\\\\d{1,2}[T]\\\\d{2}:\\\\d{2}:\\\\d{2}[Z]', name='gmt_modified'),
      corpid?: string(description='企业id', name='corpid'),
      corpName?: string(description='企业名称', name='corp_name'),
      userid?: string(description='用户id', name='userid'),
      userName?: string(description='用户名称', name='user_name'),
      deptid?: string(description='部门id', name='deptid'),
      deptName?: string(description='部门名称', name='dept_name'),
      applyId?: int64(description='商旅审批单id', name='apply_id'),
      contactName?: string(description='联系人名称', name='contact_name'),
      depStation?: string(description='出发站', name='dep_station'),
      arrStation?: string(description='到达站', name='arr_station'),
      depTime?: string(description='出发时间', pattern='\\\\d{4}[-]\\\\d{1,2}[-]\\\\d{1,2}[T]\\\\d{2}:\\\\d{2}:\\\\d{2}[Z]', name='dep_time'),
      arrTime?: string(description='到达时间', pattern='\\\\d{4}[-]\\\\d{1,2}[-]\\\\d{1,2}[T]\\\\d{2}:\\\\d{2}:\\\\d{2}[Z]', name='arr_time'),
      trainNumber?: string(description='车次', name='train_number'),
      trainType?: string(description='车次类型', name='train_type'),
      seatType?: string(description='座位类型', name='seat_type'),
      runTime?: string(description='运行时长', name='run_time'),
      ticketNo12306?: string(description='12306票号', name='ticket_no_12306'),
      depCity?: string(description='出发城市', name='dep_city'),
      arrCity?: string(description='到达城市', name='arr_city'),
      riderName?: string(description='乘客姓名', name='rider_name'),
      ticketCount?: int64(description='票的数量', name='ticket_count'),
      status?: int64(description='订单状态：0待支付,1出票中,2已关闭,3,改签成功,4退票成功,5出票完成,6退票申请中,7改签申请中,8已出票,已发货,9出票失败,10改签失败,11退票失败', name='status'),
      invoice?: {
        id?: string(description='商旅发票id', name='id'),
        title?: string(description='发票抬头', name='title'),
      }(description='发票对象', name='invoice'),
      costCenter?: {
        id?: string(description='商旅成本中心id', name='id'),
        corpid?: string(description='企业id', name='corpid'),
        number?: string(description='成本中心编号', name='number'),
        name?: string(description='成本中心名称', name='name'),
      }(description='成本中心对象', name='cost_center'),
      priceInfoList?: [
        {
          price?: string(description='价格', name='price'),
          type?: int64(description='资金流向:1:支出，2:收入', name='type'),
          category?: string(description='消费类型', name='category'),
          payType?: int64(description='结算方式:1：个人现付，2:企业现付,4:企业月结，8、企业预存', name='pay_type'),
          gmtCreate?: string(description='流水创建时间', pattern='\\\\d{4}[-]\\\\d{1,2}[-]\\\\d{1,2}[T]\\\\d{2}:\\\\d{2}:\\\\d{2}[Z]', name='gmt_create'),
          passengerName?: string(description='乘车人名称，多个用‘,’分割', name='passenger_name'),
        }
      ](description='价目信息', name='price_info_list'),
      thirdpartItineraryId?: string(description='第三方行程id', name='thirdpart_itinerary_id'),
      userAffiliateList?: [
        {
          userid?: string(description='乘车人ID', name='userid'),
          userName?: string(description='乘车人名称', name='user_name'),
        }
      ](description='乘车人列表', name='user_affiliate_list'),
    }
  ](description='module', name='train_order_list'),
}

model SearchOapiAlitripBtripTrainOrderResponse = {
  headers: map[string]string,
  body: SearchOapiAlitripBtripTrainOrderResponseBody,
}

/**
 * Description: 获取企业火车票订单数据
 */
async function searchOapiAlitripBtripTrainOrder(request: SearchOapiAlitripBtripTrainOrderRequest): SearchOapiAlitripBtripTrainOrderResponse {
  var runtime = new Util.RuntimeOptions{};
  return searchOapiAlitripBtripTrainOrderEx(request, runtime);
}

/**
 * Description: 获取企业火车票订单数据
 */
async function searchOapiAlitripBtripTrainOrderEx(request: SearchOapiAlitripBtripTrainOrderRequest, runtime: Util.RuntimeOptions): SearchOapiAlitripBtripTrainOrderResponse {
  Util.validateModel(request);
  var appParams = Util.stringifyMapValue(Util.toMap(request.params));
  return doRequestOApi('POST', '/topapi/alitrip/btrip/train/order/search', request.headers, appParams, runtime);
}

model CreateOapiImChatServicegroupNoticeParams = {
  chatId: string(description='要创建群公告的群id', name='chat_id'),
  userid: string(description='创建者id', name='userid'),
  uniqueKey: string(description='唯一性key，由调用方提供，避免重复操作。', name='unique_key'),
  sendDing?: boolean(description='是否发送ding提醒', name='send_ding'),
  title: string(description='群公告标题', maxLength=200, name='title'),
  textContent: string(description='群公告内容', maxLength=2000, name='text_content'),
  sticky?: boolean(description='是否置顶', name='sticky'),
}

model CreateOapiImChatServicegroupNoticeRequest = {
  headers?: map[string]string,
  params:CreateOapiImChatServicegroupNoticeParams,
}

model CreateOapiImChatServicegroupNoticeResponseBody = {
  success?: boolean(description='是否创建成功', name='success'),
  result?: string(description='返回的数据id', name='result'),
  errmsg?: string(description='错误信息', name='errmsg'),
  errcode?: int64(description='错误代码', name='errcode'),
}

model CreateOapiImChatServicegroupNoticeResponse = {
  headers: map[string]string,
  body: CreateOapiImChatServicegroupNoticeResponseBody,
}

/**
 * Description: 给淘宝服务群提供创建群公告的能力。
 */
async function createOapiImChatServicegroupNotice(request: CreateOapiImChatServicegroupNoticeRequest): CreateOapiImChatServicegroupNoticeResponse {
  var runtime = new Util.RuntimeOptions{};
  return createOapiImChatServicegroupNoticeEx(request, runtime);
}

/**
 * Description: 给淘宝服务群提供创建群公告的能力。
 */
async function createOapiImChatServicegroupNoticeEx(request: CreateOapiImChatServicegroupNoticeRequest, runtime: Util.RuntimeOptions): CreateOapiImChatServicegroupNoticeResponse {
  Util.validateModel(request);
  var appParams = Util.stringifyMapValue(Util.toMap(request.params));
  return doRequestOApi('POST', '/topapi/im/chat/servicegroup/notice/create', request.headers, appParams, runtime);
}

model AddOapiAlitripBtripCostCenterEntityParams = {
  rq: {
    thirdpartId: string(description='第三方成本中心id', name='thirdpart_id'),
    entityList: [
      {
        entityId: string(description='员工/部门/角色id', name='entity_id'),
        entityType: string(description='人员类型:1员工，2部门，3角色', name='entity_type'),
      }
    ](description='人员信息列表', maxItems=100, name='entity_list'),
    corpid: string(description='企业id', name='corpid'),
  }(description='请求对象', name='rq'),
}

model AddOapiAlitripBtripCostCenterEntityRequest = {
  headers?: map[string]string,
  params:AddOapiAlitripBtripCostCenterEntityParams,
}

model AddOapiAlitripBtripCostCenterEntityResponseBody = {
  success?: boolean(description='成功标识', name='success'),
  errcode?: int64(description='错误码', name='errcode'),
  errmsg?: string(description='错误信息', name='errmsg'),
  result?: {
    selectedUserNum?: int64(description='该成本中心下员工总数', name='selected_user_num'),
    addNum?: int64(description='增加的人员信息条数', name='add_num'),
  }(description='结果对象', name='result'),
}

model AddOapiAlitripBtripCostCenterEntityResponse = {
  headers: map[string]string,
  body: AddOapiAlitripBtripCostCenterEntityResponseBody,
}

/**
 * Description: 增加成本中心人员信息
 */
async function addOapiAlitripBtripCostCenterEntity(request: AddOapiAlitripBtripCostCenterEntityRequest): AddOapiAlitripBtripCostCenterEntityResponse {
  var runtime = new Util.RuntimeOptions{};
  return addOapiAlitripBtripCostCenterEntityEx(request, runtime);
}

/**
 * Description: 增加成本中心人员信息
 */
async function addOapiAlitripBtripCostCenterEntityEx(request: AddOapiAlitripBtripCostCenterEntityRequest, runtime: Util.RuntimeOptions): AddOapiAlitripBtripCostCenterEntityResponse {
  Util.validateModel(request);
  var appParams = Util.stringifyMapValue(Util.toMap(request.params));
  return doRequestOApi('POST', '/topapi/alitrip/btrip/cost/center/entity/add', request.headers, appParams, runtime);
}

model SearchOapiAlitripBtripHotelOrderParams = {
  rq: {
    startTime?: string(description='开始时间', pattern='\\\\d{4}[-]\\\\d{1,2}[-]\\\\d{1,2}[T]\\\\d{2}:\\\\d{2}:\\\\d{2}[Z]', name='start_time'),
    applyId?: int64(description='商旅审批单id', name='apply_id'),
    page?: int64(description='页数，从1开始', name='page'),
    userid?: string(description='用户id', name='userid'),
    pageSize?: int64(description='每页数量，默认10，最大50', name='page_size'),
    deptid?: string(description='部门id', name='deptid'),
    endTime?: string(description='结束时间', pattern='\\\\d{4}[-]\\\\d{1,2}[-]\\\\d{1,2}[T]\\\\d{2}:\\\\d{2}:\\\\d{2}[Z]', name='end_time'),
    corpid: string(description='企业id', name='corpid'),
    updateEndTime?: string(description='更新开始时间', pattern='\\\\d{4}[-]\\\\d{1,2}[-]\\\\d{1,2}[T]\\\\d{2}:\\\\d{2}:\\\\d{2}[Z]', name='update_end_time'),
    updateStartTime?: string(description='更新结束时间', pattern='\\\\d{4}[-]\\\\d{1,2}[-]\\\\d{1,2}[T]\\\\d{2}:\\\\d{2}:\\\\d{2}[Z]', name='update_start_time'),
  }(description='rq', name='rq'),
}

model SearchOapiAlitripBtripHotelOrderRequest = {
  headers?: map[string]string,
  params:SearchOapiAlitripBtripHotelOrderParams,
}

model SearchOapiAlitripBtripHotelOrderResponseBody = {
  success?: boolean(description='成功标识', name='success'),
  errmsg?: string(description='错误信息', name='errmsg'),
  errcode?: int64(description='错误码', name='errcode'),
  module?: [
    {
      id?: int64(description='订单id', name='id'),
      gmtCreate?: string(description='创建时间', pattern='\\\\d{4}[-]\\\\d{1,2}[-]\\\\d{1,2}[T]\\\\d{2}:\\\\d{2}:\\\\d{2}[Z]', name='gmt_create'),
      gmtModified?: string(description='更新时间', pattern='\\\\d{4}[-]\\\\d{1,2}[-]\\\\d{1,2}[T]\\\\d{2}:\\\\d{2}:\\\\d{2}[Z]', name='gmt_modified'),
      corpid?: string(description='企业id', name='corpid'),
      corpName?: string(description='企业名称', name='corp_name'),
      userid?: string(description='用户id', name='userid'),
      userName?: string(description='用户名称', name='user_name'),
      deptid?: string(description='部门id', name='deptid'),
      deptName?: string(description='部门名称', name='dept_name'),
      applyId?: int64(description='商旅申请单id', name='apply_id'),
      contactName?: string(description='联系人姓名', name='contact_name'),
      city?: string(description='酒店所在城市', name='city'),
      hotelName?: string(description='酒店名称', name='hotel_name'),
      checkIn?: string(description='入住时间', pattern='\\\\d{4}[-]\\\\d{1,2}[-]\\\\d{1,2}[T]\\\\d{2}:\\\\d{2}:\\\\d{2}[Z]', name='check_in'),
      checkOut?: string(description='离店时间', pattern='\\\\d{4}[-]\\\\d{1,2}[-]\\\\d{1,2}[T]\\\\d{2}:\\\\d{2}:\\\\d{2}[Z]', name='check_out'),
      roomType?: string(description='房型', name='room_type'),
      roomNum?: int64(description='房间数', name='room_num'),
      night?: int64(description='总共住几晚', name='night'),
      guest?: string(description='入住顾客，多个用\',\'分割', name='guest'),
      orderTypeDesc?: string(description='订单类型描述', name='order_type_desc'),
      orderStatusDesc?: string(description='订单状态描述', name='order_status_desc'),
      costCenter?: {
        id?: int64(description='商旅成本中心id', name='id'),
        corpid?: string(description='企业id', name='corpid'),
        number?: string(description='成本中心编号', name='number'),
        name?: string(description='成本中心名称', name='name'),
      }(description='成本中心对象', name='cost_center'),
      invoice?: {
        id?: int64(description='商旅发票id', name='id'),
        title?: string(description='发票抬头', name='title'),
      }(description='发票对象', name='invoice'),
      priceInfoList?: [
        {
          price?: string(description='价格', name='price'),
          type?: int64(description='资金流向:1:支出，2:收入', name='type'),
          category?: string(description='交易类型', name='category'),
          payType?: int64(description='结算方式:1个人现付，2:企业现付,4:企业月结，8企业预存', name='pay_type'),
          gmtCreate?: string(description='流水创建时间', pattern='\\\\d{4}[-]\\\\d{1,2}[-]\\\\d{1,2}[T]\\\\d{2}:\\\\d{2}:\\\\d{2}[Z]', name='gmt_create'),
          passengerName?: string(description='入住人信息，多个用‘,’分割', name='passenger_name'),
        }
      ](description='价目详情列表', name='price_info_list'),
      thirdpartItineraryId?: string(description='第三方行程id', name='thirdpart_itinerary_id'),
      orderStatus?: int64(description='订单状态', name='order_status'),
      orderType?: int64(description='订单类型', name='order_type'),
      userAffiliateList?: [
        {
          userid?: string(description='入住人ID', name='userid'),
          userName?: string(description='入住人名称', name='user_name'),
        }
      ](description='入住人列表', name='user_affiliate_list'),
    }
  ](description='酒店订单列表', name='module'),
}

model SearchOapiAlitripBtripHotelOrderResponse = {
  headers: map[string]string,
  body: SearchOapiAlitripBtripHotelOrderResponseBody,
}

/**
 * Description: 企业获取商旅酒店订单数据
 */
async function searchOapiAlitripBtripHotelOrder(request: SearchOapiAlitripBtripHotelOrderRequest): SearchOapiAlitripBtripHotelOrderResponse {
  var runtime = new Util.RuntimeOptions{};
  return searchOapiAlitripBtripHotelOrderEx(request, runtime);
}

/**
 * Description: 企业获取商旅酒店订单数据
 */
async function searchOapiAlitripBtripHotelOrderEx(request: SearchOapiAlitripBtripHotelOrderRequest, runtime: Util.RuntimeOptions): SearchOapiAlitripBtripHotelOrderResponse {
  Util.validateModel(request);
  var appParams = Util.stringifyMapValue(Util.toMap(request.params));
  return doRequestOApi('POST', '/topapi/alitrip/btrip/hotel/order/search', request.headers, appParams, runtime);
}

model UpdateOapiCustomizeConversationParams = {
  userid: string(description='员工账号', name='userid'),
  chatId: string(description='会话id', name='chat_id'),
  extensionKey: string(description='extensionKey', name='extension_key'),
  extensionValue: string(description='extensionValue', name='extension_value'),
}

model UpdateOapiCustomizeConversationRequest = {
  headers?: map[string]string,
  params:UpdateOapiCustomizeConversationParams,
}

model UpdateOapiCustomizeConversationResponseBody = {
  errcode?: int64(description='返回码', name='errcode'),
  errmsg?: string(description='返回描述', name='errmsg'),
}

model UpdateOapiCustomizeConversationResponse = {
  headers: map[string]string,
  body: UpdateOapiCustomizeConversationResponseBody,
}

/**
 * Description: 对会话进行打标，打标之后，根据另外的配置，可以让客户端使用weex展示会话，而不是native展示
 */
async function updateOapiCustomizeConversation(request: UpdateOapiCustomizeConversationRequest): UpdateOapiCustomizeConversationResponse {
  var runtime = new Util.RuntimeOptions{};
  return updateOapiCustomizeConversationEx(request, runtime);
}

/**
 * Description: 对会话进行打标，打标之后，根据另外的配置，可以让客户端使用weex展示会话，而不是native展示
 */
async function updateOapiCustomizeConversationEx(request: UpdateOapiCustomizeConversationRequest, runtime: Util.RuntimeOptions): UpdateOapiCustomizeConversationResponse {
  Util.validateModel(request);
  var appParams = Util.stringifyMapValue(Util.toMap(request.params));
  return doRequestOApi('POST', '/topapi/customize/conversation/update', request.headers, appParams, runtime);
}

model AddOapiWorkspaceCorpMemberParams = {
  targetCorpId?: string(description='目标加人组织', name='target_corp_id'),
  memberAddDtoList?: [
    {
      fromCorpId?: string(description='成员来源组织', name='from_corp_id'),
      fromUserid?: string(description='来源组织成员userId', name='from_userid'),
      userid?: string(description='目标组织userId', name='userid'),
    }
  ](description='加人的成员列表', maxItems=20, name='member_add_dto_list'),
}

model AddOapiWorkspaceCorpMemberRequest = {
  headers?: map[string]string,
  params?:AddOapiWorkspaceCorpMemberParams,
}

model AddOapiWorkspaceCorpMemberResponseBody = {
  errcode?: int64(description='错误码', name='errcode'),
  errmsg?: string(description='错误文案', name='errmsg'),
  result?: [
    {
      fromUserid?: string(description='配合fromCorpId，在那个组织内的userid', name='from_userid'),
      corpId?: string(description='组织id', name='corp_id'),
      tags?: [
        {
          code?: string(description='角色的code', name='code'),
          name?: string(description='角色的名称', name='name'),
        }
      ](description='角色', name='tags'),
      userid?: string(description='成员id', name='userid'),
      fromCorpId?: string(description='配合fromCorpId，在那个组织内的userid', name='from_corp_id'),
    }
  ](description='结果', name='result'),
  success?: boolean(description='true or false', name='success'),
}

model AddOapiWorkspaceCorpMemberResponse = {
  headers: map[string]string,
  body: AddOapiWorkspaceCorpMemberResponseBody,
}

/**
 * Description: 之前的接口是通过以前圈子项目的身份来加人，/workspace/corp/member/add接口是以归属企业或运营主体的身份，从其中选取成员向圈子和项目中添加人，圈子和项目必须归属于当前归属企业或从属于运营主体
 */
async function addOapiWorkspaceCorpMember(request: AddOapiWorkspaceCorpMemberRequest): AddOapiWorkspaceCorpMemberResponse {
  var runtime = new Util.RuntimeOptions{};
  return addOapiWorkspaceCorpMemberEx(request, runtime);
}

/**
 * Description: 之前的接口是通过以前圈子项目的身份来加人，/workspace/corp/member/add接口是以归属企业或运营主体的身份，从其中选取成员向圈子和项目中添加人，圈子和项目必须归属于当前归属企业或从属于运营主体
 */
async function addOapiWorkspaceCorpMemberEx(request: AddOapiWorkspaceCorpMemberRequest, runtime: Util.RuntimeOptions): AddOapiWorkspaceCorpMemberResponse {
  Util.validateModel(request);
  var appParams = Util.stringifyMapValue(Util.toMap(request.params));
  return doRequestOApi('POST', '/topapi/workspace/corp/member/add', request.headers, appParams, runtime);
}

model BindOapiWorkspaceCorpGroupParams = {
  targetCorpId: string(description='目标组织id', name='target_corp_id'),
  chatIds: [ string ](description='群列表，只允许运营主体或归属企业的未绑定过的内部群', maxItems=20, name='chat_ids'),
}

model BindOapiWorkspaceCorpGroupRequest = {
  headers?: map[string]string,
  params:BindOapiWorkspaceCorpGroupParams,
}

model BindOapiWorkspaceCorpGroupResponseBody = {
  errmsg?: string(description='错误信息', name='errmsg'),
  errcode?: int64(description='错误码', name='errcode'),
  result?: [ string ](description='返回绑定成功的群列表', name='result'),
}

model BindOapiWorkspaceCorpGroupResponse = {
  headers: map[string]string,
  body: BindOapiWorkspaceCorpGroupResponseBody,
}

/**
 * Description: 以归属企业或运营主体的身份向 从属于当前组织的圈子、项目组织进行群绑定，绑群成功后，会建立群成员到圈子项目组织的单向同步
 */
async function bindOapiWorkspaceCorpGroup(request: BindOapiWorkspaceCorpGroupRequest): BindOapiWorkspaceCorpGroupResponse {
  var runtime = new Util.RuntimeOptions{};
  return bindOapiWorkspaceCorpGroupEx(request, runtime);
}

/**
 * Description: 以归属企业或运营主体的身份向 从属于当前组织的圈子、项目组织进行群绑定，绑群成功后，会建立群成员到圈子项目组织的单向同步
 */
async function bindOapiWorkspaceCorpGroupEx(request: BindOapiWorkspaceCorpGroupRequest, runtime: Util.RuntimeOptions): BindOapiWorkspaceCorpGroupResponse {
  Util.validateModel(request);
  var appParams = Util.stringifyMapValue(Util.toMap(request.params));
  return doRequestOApi('POST', '/topapi/workspace/corp/group/bind', request.headers, appParams, runtime);
}

model UnbindOapiWorkspaceCorpGroupParams = {
  targetCorpId: string(description='目标组织', name='target_corp_id'),
  chatIds: [ string ](description='要解绑的群，必须是当前组织的内部群', maxItems=20, name='chat_ids'),
}

model UnbindOapiWorkspaceCorpGroupRequest = {
  headers?: map[string]string,
  params:UnbindOapiWorkspaceCorpGroupParams,
}

model UnbindOapiWorkspaceCorpGroupResponseBody = {
  errmsg?: string(description='错误信息', name='errmsg'),
  errcode?: int64(description='错误码', name='errcode'),
  result?: [ string ](description='解绑成功的群列表', name='result'),
}

model UnbindOapiWorkspaceCorpGroupResponse = {
  headers: map[string]string,
  body: UnbindOapiWorkspaceCorpGroupResponseBody,
}

/**
 * Description: 以归属企业或运营主体身份对从属于该组织的项目或圈子实施群解绑，群必须是当前组织的内部群
 */
async function unbindOapiWorkspaceCorpGroup(request: UnbindOapiWorkspaceCorpGroupRequest): UnbindOapiWorkspaceCorpGroupResponse {
  var runtime = new Util.RuntimeOptions{};
  return unbindOapiWorkspaceCorpGroupEx(request, runtime);
}

/**
 * Description: 以归属企业或运营主体身份对从属于该组织的项目或圈子实施群解绑，群必须是当前组织的内部群
 */
async function unbindOapiWorkspaceCorpGroupEx(request: UnbindOapiWorkspaceCorpGroupRequest, runtime: Util.RuntimeOptions): UnbindOapiWorkspaceCorpGroupResponse {
  Util.validateModel(request);
  var appParams = Util.stringifyMapValue(Util.toMap(request.params));
  return doRequestOApi('POST', '/topapi/workspace/corp/group/unbind', request.headers, appParams, runtime);
}

model RemoveOapiWorkspaceCorpMemberParams = {
  targetCorpId: string(description='目标组织id', name='target_corp_id'),
  userids: [ string ](description='目标成员', maxItems=20, name='userids'),
}

model RemoveOapiWorkspaceCorpMemberRequest = {
  headers?: map[string]string,
  params:RemoveOapiWorkspaceCorpMemberParams,
}

model RemoveOapiWorkspaceCorpMemberResponseBody = {
  errmsg?: string(description='错误信息', name='errmsg'),
  errcode?: int64(description='错误码', name='errcode'),
  result?: [ string ](description='返回删除失败的userId,一般是因为是圈主', name='result'),
}

model RemoveOapiWorkspaceCorpMemberResponse = {
  headers: map[string]string,
  body: RemoveOapiWorkspaceCorpMemberResponseBody,
}

/**
 * Description: 以归属企业或运营主体的身份来删除从属于它的小圈和项目的成员，会校验当前组织和操作的小圈和项目的关系，暂不支持删除管理员
 */
async function removeOapiWorkspaceCorpMember(request: RemoveOapiWorkspaceCorpMemberRequest): RemoveOapiWorkspaceCorpMemberResponse {
  var runtime = new Util.RuntimeOptions{};
  return removeOapiWorkspaceCorpMemberEx(request, runtime);
}

/**
 * Description: 以归属企业或运营主体的身份来删除从属于它的小圈和项目的成员，会校验当前组织和操作的小圈和项目的关系，暂不支持删除管理员
 */
async function removeOapiWorkspaceCorpMemberEx(request: RemoveOapiWorkspaceCorpMemberRequest, runtime: Util.RuntimeOptions): RemoveOapiWorkspaceCorpMemberResponse {
  Util.validateModel(request);
  var appParams = Util.stringifyMapValue(Util.toMap(request.params));
  return doRequestOApi('POST', '/topapi/workspace/corp/member/remove', request.headers, appParams, runtime);
}

model RemoveOapiTdpProjectMemberParams = {
  microappAgentId?: int64(description='微应用agentId', name='microapp_agent_id'),
  operatorUserid: string(description='操作者id', name='operator_userid'),
  memberId: string(description='成员ID', name='member_id'),
}

model RemoveOapiTdpProjectMemberRequest = {
  headers?: map[string]string,
  params:RemoveOapiTdpProjectMemberParams,
}

model RemoveOapiTdpProjectMemberResponseBody = {
  errcode?: int64(description='错误码', name='errcode'),
  errmsg?: string(description='错误描述', name='errmsg'),
}

model RemoveOapiTdpProjectMemberResponse = {
  headers: map[string]string,
  body: RemoveOapiTdpProjectMemberResponseBody,
}

/**
 * Description: 删除项目成员
 */
async function removeOapiTdpProjectMember(request: RemoveOapiTdpProjectMemberRequest): RemoveOapiTdpProjectMemberResponse {
  var runtime = new Util.RuntimeOptions{};
  return removeOapiTdpProjectMemberEx(request, runtime);
}

/**
 * Description: 删除项目成员
 */
async function removeOapiTdpProjectMemberEx(request: RemoveOapiTdpProjectMemberRequest, runtime: Util.RuntimeOptions): RemoveOapiTdpProjectMemberResponse {
  Util.validateModel(request);
  var appParams = Util.stringifyMapValue(Util.toMap(request.params));
  return doRequestOApi('POST', '/topapi/tdp/project/member/remove', request.headers, appParams, runtime);
}

model UpdateOapiTdpTaskBasicParams = {
  microappAgentId?: int64(description='微应用agentId', name='microapp_agent_id'),
  task: {
    sourceId?: string(description='来源id', name='source_id'),
    isRecycled?: boolean(description='是否放入回收站', name='is_recycled'),
    gmtModified?: string(description='修改时间', pattern='\\\\d{4}[-]\\\\d{1,2}[-]\\\\d{1,2}[T]\\\\d{2}:\\\\d{2}:\\\\d{2}[Z]', name='gmt_modified'),
    executorUserid?: string(description='执行者id（传null不更新，传空串则清空原值）', name='executor_userid'),
    subject?: string(description='标题', name='subject'),
    isArchived?: boolean(description='是否归档', name='is_archived'),
    modifierUserid?: string(description='更新者id', name='modifier_userid'),
    description?: string(description='描述（传null不更新，传空串则清空原值）', name='description'),
    priority?: int64(description='优先级', name='priority'),
    parentId?: string(description='父任务id', name='parent_id'),
    taskTypeId?: int64(description='任务类型id', name='task_type_id'),
    statusId?: int64(description='工作流状态id', name='status_id'),
    statusStage?: int64(description='状态阶段: 开始阶段(0)，进行阶段(1)，完成阶段(2)', name='status_stage'),
    finishDate?: string(description='完成时间（传null不更新，传Date(0)，即1970-01-01T08:00:00.000+08:00则清空原值）', pattern='\\\\d{4}[-]\\\\d{1,2}[-]\\\\d{1,2}[T]\\\\d{2}:\\\\d{2}:\\\\d{2}[Z]', name='finish_date'),
    startDate?: string(description='开始日期（传null不更新，传Date(0)，即1970-01-01T08:00:00.000+08:00则清空原值）', pattern='\\\\d{4}[-]\\\\d{1,2}[-]\\\\d{1,2}[T]\\\\d{2}:\\\\d{2}:\\\\d{2}[Z]', name='start_date'),
    taskTypeCategory?: string(description='任务类型分类:// 任务 TASK("task"),     // 需求     REQ("req"),     // 缺陷     BUG("bug"),     // 风险     RISK("risk"),     // 工作项     WORKITEM("workitem")', name='task_type_category'),
    planStartDate?: string(description='计划开始时间（传null不更新，传Date(0)，即1970-01-01T08:00:00.000+08:00则清空原值）', pattern='\\\\d{4}[-]\\\\d{1,2}[-]\\\\d{1,2}[T]\\\\d{2}:\\\\d{2}:\\\\d{2}[Z]', name='plan_start_date'),
    planFinishDate?: string(description='计划结束时间（传null不更新，传Date(0)，即1970-01-01T08:00:00.000+08:00则清空原值）', pattern='\\\\d{4}[-]\\\\d{1,2}[-]\\\\d{1,2}[T]\\\\d{2}:\\\\d{2}:\\\\d{2}[Z]', name='plan_finish_date'),
    trackerUserids?: [ string ](description='任务参与者列表', maxItems=20, name='tracker_userids'),
    extension?: {
      commentCount?: int64(description='评论数', name='comment_count'),
      filePath?: string(description='附件地址', name='file_path'),
      other?: string(description='用户可扩展的字段', name='other'),
    }(description='任务的扩展字段', name='extension'),
    projectId?: string(description='任务所属的项目ID', name='project_id'),
    source?: string(description='任务来源source', name='source'),
  }(description='请求入参', name='task'),
  operatorUserid?: string(description='操作者id', name='operator_userid'),
  taskId: string(description='任务ID', name='task_id'),
}

model UpdateOapiTdpTaskBasicRequest = {
  headers?: map[string]string,
  params:UpdateOapiTdpTaskBasicParams,
}

model UpdateOapiTdpTaskBasicResponseBody = {
  errcode?: int64(description='错误码', name='errcode'),
  errmsg?: string(description='错误描述', name='errmsg'),
}

model UpdateOapiTdpTaskBasicResponse = {
  headers: map[string]string,
  body: UpdateOapiTdpTaskBasicResponseBody,
}

/**
 * Description: 更新任务基础信息
 */
async function updateOapiTdpTaskBasic(request: UpdateOapiTdpTaskBasicRequest): UpdateOapiTdpTaskBasicResponse {
  var runtime = new Util.RuntimeOptions{};
  return updateOapiTdpTaskBasicEx(request, runtime);
}

/**
 * Description: 更新任务基础信息
 */
async function updateOapiTdpTaskBasicEx(request: UpdateOapiTdpTaskBasicRequest, runtime: Util.RuntimeOptions): UpdateOapiTdpTaskBasicResponse {
  Util.validateModel(request);
  var appParams = Util.stringifyMapValue(Util.toMap(request.params));
  return doRequestOApi('POST', '/topapi/tdp/task/basic/update', request.headers, appParams, runtime);
}

model RecallOapiMessageMassParams = {
  unionid: string(description='服务号的unionid', maxLength=128, name='unionid'),
  taskId: string(description='消息发送任务id', maxLength=128, name='task_id'),
}

model RecallOapiMessageMassRequest = {
  headers?: map[string]string,
  params:RecallOapiMessageMassParams,
}

model RecallOapiMessageMassResponseBody = {
  errmsg?: string(description='错误信息', name='errmsg'),
  errcode?: int64(description='错误码', name='errcode'),
}

model RecallOapiMessageMassResponse = {
  headers: map[string]string,
  body: RecallOapiMessageMassResponseBody,
}

/**
 * Description: 互动服务窗消息撤回接口
 */
async function recallOapiMessageMass(request: RecallOapiMessageMassRequest): RecallOapiMessageMassResponse {
  var runtime = new Util.RuntimeOptions{};
  return recallOapiMessageMassEx(request, runtime);
}

/**
 * Description: 互动服务窗消息撤回接口
 */
async function recallOapiMessageMassEx(request: RecallOapiMessageMassRequest, runtime: Util.RuntimeOptions): RecallOapiMessageMassResponse {
  Util.validateModel(request);
  var appParams = Util.stringifyMapValue(Util.toMap(request.params));
  return doRequestOApi('POST', '/topapi/message/mass/recall', request.headers, appParams, runtime);
}

model DeleteOapiTdpProjectBasicParams = {
  microappAgentId?: int64(description='微应用agentId', name='microapp_agent_id'),
  operatorUserid: string(description='操作者id', name='operator_userid'),
  projectId?: string(description='项目ID', name='project_id'),
}

model DeleteOapiTdpProjectBasicRequest = {
  headers?: map[string]string,
  params:DeleteOapiTdpProjectBasicParams,
}

model DeleteOapiTdpProjectBasicResponseBody = {
  errcode?: int64(description='错误码', name='errcode'),
  errmsg?: string(description='错误描述', name='errmsg'),
}

model DeleteOapiTdpProjectBasicResponse = {
  headers: map[string]string,
  body: DeleteOapiTdpProjectBasicResponseBody,
}

/**
 * Description: 根据ID删除项目
 */
async function deleteOapiTdpProjectBasic(request: DeleteOapiTdpProjectBasicRequest): DeleteOapiTdpProjectBasicResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteOapiTdpProjectBasicEx(request, runtime);
}

/**
 * Description: 根据ID删除项目
 */
async function deleteOapiTdpProjectBasicEx(request: DeleteOapiTdpProjectBasicRequest, runtime: Util.RuntimeOptions): DeleteOapiTdpProjectBasicResponse {
  Util.validateModel(request);
  var appParams = Util.stringifyMapValue(Util.toMap(request.params));
  return doRequestOApi('POST', '/topapi/tdp/project/basic/delete', request.headers, appParams, runtime);
}

model GetOapiTdpProjectBasicParams = {
  microappAgentId?: int64(description='微应用agentId', name='microapp_agent_id'),
  projectId?: string(description='项目ID', name='project_id'),
}

model GetOapiTdpProjectBasicRequest = {
  headers?: map[string]string,
  params?:GetOapiTdpProjectBasicParams,
}

model GetOapiTdpProjectBasicResponseBody = {
  result?: {
    gmtCreate?: string(description='创建时间', pattern='\\\\d{4}[-]\\\\d{1,2}[-]\\\\d{1,2}[T]\\\\d{2}:\\\\d{2}:\\\\d{2}[Z]', name='gmt_create'),
    modifierUserid?: string(description='更新者id', name='modifier_userid'),
    creatorUserid?: string(description='创建者id', name='creator_userid'),
    bizTag?: string(description='业务标识', name='biz_tag'),
    description?: string(description='项目描述', name='description'),
    isRecycled?: boolean(description='是否放入回收站', name='is_recycled'),
    isArchived?: boolean(description='是否归档', name='is_archived'),
    sourceId?: string(description='来源id', name='source_id'),
    parentId?: string(description='父项目id', name='parent_id'),
    gmtModified?: string(description='修改时间', pattern='\\\\d{4}[-]\\\\d{1,2}[-]\\\\d{1,2}[T]\\\\d{2}:\\\\d{2}:\\\\d{2}[Z]', name='gmt_modified'),
    belongCorpId?: string(description='归属企业id', name='belong_corp_id'),
    projectId?: string(description='项目ID', name='project_id'),
    icon?: string(description='项目图标', name='icon'),
    visibility?: string(description='项目可见范围', name='visibility'),
    name?: string(description='项目名称', name='name'),
    virtualDingOrgid?: string(description='关联的虚拟组织ID', name='virtual_ding_orgid'),
  }(description='响应结果', name='result'),
  errcode?: int64(description='错误码', name='errcode'),
  errmsg?: string(description='错误描述', name='errmsg'),
}

model GetOapiTdpProjectBasicResponse = {
  headers: map[string]string,
  body: GetOapiTdpProjectBasicResponseBody,
}

/**
 * Description: 根据id查询项目详情
 */
async function getOapiTdpProjectBasic(request: GetOapiTdpProjectBasicRequest): GetOapiTdpProjectBasicResponse {
  var runtime = new Util.RuntimeOptions{};
  return getOapiTdpProjectBasicEx(request, runtime);
}

/**
 * Description: 根据id查询项目详情
 */
async function getOapiTdpProjectBasicEx(request: GetOapiTdpProjectBasicRequest, runtime: Util.RuntimeOptions): GetOapiTdpProjectBasicResponse {
  Util.validateModel(request);
  var appParams = Util.stringifyMapValue(Util.toMap(request.params));
  return doRequestOApi('POST', '/topapi/tdp/project/basic/get', request.headers, appParams, runtime);
}

model DeleteOapiTdpTaskBasicParams = {
  microappAgentId?: int64(description='微应用agentId', name='microapp_agent_id'),
  operatorUserid: string(description='操作者id', name='operator_userid'),
  taskId: string(description='任务ID', name='task_id'),
}

model DeleteOapiTdpTaskBasicRequest = {
  headers?: map[string]string,
  params:DeleteOapiTdpTaskBasicParams,
}

model DeleteOapiTdpTaskBasicResponseBody = {
  errcode?: int64(description='错误码', name='errcode'),
  errmsg?: string(description='错误描述', name='errmsg'),
}

model DeleteOapiTdpTaskBasicResponse = {
  headers: map[string]string,
  body: DeleteOapiTdpTaskBasicResponseBody,
}

/**
 * Description: 根据ID删除任务
 */
async function deleteOapiTdpTaskBasic(request: DeleteOapiTdpTaskBasicRequest): DeleteOapiTdpTaskBasicResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteOapiTdpTaskBasicEx(request, runtime);
}

/**
 * Description: 根据ID删除任务
 */
async function deleteOapiTdpTaskBasicEx(request: DeleteOapiTdpTaskBasicRequest, runtime: Util.RuntimeOptions): DeleteOapiTdpTaskBasicResponse {
  Util.validateModel(request);
  var appParams = Util.stringifyMapValue(Util.toMap(request.params));
  return doRequestOApi('POST', '/topapi/tdp/task/basic/delete', request.headers, appParams, runtime);
}

model UnionexportOapiSmartworkHrmEmployeeParams = {
  param: {
    permissionStrategy?: int64(description='权限策略(0谁发起谁下载)', name='permission_strategy'),
    expireStrategy?: int64(description='失效策略(0上传后10分钟失效，1下载一次后失效)', name='expire_strategy'),
    mediaId: string(description='top上传文件后的mediaId', name='media_id'),
    bizUniqueId: string(description='业务唯一id，用于唯一标记一次导出，该参数多次请求幂等处理', name='biz_unique_id'),
    userid: string(description='员工id', name='userid'),
    fileName: string(description='文件名', name='file_name'),
  }(description='导出请求对象', name='param'),
}

model UnionexportOapiSmartworkHrmEmployeeRequest = {
  headers?: map[string]string,
  params:UnionexportOapiSmartworkHrmEmployeeParams,
}

model UnionexportOapiSmartworkHrmEmployeeResponseBody = {
  isSuccess?: boolean(description='是否成功', name='is_success'),
  errmsg?: string(description='错误码', name='errmsg'),
  errcode?: int64(description='错误code', name='errcode'),
  result?: {
    exportId?: string(description='导出记录id', name='export_id'),
  }(description='导出结果对象', name='result'),
}

model UnionexportOapiSmartworkHrmEmployeeResponse = {
  headers: map[string]string,
  body: UnionexportOapiSmartworkHrmEmployeeResponseBody,
}

/**
 * Description: 智能人事联合导出，ISV提供业务excel并制定需要填补的数据，由智能人事填补后，直接对用户提供下载服务。
 */
async function unionexportOapiSmartworkHrmEmployee(request: UnionexportOapiSmartworkHrmEmployeeRequest): UnionexportOapiSmartworkHrmEmployeeResponse {
  var runtime = new Util.RuntimeOptions{};
  return unionexportOapiSmartworkHrmEmployeeEx(request, runtime);
}

/**
 * Description: 智能人事联合导出，ISV提供业务excel并制定需要填补的数据，由智能人事填补后，直接对用户提供下载服务。
 */
async function unionexportOapiSmartworkHrmEmployeeEx(request: UnionexportOapiSmartworkHrmEmployeeRequest, runtime: Util.RuntimeOptions): UnionexportOapiSmartworkHrmEmployeeResponse {
  Util.validateModel(request);
  var appParams = Util.stringifyMapValue(Util.toMap(request.params));
  return doRequestOApi('POST', '/topapi/smartwork/hrm/employee/unionexport', request.headers, appParams, runtime);
}

model UpdateOapiTdpProjectBasicParams = {
  microappAgentId?: int64(description='微应用agentId', name='microapp_agent_id'),
  operatorUserid?: string(description='操作者id', name='operator_userid'),
  projectId: string(description='项目ID', name='project_id'),
  project?: {
    isRecycled?: boolean(description='是否放入回收站', name='is_recycled'),
    gmtModified?: string(description='更新时间', pattern='\\\\d{4}[-]\\\\d{1,2}[-]\\\\d{1,2}[T]\\\\d{2}:\\\\d{2}:\\\\d{2}[Z]', name='gmt_modified'),
    isArchived?: boolean(description='是否归档', name='is_archived'),
    modifierUserid?: string(description='更新者id, 传staffId（工号）', name='modifier_userid'),
    name?: string(description='项目名称', name='name'),
    description?: string(description='项目描述', name='description'),
    parentId?: string(description='父项目ID', name='parent_id'),
    identifier?: string(description='项目类型', name='identifier'),
    visibility?: string(description='项目可见范围', name='visibility'),
    icon?: string(description='项目图标', name='icon'),
  }(description='项目信息', name='project'),
}

model UpdateOapiTdpProjectBasicRequest = {
  headers?: map[string]string,
  params:UpdateOapiTdpProjectBasicParams,
}

model UpdateOapiTdpProjectBasicResponseBody = {
  errcode?: int64(description='错误码', name='errcode'),
  errmsg?: string(description='错误描述', name='errmsg'),
}

model UpdateOapiTdpProjectBasicResponse = {
  headers: map[string]string,
  body: UpdateOapiTdpProjectBasicResponseBody,
}

/**
 * Description: 更新项目信息
 */
async function updateOapiTdpProjectBasic(request: UpdateOapiTdpProjectBasicRequest): UpdateOapiTdpProjectBasicResponse {
  var runtime = new Util.RuntimeOptions{};
  return updateOapiTdpProjectBasicEx(request, runtime);
}

/**
 * Description: 更新项目信息
 */
async function updateOapiTdpProjectBasicEx(request: UpdateOapiTdpProjectBasicRequest, runtime: Util.RuntimeOptions): UpdateOapiTdpProjectBasicResponse {
  Util.validateModel(request);
  var appParams = Util.stringifyMapValue(Util.toMap(request.params));
  return doRequestOApi('POST', '/topapi/tdp/project/basic/update', request.headers, appParams, runtime);
}

model CreateOapiTdpProjectBasicParams = {
  microappAgentId?: int64(description='微应用agentId', name='microapp_agent_id'),
  operatorUserid: string(description='操作者id', name='operator_userid'),
  project: {
    sourceId?: string(description='此字段用于数据迁移的场景，表示项目在源系统中的唯一ID，ISV接入时必填，用于跳转至各自的项目详情页', name='source_id'),
    isRecycled?: boolean(description='是否放入回收站', name='is_recycled'),
    identifier?: string(description='项目类型identifier', name='identifier'),
    gmtModified?: string(description='修改时间', pattern='\\\\d{4}[-]\\\\d{1,2}[-]\\\\d{1,2}[T]\\\\d{2}:\\\\d{2}:\\\\d{2}[Z]', name='gmt_modified'),
    visibility?: string(description='项目可见范围', name='visibility'),
    isArchived?: boolean(description='是否归档', name='is_archived'),
    icon?: string(description='项目图标', name='icon'),
    creatorUserid: string(description='创建者id, 传staffId（工号）', name='creator_userid'),
    modifierUserid?: string(description='更新者id, 传staffId（工号）', name='modifier_userid'),
    description?: string(description='项目描述', name='description'),
    source?: string(description='来源', name='source'),
    gmtCreate?: string(description='创建时间', pattern='\\\\d{4}[-]\\\\d{1,2}[-]\\\\d{1,2}[T]\\\\d{2}:\\\\d{2}:\\\\d{2}[Z]', name='gmt_create'),
    parentId?: string(description='父项目ID', name='parent_id'),
    name: string(description='项目名称', name='name'),
  }(description='项目信息', name='project'),
}

model CreateOapiTdpProjectBasicRequest = {
  headers?: map[string]string,
  params:CreateOapiTdpProjectBasicParams,
}

model CreateOapiTdpProjectBasicResponseBody = {
  result?: {
    gmtCreate?: string(description='创建时间', pattern='\\\\d{4}[-]\\\\d{1,2}[-]\\\\d{1,2}[T]\\\\d{2}:\\\\d{2}:\\\\d{2}[Z]', name='gmt_create'),
    modifierUserid?: string(description='更新者id, 传staffId（工号）', name='modifier_userid'),
    creatorUserid?: string(description='创建者id, 传staffId（工号）', name='creator_userid'),
    bizTag?: string(description='业务标识', name='biz_tag'),
    description?: string(description='项目描述', name='description'),
    isRecycled?: boolean(description='是否放入回收站', name='is_recycled'),
    isArchived?: boolean(description='是否归档', name='is_archived'),
    sourceId?: string(description='此字段用于数据迁移的场景，表示任务在源系统中的唯一ID', name='source_id'),
    parentId?: string(description='父项目id', name='parent_id'),
    gmtModified?: string(description='修改时间', pattern='\\\\d{4}[-]\\\\d{1,2}[-]\\\\d{1,2}[T]\\\\d{2}:\\\\d{2}:\\\\d{2}[Z]', name='gmt_modified'),
    belongCorpId?: string(description='归属企业id', name='belong_corp_id'),
    projectId?: string(description='项目ID', name='project_id'),
    virtualDingOrgid?: string(description='关联的虚拟组织ID', name='virtual_ding_orgid'),
    visibility?: string(description='项目可见性', name='visibility'),
    icon?: string(description='项目图标', name='icon'),
    source?: string(description='来源', name='source'),
    name?: string(description='项目名称', name='name'),
  }(description='响应结果', name='result'),
  errcode?: int64(description='错误码', name='errcode'),
  errmsg?: string(description='错误描述', name='errmsg'),
}

model CreateOapiTdpProjectBasicResponse = {
  headers: map[string]string,
  body: CreateOapiTdpProjectBasicResponseBody,
}

/**
 * Description: 新增项目信息
 */
async function createOapiTdpProjectBasic(request: CreateOapiTdpProjectBasicRequest): CreateOapiTdpProjectBasicResponse {
  var runtime = new Util.RuntimeOptions{};
  return createOapiTdpProjectBasicEx(request, runtime);
}

/**
 * Description: 新增项目信息
 */
async function createOapiTdpProjectBasicEx(request: CreateOapiTdpProjectBasicRequest, runtime: Util.RuntimeOptions): CreateOapiTdpProjectBasicResponse {
  Util.validateModel(request);
  var appParams = Util.stringifyMapValue(Util.toMap(request.params));
  return doRequestOApi('POST', '/topapi/tdp/project/basic/create', request.headers, appParams, runtime);
}

model DeletebyprojectOapiTdpTaskBasicParams = {
  microappAgentId?: int64(description='微应用agentId', name='microapp_agent_id'),
  operatorUserid: string(description='操作者id', name='operator_userid'),
  projectId: string(description='任务所属项目ID', name='project_id'),
}

model DeletebyprojectOapiTdpTaskBasicRequest = {
  headers?: map[string]string,
  params:DeletebyprojectOapiTdpTaskBasicParams,
}

model DeletebyprojectOapiTdpTaskBasicResponseBody = {
  errcode?: int64(description='错误码', name='errcode'),
  errmsg?: string(description='错误描述', name='errmsg'),
}

model DeletebyprojectOapiTdpTaskBasicResponse = {
  headers: map[string]string,
  body: DeletebyprojectOapiTdpTaskBasicResponseBody,
}

/**
 * Description: 按照项目批量删除任务信息
 */
async function deletebyprojectOapiTdpTaskBasic(request: DeletebyprojectOapiTdpTaskBasicRequest): DeletebyprojectOapiTdpTaskBasicResponse {
  var runtime = new Util.RuntimeOptions{};
  return deletebyprojectOapiTdpTaskBasicEx(request, runtime);
}

/**
 * Description: 按照项目批量删除任务信息
 */
async function deletebyprojectOapiTdpTaskBasicEx(request: DeletebyprojectOapiTdpTaskBasicRequest, runtime: Util.RuntimeOptions): DeletebyprojectOapiTdpTaskBasicResponse {
  Util.validateModel(request);
  var appParams = Util.stringifyMapValue(Util.toMap(request.params));
  return doRequestOApi('POST', '/topapi/tdp/task/basic/deletebyproject', request.headers, appParams, runtime);
}

model AddOapiTdpProjectMemberParams = {
  microappAgentId?: int64(description='微应用agentId', name='microapp_agent_id'),
  operatorUserid: string(description='操作者id', name='operator_userid'),
  projectId: string(description='项目ID', name='project_id'),
  userid: string(description='用户ID', name='userid'),
}

model AddOapiTdpProjectMemberRequest = {
  headers?: map[string]string,
  params:AddOapiTdpProjectMemberParams,
}

model AddOapiTdpProjectMemberResponseBody = {
  result?: {
    gmtCreate?: string(description='创建时间', pattern='\\\\d{4}[-]\\\\d{1,2}[-]\\\\d{1,2}[T]\\\\d{2}:\\\\d{2}:\\\\d{2}[Z]', name='gmt_create'),
    modifierUserid?: string(description='更新者id, 传staffId（工号）', name='modifier_userid'),
    creatorUserid?: string(description='创建者id, 传staffId（工号）', name='creator_userid'),
    bizTag?: string(description='业务标识', name='biz_tag'),
    gmtModified?: string(description='修改时间', pattern='\\\\d{4}[-]\\\\d{1,2}[-]\\\\d{1,2}[T]\\\\d{2}:\\\\d{2}:\\\\d{2}[Z]', name='gmt_modified'),
    belongCorpId?: string(description='归属企业id', name='belong_corp_id'),
    targetId?: string(description='成员所属空间ID', name='target_id'),
    targetType?: string(description='成员所属空间类型', name='target_type'),
    userid?: string(description='用户ID', name='userid'),
    memberId?: string(description='项目成员ID', name='member_id'),
  }(description='响应结果', name='result'),
  errcode?: int64(description='错误码', name='errcode'),
  errmsg?: string(description='错误描述', name='errmsg'),
}

model AddOapiTdpProjectMemberResponse = {
  headers: map[string]string,
  body: AddOapiTdpProjectMemberResponseBody,
}

/**
 * Description: 新增项目成员
 */
async function addOapiTdpProjectMember(request: AddOapiTdpProjectMemberRequest): AddOapiTdpProjectMemberResponse {
  var runtime = new Util.RuntimeOptions{};
  return addOapiTdpProjectMemberEx(request, runtime);
}

/**
 * Description: 新增项目成员
 */
async function addOapiTdpProjectMemberEx(request: AddOapiTdpProjectMemberRequest, runtime: Util.RuntimeOptions): AddOapiTdpProjectMemberResponse {
  Util.validateModel(request);
  var appParams = Util.stringifyMapValue(Util.toMap(request.params));
  return doRequestOApi('POST', '/topapi/tdp/project/member/add', request.headers, appParams, runtime);
}

model BatchaddOapiTdpProjectMemberParams = {
  microappAgentId?: int64(description='微应用agentId', name='microapp_agent_id'),
  operatorUserid: string(description='操作者id', name='operator_userid'),
  projectId: string(description='项目ID', name='project_id'),
  userids?: [ string ](description='用户ID列表', maxItems=1000, name='userids'),
}

model BatchaddOapiTdpProjectMemberRequest = {
  headers?: map[string]string,
  params:BatchaddOapiTdpProjectMemberParams,
}

model BatchaddOapiTdpProjectMemberResponseBody = {
  errcode?: int64(description='错误码', name='errcode'),
  errmsg?: string(description='错误描述', name='errmsg'),
}

model BatchaddOapiTdpProjectMemberResponse = {
  headers: map[string]string,
  body: BatchaddOapiTdpProjectMemberResponseBody,
}

/**
 * Description: 批量新增项目成员
 */
async function batchaddOapiTdpProjectMember(request: BatchaddOapiTdpProjectMemberRequest): BatchaddOapiTdpProjectMemberResponse {
  var runtime = new Util.RuntimeOptions{};
  return batchaddOapiTdpProjectMemberEx(request, runtime);
}

/**
 * Description: 批量新增项目成员
 */
async function batchaddOapiTdpProjectMemberEx(request: BatchaddOapiTdpProjectMemberRequest, runtime: Util.RuntimeOptions): BatchaddOapiTdpProjectMemberResponse {
  Util.validateModel(request);
  var appParams = Util.stringifyMapValue(Util.toMap(request.params));
  return doRequestOApi('POST', '/topapi/tdp/project/member/batchadd', request.headers, appParams, runtime);
}

model BatchremoveOapiTdpProjectMemberParams = {
  microappAgentId?: int64(description='微应用agentId', name='microapp_agent_id'),
  operatorUserid: string(description='操作者id', name='operator_userid'),
  projectId: string(description='项目ID', name='project_id'),
  userids?: [ string ](description='用户ID列表', maxItems=1000, name='userids'),
}

model BatchremoveOapiTdpProjectMemberRequest = {
  headers?: map[string]string,
  params:BatchremoveOapiTdpProjectMemberParams,
}

model BatchremoveOapiTdpProjectMemberResponseBody = {
  errcode?: int64(description='错误码', name='errcode'),
  errmsg?: string(description='错误描述', name='errmsg'),
}

model BatchremoveOapiTdpProjectMemberResponse = {
  headers: map[string]string,
  body: BatchremoveOapiTdpProjectMemberResponseBody,
}

/**
 * Description: 批量删除项目成员
 */
async function batchremoveOapiTdpProjectMember(request: BatchremoveOapiTdpProjectMemberRequest): BatchremoveOapiTdpProjectMemberResponse {
  var runtime = new Util.RuntimeOptions{};
  return batchremoveOapiTdpProjectMemberEx(request, runtime);
}

/**
 * Description: 批量删除项目成员
 */
async function batchremoveOapiTdpProjectMemberEx(request: BatchremoveOapiTdpProjectMemberRequest, runtime: Util.RuntimeOptions): BatchremoveOapiTdpProjectMemberResponse {
  Util.validateModel(request);
  var appParams = Util.stringifyMapValue(Util.toMap(request.params));
  return doRequestOApi('POST', '/topapi/tdp/project/member/batchremove', request.headers, appParams, runtime);
}

model GetbyprojectOapiTdpProjectMemberParams = {
  microappAgentId?: int64(description='微应用agentId', name='microapp_agent_id'),
  projectId: string(description='项目ID', name='project_id'),
  pageRequest?: {
    pageSize?: int64(description='每页数量', name='page_size'),
    orderBy?: string(description='排序字段', name='order_by'),
    orderDirection?: string(description='排序方向', name='order_direction'),
    page?: int64(description='起始页码', name='page'),
  }(description='系统自动生成', name='page_request'),
}

model GetbyprojectOapiTdpProjectMemberRequest = {
  headers?: map[string]string,
  params:GetbyprojectOapiTdpProjectMemberParams,
}

model GetbyprojectOapiTdpProjectMemberResponseBody = {
  errcode?: int64(description='错误码', name='errcode'),
  errmsg?: string(description='错误描述', name='errmsg'),
  result?: {
    data?: [
      {
        targetId?: string(description='成员所属空间ID', name='target_id'),
        targetType?: string(description='成员所属空间类型', name='target_type'),
        userid?: string(description='用户ID', name='userid'),
        memberId?: string(description='项目成员ID', name='member_id'),
        gmtModified?: string(description='修改时间', pattern='\\\\d{4}[-]\\\\d{1,2}[-]\\\\d{1,2}[T]\\\\d{2}:\\\\d{2}:\\\\d{2}[Z]', name='gmt_modified'),
        gmtCreate?: string(description='创建时间', pattern='\\\\d{4}[-]\\\\d{1,2}[-]\\\\d{1,2}[T]\\\\d{2}:\\\\d{2}:\\\\d{2}[Z]', name='gmt_create'),
        modifierUserid?: string(description='更新者id, 传staffId（工号）', name='modifier_userid'),
        creatorUserid?: string(description='创建者id, 传staffId（工号）', name='creator_userid'),
        belongCorpId?: string(description='归属企业id', name='belong_corp_id'),
        bizTag?: string(description='业务标识', name='biz_tag'),
      }
    ](description='成员列表', name='data'),
    pageSize?: int64(description='每页数量', name='page_size'),
    page?: int64(description='起始页码', name='page'),
    totalCount?: int64(description='总数', name='total_count'),
  }(description='返回结果', name='result'),
}

model GetbyprojectOapiTdpProjectMemberResponse = {
  headers: map[string]string,
  body: GetbyprojectOapiTdpProjectMemberResponseBody,
}

/**
 * Description: 批量拉取项目成员
 */
async function getbyprojectOapiTdpProjectMember(request: GetbyprojectOapiTdpProjectMemberRequest): GetbyprojectOapiTdpProjectMemberResponse {
  var runtime = new Util.RuntimeOptions{};
  return getbyprojectOapiTdpProjectMemberEx(request, runtime);
}

/**
 * Description: 批量拉取项目成员
 */
async function getbyprojectOapiTdpProjectMemberEx(request: GetbyprojectOapiTdpProjectMemberRequest, runtime: Util.RuntimeOptions): GetbyprojectOapiTdpProjectMemberResponse {
  Util.validateModel(request);
  var appParams = Util.stringifyMapValue(Util.toMap(request.params));
  return doRequestOApi('POST', '/topapi/tdp/project/member/getbyproject', request.headers, appParams, runtime);
}

model CreateOapiTdpTaskBasicParams = {
  microappAgentId?: int64(description='微应用agentId', name='microapp_agent_id'),
  task: {
    sourceId: string(description='此字段用于数据迁移的场景，表示任务在源系统中的唯一ID，ISV接入时必填，用于跳转至各自的任务详情页', name='source_id'),
    isRecycled?: boolean(description='是否放入回收站', name='is_recycled'),
    gmtModified?: string(description='修改时间', pattern='\\\\d{4}[-]\\\\d{1,2}[-]\\\\d{1,2}[T]\\\\d{2}:\\\\d{2}:\\\\d{2}[Z]', name='gmt_modified'),
    executorUserid?: string(description='执行者id, 传staffId（工号）', name='executor_userid'),
    subject: string(description='任务标题', name='subject'),
    isArchived?: boolean(description='是否归档', name='is_archived'),
    creatorUserid: string(description='创建者id, 传staffId（工号）', name='creator_userid'),
    modifierUserid?: string(description='更新者id, 传staffId（工号）', name='modifier_userid'),
    description?: string(description='任务描述', name='description'),
    priority?: int64(description='优先级, 较低:10, 普通:20, 紧急:30, 非常紧急:40', name='priority'),
    gmtCreate?: string(description='创建时间', pattern='\\\\d{4}[-]\\\\d{1,2}[-]\\\\d{1,2}[T]\\\\d{2}:\\\\d{2}:\\\\d{2}[Z]', name='gmt_create'),
    parentId?: string(description='父任务id', name='parent_id'),
    taskTypeId?: int64(description='任务类型id，任务类型，可以不传', name='task_type_id'),
    statusId?: int64(description='状态id，工作流状态, 可以为空', name='status_id'),
    statusStage?: int64(description='状态阶段: 开始阶段(0)，进行阶段(1)，完成阶段(2)', name='status_stage'),
    finishDate?: string(description='任务实际完成时间', pattern='\\\\d{4}[-]\\\\d{1,2}[-]\\\\d{1,2}[T]\\\\d{2}:\\\\d{2}:\\\\d{2}[Z]', name='finish_date'),
    startDate?: string(description='任务实际开始日期', pattern='\\\\d{4}[-]\\\\d{1,2}[-]\\\\d{1,2}[T]\\\\d{2}:\\\\d{2}:\\\\d{2}[Z]', name='start_date'),
    taskTypeCategory?: string(description='任务类型分类:// 任务 TASK("task"),     // 需求     REQ("req"),     // 缺陷     BUG("bug"),     // 风险     RISK("risk"),     // 工作项     WORKITEM("workitem")', name='task_type_category'),
    planStartDate?: string(description='任务计划开始时间', pattern='\\\\d{4}[-]\\\\d{1,2}[-]\\\\d{1,2}[T]\\\\d{2}:\\\\d{2}:\\\\d{2}[Z]', name='plan_start_date'),
    planFinishDate?: string(description='任务计划完成时间', pattern='\\\\d{4}[-]\\\\d{1,2}[-]\\\\d{1,2}[T]\\\\d{2}:\\\\d{2}:\\\\d{2}[Z]', name='plan_finish_date'),
    trackerUserids?: [ string ](description='任务参与者列表, 传staffId（工号）', maxItems=20, name='tracker_userids'),
    extension?: {
      commentCount?: int64(description='评论数', name='comment_count'),
      filePath?: string(description='附件地址', name='file_path'),
      other?: string(description='用户可扩展的字段', name='other'),
    }(description='任务的扩展字段', name='extension'),
    projectId?: string(description='任务所属项目ID', name='project_id'),
    source?: string(description='任务来源source', name='source'),
  }(description='请求入参', name='task'),
  operatorUserid: string(description='操作者id', name='operator_userid'),
}

model CreateOapiTdpTaskBasicRequest = {
  headers?: map[string]string,
  params:CreateOapiTdpTaskBasicParams,
}

model CreateOapiTdpTaskBasicResponseBody = {
  result?: {
    gmtCreate?: string(description='创建时间', pattern='\\\\d{4}[-]\\\\d{1,2}[-]\\\\d{1,2}[T]\\\\d{2}:\\\\d{2}:\\\\d{2}[Z]', name='gmt_create'),
    modifierUserid?: string(description='更新者id, 传staffId（工号）', name='modifier_userid'),
    creatorUserid?: string(description='创建者id, 传staffId（工号）', name='creator_userid'),
    bizTag?: string(description='业务标识', name='biz_tag'),
    priority?: int64(description='优先级, 较低:10, 普通:20, 紧急:30, 非常紧急:40', name='priority'),
    description?: string(description='任务描述', name='description'),
    finishDate?: string(description='完成时间', pattern='\\\\d{4}[-]\\\\d{1,2}[-]\\\\d{1,2}[T]\\\\d{2}:\\\\d{2}:\\\\d{2}[Z]', name='finish_date'),
    startDate?: string(description='开始时间', pattern='\\\\d{4}[-]\\\\d{1,2}[-]\\\\d{1,2}[T]\\\\d{2}:\\\\d{2}:\\\\d{2}[Z]', name='start_date'),
    isRecycled?: boolean(description='是否放入回收站', name='is_recycled'),
    isArchived?: boolean(description='是否归档', name='is_archived'),
    statusStage?: int64(description='状态阶段: 开始阶段(0)，进行阶段(1)，完成阶段(2)', name='status_stage'),
    sourceId?: string(description='此字段用于数据迁移的场景，表示任务在源系统中的唯一ID', name='source_id'),
    parentId?: string(description='父任务id', name='parent_id'),
    taskTypeId?: int64(description='任务类型id，任务类型，可以不传', name='task_type_id'),
    statusId?: int64(description='状态id，工作流状态, 可以为空', name='status_id'),
    executorUserid?: string(description='执行者id, 传staffId（工号）', name='executor_userid'),
    subject?: string(description='标题', name='subject'),
    gmtModified?: string(description='修改时间', pattern='\\\\d{4}[-]\\\\d{1,2}[-]\\\\d{1,2}[T]\\\\d{2}:\\\\d{2}:\\\\d{2}[Z]', name='gmt_modified'),
    belongCorpId?: string(description='归属企业id', name='belong_corp_id'),
    taskId?: string(description='任务id', name='task_id'),
    taskTypeCategory?: string(description='任务类型分类:// 任务 TASK("task"),     // 需求     REQ("req"),     // 缺陷     BUG("bug"),     // 风险     RISK("risk"),     // 工作项     WORKITEM("workitem")', name='task_type_category'),
    planStartDate?: string(description='任务计划开始时间', pattern='\\\\d{4}[-]\\\\d{1,2}[-]\\\\d{1,2}[T]\\\\d{2}:\\\\d{2}:\\\\d{2}[Z]', name='plan_start_date'),
    planFinishDate?: string(description='任务计划完成时间', pattern='\\\\d{4}[-]\\\\d{1,2}[-]\\\\d{1,2}[T]\\\\d{2}:\\\\d{2}:\\\\d{2}[Z]', name='plan_finish_date'),
    trackerUserids?: [ string ](description='任务参与者列表', name='tracker_userids'),
    extension?: {
      commentCount?: int64(description='评论数量', name='comment_count'),
      filePath?: string(description='附件地址', name='file_path'),
      other?: string(description='用户可扩展的字段', name='other'),
    }(description='任务的扩展字段', name='extension'),
    projectId?: string(description='任务所属项目ID', name='project_id'),
    source?: string(description='任务来源source', name='source'),
  }(description='响应结果', name='result'),
  errcode?: int64(description='错误码', name='errcode'),
  errmsg?: string(description='错误描述', name='errmsg'),
}

model CreateOapiTdpTaskBasicResponse = {
  headers: map[string]string,
  body: CreateOapiTdpTaskBasicResponseBody,
}

/**
 * Description: 新增基础任务信息
 */
async function createOapiTdpTaskBasic(request: CreateOapiTdpTaskBasicRequest): CreateOapiTdpTaskBasicResponse {
  var runtime = new Util.RuntimeOptions{};
  return createOapiTdpTaskBasicEx(request, runtime);
}

/**
 * Description: 新增基础任务信息
 */
async function createOapiTdpTaskBasicEx(request: CreateOapiTdpTaskBasicRequest, runtime: Util.RuntimeOptions): CreateOapiTdpTaskBasicResponse {
  Util.validateModel(request);
  var appParams = Util.stringifyMapValue(Util.toMap(request.params));
  return doRequestOApi('POST', '/topapi/tdp/task/basic/create', request.headers, appParams, runtime);
}

model GetOapiKacV2DatavVideoconfParams = {
  request: {
    dataId: string(description='日期标识', name='data_id'),
  }(description='请求对象类型', name='request'),
}

model GetOapiKacV2DatavVideoconfRequest = {
  headers?: map[string]string,
  params:GetOapiKacV2DatavVideoconfParams,
}

model GetOapiKacV2DatavVideoconfResponseBody = {
  errcode?: int64(description='错误码', name='errcode'),
  errmsg?: string(description='错误描述', name='errmsg'),
  result?: {
    joinVideoConfLen?: int64(description='视频会议企业的累积消耗时长（即参会者入会总时长，且算到发起企业上）(毫秒)', name='join_video_conf_len'),
    joinVideoConfSeccUsrCnt?: int64(description='视频会议成功参与人次', name='join_video_conf_secc_usr_cnt'),
    joinVideoConfSeccUsrNum?: int64(description='视频会议成功参与用户数', name='join_video_conf_secc_usr_num'),
    joinVideoConfUsrCnt?: int64(description='参与视频会议用户数', name='join_video_conf_usr_cnt'),
    startVideoConfCnt?: int64(description='视频会议发起次数', name='start_video_conf_cnt'),
    startVideoConfSeccCnt?: int64(description='成功发起视频会议数', name='start_video_conf_secc_cnt'),
    startVideoConfUsrNum?: int64(description='视频会议发起用户数', name='start_video_conf_usr_num'),
    videoConfAveUsrNum?: int64(description='视频会议平均每通参与人次', name='video_conf_ave_usr_num'),
    joinVideoConfLenMin?: string(description='视频会议企业的累积消耗时长（即参会者入会总时长，且算到发起企业上）(分钟)', name='join_video_conf_len_min'),
    startVideoConfLenMin?: string(description='成功发起视频会议时长（分钟）', name='start_video_conf_len_min'),
  }(description='返回结果对象', name='result'),
}

model GetOapiKacV2DatavVideoconfResponse = {
  headers: map[string]string,
  body: GetOapiKacV2DatavVideoconfResponseBody,
}

/**
 * Description: 大客户视频会议统计数据查询V2版（较V1新增“发起会议总时长”统计项）
 */
async function getOapiKacV2DatavVideoconf(request: GetOapiKacV2DatavVideoconfRequest): GetOapiKacV2DatavVideoconfResponse {
  var runtime = new Util.RuntimeOptions{};
  return getOapiKacV2DatavVideoconfEx(request, runtime);
}

/**
 * Description: 大客户视频会议统计数据查询V2版（较V1新增“发起会议总时长”统计项）
 */
async function getOapiKacV2DatavVideoconfEx(request: GetOapiKacV2DatavVideoconfRequest, runtime: Util.RuntimeOptions): GetOapiKacV2DatavVideoconfResponse {
  Util.validateModel(request);
  var appParams = Util.stringifyMapValue(Util.toMap(request.params));
  return doRequestOApi('POST', '/topapi/kac/v2/datav/videoconf/get', request.headers, appParams, runtime);
}

model SetOapiAlitripBtripCostCenterEntityParams = {
  rq?: {
    thirdpartId: string(description='第三方成本中心id', name='thirdpart_id'),
    entityList: [
      {
        entityId: string(description='员工/部门/角色id', name='entity_id'),
        entityType: string(description='人员类型:1员工，2部门，3角色', name='entity_type'),
      }
    ](description='人员信息列表', maxItems=200, name='entity_list'),
    corpid: string(description='企业id', name='corpid'),
  }(description='请求对象', name='rq'),
}

model SetOapiAlitripBtripCostCenterEntityRequest = {
  headers?: map[string]string,
  params?:SetOapiAlitripBtripCostCenterEntityParams,
}

model SetOapiAlitripBtripCostCenterEntityResponseBody = {
  success?: boolean(description='成本标识', name='success'),
  errcode?: int64(description='错误码', name='errcode'),
  errmsg?: string(description='错误信息', name='errmsg'),
  result?: {
    addNum?: int64(description='增加的人员信息条数', name='add_num'),
    removeNum?: int64(description='删除的人员信息条数', name='remove_num'),
    selectedUserNum?: int64(description='该成本中心下员工总数', name='selected_user_num'),
  }(description='结果对象', name='result'),
}

model SetOapiAlitripBtripCostCenterEntityResponse = {
  headers: map[string]string,
  body: SetOapiAlitripBtripCostCenterEntityResponseBody,
}

/**
 * Description: 设置成本中心人员信息
 */
async function setOapiAlitripBtripCostCenterEntity(request: SetOapiAlitripBtripCostCenterEntityRequest): SetOapiAlitripBtripCostCenterEntityResponse {
  var runtime = new Util.RuntimeOptions{};
  return setOapiAlitripBtripCostCenterEntityEx(request, runtime);
}

/**
 * Description: 设置成本中心人员信息
 */
async function setOapiAlitripBtripCostCenterEntityEx(request: SetOapiAlitripBtripCostCenterEntityRequest, runtime: Util.RuntimeOptions): SetOapiAlitripBtripCostCenterEntityResponse {
  Util.validateModel(request);
  var appParams = Util.stringifyMapValue(Util.toMap(request.params));
  return doRequestOApi('POST', '/topapi/alitrip/btrip/cost/center/entity/set', request.headers, appParams, runtime);
}

model RemovebyprojectOapiTdpProjectMemberParams = {
  microappAgentId?: int64(description='微应用agentId', name='microapp_agent_id'),
  operatorUserid: string(description='操作者id', name='operator_userid'),
  projectId: string(description='项目ID', name='project_id'),
}

model RemovebyprojectOapiTdpProjectMemberRequest = {
  headers?: map[string]string,
  params:RemovebyprojectOapiTdpProjectMemberParams,
}

model RemovebyprojectOapiTdpProjectMemberResponseBody = {
  errcode?: int64(description='错误码', name='errcode'),
  errmsg?: string(description='错误描述', name='errmsg'),
}

model RemovebyprojectOapiTdpProjectMemberResponse = {
  headers: map[string]string,
  body: RemovebyprojectOapiTdpProjectMemberResponseBody,
}

/**
 * Description: 根据项目批量删除项目成员
 */
async function removebyprojectOapiTdpProjectMember(request: RemovebyprojectOapiTdpProjectMemberRequest): RemovebyprojectOapiTdpProjectMemberResponse {
  var runtime = new Util.RuntimeOptions{};
  return removebyprojectOapiTdpProjectMemberEx(request, runtime);
}

/**
 * Description: 根据项目批量删除项目成员
 */
async function removebyprojectOapiTdpProjectMemberEx(request: RemovebyprojectOapiTdpProjectMemberRequest, runtime: Util.RuntimeOptions): RemovebyprojectOapiTdpProjectMemberResponse {
  Util.validateModel(request);
  var appParams = Util.stringifyMapValue(Util.toMap(request.params));
  return doRequestOApi('POST', '/topapi/tdp/project/member/removebyproject', request.headers, appParams, runtime);
}

model DeleteOapiAlitripBtripCostCenterParams = {
  rq: {
    thirdpartId?: string(description='第三方成本中心id', name='thirdpart_id'),
    corpid?: string(description='企业id', name='corpid'),
  }(description='请求对象', name='rq'),
}

model DeleteOapiAlitripBtripCostCenterRequest = {
  headers?: map[string]string,
  params:DeleteOapiAlitripBtripCostCenterParams,
}

model DeleteOapiAlitripBtripCostCenterResponseBody = {
  errmsg?: string(description='错误信息', name='errmsg'),
  errcode?: int64(description='错误码', name='errcode'),
  success?: boolean(description='成功标识', name='success'),
}

model DeleteOapiAlitripBtripCostCenterResponse = {
  headers: map[string]string,
  body: DeleteOapiAlitripBtripCostCenterResponseBody,
}

/**
 * Description: 删除成本中心
 */
async function deleteOapiAlitripBtripCostCenter(request: DeleteOapiAlitripBtripCostCenterRequest): DeleteOapiAlitripBtripCostCenterResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteOapiAlitripBtripCostCenterEx(request, runtime);
}

/**
 * Description: 删除成本中心
 */
async function deleteOapiAlitripBtripCostCenterEx(request: DeleteOapiAlitripBtripCostCenterRequest, runtime: Util.RuntimeOptions): DeleteOapiAlitripBtripCostCenterResponse {
  Util.validateModel(request);
  var appParams = Util.stringifyMapValue(Util.toMap(request.params));
  return doRequestOApi('POST', '/topapi/alitrip/btrip/cost/center/delete', request.headers, appParams, runtime);
}

model GetOapiTdpTaskBasicParams = {
  microappAgentId?: int64(description='微应用agentId', name='microapp_agent_id'),
  taskId: string(description='任务ID', name='task_id'),
}

model GetOapiTdpTaskBasicRequest = {
  headers?: map[string]string,
  params:GetOapiTdpTaskBasicParams,
}

model GetOapiTdpTaskBasicResponseBody = {
  result?: {
    gmtCreate?: string(description='创建时间', pattern='\\\\d{4}[-]\\\\d{1,2}[-]\\\\d{1,2}[T]\\\\d{2}:\\\\d{2}:\\\\d{2}[Z]', name='gmt_create'),
    modifierUserid?: string(description='更新者id', name='modifier_userid'),
    creatorUserid?: string(description='创建者id', name='creator_userid'),
    bizTag?: string(description='业务标识', name='biz_tag'),
    priority?: int64(description='优先级', name='priority'),
    description?: string(description='任务描述', name='description'),
    finishDate?: string(description='完成时间', pattern='\\\\d{4}[-]\\\\d{1,2}[-]\\\\d{1,2}[T]\\\\d{2}:\\\\d{2}:\\\\d{2}[Z]', name='finish_date'),
    startDate?: string(description='开始时间', pattern='\\\\d{4}[-]\\\\d{1,2}[-]\\\\d{1,2}[T]\\\\d{2}:\\\\d{2}:\\\\d{2}[Z]', name='start_date'),
    isRecycled?: boolean(description='是否放入回收站', name='is_recycled'),
    isArchived?: boolean(description='是否归档', name='is_archived'),
    statusStage?: int64(description='状态阶段: 开始阶段(0)，进行阶段(1)，完成阶段(2)', name='status_stage'),
    sourceId?: string(description='来源id', name='source_id'),
    parentId?: string(description='父任务id', name='parent_id'),
    taskTypeId?: int64(description='任务类型id', name='task_type_id'),
    statusId?: int64(description='工作流状态id', name='status_id'),
    executorUserid?: string(description='执行者id', name='executor_userid'),
    subject?: string(description='标题', name='subject'),
    gmtModified?: string(description='修改时间', pattern='\\\\d{4}[-]\\\\d{1,2}[-]\\\\d{1,2}[T]\\\\d{2}:\\\\d{2}:\\\\d{2}[Z]', name='gmt_modified'),
    belongCorpId?: string(description='归属企业id', name='belong_corp_id'),
    taskTypeCategory?: string(description='任务类型分类:// 任务 TASK("task"),     // 需求     REQ("req"),     // 缺陷     BUG("bug"),     // 风险     RISK("risk"),     // 工作项     WORKITEM("workitem")', name='task_type_category'),
    taskId?: string(description='任务id', name='task_id'),
    planStartDate?: string(description='计划开始时间', pattern='\\\\d{4}[-]\\\\d{1,2}[-]\\\\d{1,2}[T]\\\\d{2}:\\\\d{2}:\\\\d{2}[Z]', name='plan_start_date'),
    planFinishDate?: string(description='计划完成时间', pattern='\\\\d{4}[-]\\\\d{1,2}[-]\\\\d{1,2}[T]\\\\d{2}:\\\\d{2}:\\\\d{2}[Z]', name='plan_finish_date'),
    trackerUserids?: [ string ](description='任务参与者列表', name='tracker_userids'),
    extension?: {
      commentCount?: string(description='评论数', name='comment_count'),
      filePath?: string(description='附件地址', name='file_path'),
      other?: string(description='用户可扩展的字段', name='other'),
    }(description='任务的扩展字段', name='extension'),
    projectId?: string(description='任务所属项目ID', name='project_id'),
  }(description='响应结果', name='result'),
  errcode?: int64(description='错误码', name='errcode'),
  errmsg?: string(description='错误描述', name='errmsg'),
}

model GetOapiTdpTaskBasicResponse = {
  headers: map[string]string,
  body: GetOapiTdpTaskBasicResponseBody,
}

/**
 * Description: 根据id查询任务详情
 */
async function getOapiTdpTaskBasic(request: GetOapiTdpTaskBasicRequest): GetOapiTdpTaskBasicResponse {
  var runtime = new Util.RuntimeOptions{};
  return getOapiTdpTaskBasicEx(request, runtime);
}

/**
 * Description: 根据id查询任务详情
 */
async function getOapiTdpTaskBasicEx(request: GetOapiTdpTaskBasicRequest, runtime: Util.RuntimeOptions): GetOapiTdpTaskBasicResponse {
  Util.validateModel(request);
  var appParams = Util.stringifyMapValue(Util.toMap(request.params));
  return doRequestOApi('POST', '/topapi/tdp/task/basic/get', request.headers, appParams, runtime);
}

model ModifyOapiAlitripBtripCostCenterParams = {
  rq: {
    alipayNo?: string(description='绑定支付宝账号', name='alipay_no'),
    title: string(description='成本中心名称', name='title'),
    scope: int64(description='适用范围: 1全员，2部分员工', name='scope'),
    thirdpartId: string(description='第三方成本中心id', name='thirdpart_id'),
    number?: string(description='成本中心编号', name='number'),
    corpid: string(description='企业id', name='corpid'),
  }(description='请求对象', name='rq'),
}

model ModifyOapiAlitripBtripCostCenterRequest = {
  headers?: map[string]string,
  params:ModifyOapiAlitripBtripCostCenterParams,
}

model ModifyOapiAlitripBtripCostCenterResponseBody = {
  success?: boolean(description='成功标识', name='success'),
  errcode?: int64(description='错误码', name='errcode'),
  errmsg?: string(description='错误信息', name='errmsg'),
}

model ModifyOapiAlitripBtripCostCenterResponse = {
  headers: map[string]string,
  body: ModifyOapiAlitripBtripCostCenterResponseBody,
}

/**
 * Description: 修改成本中心基本信息
 */
async function modifyOapiAlitripBtripCostCenter(request: ModifyOapiAlitripBtripCostCenterRequest): ModifyOapiAlitripBtripCostCenterResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifyOapiAlitripBtripCostCenterEx(request, runtime);
}

/**
 * Description: 修改成本中心基本信息
 */
async function modifyOapiAlitripBtripCostCenterEx(request: ModifyOapiAlitripBtripCostCenterRequest, runtime: Util.RuntimeOptions): ModifyOapiAlitripBtripCostCenterResponse {
  Util.validateModel(request);
  var appParams = Util.stringifyMapValue(Util.toMap(request.params));
  return doRequestOApi('POST', '/topapi/alitrip/btrip/cost/center/modify', request.headers, appParams, runtime);
}

model BaseinfoCorpSearchCorpcontactParams = {
  query: string(description='搜索词,长度大于2开始搜', name='query'),
  offset: int64(description='开始位置,从0开始', name='offset'),
  size: int64(description='拉取个数上限100', name='size'),
}

model BaseinfoCorpSearchCorpcontactRequest = {
  headers?: map[string]string,
  params:BaseinfoCorpSearchCorpcontactParams,
}

model BaseinfoCorpSearchCorpcontactResponseBody = {
  result?: {
    pageResult?: {
      hasMore?: boolean(description='是否还有更多数据', name='has_more'),
      offset?: int64(description='下次翻页的入参', name='offset'),
      total?: int64(description='能获取的总条数(offset+size不能超过这个值)', name='total'),
      valueList?: [
        {
          name?: string(description='姓名', name='name'),
          title?: string(description='职位', name='title'),
          aliTmpDept?: string(description='aliTmpDept', name='ali_tmp_dept'),
          flowerName?: string(description='flowerName', name='flower_name'),
          jobNumber?: string(description='jobNumber', name='job_number'),
          userid?: string(description='userid', name='userid'),
          workStation?: string(description='workStation', name='work_station'),
        }
      ](description='value', name='value_list'),
    }(description='pageResult', name='page_result'),
    dingOpenErrcode?: int64(description='dingOpenErrcode', name='ding_open_errcode'),
    errorMsg?: string(description='errorMsg', name='error_msg'),
    success?: boolean(description='success', name='success'),
  }(description='result', name='result'),
}

model BaseinfoCorpSearchCorpcontactResponse = {
  headers: map[string]string,
  body: BaseinfoCorpSearchCorpcontactResponseBody,
}

/**
 * Description: 根据姓名和工号搜索企业员工
 */
async function baseinfoCorpSearchCorpcontact(request: BaseinfoCorpSearchCorpcontactRequest): BaseinfoCorpSearchCorpcontactResponse {
  var runtime = new Util.RuntimeOptions{};
  return baseinfoCorpSearchCorpcontactEx(request, runtime);
}

/**
 * Description: 根据姓名和工号搜索企业员工
 */
async function baseinfoCorpSearchCorpcontactEx(request: BaseinfoCorpSearchCorpcontactRequest, runtime: Util.RuntimeOptions): BaseinfoCorpSearchCorpcontactResponse {
  Util.validateModel(request);
  var appParams = Util.stringifyMapValue(Util.toMap(request.params));
  return doRequest('dingtalk.corp.search.corpcontact.baseinfo', 'POST', '/router/rest', request.headers, appParams, runtime);
}

model NewOapiAlitripBtripCostCenterParams = {
  rq: {
    alipayNo?: string(description='绑定支付宝账号', name='alipay_no'),
    title: string(description='成本中心名称', name='title'),
    scope: int64(description='适用范围:1全员，2部分人员', name='scope'),
    thirdpartId: string(description='第三方成本中心id', name='thirdpart_id'),
    number?: string(description='第三方成本中心编号', name='number'),
    corpid: string(description='企业id', name='corpid'),
  }(description='请求对象', name='rq'),
}

model NewOapiAlitripBtripCostCenterRequest = {
  headers?: map[string]string,
  params:NewOapiAlitripBtripCostCenterParams,
}

model NewOapiAlitripBtripCostCenterResponseBody = {
  result?: {
    id?: int64(description='商旅横版中心id', name='id'),
  }(description='成本中心对象', name='result'),
  success?: boolean(description='成功标识', name='success'),
  errmsg?: string(description='错误信息', name='errmsg'),
  errcode?: int64(description='错误码', name='errcode'),
}

model NewOapiAlitripBtripCostCenterResponse = {
  headers: map[string]string,
  body: NewOapiAlitripBtripCostCenterResponseBody,
}

/**
 * Description: 新建成本中心
 */
async function newOapiAlitripBtripCostCenter(request: NewOapiAlitripBtripCostCenterRequest): NewOapiAlitripBtripCostCenterResponse {
  var runtime = new Util.RuntimeOptions{};
  return newOapiAlitripBtripCostCenterEx(request, runtime);
}

/**
 * Description: 新建成本中心
 */
async function newOapiAlitripBtripCostCenterEx(request: NewOapiAlitripBtripCostCenterRequest, runtime: Util.RuntimeOptions): NewOapiAlitripBtripCostCenterResponse {
  Util.validateModel(request);
  var appParams = Util.stringifyMapValue(Util.toMap(request.params));
  return doRequestOApi('POST', '/topapi/alitrip/btrip/cost/center/new', request.headers, appParams, runtime);
}

model ConfirmOapiCallbackFailrecordParams = {
  idList: [ int64 ](description='失败记录id列表', maxItems=100, name='id_list'),
}

model ConfirmOapiCallbackFailrecordRequest = {
  headers?: map[string]string,
  params:ConfirmOapiCallbackFailrecordParams,
}

model ConfirmOapiCallbackFailrecordResponseBody = {
  errmsg?: string(description='错误描述', name='errmsg'),
  errcode?: int64(description='错误码', name='errcode'),
  confirmList?: [ int64 ](description='确认成功的id列表', name='confirm_list'),
}

model ConfirmOapiCallbackFailrecordResponse = {
  headers: map[string]string,
  body: ConfirmOapiCallbackFailrecordResponseBody,
}

/**
 * Description: 查询开放平台回调失败记录，提供此接口用于确认消费
 */
async function confirmOapiCallbackFailrecord(request: ConfirmOapiCallbackFailrecordRequest): ConfirmOapiCallbackFailrecordResponse {
  var runtime = new Util.RuntimeOptions{};
  return confirmOapiCallbackFailrecordEx(request, runtime);
}

/**
 * Description: 查询开放平台回调失败记录，提供此接口用于确认消费
 */
async function confirmOapiCallbackFailrecordEx(request: ConfirmOapiCallbackFailrecordRequest, runtime: Util.RuntimeOptions): ConfirmOapiCallbackFailrecordResponse {
  Util.validateModel(request);
  var appParams = Util.stringifyMapValue(Util.toMap(request.params));
  return doRequestOApi('POST', '/topapi/callback/failrecord/confirm', request.headers, appParams, runtime);
}

model UpdateOapiAlitripBtripApprovalParams = {
  rq: {
    thirdpartApplyId: string(description='外部申请单id', name='thirdpart_apply_id'),
    operateTime: string(description='操作时间', pattern='\\\\d{4}[-]\\\\d{1,2}[-]\\\\d{1,2}[T]\\\\d{2}:\\\\d{2}:\\\\d{2}[Z]', name='operate_time'),
    status: int64(description='1已同意 2已拒绝 3已转交 4已取消', name='status'),
    userid: string(description='审批人id', name='userid'),
    userName?: string(description='审批人名字', name='user_name'),
    note?: string(description='备注', name='note'),
    corpid: string(description='企业id', name='corpid'),
  }(description='请求对象', name='rq'),
}

model UpdateOapiAlitripBtripApprovalRequest = {
  headers?: map[string]string,
  params:UpdateOapiAlitripBtripApprovalParams,
}

model UpdateOapiAlitripBtripApprovalResponseBody = {
  errmsg?: string(description='错误信息', name='errmsg'),
  errcode?: int64(description='错误码', name='errcode'),
  success?: boolean(description='成功标识', name='success'),
}

model UpdateOapiAlitripBtripApprovalResponse = {
  headers: map[string]string,
  body: UpdateOapiAlitripBtripApprovalResponseBody,
}

/**
 * Description: 更新审批单
 */
async function updateOapiAlitripBtripApproval(request: UpdateOapiAlitripBtripApprovalRequest): UpdateOapiAlitripBtripApprovalResponse {
  var runtime = new Util.RuntimeOptions{};
  return updateOapiAlitripBtripApprovalEx(request, runtime);
}

/**
 * Description: 更新审批单
 */
async function updateOapiAlitripBtripApprovalEx(request: UpdateOapiAlitripBtripApprovalRequest, runtime: Util.RuntimeOptions): UpdateOapiAlitripBtripApprovalResponse {
  Util.validateModel(request);
  var appParams = Util.stringifyMapValue(Util.toMap(request.params));
  return doRequestOApi('POST', '/topapi/alitrip/btrip/approval/update', request.headers, appParams, runtime);
}

model ListOapiCallbackFailrecordParams = {
  req: {
    tags: [ string ](description='回调事件类型', maxItems=20, name='tags'),
    cursor?: int64(description='分页查询，上次查询结果中的最后一个id', name='cursor'),
    status?: int64(description='确认状态，0-已确认 1-未确认，不填表示不区分', name='status'),
    pageSize?: int64(description='分页大小，最大支持100', name='page_size'),
    beginTime?: int64(description='开始时间(单位：秒)。空表示不限，左闭右开。PS：当前只保留了7天的记录', name='begin_time'),
    endTime?: int64(description='结束时间(单位：秒)。空表示不限，左闭右开', name='end_time'),
    confirm?: boolean(description='此次查询成功后，是否立即将状态改为“已确认”。传空取默认值false', name='confirm'),
  }(description='请求参数', name='req'),
}

model ListOapiCallbackFailrecordRequest = {
  headers?: map[string]string,
  params:ListOapiCallbackFailrecordParams,
}

model ListOapiCallbackFailrecordResponseBody = {
  failedList?: [
    {
      callBackData?: string(description='回调数据。不同事件类型不同，通常为JSON String', name='call_back_data'),
      callBackTag?: string(description='事件类型', name='call_back_tag'),
      eventTime?: int64(description='失败时间。单位：毫秒', name='event_time'),
      corpid?: string(description='企业id', name='corpid'),
      id?: int64(description='回调失败记录id', name='id'),
    }
  ](description='回调失败数据列表', name='failed_list'),
  errmsg?: string(description='错误描述', name='errmsg'),
  errcode?: int64(description='错误码', name='errcode'),
  hasMore?: boolean(description='是否更多', name='has_more'),
}

model ListOapiCallbackFailrecordResponse = {
  headers: map[string]string,
  body: ListOapiCallbackFailrecordResponseBody,
}

/**
 * Description: 提供给isv用于查询http回调失败记录，做补偿
 */
async function listOapiCallbackFailrecord(request: ListOapiCallbackFailrecordRequest): ListOapiCallbackFailrecordResponse {
  var runtime = new Util.RuntimeOptions{};
  return listOapiCallbackFailrecordEx(request, runtime);
}

/**
 * Description: 提供给isv用于查询http回调失败记录，做补偿
 */
async function listOapiCallbackFailrecordEx(request: ListOapiCallbackFailrecordRequest, runtime: Util.RuntimeOptions): ListOapiCallbackFailrecordResponse {
  Util.validateModel(request);
  var appParams = Util.stringifyMapValue(Util.toMap(request.params));
  return doRequestOApi('POST', '/topapi/callback/failrecord/list', request.headers, appParams, runtime);
}

model QueryOapiAlitripBtripCostCenterParams = {
  rq: {
    title?: string(description='成本中心名称', name='title'),
    thirdpartId?: string(description='第三方成本中心id，不填写的时候user_id必填', name='thirdpart_id'),
    userid?: string(description='用户id，不填的时候thirdpart_id必填', name='userid'),
    needOrgEntity?: boolean(description='是否需要展示成员信息，当成本中心为部分人员适用的时候有返回', name='need_org_entity'),
    corpid: string(description='企业id', name='corpid'),
  }(description='请求对象', name='rq'),
}

model QueryOapiAlitripBtripCostCenterRequest = {
  headers?: map[string]string,
  params:QueryOapiAlitripBtripCostCenterParams,
}

model QueryOapiAlitripBtripCostCenterResponseBody = {
  success?: boolean(description='成功标识', name='success'),
  errcode?: int64(description='错误码', name='errcode'),
  errmsg?: string(description='错误信息', name='errmsg'),
  costCenterList?: [
    {
      id?: int64(description='商旅成本中心id', name='id'),
      corpid?: string(description='企业id', name='corpid'),
      title?: string(description='成本中心名称', name='title'),
      number?: string(description='成本中心编号', name='number'),
      thirdpartId?: string(description='第三方成本中心id', name='thirdpart_id'),
      scope?: int64(description='适用范围: 1全员，2部分员工', name='scope'),
      alipayNo?: string(description='绑定支付宝账号', name='alipay_no'),
      entityList?: [
        {
          entityType?: string(description='人员类型：1用户，2部门，3角色', name='entity_type'),
          entityId?: string(description='用户/部门/角色id', name='entity_id'),
          corpid?: string(description='企业id', name='corpid'),
          name?: string(description='用户/部门/角色名称', name='name'),
          userNum?: int64(description='角色/部门下面员工人数', name='user_num'),
        }
      ](description='绑定人员信息', name='entity_list'),
    }
  ](description='成本中心列表', name='cost_center_list'),
}

model QueryOapiAlitripBtripCostCenterResponse = {
  headers: map[string]string,
  body: QueryOapiAlitripBtripCostCenterResponseBody,
}

/**
 * Description: 查询成本中心
 */
async function queryOapiAlitripBtripCostCenter(request: QueryOapiAlitripBtripCostCenterRequest): QueryOapiAlitripBtripCostCenterResponse {
  var runtime = new Util.RuntimeOptions{};
  return queryOapiAlitripBtripCostCenterEx(request, runtime);
}

/**
 * Description: 查询成本中心
 */
async function queryOapiAlitripBtripCostCenterEx(request: QueryOapiAlitripBtripCostCenterRequest, runtime: Util.RuntimeOptions): QueryOapiAlitripBtripCostCenterResponse {
  Util.validateModel(request);
  var appParams = Util.stringifyMapValue(Util.toMap(request.params));
  return doRequestOApi('POST', '/topapi/alitrip/btrip/cost/center/query', request.headers, appParams, runtime);
}

model ListmemberCorpConversationCorpconversionParams = {
  openConversationId: string(description='群组id', name='open_conversation_id'),
  offset: int64(description='群成员列表偏移量', name='offset'),
  count: int64(description='本次请求获取群成员的大小，最大为100', name='count'),
}

model ListmemberCorpConversationCorpconversionRequest = {
  headers?: map[string]string,
  params:ListmemberCorpConversationCorpconversionParams,
}

model ListmemberCorpConversationCorpconversionResponseBody = {
  result?: {
    result?: string(description='result', name='result'),
    dingOpenErrcode?: int64(description='dingOpenErrcode', name='ding_open_errcode'),
    errorMsg?: string(description='errorMsg', name='error_msg'),
    success?: boolean(description='success', name='success'),
  }(description='result', name='result'),
}

model ListmemberCorpConversationCorpconversionResponse = {
  headers: map[string]string,
  body: ListmemberCorpConversationCorpconversionResponseBody,
}

/**
 * Description: 获取企业群群成员接口
 */
async function listmemberCorpConversationCorpconversion(request: ListmemberCorpConversationCorpconversionRequest): ListmemberCorpConversationCorpconversionResponse {
  var runtime = new Util.RuntimeOptions{};
  return listmemberCorpConversationCorpconversionEx(request, runtime);
}

/**
 * Description: 获取企业群群成员接口
 */
async function listmemberCorpConversationCorpconversionEx(request: ListmemberCorpConversationCorpconversionRequest, runtime: Util.RuntimeOptions): ListmemberCorpConversationCorpconversionResponse {
  Util.validateModel(request);
  var appParams = Util.stringifyMapValue(Util.toMap(request.params));
  return doRequest('dingtalk.corp.conversation.corpconversion.listmember', 'POST', '/router/rest', request.headers, appParams, runtime);
}

model ModifyOapiImpaasGroupmemberParams = {
  request: {
    modifyType: string(description='该参数表示本次请求的操作类型，“1”表示添加成员，“2”表示删除成员。', name='modify_type'),
    memberList: [
      {
        id: string(description='待操作成员id，ID类型由type字段确定。当type为“staff”时，本字段填写staffid，当type为“channelUser”时，本字段填写channelUserId。', name='id'),
        type: string(description='代操作成员ID类型，目前支持“staff” “channelUser”两种类型', name='type'),
      }
    ](description='待操作成员列表', maxItems=20, name='member_list'),
    channel: string(description='接入方channel信息，该值由接入方接入IMPaaS平台时，向IMPaaS平台申请，例如“hema”“eleme”等。', name='channel'),
    chatid: string(description='群ID，由创建群接口返回。', name='chatid'),
  }(description='修改群成员列表入参', name='request'),
}

model ModifyOapiImpaasGroupmemberRequest = {
  headers?: map[string]string,
  params:ModifyOapiImpaasGroupmemberParams,
}

model ModifyOapiImpaasGroupmemberResponseBody = {
  errcode?: int64(description='dingOpenErrcode', name='errcode'),
  errmsg?: string(description='errorMsg', name='errmsg'),
}

model ModifyOapiImpaasGroupmemberResponse = {
  headers: map[string]string,
  body: ModifyOapiImpaasGroupmemberResponseBody,
}

/**
 * Description: 修改群成员列表，支持成员增删。
 */
async function modifyOapiImpaasGroupmember(request: ModifyOapiImpaasGroupmemberRequest): ModifyOapiImpaasGroupmemberResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifyOapiImpaasGroupmemberEx(request, runtime);
}

/**
 * Description: 修改群成员列表，支持成员增删。
 */
async function modifyOapiImpaasGroupmemberEx(request: ModifyOapiImpaasGroupmemberRequest, runtime: Util.RuntimeOptions): ModifyOapiImpaasGroupmemberResponse {
  Util.validateModel(request);
  var appParams = Util.stringifyMapValue(Util.toMap(request.params));
  return doRequestOApi('POST', '/topapi/impaas/groupmember/modify', request.headers, appParams, runtime);
}

model UpdateOapiSmartworkHrmEmployeeDismissionParams = {
  param: {
    userid: string(description='员工userId', name='userid'),
    dismissionMemo?: string(description='离职备注', name='dismission_memo'),
    lastWorkDate: string(description='最后工作日期', pattern='\\\\d{4}[-]\\\\d{1,2}[-]\\\\d{1,2}[T]\\\\d{2}:\\\\d{2}:\\\\d{2}[Z]', name='last_work_date'),
    partner?: boolean(description='是否计入离职不统计', name='partner'),
    terminationReasonVoluntary?: [ string ](description='被动原因', maxItems=999, name='terminationReasonVoluntary'),
    terminationReasonPassive?: [ string ](description='主动原因', maxItems=999, name='terminationReasonPassive'),
  }(description='离职信息', name='param'),
  agentid: string(description='微应用在企业的AgentId', name='agentid'),
}

model UpdateOapiSmartworkHrmEmployeeDismissionRequest = {
  headers?: map[string]string,
  params:UpdateOapiSmartworkHrmEmployeeDismissionParams,
}

model UpdateOapiSmartworkHrmEmployeeDismissionResponseBody = {
  result?: boolean(description='业务是否成功', name='result'),
  errcode?: int64(description='错误码', name='errcode'),
  errmsg?: string(description='错误信息', name='errmsg'),
  suc?: boolean(description='接口是否成功', name='suc'),
}

model UpdateOapiSmartworkHrmEmployeeDismissionResponse = {
  headers: map[string]string,
  body: UpdateOapiSmartworkHrmEmployeeDismissionResponseBody,
}

/**
 * Description: 更新员工离职信息
 */
async function updateOapiSmartworkHrmEmployeeDismission(request: UpdateOapiSmartworkHrmEmployeeDismissionRequest): UpdateOapiSmartworkHrmEmployeeDismissionResponse {
  var runtime = new Util.RuntimeOptions{};
  return updateOapiSmartworkHrmEmployeeDismissionEx(request, runtime);
}

/**
 * Description: 更新员工离职信息
 */
async function updateOapiSmartworkHrmEmployeeDismissionEx(request: UpdateOapiSmartworkHrmEmployeeDismissionRequest, runtime: Util.RuntimeOptions): UpdateOapiSmartworkHrmEmployeeDismissionResponse {
  Util.validateModel(request);
  var appParams = Util.stringifyMapValue(Util.toMap(request.params));
  return doRequestOApi('POST', '/topapi/smartwork/hrm/employee/dismission/update', request.headers, appParams, runtime);
}

model GetconversationCorpConversationCorpconversionParams = {
  openConversationId: string(description='群组ID', name='open_conversation_id'),
}

model GetconversationCorpConversationCorpconversionRequest = {
  headers?: map[string]string,
  params:GetconversationCorpConversationCorpconversionParams,
}

model GetconversationCorpConversationCorpconversionResponseBody = {
  result?: {
    result?: string(description='返回结果', name='result'),
    dingOpenErrcode?: int64(description='dingOpenErrcode', name='ding_open_errcode'),
    errorMsg?: string(description='errorMsg', name='error_msg'),
    success?: boolean(description='success', name='success'),
  }(description='result', name='result'),
}

model GetconversationCorpConversationCorpconversionResponse = {
  headers: map[string]string,
  body: GetconversationCorpConversationCorpconversionResponseBody,
}

/**
 * Description: 获取企业群基本信息接口
 */
async function getconversationCorpConversationCorpconversion(request: GetconversationCorpConversationCorpconversionRequest): GetconversationCorpConversationCorpconversionResponse {
  var runtime = new Util.RuntimeOptions{};
  return getconversationCorpConversationCorpconversionEx(request, runtime);
}

/**
 * Description: 获取企业群基本信息接口
 */
async function getconversationCorpConversationCorpconversionEx(request: GetconversationCorpConversationCorpconversionRequest, runtime: Util.RuntimeOptions): GetconversationCorpConversationCorpconversionResponse {
  Util.validateModel(request);
  var appParams = Util.stringifyMapValue(Util.toMap(request.params));
  return doRequest('dingtalk.corp.conversation.corpconversion.getconversation', 'POST', '/router/rest', request.headers, appParams, runtime);
}

model ModifyOapiImpaasGroupParams = {
  request: {
    groupOwner: {
      id: string(description='修改后的群主ID，ID类型由type字段决定', name='id'),
      type: string(description='ID类型，当type=staff时，id填写staffid，当type=channelUser时，id字段填写channelUserId', name='type'),
    }(description='修改后的群主，若为空或与当前群主相同，则不会对群主进行变更操作。', name='group_owner'),
    groupName: string(description='修改后的群名称', name='group_name'),
    chatid: string(description='群ID，由创建群接口返回', name='chatid'),
    showHistoryType?: int64(description='新人进群是否能查看最近100条记录。0:不能；1:可以查看最近100条记录；不填默认为0', name='show_history_type'),
  }(description='请求入参', name='request'),
}

model ModifyOapiImpaasGroupRequest = {
  headers?: map[string]string,
  params:ModifyOapiImpaasGroupParams,
}

model ModifyOapiImpaasGroupResponseBody = {
  errcode?: int64(description='dingOpenErrcode', name='errcode'),
  errmsg?: string(description='errorMsg', name='errmsg'),
}

model ModifyOapiImpaasGroupResponse = {
  headers: map[string]string,
  body: ModifyOapiImpaasGroupResponseBody,
}

/**
 * Description: 修改群信息：群名称、群主等；
 */
async function modifyOapiImpaasGroup(request: ModifyOapiImpaasGroupRequest): ModifyOapiImpaasGroupResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifyOapiImpaasGroupEx(request, runtime);
}

/**
 * Description: 修改群信息：群名称、群主等；
 */
async function modifyOapiImpaasGroupEx(request: ModifyOapiImpaasGroupRequest, runtime: Util.RuntimeOptions): ModifyOapiImpaasGroupResponse {
  Util.validateModel(request);
  var appParams = Util.stringifyMapValue(Util.toMap(request.params));
  return doRequestOApi('POST', '/topapi/impaas/group/modify', request.headers, appParams, runtime);
}

model GetOapiEduCertParams = {
  userid: string(description='学校人员id', name='userid'),
}

model GetOapiEduCertRequest = {
  headers?: map[string]string,
  params:GetOapiEduCertParams,
}

model GetOapiEduCertResponseBody = {
  success?: boolean(description='请求是否成功', name='success'),
  result?: {
    currentCertLevel?: int64(description='当前用户最高认证等级。0:没有认证；1:初级；2:中级；3:高级；', name='current_cert_level'),
    certDatas?: [
      {
        certStatus?: int64(description='当前等级认证状态。0:未获取；1:认证中；2:证书制作中；3:已获取', name='cert_status'),
        canCert?: boolean(description='当前认证考试是否可以参加。true：可以；false：敬请期待；', name='can_cert'),
        certLevel?: int64(description='认证等级。0:没有认证；1:初级；2:中级；3:高级；', name='cert_level'),
      }
    ](description='认证明细', name='cert_datas'),
  }(description='返回结果值', name='result'),
  errcode?: int64(description='错误码', name='errcode'),
  errmsg?: string(description='错误消息', name='errmsg'),
}

model GetOapiEduCertResponse = {
  headers: map[string]string,
  body: GetOapiEduCertResponseBody,
}

/**
 * Description: 查询当前用户的数字化考试情况，是否获取了证书
 */
async function getOapiEduCert(request: GetOapiEduCertRequest): GetOapiEduCertResponse {
  var runtime = new Util.RuntimeOptions{};
  return getOapiEduCertEx(request, runtime);
}

/**
 * Description: 查询当前用户的数字化考试情况，是否获取了证书
 */
async function getOapiEduCertEx(request: GetOapiEduCertRequest, runtime: Util.RuntimeOptions): GetOapiEduCertResponse {
  Util.validateModel(request);
  var appParams = Util.stringifyMapValue(Util.toMap(request.params));
  return doRequestOApi('POST', '/topapi/edu/cert/get', request.headers, appParams, runtime);
}

model UploadOapiPlanetomFeedsParams = {
  feedAppId: int64(description='内容对应的应用ID', name='feed_app_id'),
  userPhone: string(description='提交人的手机号码', name='user_phone'),
  feedInfoModels: [
    {
      contentModels: [
        {
          videoUrl: string(description='视频下载地址', name='video_url'),
          feedType: int64(description='内容类型 2 视频 3 音频', name='feed_type'),
          title: string(description='内容标题', name='title'),
        }
      ](description='内容列表，一个为单课，多个为系列课', maxItems=20, name='content_models'),
      baseModel: {
        coverUrl: string(description='课程封面URL', name='cover_url'),
        picIntroduction?: string(description='课程图片简介', name='pic_introduction'),
        title: string(description='课程标题', name='title'),
        custTag?: string(description='课程自定义标签', name='cust_tag'),
        introduction: string(description='课程简介', name='introduction'),
      }(description='课程基础', name='base_model'),
      payModel?: {
        csPhone?: string(description='客服手机号码', name='cs_phone'),
        preferential?: boolean(description='是否优惠', name='preferential'),
        needPay?: boolean(description='是否付费', name='need_pay'),
        price?: int64(description='价格 单位分', name='price'),
        disPrice?: int64(description='优惠后价格 单位分', name='dis_price'),
        disStartTime?: int64(description='优惠开始时间', name='dis_start_time'),
        limitCount?: int64(description='售卖份数', name='limit_count'),
        disEndTime?: int64(description='优惠结束时间', name='dis_end_time'),
      }(description='支付信息', name='pay_model'),
      workGroupName?: string(description='服务群名称', name='work_group_name'),
      resourceType?: int64(description='资源类型 0 免费公开课 4 平价引流课 5 专栏课 6 训练营课', name='resource_type'),
    }
  ](description='课程列表', maxItems=20, name='feed_info_models'),
}

model UploadOapiPlanetomFeedsRequest = {
  headers?: map[string]string,
  params:UploadOapiPlanetomFeedsParams,
}

model UploadOapiPlanetomFeedsResponseBody = {
  result?: string(description='任务ID，用于回查任务执行情况', name='result'),
  errcode?: int64(description='错误码', name='errcode'),
  errmsg?: string(description='错误文案', name='errmsg'),
}

model UploadOapiPlanetomFeedsResponse = {
  headers: map[string]string,
  body: UploadOapiPlanetomFeedsResponseBody,
}

/**
 * Description: 批量上传音、视频的内容到钉钉课堂
 */
async function uploadOapiPlanetomFeeds(request: UploadOapiPlanetomFeedsRequest): UploadOapiPlanetomFeedsResponse {
  var runtime = new Util.RuntimeOptions{};
  return uploadOapiPlanetomFeedsEx(request, runtime);
}

/**
 * Description: 批量上传音、视频的内容到钉钉课堂
 */
async function uploadOapiPlanetomFeedsEx(request: UploadOapiPlanetomFeedsRequest, runtime: Util.RuntimeOptions): UploadOapiPlanetomFeedsResponse {
  Util.validateModel(request);
  var appParams = Util.stringifyMapValue(Util.toMap(request.params));
  return doRequestOApi('POST', '/topapi/planetom/feeds/upload', request.headers, appParams, runtime);
}

model BetaOapiCateringAllowanceOrderPushParams = {
  orderDetails: string(description='菜品信息', name='order_details'),
  orderId: string(description='订单id', name='order_id'),
  allowanceAmount: int64(description='补贴金额', name='allowance_amount'),
  mealPlanNo: string(description='餐补规则编码', name='meal_plan_no'),
  actualAmount: int64(description='实际支付金额', name='actual_amount'),
  shopName?: string(description='点餐商家名称', name='shop_name'),
  shopId: string(description='点餐商户编号', name='shop_id'),
  orderFullAmount: int64(description='应付金额', name='order_full_amount'),
  userName?: string(description='点餐人姓名', name='user_name'),
  userid: string(description='点餐人的编码，通过开放平台获取的 userId', name='userid'),
  orderTime?: int64(description='点餐时间', name='order_time'),
  ext?: string(description='补充信息', name='ext'),
  mealTime?: int64(description='用餐时间', name='meal_time'),
}

model BetaOapiCateringAllowanceOrderPushRequest = {
  headers?: map[string]string,
  params:BetaOapiCateringAllowanceOrderPushParams,
}

model BetaOapiCateringAllowanceOrderPushResponseBody = {
  result?: boolean(description='是否成功', name='result'),
  errcode?: int64(description='errcode', name='errcode'),
  errmsg?: string(description='errmsg', name='errmsg'),
}

model BetaOapiCateringAllowanceOrderPushResponse = {
  headers: map[string]string,
  body: BetaOapiCateringAllowanceOrderPushResponseBody,
}

/**
 * Description: 团餐ISV可通过该api上传餐饮商家的订单信息
 */
async function betaOapiCateringAllowanceOrderPush(request: BetaOapiCateringAllowanceOrderPushRequest): BetaOapiCateringAllowanceOrderPushResponse {
  var runtime = new Util.RuntimeOptions{};
  return betaOapiCateringAllowanceOrderPushEx(request, runtime);
}

/**
 * Description: 团餐ISV可通过该api上传餐饮商家的订单信息
 */
async function betaOapiCateringAllowanceOrderPushEx(request: BetaOapiCateringAllowanceOrderPushRequest, runtime: Util.RuntimeOptions): BetaOapiCateringAllowanceOrderPushResponse {
  Util.validateModel(request);
  var appParams = Util.stringifyMapValue(Util.toMap(request.params));
  return doRequestOApi('POST', '/topapi/catering/allowance/order/push/beta', request.headers, appParams, runtime);
}

model BetaOapiCateringAllowanceCapacityGetParams = {
  meaTime: int64(description='用餐时间', name='mea_time'),
  orderid?: string(description='订单id', name='orderid'),
  orderFullAmount: int64(description='应付金额', name='order_full_amount'),
  userid: string(description='点餐人userid', name='userid'),
}

model BetaOapiCateringAllowanceCapacityGetRequest = {
  headers?: map[string]string,
  params:BetaOapiCateringAllowanceCapacityGetParams,
}

model BetaOapiCateringAllowanceCapacityGetResponseBody = {
  result?: {
    deductCapacity?: int64(description='可抵扣金额，单位为分', name='deduct_capacity'),
  }(description='餐补结果', name='result'),
  errcode?: int64(description='errcode', name='errcode'),
  errmsg?: string(description='errmsg', name='errmsg'),
}

model BetaOapiCateringAllowanceCapacityGetResponse = {
  headers: map[string]string,
  body: BetaOapiCateringAllowanceCapacityGetResponseBody,
}

/**
 * Description: 查询开通餐补的企业用户是否具有餐补金额
 */
async function betaOapiCateringAllowanceCapacityGet(request: BetaOapiCateringAllowanceCapacityGetRequest): BetaOapiCateringAllowanceCapacityGetResponse {
  var runtime = new Util.RuntimeOptions{};
  return betaOapiCateringAllowanceCapacityGetEx(request, runtime);
}

/**
 * Description: 查询开通餐补的企业用户是否具有餐补金额
 */
async function betaOapiCateringAllowanceCapacityGetEx(request: BetaOapiCateringAllowanceCapacityGetRequest, runtime: Util.RuntimeOptions): BetaOapiCateringAllowanceCapacityGetResponse {
  Util.validateModel(request);
  var appParams = Util.stringifyMapValue(Util.toMap(request.params));
  return doRequestOApi('POST', '/topapi/catering/allowance/capacity/get/beta', request.headers, appParams, runtime);
}

model BetaOapiCateringAllowancePredeductParams = {
  orderid: string(description='订单id', name='orderid'),
  mealTime: int64(description='用餐时间', name='meal_time'),
  expiryTime: int64(description='抵扣部分金额的超时时间（毫秒）', name='expiry_time'),
  orderFullAmount: int64(description='应付金额', name='order_full_amount'),
  userid: string(description='点餐人userid', name='userid'),
}

model BetaOapiCateringAllowancePredeductRequest = {
  headers?: map[string]string,
  params:BetaOapiCateringAllowancePredeductParams,
}

model BetaOapiCateringAllowancePredeductResponseBody = {
  result?: {
    deductedAmount?: int64(description='已经预抵扣的金额', name='deducted_amount'),
    mealPlanNo?: string(description='餐补规则编码', name='meal_plan_no'),
  }(description='预抵扣结果', name='result'),
  errcode?: int64(description='errcode', name='errcode'),
  errmsg?: string(description='errmsg', name='errmsg'),
}

model BetaOapiCateringAllowancePredeductResponse = {
  headers: map[string]string,
  body: BetaOapiCateringAllowancePredeductResponseBody,
}

/**
 * Description: 查看订单是否已经预抵扣金额
 */
async function betaOapiCateringAllowancePrededuct(request: BetaOapiCateringAllowancePredeductRequest): BetaOapiCateringAllowancePredeductResponse {
  var runtime = new Util.RuntimeOptions{};
  return betaOapiCateringAllowancePredeductEx(request, runtime);
}

/**
 * Description: 查看订单是否已经预抵扣金额
 */
async function betaOapiCateringAllowancePredeductEx(request: BetaOapiCateringAllowancePredeductRequest, runtime: Util.RuntimeOptions): BetaOapiCateringAllowancePredeductResponse {
  Util.validateModel(request);
  var appParams = Util.stringifyMapValue(Util.toMap(request.params));
  return doRequestOApi('POST', '/topapi/catering/allowance/prededuct/beta', request.headers, appParams, runtime);
}

model TaskinfoOapiPlanetomFeedsParams = {
  taskId: string(description='上传内容返回的taskId', name='task_id'),
}

model TaskinfoOapiPlanetomFeedsRequest = {
  headers?: map[string]string,
  params:TaskinfoOapiPlanetomFeedsParams,
}

model TaskinfoOapiPlanetomFeedsResponseBody = {
  result?: [
    {
      title?: string(description='课程标题', name='title'),
      success?: boolean(description='结果', name='success'),
      processMsg?: string(description='课程处理结果', name='process_msg'),
    }
  ](description='返回结果', name='result'),
  errmsg?: string(description='错误文案', name='errmsg'),
  errcode?: int64(description='错误码', name='errcode'),
}

model TaskinfoOapiPlanetomFeedsResponse = {
  headers: map[string]string,
  body: TaskinfoOapiPlanetomFeedsResponseBody,
}

/**
 * Description: 批量上传音、视频的任务结果查询
 */
async function taskinfoOapiPlanetomFeeds(request: TaskinfoOapiPlanetomFeedsRequest): TaskinfoOapiPlanetomFeedsResponse {
  var runtime = new Util.RuntimeOptions{};
  return taskinfoOapiPlanetomFeedsEx(request, runtime);
}

/**
 * Description: 批量上传音、视频的任务结果查询
 */
async function taskinfoOapiPlanetomFeedsEx(request: TaskinfoOapiPlanetomFeedsRequest, runtime: Util.RuntimeOptions): TaskinfoOapiPlanetomFeedsResponse {
  Util.validateModel(request);
  var appParams = Util.stringifyMapValue(Util.toMap(request.params));
  return doRequestOApi('POST', '/topapi/planetom/feeds/taskinfo', request.headers, appParams, runtime);
}

model BetaOapiCateringAllowanceUnfreezeParams = {
  ruleCode: string(description='餐补规则编码', name='rule_code'),
  orderId: string(description='订单编号', name='order_id'),
  userid: string(description='点餐人userid', name='userid'),
}

model BetaOapiCateringAllowanceUnfreezeRequest = {
  headers?: map[string]string,
  params:BetaOapiCateringAllowanceUnfreezeParams,
}

model BetaOapiCateringAllowanceUnfreezeResponseBody = {
  result?: boolean(description='是否成功', name='result'),
  errcode?: int64(description='errcode', name='errcode'),
  errmsg?: string(description='errmsg', name='errmsg'),
}

model BetaOapiCateringAllowanceUnfreezeResponse = {
  headers: map[string]string,
  body: BetaOapiCateringAllowanceUnfreezeResponseBody,
}

/**
 * Description: 退单或者取消订单时，释放已经抵扣的餐补金额
 */
async function betaOapiCateringAllowanceUnfreeze(request: BetaOapiCateringAllowanceUnfreezeRequest): BetaOapiCateringAllowanceUnfreezeResponse {
  var runtime = new Util.RuntimeOptions{};
  return betaOapiCateringAllowanceUnfreezeEx(request, runtime);
}

/**
 * Description: 退单或者取消订单时，释放已经抵扣的餐补金额
 */
async function betaOapiCateringAllowanceUnfreezeEx(request: BetaOapiCateringAllowanceUnfreezeRequest, runtime: Util.RuntimeOptions): BetaOapiCateringAllowanceUnfreezeResponse {
  Util.validateModel(request);
  var appParams = Util.stringifyMapValue(Util.toMap(request.params));
  return doRequestOApi('POST', '/topapi/catering/allowance/unfreeze/beta', request.headers, appParams, runtime);
}

model SearchOapiAlitripBtripVehicleOrderParams = {
  rq: {
    startTime?: string(description='创建开始时间', pattern='\\\\d{4}[-]\\\\d{1,2}[-]\\\\d{1,2}[T]\\\\d{2}:\\\\d{2}:\\\\d{2}[Z]', name='start_time'),
    updateEndTime?: string(description='更新结束时间', pattern='\\\\d{4}[-]\\\\d{1,2}[-]\\\\d{1,2}[T]\\\\d{2}:\\\\d{2}:\\\\d{2}[Z]', name='update_end_time'),
    applyId?: int64(description='商旅审批单id', name='apply_id'),
    page?: int64(description='页数，从1开始', name='page'),
    userid?: string(description='用户id', name='userid'),
    pageSize?: int64(description='每页数量，默认10，最大50', name='page_size'),
    deptid?: string(description='部门id', name='deptid'),
    endTime?: string(description='创建结束时间', pattern='\\\\d{4}[-]\\\\d{1,2}[-]\\\\d{1,2}[T]\\\\d{2}:\\\\d{2}:\\\\d{2}[Z]', name='end_time'),
    updateStartTime?: string(description='更新开始时间', pattern='\\\\d{4}[-]\\\\d{1,2}[-]\\\\d{1,2}[T]\\\\d{2}:\\\\d{2}:\\\\d{2}[Z]', name='update_start_time'),
    corpid: string(description='企业id', name='corpid'),
  }(description='请求对象', name='rq'),
}

model SearchOapiAlitripBtripVehicleOrderRequest = {
  headers?: map[string]string,
  params:SearchOapiAlitripBtripVehicleOrderParams,
}

model SearchOapiAlitripBtripVehicleOrderResponseBody = {
  errcode?: int64(description='返回码', name='errcode'),
  errmsg?: string(description='错误信息', name='errmsg'),
  success?: boolean(description='成功标识', name='success'),
  vehicleOrderList?: [
    {
      id?: int64(description='订单id', name='id'),
      gmtCreate?: string(description='订单创建时间', pattern='\\\\d{4}[-]\\\\d{1,2}[-]\\\\d{1,2}[T]\\\\d{2}:\\\\d{2}:\\\\d{2}[Z]', name='gmt_create'),
      gmtModified?: string(description='订单更新时间', pattern='\\\\d{4}[-]\\\\d{1,2}[-]\\\\d{1,2}[T]\\\\d{2}:\\\\d{2}:\\\\d{2}[Z]', name='gmt_modified'),
      passengerName?: string(description='乘客名称', name='passenger_name'),
      corpid?: string(description='企业id', name='corpid'),
      corpName?: string(description='企业名称', name='corp_name'),
      userName?: string(description='预定人名称', name='user_name'),
      userid?: string(description='预定人id', name='userid'),
      deptName?: string(description='部门名称', name='dept_name'),
      deptid?: string(description='部门id', name='deptid'),
      applyShowId?: string(description='商旅审批单展示id(非审批api对接企业)', name='apply_show_id'),
      applyId?: int64(description='商旅系统审批单id', name='apply_id'),
      realFromCityName?: string(description='实际出发城市', name='real_from_city_name'),
      realToCityName?: string(description='实际到达城市', name='real_to_city_name'),
      fromAddress?: string(description='出发地', name='from_address'),
      toAddress?: string(description='目的地', name='to_address'),
      fromCityName?: string(description='出发城市', name='from_city_name'),
      toCityName?: string(description='目的城市', name='to_city_name'),
      memo?: string(description='打车事由', name='memo'),
      orderStatus?: int64(description='订单状态:0:初始状态,1:已超时,2:派单成功,3:派单失败,4:已退款,5:已支付,6:已取消', name='order_status'),
      carLevel?: string(description='类型级别：1经济型、2舒适型、3豪华型', name='car_level'),
      carInfo?: string(description='车辆类型', name='car_info'),
      estimatePrice?: string(description='订单预估价格', name='estimate_price'),
      publishTime?: string(description='乘客发布用车时间', pattern='\\\\d{4}[-]\\\\d{1,2}[-]\\\\d{1,2}[T]\\\\d{2}:\\\\d{2}:\\\\d{2}[Z]', name='publish_time'),
      takenTime?: string(description='乘客上车时间', pattern='\\\\d{4}[-]\\\\d{1,2}[-]\\\\d{1,2}[T]\\\\d{2}:\\\\d{2}:\\\\d{2}[Z]', name='taken_time'),
      driverConfirmTime?: string(description='司机到达目的地时间', pattern='\\\\d{4}[-]\\\\d{1,2}[-]\\\\d{1,2}[T]\\\\d{2}:\\\\d{2}:\\\\d{2}[Z]', name='driver_confirm_time'),
      cancelTime?: string(description='取消时间', pattern='\\\\d{4}[-]\\\\d{1,2}[-]\\\\d{1,2}[T]\\\\d{2}:\\\\d{2}:\\\\d{2}[Z]', name='cancel_time'),
      travelDistance?: string(description='行驶公里数', name='travel_distance'),
      payTime?: string(description='支付时间', pattern='\\\\d{4}[-]\\\\d{1,2}[-]\\\\d{1,2}[T]\\\\d{2}:\\\\d{2}:\\\\d{2}[Z]', name='pay_time'),
      serviceType?: int64(description='打车服务类型 1:出租车, 2:专车, 3:快车', name='service_type'),
      businessCategory?: string(description='用车原因：TRAVEL: 差旅, TRAFFIC: 市内交通, WORK: 加班, OTHER: 其它', name='business_category'),
      costCenterId?: int64(description='商旅成本中心id', name='cost_center_id'),
      costCenterNumber?: string(description='成本中心编号', name='cost_center_number'),
      costCenterName?: string(description='成本中心名称', name='cost_center_name'),
      invoiceId?: int64(description='商旅发票id', name='invoice_id'),
      invoiceTitle?: string(description='发票抬头', name='invoice_title'),
      projectCode?: string(description='项目编号', name='project_code'),
      projectTitle?: string(description='项目名称', name='project_title'),
      priceInfoList?: [
        {
          price?: string(description='价格', name='price'),
          type?: int64(description='资金流向:1:支出，2:收入', name='type'),
          category?: string(description='交易类型：用车支付, 服务费, 用车取消后收费, 用车退款, 用车赔付', name='category'),
          payType?: int64(description='结算方式:1：个人现付，2:企业现付,4:企业月结，8、企业预存', name='pay_type'),
          gmtCreate?: string(description='流水创建时间', pattern='\\\\d{4}[-]\\\\d{1,2}[-]\\\\d{1,2}[T]\\\\d{2}:\\\\d{2}:\\\\d{2}[Z]', name='gmt_create'),
          passengerName?: string(description='出行人，多个用‘,’分割', name='passenger_name'),
        }
      ](description='价目详情列表', name='price_info_list'),
      thirdpartItineraryId?: string(description='第三方行程id', name='thirdpart_itinerary_id'),
      userAffiliateList?: [
        {
          userid?: string(description='出行人ID', name='userid'),
          userName?: string(description='出行人名称', name='user_name'),
        }
      ](description='出行人列表', name='user_affiliate_list'),
      userConfirm?: int64(description='用户确认状态：0未确认；1已确认；2有异议；3系统检查不合理', name='user_confirm'),
      provider?: int64(description='服务商：2滴滴；3:曹操；4:首汽；5:阳光。可能会有其他服务商的增加。', name='provider'),
    }
  ](description='订单列表', name='vehicle_order_list'),
}

model SearchOapiAlitripBtripVehicleOrderResponse = {
  headers: map[string]string,
  body: SearchOapiAlitripBtripVehicleOrderResponseBody,
}

/**
 * Description: 用车订单查询接口
 */
async function searchOapiAlitripBtripVehicleOrder(request: SearchOapiAlitripBtripVehicleOrderRequest): SearchOapiAlitripBtripVehicleOrderResponse {
  var runtime = new Util.RuntimeOptions{};
  return searchOapiAlitripBtripVehicleOrderEx(request, runtime);
}

/**
 * Description: 用车订单查询接口
 */
async function searchOapiAlitripBtripVehicleOrderEx(request: SearchOapiAlitripBtripVehicleOrderRequest, runtime: Util.RuntimeOptions): SearchOapiAlitripBtripVehicleOrderResponse {
  Util.validateModel(request);
  var appParams = Util.stringifyMapValue(Util.toMap(request.params));
  return doRequestOApi('POST', '/topapi/alitrip/btrip/vehicle/order/search', request.headers, appParams, runtime);
}

model UnfreezeOapiCateringAllowanceParams = {
  ruleCode: string(description='餐补规则编码', name='rule_code'),
  orderId: string(description='订单编号', name='order_id'),
  userid: string(description='点餐人userid', name='userid'),
}

model UnfreezeOapiCateringAllowanceRequest = {
  headers?: map[string]string,
  params:UnfreezeOapiCateringAllowanceParams,
}

model UnfreezeOapiCateringAllowanceResponseBody = {
  result?: boolean(description='是否成功', name='result'),
  errcode?: int64(description='errcode', name='errcode'),
  errmsg?: string(description='errmsg', name='errmsg'),
}

model UnfreezeOapiCateringAllowanceResponse = {
  headers: map[string]string,
  body: UnfreezeOapiCateringAllowanceResponseBody,
}

/**
 * Description: 退单或者取消订单时，释放已经抵扣的餐补金额
 */
async function unfreezeOapiCateringAllowance(request: UnfreezeOapiCateringAllowanceRequest): UnfreezeOapiCateringAllowanceResponse {
  var runtime = new Util.RuntimeOptions{};
  return unfreezeOapiCateringAllowanceEx(request, runtime);
}

/**
 * Description: 退单或者取消订单时，释放已经抵扣的餐补金额
 */
async function unfreezeOapiCateringAllowanceEx(request: UnfreezeOapiCateringAllowanceRequest, runtime: Util.RuntimeOptions): UnfreezeOapiCateringAllowanceResponse {
  Util.validateModel(request);
  var appParams = Util.stringifyMapValue(Util.toMap(request.params));
  return doRequestOApi('POST', '/topapi/catering/allowance/unfreeze', request.headers, appParams, runtime);
}

model SuggestOapiAlitripBtripFlightCityParams = {
  rq: {
    keyword: string(description='搜索关键字', name='keyword'),
    userid: string(description='用户id', name='userid'),
    type?: int64(description='0国内机场，2国内机场+临近机场，3国际机场', name='type'),
    corpid: string(description='企业id', name='corpid'),
  }(description='请求对象', name='rq'),
}

model SuggestOapiAlitripBtripFlightCityRequest = {
  headers?: map[string]string,
  params:SuggestOapiAlitripBtripFlightCityParams,
}

model SuggestOapiAlitripBtripFlightCityResponseBody = {
  result?: {
    cities?: [
      {
        code?: string(description='三字码', name='code'),
        name?: string(description='城市名称', name='name'),
        distance?: int64(description='与搜索城市距离，单位千米，只在邻近机场推荐有值', name='distance'),
        travelName?: string(description='邻近机场城市，只在邻近机场推荐有值', name='travel_name'),
      }
    ](description='城市列表', name='cities'),
    nearby?: boolean(description='是否为邻近城市', name='nearby'),
  }(description='结果对象', name='result'),
  errmsg?: string(description='错误信息', name='errmsg'),
  errcode?: int64(description='错误码', name='errcode'),
  success?: boolean(description='成功标识', name='success'),
}

model SuggestOapiAlitripBtripFlightCityResponse = {
  headers: map[string]string,
  body: SuggestOapiAlitripBtripFlightCityResponseBody,
}

/**
 * Description: 机票城市搜索
 */
async function suggestOapiAlitripBtripFlightCity(request: SuggestOapiAlitripBtripFlightCityRequest): SuggestOapiAlitripBtripFlightCityResponse {
  var runtime = new Util.RuntimeOptions{};
  return suggestOapiAlitripBtripFlightCityEx(request, runtime);
}

/**
 * Description: 机票城市搜索
 */
async function suggestOapiAlitripBtripFlightCityEx(request: SuggestOapiAlitripBtripFlightCityRequest, runtime: Util.RuntimeOptions): SuggestOapiAlitripBtripFlightCityResponse {
  Util.validateModel(request);
  var appParams = Util.stringifyMapValue(Util.toMap(request.params));
  return doRequestOApi('POST', '/topapi/alitrip/btrip/flight/city/suggest', request.headers, appParams, runtime);
}

model PredeductOapiCateringAllowanceParams = {
  orderid: string(description='订单id', name='orderid'),
  mealTime: int64(description='用餐时间', name='meal_time'),
  expiryTime: int64(description='抵扣部分金额的超时时间（毫秒）', name='expiry_time'),
  orderFullAmount: int64(description='应付金额', name='order_full_amount'),
  userid: string(description='点餐人userid', name='userid'),
}

model PredeductOapiCateringAllowanceRequest = {
  headers?: map[string]string,
  params:PredeductOapiCateringAllowanceParams,
}

model PredeductOapiCateringAllowanceResponseBody = {
  result?: {
    deductedAmount?: int64(description='已经预抵扣的金额', name='deducted_amount'),
    mealPlanNo?: string(description='餐补规则编码', name='meal_plan_no'),
  }(description='预抵扣结果', name='result'),
  errcode?: int64(description='errcode', name='errcode'),
  errmsg?: string(description='errmsg', name='errmsg'),
}

model PredeductOapiCateringAllowanceResponse = {
  headers: map[string]string,
  body: PredeductOapiCateringAllowanceResponseBody,
}

/**
 * Description: 查看订单是否已经预抵扣金额
 */
async function predeductOapiCateringAllowance(request: PredeductOapiCateringAllowanceRequest): PredeductOapiCateringAllowanceResponse {
  var runtime = new Util.RuntimeOptions{};
  return predeductOapiCateringAllowanceEx(request, runtime);
}

/**
 * Description: 查看订单是否已经预抵扣金额
 */
async function predeductOapiCateringAllowanceEx(request: PredeductOapiCateringAllowanceRequest, runtime: Util.RuntimeOptions): PredeductOapiCateringAllowanceResponse {
  Util.validateModel(request);
  var appParams = Util.stringifyMapValue(Util.toMap(request.params));
  return doRequestOApi('POST', '/topapi/catering/allowance/prededuct', request.headers, appParams, runtime);
}

model GetOapiCateringCooplistParams = {
  offSet: int64(description='数据起始index', name='off_set'),
  pgSize: int64(description='pageSize', name='pg_size'),
  shopId: string(description='店铺id', name='shop_id'),
  coopStatus: int64(description='合作状态：1-申请合作 2-已合作', name='coop_status'),
}

model GetOapiCateringCooplistRequest = {
  headers?: map[string]string,
  params:GetOapiCateringCooplistParams,
}

model GetOapiCateringCooplistResponseBody = {
  result?: {
    list?: [
      {
        mealItemList?: [
          {
            deliveryTime?: string(description='送达时间 HH:mm', name='delivery_time'),
            title?: string(description='点餐项名称', name='title'),
            id?: int64(description='id', name='id'),
          }
        ](description='mealItemList', name='meal_item_list'),
        mealTime?: int64(description='点餐时间枚举值：2-法定工作日3-双休及节假日', name='meal_time'),
        address?: string(description='缩略地址，可为空', name='address'),
        addressDetail?: string(description='送餐详细地址', name='address_detail'),
        corpId?: string(description='企业corpId', name='corp_id'),
        corpName?: string(description='企业名称', name='corp_name'),
        logo?: string(description='企业logo的url', name='logo'),
      }
    ](description='list', name='list'),
    hasNext?: boolean(description='是否有下一项数据', name='has_next'),
  }(description='result', name='result'),
  success?: boolean(description='success or not', name='success'),
  errcode?: int64(description='错误代码', name='errcode'),
  errmsg?: string(description='错误信息', name='errmsg'),
}

model GetOapiCateringCooplistResponse = {
  headers: map[string]string,
  body: GetOapiCateringCooplistResponseBody,
}

/**
 * Description: 分页获取合作企业点餐设置列表
 */
async function getOapiCateringCooplist(request: GetOapiCateringCooplistRequest): GetOapiCateringCooplistResponse {
  var runtime = new Util.RuntimeOptions{};
  return getOapiCateringCooplistEx(request, runtime);
}

/**
 * Description: 分页获取合作企业点餐设置列表
 */
async function getOapiCateringCooplistEx(request: GetOapiCateringCooplistRequest, runtime: Util.RuntimeOptions): GetOapiCateringCooplistResponse {
  Util.validateModel(request);
  var appParams = Util.stringifyMapValue(Util.toMap(request.params));
  return doRequestOApi('POST', '/topapi/catering/cooplist/get', request.headers, appParams, runtime);
}

model GetOapiCateringAllowanceCapacityParams = {
  meaTime: int64(description='用餐时间', name='mea_time'),
  orderid?: string(description='订单id', name='orderid'),
  orderFullAmount: int64(description='应付金额', name='order_full_amount'),
  userid: string(description='点餐人userid', name='userid'),
}

model GetOapiCateringAllowanceCapacityRequest = {
  headers?: map[string]string,
  params:GetOapiCateringAllowanceCapacityParams,
}

model GetOapiCateringAllowanceCapacityResponseBody = {
  result?: {
    deductCapacity?: int64(description='可抵扣金额，单位为分', name='deduct_capacity'),
  }(description='餐补结果', name='result'),
  errcode?: int64(description='errcode', name='errcode'),
  errmsg?: string(description='errmsg', name='errmsg'),
}

model GetOapiCateringAllowanceCapacityResponse = {
  headers: map[string]string,
  body: GetOapiCateringAllowanceCapacityResponseBody,
}

/**
 * Description: 查询开通餐补的企业用户是否具有餐补金额
 */
async function getOapiCateringAllowanceCapacity(request: GetOapiCateringAllowanceCapacityRequest): GetOapiCateringAllowanceCapacityResponse {
  var runtime = new Util.RuntimeOptions{};
  return getOapiCateringAllowanceCapacityEx(request, runtime);
}

/**
 * Description: 查询开通餐补的企业用户是否具有餐补金额
 */
async function getOapiCateringAllowanceCapacityEx(request: GetOapiCateringAllowanceCapacityRequest, runtime: Util.RuntimeOptions): GetOapiCateringAllowanceCapacityResponse {
  Util.validateModel(request);
  var appParams = Util.stringifyMapValue(Util.toMap(request.params));
  return doRequestOApi('POST', '/topapi/catering/allowance/capacity/get', request.headers, appParams, runtime);
}

model PushOapiCateringAllowanceOrderParams = {
  orderDetails: string(description='菜品信息', name='order_details'),
  orderId: string(description='订单id', name='order_id'),
  allowanceAmount: int64(description='补贴金额', name='allowance_amount'),
  mealPlanNo: string(description='餐补规则编码', name='meal_plan_no'),
  actualAmount: int64(description='实际支付金额', name='actual_amount'),
  shopName?: string(description='点餐商家名称', name='shop_name'),
  shopId: string(description='点餐商户编号', name='shop_id'),
  orderFullAmount: int64(description='应付金额', name='order_full_amount'),
  userName?: string(description='点餐人姓名', name='user_name'),
  userid: string(description='点餐人的编码，通过开放平台获取的 userId', name='userid'),
  orderTime?: int64(description='点餐时间', name='order_time'),
  ext?: string(description='补充信息', name='ext'),
  mealTime?: int64(description='用餐时间', name='meal_time'),
}

model PushOapiCateringAllowanceOrderRequest = {
  headers?: map[string]string,
  params:PushOapiCateringAllowanceOrderParams,
}

model PushOapiCateringAllowanceOrderResponseBody = {
  result?: boolean(description='是否成功', name='result'),
  errcode?: int64(description='errcode', name='errcode'),
  errmsg?: string(description='errmsg', name='errmsg'),
}

model PushOapiCateringAllowanceOrderResponse = {
  headers: map[string]string,
  body: PushOapiCateringAllowanceOrderResponseBody,
}

/**
 * Description: 团餐ISV可通过该api上传餐饮商家的订单信息
 */
async function pushOapiCateringAllowanceOrder(request: PushOapiCateringAllowanceOrderRequest): PushOapiCateringAllowanceOrderResponse {
  var runtime = new Util.RuntimeOptions{};
  return pushOapiCateringAllowanceOrderEx(request, runtime);
}

/**
 * Description: 团餐ISV可通过该api上传餐饮商家的订单信息
 */
async function pushOapiCateringAllowanceOrderEx(request: PushOapiCateringAllowanceOrderRequest, runtime: Util.RuntimeOptions): PushOapiCateringAllowanceOrderResponse {
  Util.validateModel(request);
  var appParams = Util.stringifyMapValue(Util.toMap(request.params));
  return doRequestOApi('POST', '/topapi/catering/allowance/order/push', request.headers, appParams, runtime);
}

model GetOapiCateringApplylistCorpidlistParams = {
  shopIdList: [ string ](description='店铺id列表', maxItems=20, name='shop_id_list'),
}

model GetOapiCateringApplylistCorpidlistRequest = {
  headers?: map[string]string,
  params:GetOapiCateringApplylistCorpidlistParams,
}

model GetOapiCateringApplylistCorpidlistResponseBody = {
  result?: [
    {
      corpId?: string(description='申请合作企业的corpId', name='corp_id'),
      shopId?: string(description='申请合作的商铺id', name='shop_id'),
    }
  ](description='result', name='result'),
  success?: boolean(description='是否成功', name='success'),
  errcode?: int64(description='错误代码', name='errcode'),
  errmsg?: string(description='错误信息', name='errmsg'),
}

model GetOapiCateringApplylistCorpidlistResponse = {
  headers: map[string]string,
  body: GetOapiCateringApplylistCorpidlistResponseBody,
}

/**
 * Description: 获取所有申请合作企业id列表
 */
async function getOapiCateringApplylistCorpidlist(request: GetOapiCateringApplylistCorpidlistRequest): GetOapiCateringApplylistCorpidlistResponse {
  var runtime = new Util.RuntimeOptions{};
  return getOapiCateringApplylistCorpidlistEx(request, runtime);
}

/**
 * Description: 获取所有申请合作企业id列表
 */
async function getOapiCateringApplylistCorpidlistEx(request: GetOapiCateringApplylistCorpidlistRequest, runtime: Util.RuntimeOptions): GetOapiCateringApplylistCorpidlistResponse {
  Util.validateModel(request);
  var appParams = Util.stringifyMapValue(Util.toMap(request.params));
  return doRequestOApi('POST', '/topapi/catering/applylist/corpidlist/get', request.headers, appParams, runtime);
}

model DealOapiCateringCoopParams = {
  corpEndCorpId: string(description='申请企业的corpId', name='corp_end_corp_id'),
  shopId: string(description='商铺id', name='shop_id'),
  coopStatus: int64(description='2同意申请，3拒绝申请，7已合作时解除合作', name='coop_status'),
}

model DealOapiCateringCoopRequest = {
  headers?: map[string]string,
  params:DealOapiCateringCoopParams,
}

model DealOapiCateringCoopResponseBody = {
  success?: boolean(description='是否成功', name='success'),
  errcode?: int64(description='错误代码', name='errcode'),
  errmsg?: string(description='错误信息', name='errmsg'),
}

model DealOapiCateringCoopResponse = {
  headers: map[string]string,
  body: DealOapiCateringCoopResponseBody,
}

/**
 * Description: 商户端处理合作关系
 */
async function dealOapiCateringCoop(request: DealOapiCateringCoopRequest): DealOapiCateringCoopResponse {
  var runtime = new Util.RuntimeOptions{};
  return dealOapiCateringCoopEx(request, runtime);
}

/**
 * Description: 商户端处理合作关系
 */
async function dealOapiCateringCoopEx(request: DealOapiCateringCoopRequest, runtime: Util.RuntimeOptions): DealOapiCateringCoopResponse {
  Util.validateModel(request);
  var appParams = Util.stringifyMapValue(Util.toMap(request.params));
  return doRequestOApi('POST', '/topapi/catering/coop/deal', request.headers, appParams, runtime);
}

model GetOapiCateringCoopcontactParams = {
  corpEndCorpId: string(description='合作企业的corpId', name='corp_end_corp_id'),
  shopId: string(description='店铺id', name='shop_id'),
  callerUserid: string(description='呼叫方的userId', name='caller_userid'),
}

model GetOapiCateringCoopcontactRequest = {
  headers?: map[string]string,
  params:GetOapiCateringCoopcontactParams,
}

model GetOapiCateringCoopcontactResponseBody = {
  success?: boolean(description='是否成功', name='success'),
  errcode?: int64(description='错误代码', name='errcode'),
  errmsg?: string(description='错误信息', name='errmsg'),
  expiration?: int64(description='号码过期时间戳(毫秒)', name='expiration'),
  priMobile?: string(description='临时隐私号', name='pri_mobile'),
}

model GetOapiCateringCoopcontactResponse = {
  headers: map[string]string,
  body: GetOapiCateringCoopcontactResponseBody,
}

/**
 * Description: 获取企业的临时联系方式
 */
async function getOapiCateringCoopcontact(request: GetOapiCateringCoopcontactRequest): GetOapiCateringCoopcontactResponse {
  var runtime = new Util.RuntimeOptions{};
  return getOapiCateringCoopcontactEx(request, runtime);
}

/**
 * Description: 获取企业的临时联系方式
 */
async function getOapiCateringCoopcontactEx(request: GetOapiCateringCoopcontactRequest, runtime: Util.RuntimeOptions): GetOapiCateringCoopcontactResponse {
  Util.validateModel(request);
  var appParams = Util.stringifyMapValue(Util.toMap(request.params));
  return doRequestOApi('POST', '/topapi/catering/coopcontact/get', request.headers, appParams, runtime);
}

model GetOapiCateringMealconfigParams = {
  mealDayOffset: int64(description='获取未来n天的可点餐时间（包括今天）如： 1， 则返回今天和明天的可点餐日期，最大值为13', name='meal_day_offset'),
}

model GetOapiCateringMealconfigRequest = {
  headers?: map[string]string,
  params:GetOapiCateringMealconfigParams,
}

model GetOapiCateringMealconfigResponseBody = {
  errmsg?: string(description='错误信息', name='errmsg'),
  errcode?: int64(description='错误代码', name='errcode'),
  success?: boolean(description='是否成功', name='success'),
  result?: {
    mealItemList?: [
      {
        deliveryTime?: string(description='送达时间 HH:mm', name='delivery_time'),
        title?: string(description='点餐项名称', name='title'),
        id?: int64(description='id', name='id'),
      }
    ](description='Mealitemlist', name='meal_item_list'),
    corpId?: string(description='企业corpId', name='corp_id'),
    addressDetail?: string(description='送餐详细地址', name='address_detail'),
    address?: string(description='缩略地址，可为空', name='address'),
    mealTime?: int64(description='点餐时间枚举值：2-法定工作日3-双休及节假日4- 每天', name='meal_time'),
    comingMealDayList?: [ string ](description='可点餐时间', name='coming_meal_day_list'),
    addressList?: [
      {
        addressDetail?: string(description='送餐详细地址', name='address_detail'),
        address?: string(description='缩略地址，可为空', name='address'),
        addressId?: int64(description='地址id', name='address_id'),
      }
    ](description='Addressvos', name='address_list'),
    addressId?: int64(description='默认地址的id', name='address_id'),
  }(description='GroupMealSettingVo', name='result'),
}

model GetOapiCateringMealconfigResponse = {
  headers: map[string]string,
  body: GetOapiCateringMealconfigResponseBody,
}

/**
 * Description: 当前企业的点餐设置
 */
async function getOapiCateringMealconfig(request: GetOapiCateringMealconfigRequest): GetOapiCateringMealconfigResponse {
  var runtime = new Util.RuntimeOptions{};
  return getOapiCateringMealconfigEx(request, runtime);
}

/**
 * Description: 当前企业的点餐设置
 */
async function getOapiCateringMealconfigEx(request: GetOapiCateringMealconfigRequest, runtime: Util.RuntimeOptions): GetOapiCateringMealconfigResponse {
  Util.validateModel(request);
  var appParams = Util.stringifyMapValue(Util.toMap(request.params));
  return doRequestOApi('POST', '/topapi/catering/mealconfig/get', request.headers, appParams, runtime);
}

model AddOapiAttendanceShiftParams = {
  opUserId: string(description='操作人', name='op_user_id'),
  shift: {
    owner?: string(description='班次owner', name='owner'),
    classGroupName?: string(description='班次组名', name='class_group_name'),
    corpId?: string(description='corpId', name='corp_id'),
    name: string(description='班次名称', name='name'),
    id?: int64(description='班次id', name='id'),
    sections: [
      {
        times: [
          {
            checkType: string(description='类型', name='check_type'),
            across: int64(description='是否跨天', name='across'),
            endMin?: int64(description='调整时间', name='end_min'),
            checkTime: string(description='check时间', pattern='\\\\d{4}[-]\\\\d{1,2}[-]\\\\d{1,2}[T]\\\\d{2}:\\\\d{2}:\\\\d{2}[Z]', name='check_time'),
            freeCheck?: boolean(description='是否免打卡', name='free_check'),
          }
        ](description='times', maxItems=20, name='times'),
      }
    ](description='sections', maxItems=20, name='sections'),
    setting?: {
      restBeginTime?: {
        checkType?: string(description='类型', name='check_type'),
        checkTime?: string(description='check时间', pattern='\\\\d{4}[-]\\\\d{1,2}[-]\\\\d{1,2}[T]\\\\d{2}:\\\\d{2}:\\\\d{2}[Z]', name='check_time'),
        freeCheck?: boolean(description='是否免打卡', name='free_check'),
        across?: int64(description='是否跨天', name='across'),
      }(description='休息开始', name='rest_begin_time'),
      classId?: int64(description='班次id', name='class_id'),
      isFlexible?: boolean(description='是否弹性', name='is_flexible'),
      corpId?: string(description='corpId', name='corp_id'),
      isDeleted?: string(description='是否删除', name='is_deleted'),
      restEndTime?: {
        checkType?: string(description='类型', name='check_type'),
        checkTime?: string(description='check时间', pattern='\\\\d{4}[-]\\\\d{1,2}[-]\\\\d{1,2}[T]\\\\d{2}:\\\\d{2}:\\\\d{2}[Z]', name='check_time'),
        freeCheck?: boolean(description='是否免打卡', name='free_check'),
        across?: int64(description='是否跨天', name='across'),
      }(description='休息结束', name='rest_end_time'),
      seriousLateMinutes?: int64(description='严重迟到分钟数', name='serious_late_minutes'),
      absenteeismLateMinutes?: int64(description='旷工迟到分钟数', name='absenteeism_late_minutes'),
    }(description='设置', name='setting'),
  }(description='班次', name='shift'),
}

model AddOapiAttendanceShiftRequest = {
  headers?: map[string]string,
  params:AddOapiAttendanceShiftParams,
}

model AddOapiAttendanceShiftResponseBody = {
  result?: {
    id?: int64(description='班次id', name='id'),
    name?: string(description='班次名称', name='name'),
  }(description='班次信息', name='result'),
  errmsg?: string(description='错误信息', name='errmsg'),
  errcode?: int64(description='错误码', name='errcode'),
  success?: boolean(description='是否成功', name='success'),
}

model AddOapiAttendanceShiftResponse = {
  headers: map[string]string,
  body: AddOapiAttendanceShiftResponseBody,
}

/**
 * Description: 创建/修改钉钉考勤班次
 */
async function addOapiAttendanceShift(request: AddOapiAttendanceShiftRequest): AddOapiAttendanceShiftResponse {
  var runtime = new Util.RuntimeOptions{};
  return addOapiAttendanceShiftEx(request, runtime);
}

/**
 * Description: 创建/修改钉钉考勤班次
 */
async function addOapiAttendanceShiftEx(request: AddOapiAttendanceShiftRequest, runtime: Util.RuntimeOptions): AddOapiAttendanceShiftResponse {
  Util.validateModel(request);
  var appParams = Util.stringifyMapValue(Util.toMap(request.params));
  return doRequestOApi('POST', '/topapi/attendance/shift/add', request.headers, appParams, runtime);
}

model DeleteOapiAttendanceShiftParams = {
  opUserId: string(description='操作人', name='op_user_id'),
  shiftId: int64(description='班次id', name='shift_id'),
}

model DeleteOapiAttendanceShiftRequest = {
  headers?: map[string]string,
  params:DeleteOapiAttendanceShiftParams,
}

model DeleteOapiAttendanceShiftResponseBody = {
  errmsg?: string(description='错误信息', name='errmsg'),
  errcode?: int64(description='错误码', name='errcode'),
  success?: boolean(description='是否成功', name='success'),
}

model DeleteOapiAttendanceShiftResponse = {
  headers: map[string]string,
  body: DeleteOapiAttendanceShiftResponseBody,
}

/**
 * Description: 根据id删除考勤班次
 */
async function deleteOapiAttendanceShift(request: DeleteOapiAttendanceShiftRequest): DeleteOapiAttendanceShiftResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteOapiAttendanceShiftEx(request, runtime);
}

/**
 * Description: 根据id删除考勤班次
 */
async function deleteOapiAttendanceShiftEx(request: DeleteOapiAttendanceShiftRequest, runtime: Util.RuntimeOptions): DeleteOapiAttendanceShiftResponse {
  Util.validateModel(request);
  var appParams = Util.stringifyMapValue(Util.toMap(request.params));
  return doRequestOApi('POST', '/topapi/attendance/shift/delete', request.headers, appParams, runtime);
}

model AddOapiAttendanceGroupParams = {
  opUserId: string(description='操作人id', name='op_user_id'),
  topGroup: {
    owner?: string(description='考勤组owner', name='owner'),
    enableEmpSelectClass?: boolean(description='未排班时允许员工选择班次打卡', name='enable_emp_select_class'),
    corpId?: string(description='corpId', name='corp_id'),
    skipHolidays?: boolean(description='是否跳过节假日', name='skip_holidays'),
    specialDays?: string(description='特殊日期配置', name='special_days'),
    enableOutsideCameraCheck?: boolean(description='是否开启外勤打卡必须拍照', name='enable_outside_camera_check'),
    positions?: [
      {
        address?: string(description='地址', name='address'),
        corpId?: string(description='corpId', name='corp_id'),
        latitude?: string(description='纬度', name='latitude'),
        accuracy?: string(description='精度', name='accuracy'),
        title?: string(description='标题', name='title'),
        longitude?: string(description='经度', name='longitude'),
      }
    ](description='考勤地址', maxItems=20, name='positions'),
    modifyMember?: boolean(description='是否有修改考勤组成员相关信息', name='modify_member'),
    type: string(description='考勤组类型', name='type'),
    enableFaceCheck?: boolean(description='是否开启人脸检测', name='enable_face_check'),
    checkNeedHealthyCode?: boolean(description='打卡是否需要健康码', name='check_need_healthy_code'),
    enableCameraCheck?: boolean(description='是否开启拍照打卡', name='enable_camera_check'),
    shiftVoList?: [
      {
        id?: int64(description='班次id', name='id'),
      }
    ](description='班次信息', maxItems=200, name='shift_vo_list'),
    enableOutsideCheck?: boolean(description='是否可以外勤打卡', name='enable_outside_check'),
    members: [
      {
        role: string(description='角色', name='role'),
        corpId?: string(description='corpId', name='corp_id'),
        type: string(description='类型', name='type'),
        userId: string(description='用户id', name='user_id'),
      }
    ](description='考勤组成员', maxItems=200, name='members'),
    name: string(description='考勤组名', name='name'),
    id?: int64(description='考勤组id', name='id'),
    enableNextDay?: boolean(description='是否第二天生效', name='enable_next_day'),
    managerList?: [ string ](description='考勤组子管理员userid列表', maxItems=100, name='manager_list'),
    workdayClassList?: [ int64 ](description='周班次列表（固定班制必填，0表示休息）', maxItems=8, name='workday_class_list'),
    defaultClassId?: int64(description='默认班次id（固定班制必填）', name='default_class_id'),
    offset?: int64(description='考勤范围', name='offset'),
    resourcePermissionMap?: {
      schedule?: string(description='员工排班', name='schedule'),
      groupMember?: string(description='设置参与考勤人员', name='group_member'),
      groupType?: string(description='设置考勤类型', name='group_type'),
      checkTime?: string(description='设置考勤时间', name='check_time'),
      checkPositionType?: string(description='设置打卡方式', name='check_position_type'),
      overTimeRule?: string(description='设置加班规则', name='over_time_rule'),
      cameraCheck?: string(description='设置拍照打卡规则', name='camera_check'),
      outSideCheck?: string(description='设置外勤打卡', name='out_side_check'),
    }(description='子管理员权限范围（w表示可管理，r表示可读）', name='resource_permission_map'),
  }(description='考勤组信息', name='top_group'),
}

model AddOapiAttendanceGroupRequest = {
  headers?: map[string]string,
  params:AddOapiAttendanceGroupParams,
}

model AddOapiAttendanceGroupResponseBody = {
  result?: {
    name?: string(description='考勤组名', name='name'),
    id?: int64(description='考勤组id', name='id'),
  }(description='考勤组结果', name='result'),
  success?: boolean(description='是否成功', name='success'),
  errcode?: int64(description='错误码', name='errcode'),
  errmsg?: string(description='错误信息', name='errmsg'),
}

model AddOapiAttendanceGroupResponse = {
  headers: map[string]string,
  body: AddOapiAttendanceGroupResponseBody,
}

/**
 * Description: 考勤组写入接口
 */
async function addOapiAttendanceGroup(request: AddOapiAttendanceGroupRequest): AddOapiAttendanceGroupResponse {
  var runtime = new Util.RuntimeOptions{};
  return addOapiAttendanceGroupEx(request, runtime);
}

/**
 * Description: 考勤组写入接口
 */
async function addOapiAttendanceGroupEx(request: AddOapiAttendanceGroupRequest, runtime: Util.RuntimeOptions): AddOapiAttendanceGroupResponse {
  Util.validateModel(request);
  var appParams = Util.stringifyMapValue(Util.toMap(request.params));
  return doRequestOApi('POST', '/topapi/attendance/group/add', request.headers, appParams, runtime);
}

model QueryOapiRobotMessageOrggrouptaskParams = {
  openConversationId?: string(description='开放的群ID', name='open_conversation_id'),
  chatbotId?: string(description='申请到的企业机器人唯一标识符', name='chatbot_id'),
  processQueryKey: string(description='用于查询发送进度的唯一标识', name='process_query_key'),
  token?: string(description='机器人webhook中的access_token参数，与chatbot_id+open_conversation_id 只需要填1种', name='token'),
}

model QueryOapiRobotMessageOrggrouptaskRequest = {
  headers?: map[string]string,
  params:QueryOapiRobotMessageOrggrouptaskParams,
}

model QueryOapiRobotMessageOrggrouptaskResponseBody = {
  success?: boolean(description='是否受理成功', name='success'),
  errcode?: int64(description='错误代码', name='errcode'),
  errmsg?: string(description='错误描述', name='errmsg'),
  result?: {
    sendStatus?: string(description='发送结果码，只有SUCCESS为成功', name='send_status'),
    readStaffIds?: [ string ](description='已读员工的userids', name='read_staff_ids'),
  }(description='result', name='result'),
}

model QueryOapiRobotMessageOrggrouptaskResponse = {
  headers: map[string]string,
  body: QueryOapiRobotMessageOrggrouptaskResponseBody,
}

/**
 * Description: 企业机器人群聊消息发送结果查询
 */
async function queryOapiRobotMessageOrggrouptask(request: QueryOapiRobotMessageOrggrouptaskRequest): QueryOapiRobotMessageOrggrouptaskResponse {
  var runtime = new Util.RuntimeOptions{};
  return queryOapiRobotMessageOrggrouptaskEx(request, runtime);
}

/**
 * Description: 企业机器人群聊消息发送结果查询
 */
async function queryOapiRobotMessageOrggrouptaskEx(request: QueryOapiRobotMessageOrggrouptaskRequest, runtime: Util.RuntimeOptions): QueryOapiRobotMessageOrggrouptaskResponse {
  Util.validateModel(request);
  var appParams = Util.stringifyMapValue(Util.toMap(request.params));
  return doRequestOApi('POST', '/topapi/robot/message/orggrouptask/query', request.headers, appParams, runtime);
}

model ListOapiKacDatavTelconfDetailParams = {
  request: {
    dataId: string(description='日期标识', name='data_id'),
    size: int64(description='分页大小;不超过100', name='size'),
    cursor: int64(description='分页游标；首页请使用0，之后直接使用返回结果中的next_cursor', name='cursor'),
  }(description='请求参数对象', name='request'),
}

model ListOapiKacDatavTelconfDetailRequest = {
  headers?: map[string]string,
  params:ListOapiKacDatavTelconfDetailParams,
}

model ListOapiKacDatavTelconfDetailResponseBody = {
  errcode?: int64(description='结果码', name='errcode'),
  errmsg?: string(description='提示信息', name='errmsg'),
  result?: {
    data?: [
      {
        confId?: string(description='会议id', name='conf_id'),
        confLenMin?: string(description='会议时长（分钟）', name='conf_len_min'),
        deptId?: int64(description='发起人部门id', name='dept_id'),
        deptName?: string(description='发起人部门', name='dept_name'),
        endTime?: string(description='会议结束时间', name='end_time'),
        joinUserCount?: int64(description='参与人数', name='join_user_count'),
        userid?: string(description='员工在当前企业内的唯一标识，也称staffId。可由企业在创建时指定，并代表一定含义比如工号，创建后不可修改', name='userid'),
        staffJobNum?: string(description='发起人工号', name='staff_job_num'),
        staffName?: string(description='发起人姓名', name='staff_name'),
        startTime?: string(description='会议开始时间', name='start_time'),
      }
    ](description='data', name='data'),
    hasMore?: boolean(description='是否有下一页；true则存在更多分页', name='has_more'),
    nextCursor?: int64(description='下一次请求的分页游标', name='next_cursor'),
  }(description='result', name='result'),
}

model ListOapiKacDatavTelconfDetailResponse = {
  headers: map[string]string,
  body: ListOapiKacDatavTelconfDetailResponseBody,
}

/**
 * Description: 查询企业每日电话会议的明细列表
 */
async function listOapiKacDatavTelconfDetail(request: ListOapiKacDatavTelconfDetailRequest): ListOapiKacDatavTelconfDetailResponse {
  var runtime = new Util.RuntimeOptions{};
  return listOapiKacDatavTelconfDetailEx(request, runtime);
}

/**
 * Description: 查询企业每日电话会议的明细列表
 */
async function listOapiKacDatavTelconfDetailEx(request: ListOapiKacDatavTelconfDetailRequest, runtime: Util.RuntimeOptions): ListOapiKacDatavTelconfDetailResponse {
  Util.validateModel(request);
  var appParams = Util.stringifyMapValue(Util.toMap(request.params));
  return doRequestOApi('POST', '/topapi/kac/datav/telconf/detail/list', request.headers, appParams, runtime);
}

model SendorggroupOapiRobotMessageParams = {
  openConversationId?: string(description='开放的群ID', name='open_conversation_id'),
  chatbotId?: string(description='申请到的企业机器人唯一标识符', name='chatbot_id'),
  msgKey: string(description='申请到的消息模板唯一标识符', name='msg_key'),
  msgParam: string(description='消息模板中，变量本次替换的值', name='msg_param'),
  token?: string(description='机器人webhook中的access_token参数，与chatbot_id+open_conversation_id 只需要填1种', name='token'),
}

model SendorggroupOapiRobotMessageRequest = {
  headers?: map[string]string,
  params:SendorggroupOapiRobotMessageParams,
}

model SendorggroupOapiRobotMessageResponseBody = {
  success?: boolean(description='是否受理成功', name='success'),
  errcode?: int64(description='错误代码', name='errcode'),
  errmsg?: string(description='错误描述', name='errmsg'),
  result?: {
    processQueryKey?: string(description='用于查询发送进度的唯一标识', name='process_query_key'),
  }(description='result', name='result'),
}

model SendorggroupOapiRobotMessageResponse = {
  headers: map[string]string,
  body: SendorggroupOapiRobotMessageResponseBody,
}

/**
 * Description: 企业机器人推送群聊消息
 */
async function sendorggroupOapiRobotMessage(request: SendorggroupOapiRobotMessageRequest): SendorggroupOapiRobotMessageResponse {
  var runtime = new Util.RuntimeOptions{};
  return sendorggroupOapiRobotMessageEx(request, runtime);
}

/**
 * Description: 企业机器人推送群聊消息
 */
async function sendorggroupOapiRobotMessageEx(request: SendorggroupOapiRobotMessageRequest, runtime: Util.RuntimeOptions): SendorggroupOapiRobotMessageResponse {
  Util.validateModel(request);
  var appParams = Util.stringifyMapValue(Util.toMap(request.params));
  return doRequestOApi('POST', '/topapi/robot/message/sendorggroup', request.headers, appParams, runtime);
}

model ListOapiKacDatavDeptTelconfParams = {
  request: {
    dataId: string(description='日期标识', name='data_id'),
    size: int64(description='分页大小;不超过100', name='size'),
    cursor: int64(description='分页游标；首页请使用0，之后直接使用返回结果中的next_cursor', name='cursor'),
  }(description='请求参数对象', name='request'),
}

model ListOapiKacDatavDeptTelconfRequest = {
  headers?: map[string]string,
  params:ListOapiKacDatavDeptTelconfParams,
}

model ListOapiKacDatavDeptTelconfResponseBody = {
  errcode?: int64(description='结果码', name='errcode'),
  errmsg?: string(description='提示信息', name='errmsg'),
  result?: {
    data?: [
      {
        deptId?: int64(description='部门id', name='dept_id'),
        deptName?: string(description='部门名称', name='dept_name'),
        joinCount?: int64(description='参与人次', name='join_count'),
        startAvgLenMin?: string(description='平均时长（分钟）', name='start_avg_len_min'),
        startCount?: int64(description='发起次数', name='start_count'),
        startLenMin?: string(description='发起总时长（分钟）', name='start_len_min'),
      }
    ](description='data', name='data'),
    hasMore?: boolean(description='是否有下一页；true则存在更多分页', name='has_more'),
    nextCursor?: int64(description='下一次请求的分页游标', name='next_cursor'),
  }(description='resut', name='result'),
}

model ListOapiKacDatavDeptTelconfResponse = {
  headers: map[string]string,
  body: ListOapiKacDatavDeptTelconfResponseBody,
}

/**
 * Description: 钉钉数据：查询大客户部门维度电话会议统计列表
 */
async function listOapiKacDatavDeptTelconf(request: ListOapiKacDatavDeptTelconfRequest): ListOapiKacDatavDeptTelconfResponse {
  var runtime = new Util.RuntimeOptions{};
  return listOapiKacDatavDeptTelconfEx(request, runtime);
}

/**
 * Description: 钉钉数据：查询大客户部门维度电话会议统计列表
 */
async function listOapiKacDatavDeptTelconfEx(request: ListOapiKacDatavDeptTelconfRequest, runtime: Util.RuntimeOptions): ListOapiKacDatavDeptTelconfResponse {
  Util.validateModel(request);
  var appParams = Util.stringifyMapValue(Util.toMap(request.params));
  return doRequestOApi('POST', '/topapi/kac/datav/dept/telconf/list', request.headers, appParams, runtime);
}

model ListOapiKacDatavDeptVideoconfParams = {
  request: {
    dataId: string(description='日期标识', name='data_id'),
    size: int64(description='分页大小;不超过100', name='size'),
    cursor: int64(description='分页游标；首页请使用0，之后直接使用返回结果中的next_cursor', name='cursor'),
  }(description='请求参数对象', name='request'),
}

model ListOapiKacDatavDeptVideoconfRequest = {
  headers?: map[string]string,
  params:ListOapiKacDatavDeptVideoconfParams,
}

model ListOapiKacDatavDeptVideoconfResponseBody = {
  errcode?: int64(description='结果码', name='errcode'),
  errmsg?: string(description='提示信息', name='errmsg'),
  result?: {
    data?: [
      {
        deptId?: int64(description='部门id', name='dept_id'),
        deptName?: string(description='部门名称', name='dept_name'),
        joinCount?: int64(description='参与人次', name='join_count'),
        startAvgLenMin?: string(description='平均时长（分钟）', name='start_avg_len_min'),
        startCount?: int64(description='发起会议次数', name='start_count'),
        startLenMin?: string(description='发起会议总时长（分钟）', name='start_len_min'),
      }
    ](description='data', name='data'),
    hasMore?: boolean(description='是否有下一页；true则存在更多分页', name='has_more'),
    nextCursor?: int64(description='下一次请求的分页游标', name='next_cursor'),
  }(description='resut', name='result'),
}

model ListOapiKacDatavDeptVideoconfResponse = {
  headers: map[string]string,
  body: ListOapiKacDatavDeptVideoconfResponseBody,
}

/**
 * Description: 钉钉数据：查询大客户部门维度视频会议统计列表
 */
async function listOapiKacDatavDeptVideoconf(request: ListOapiKacDatavDeptVideoconfRequest): ListOapiKacDatavDeptVideoconfResponse {
  var runtime = new Util.RuntimeOptions{};
  return listOapiKacDatavDeptVideoconfEx(request, runtime);
}

/**
 * Description: 钉钉数据：查询大客户部门维度视频会议统计列表
 */
async function listOapiKacDatavDeptVideoconfEx(request: ListOapiKacDatavDeptVideoconfRequest, runtime: Util.RuntimeOptions): ListOapiKacDatavDeptVideoconfResponse {
  Util.validateModel(request);
  var appParams = Util.stringifyMapValue(Util.toMap(request.params));
  return doRequestOApi('POST', '/topapi/kac/datav/dept/videoconf/list', request.headers, appParams, runtime);
}

model ListOapiKacDatavVideoconfDetailParams = {
  request: {
    dataId: string(description='日期标识', name='data_id'),
    size: int64(description='分页大小;不超过100', name='size'),
    cursor: int64(description='分页游标；首页请使用0，之后直接使用返回结果中的next_cursor', name='cursor'),
  }(description='请求参数对象', name='request'),
}

model ListOapiKacDatavVideoconfDetailRequest = {
  headers?: map[string]string,
  params:ListOapiKacDatavVideoconfDetailParams,
}

model ListOapiKacDatavVideoconfDetailResponseBody = {
  errcode?: int64(description='结果码', name='errcode'),
  errmsg?: string(description='提示信息', name='errmsg'),
  result?: {
    data?: [
      {
        confId?: string(description='会议id', name='conf_id'),
        confLenMin?: string(description='会议时长（分钟）', name='conf_len_min'),
        deptId?: int64(description='发起人部门id', name='dept_id'),
        deptName?: string(description='发起人部门', name='dept_name'),
        endTime?: string(description='会议结束时间', name='end_time'),
        joinUserCount?: int64(description='参与人数', name='join_user_count'),
        userid?: string(description='员工在当前企业内的唯一标识，也称staffId。可由企业在创建时指定，并代表一定含义比如工号，创建后不可修改', name='userid'),
        staffJobNum?: string(description='发起人工号', name='staff_job_num'),
        staffName?: string(description='发起人姓名', name='staff_name'),
        startTime?: string(description='会议开始时间', name='start_time'),
      }
    ](description='data', name='data'),
    hasMore?: boolean(description='是否有下一页；true则存在更多分页', name='has_more'),
    nextCursor?: int64(description='下一次请求的分页游标', name='next_cursor'),
  }(description='result', name='result'),
}

model ListOapiKacDatavVideoconfDetailResponse = {
  headers: map[string]string,
  body: ListOapiKacDatavVideoconfDetailResponseBody,
}

/**
 * Description: 查询企业每日视频会议的明细列表
 */
async function listOapiKacDatavVideoconfDetail(request: ListOapiKacDatavVideoconfDetailRequest): ListOapiKacDatavVideoconfDetailResponse {
  var runtime = new Util.RuntimeOptions{};
  return listOapiKacDatavVideoconfDetailEx(request, runtime);
}

/**
 * Description: 查询企业每日视频会议的明细列表
 */
async function listOapiKacDatavVideoconfDetailEx(request: ListOapiKacDatavVideoconfDetailRequest, runtime: Util.RuntimeOptions): ListOapiKacDatavVideoconfDetailResponse {
  Util.validateModel(request);
  var appParams = Util.stringifyMapValue(Util.toMap(request.params));
  return doRequestOApi('POST', '/topapi/kac/datav/videoconf/detail/list', request.headers, appParams, runtime);
}

model IsopensmartreportOapiAttendanceRequest = {
  headers?: map[string]string,
}

model IsopensmartreportOapiAttendanceResponseBody = {
  result?: {
    smartReport?: boolean(description='判断企业是否开启了考勤智能报表，true表示开启', name='smart_report'),
  }(description='result', name='result'),
  errmsg?: string(description='errorMsg', name='errmsg'),
  errcode?: int64(description='dingOpenErrcode', name='errcode'),
}

model IsopensmartreportOapiAttendanceResponse = {
  headers: map[string]string,
  body: IsopensmartreportOapiAttendanceResponseBody,
}

/**
 * Description: 考勤智能报表是考勤为了满足企业个性化的统计需求而开发的一套智能的可编程的报表系统，企业可以通过简单勾选或者高级编程模式来定制自己的统计规则，通过智能报表可以非常方便地输出便于计算薪酬结果的统计数据。该接口可以通过企业corpId来判断企业是否开启了考勤智能报表。开启报表需要管理员登录OA后台切换到新报表即可
 */
async function isopensmartreportOapiAttendance(request: IsopensmartreportOapiAttendanceRequest): IsopensmartreportOapiAttendanceResponse {
  var runtime = new Util.RuntimeOptions{};
  return isopensmartreportOapiAttendanceEx(request, runtime);
}

/**
 * Description: 考勤智能报表是考勤为了满足企业个性化的统计需求而开发的一套智能的可编程的报表系统，企业可以通过简单勾选或者高级编程模式来定制自己的统计规则，通过智能报表可以非常方便地输出便于计算薪酬结果的统计数据。该接口可以通过企业corpId来判断企业是否开启了考勤智能报表。开启报表需要管理员登录OA后台切换到新报表即可
 */
async function isopensmartreportOapiAttendanceEx(request: IsopensmartreportOapiAttendanceRequest, runtime: Util.RuntimeOptions): IsopensmartreportOapiAttendanceResponse {
  Util.validateModel(request);
  var appParams : map[string]string = {};
  return doRequestOApi('POST', '/topapi/attendance/isopensmartreport', request.headers, appParams, runtime);
}

model GetattcolumnsOapiAttendanceRequest = {
  headers?: map[string]string,
}

model GetattcolumnsOapiAttendanceResponseBody = {
  errmsg?: string(description='errorMsg', name='errmsg'),
  errcode?: int64(description='dingOpenErrcode', name='errcode'),
  result?: {
    columns?: [
      {
        id?: int64(description='列id', name='id'),
        type?: int64(description='列类型', name='type'),
        name?: string(description='列名', name='name'),
        alias?: string(description='列别名', name='alias'),
        expressionId?: int64(description='列表达式id', name='expression_id'),
        status?: int64(description='列的状态', name='status'),
        extension?: string(description='扩展字段', name='extension'),
        subType?: int64(description='子类型', name='sub_type'),
      }
    ](description='列信息', name='columns'),
  }(description='result', name='result'),
}

model GetattcolumnsOapiAttendanceResponse = {
  headers: map[string]string,
  body: GetattcolumnsOapiAttendanceResponseBody,
}

/**
 * Description: 该接口用于获取企业智能考勤报表中的列信息，通过获取列信息中的id值，ISV可以根据列的id查询考勤智能报表中该列的统计数据
 */
async function getattcolumnsOapiAttendance(request: GetattcolumnsOapiAttendanceRequest): GetattcolumnsOapiAttendanceResponse {
  var runtime = new Util.RuntimeOptions{};
  return getattcolumnsOapiAttendanceEx(request, runtime);
}

/**
 * Description: 该接口用于获取企业智能考勤报表中的列信息，通过获取列信息中的id值，ISV可以根据列的id查询考勤智能报表中该列的统计数据
 */
async function getattcolumnsOapiAttendanceEx(request: GetattcolumnsOapiAttendanceRequest, runtime: Util.RuntimeOptions): GetattcolumnsOapiAttendanceResponse {
  Util.validateModel(request);
  var appParams : map[string]string = {};
  return doRequestOApi('POST', '/topapi/attendance/getattcolumns', request.headers, appParams, runtime);
}

model GetfaceCorpSmartdeviceParams = {
  userid?: string(description='员工ID', name='userid'),
}

model GetfaceCorpSmartdeviceRequest = {
  headers?: map[string]string,
  params?:GetfaceCorpSmartdeviceParams,
}

model GetfaceCorpSmartdeviceResponseBody = {
  result?: {
    dingOpenErrcode?: int64(description='dingOpenErrcode', name='ding_open_errcode'),
    errorMsg?: string(description='errorMsg', name='error_msg'),
    result?: string(description='返回图片的base64编码', name='result'),
    success?: boolean(description='success', name='success'),
  }(description='result', name='result'),
}

model GetfaceCorpSmartdeviceResponse = {
  headers: map[string]string,
  body: GetfaceCorpSmartdeviceResponseBody,
}

/**
 * Description: 获取指定企业员工的识别底图照片
 */
async function getfaceCorpSmartdevice(request: GetfaceCorpSmartdeviceRequest): GetfaceCorpSmartdeviceResponse {
  var runtime = new Util.RuntimeOptions{};
  return getfaceCorpSmartdeviceEx(request, runtime);
}

/**
 * Description: 获取指定企业员工的识别底图照片
 */
async function getfaceCorpSmartdeviceEx(request: GetfaceCorpSmartdeviceRequest, runtime: Util.RuntimeOptions): GetfaceCorpSmartdeviceResponse {
  Util.validateModel(request);
  var appParams = Util.stringifyMapValue(Util.toMap(request.params));
  return doRequest('dingtalk.corp.smartdevice.getface', 'POST', '/router/rest', request.headers, appParams, runtime);
}

model GetcolumnvalOapiAttendanceParams = {
  userid?: string(description='用户的userId', name='userid'),
  columnIdList?: [ int64 ](description='列id，多值用英文逗号分隔', maxItems=20, name='column_id_list'),
  fromDate?: string(description='开始时间', pattern='\\\\d{4}[-]\\\\d{1,2}[-]\\\\d{1,2}[T]\\\\d{2}:\\\\d{2}:\\\\d{2}[Z]', name='from_date'),
  toDate?: string(description='结束时间', pattern='\\\\d{4}[-]\\\\d{1,2}[-]\\\\d{1,2}[T]\\\\d{2}:\\\\d{2}:\\\\d{2}[Z]', name='to_date'),
}

model GetcolumnvalOapiAttendanceRequest = {
  headers?: map[string]string,
  params?:GetcolumnvalOapiAttendanceParams,
}

model GetcolumnvalOapiAttendanceResponseBody = {
  errmsg?: string(description='errorMsg', name='errmsg'),
  errcode?: int64(description='dingOpenErrcode', name='errcode'),
  result?: {
    columnVals?: [
      {
        columnVals?: [
          {
            date?: string(description='时间', pattern='\\\\d{4}[-]\\\\d{1,2}[-]\\\\d{1,2}[T]\\\\d{2}:\\\\d{2}:\\\\d{2}[Z]', name='date'),
            value?: string(description='列值', name='value'),
          }
        ](description='列值数据', name='column_vals'),
        columnVo?: {
          id?: int64(description='列id', name='id'),
        }(description='列信息', name='column_vo'),
        fixedValue?: string(description='一些不需要计算得固定值，如出勤天数等', name='fixed_value'),
      }
    ](description='列信息与列值数据', name='column_vals'),
  }(description='result', name='result'),
}

model GetcolumnvalOapiAttendanceResponse = {
  headers: map[string]string,
  body: GetcolumnvalOapiAttendanceResponseBody,
}

/**
 * Description: 该接口用于获取钉钉智能考勤报表的列值数据，其中包含了一定时间段内报表某一列的所有数据，以及相关的列信息，可以供指定的ISV进行使用。
 */
async function getcolumnvalOapiAttendance(request: GetcolumnvalOapiAttendanceRequest): GetcolumnvalOapiAttendanceResponse {
  var runtime = new Util.RuntimeOptions{};
  return getcolumnvalOapiAttendanceEx(request, runtime);
}

/**
 * Description: 该接口用于获取钉钉智能考勤报表的列值数据，其中包含了一定时间段内报表某一列的所有数据，以及相关的列信息，可以供指定的ISV进行使用。
 */
async function getcolumnvalOapiAttendanceEx(request: GetcolumnvalOapiAttendanceRequest, runtime: Util.RuntimeOptions): GetcolumnvalOapiAttendanceResponse {
  Util.validateModel(request);
  var appParams = Util.stringifyMapValue(Util.toMap(request.params));
  return doRequestOApi('POST', '/topapi/attendance/getcolumnval', request.headers, appParams, runtime);
}

model ListbyuseridOapiProcessParams = {
  userid?: string(description='用户id, 不传表示查询企业下所有审批模板', name='userid'),
  offset: int64(description='分页游标，从0开始。根据返回结果里的next_cursor是否为空来判断是否还有下一页，且再次调用时offset设置成next_cursor的值', name='offset'),
  size: int64(description='分页大小，最大可设置成100', name='size'),
}

model ListbyuseridOapiProcessRequest = {
  headers?: map[string]string,
  params:ListbyuseridOapiProcessParams,
}

model ListbyuseridOapiProcessResponseBody = {
  errmsg?: string(description='errorMsg', name='errmsg'),
  errcode?: int64(description='dingOpenErrcode', name='errcode'),
  result?: {
    processList?: [
      {
        name?: string(description='模板名称', name='name'),
        iconUrl?: string(description='图标url', name='icon_url'),
        processCode?: string(description='模板唯一标识', name='process_code'),
        url?: string(description='模板url', name='url'),
      }
    ](description='list', name='process_list'),
    nextCursor?: int64(description='下一次分页调用的offset值，当返回结果里没有nextCursor时，表示分页结束', name='next_cursor'),
  }(description='result', name='result'),
}

model ListbyuseridOapiProcessResponse = {
  headers: map[string]string,
  body: ListbyuseridOapiProcessResponseBody,
}

/**
 * Description: 根据userid分页获取用户可见的审批模板列表，每次最多获取100个模板。
 */
async function listbyuseridOapiProcess(request: ListbyuseridOapiProcessRequest): ListbyuseridOapiProcessResponse {
  var runtime = new Util.RuntimeOptions{};
  return listbyuseridOapiProcessEx(request, runtime);
}

/**
 * Description: 根据userid分页获取用户可见的审批模板列表，每次最多获取100个模板。
 */
async function listbyuseridOapiProcessEx(request: ListbyuseridOapiProcessRequest, runtime: Util.RuntimeOptions): ListbyuseridOapiProcessResponse {
  Util.validateModel(request);
  var appParams = Util.stringifyMapValue(Util.toMap(request.params));
  return doRequestOApi('POST', '/topapi/process/listbyuserid', request.headers, appParams, runtime);
}

model GetOapiImpaasRelationParams = {
  request?: {
    srcImOpenid: string(description='发送者钉钉的openid', name='src_im_openid'),
    dstImOpenids: [ string ](description='接收者钉钉的openid', maxItems=20, name='dst_im_openids'),
  }(description='系统自动生成', name='request'),
}

model GetOapiImpaasRelationRequest = {
  headers?: map[string]string,
  params?:GetOapiImpaasRelationParams,
}

model GetOapiImpaasRelationResponseBody = {
  result?: [
    {
      endTime?: int64(description='endTime', name='end_time'),
      beginTime?: int64(description='beginTime', name='begin_time'),
      dstImOpenid?: string(description='dstImOpenid', name='dst_im_openid'),
      srcImOpenid?: string(description='srcImOpenid', name='src_im_openid'),
    }
  ](description='result', name='result'),
  errcode?: int64(description='dingOpenErrcode', name='errcode'),
  errmsg?: string(description='errorMsg', name='errmsg'),
  success?: boolean(description='success', name='success'),
}

model GetOapiImpaasRelationResponse = {
  headers: map[string]string,
  body: GetOapiImpaasRelationResponseBody,
}

/**
 * Description: impaas关系查询, 查询 sender im openid 跟 receiver im openid的关系
 */
async function getOapiImpaasRelation(request: GetOapiImpaasRelationRequest): GetOapiImpaasRelationResponse {
  var runtime = new Util.RuntimeOptions{};
  return getOapiImpaasRelationEx(request, runtime);
}

/**
 * Description: impaas关系查询, 查询 sender im openid 跟 receiver im openid的关系
 */
async function getOapiImpaasRelationEx(request: GetOapiImpaasRelationRequest, runtime: Util.RuntimeOptions): GetOapiImpaasRelationResponse {
  Util.validateModel(request);
  var appParams = Util.stringifyMapValue(Util.toMap(request.params));
  return doRequestOApi('POST', '/topapi/impaas/relation/get', request.headers, appParams, runtime);
}

model GetlogintokenOapiImpaasUserParams = {
  request?: {
    id: string(description='二方账号', name='id'),
    channel: string(description='渠道类型', name='channel'),
  }(description='获取免登token请求', name='request'),
}

model GetlogintokenOapiImpaasUserRequest = {
  headers?: map[string]string,
  params?:GetlogintokenOapiImpaasUserParams,
}

model GetlogintokenOapiImpaasUserResponseBody = {
  result?: {
    expire?: int64(description='expire', name='expire'),
    loginToken?: string(description='loginToken', name='login_token'),
  }(description='result', name='result'),
  errcode?: int64(description='dingOpenErrcode', name='errcode'),
  errmsg?: string(description='errorMsg', name='errmsg'),
  success?: boolean(description='success', name='success'),
}

model GetlogintokenOapiImpaasUserResponse = {
  headers: map[string]string,
  body: GetlogintokenOapiImpaasUserResponseBody,
}

/**
 * Description: 获取免登token
 */
async function getlogintokenOapiImpaasUser(request: GetlogintokenOapiImpaasUserRequest): GetlogintokenOapiImpaasUserResponse {
  var runtime = new Util.RuntimeOptions{};
  return getlogintokenOapiImpaasUserEx(request, runtime);
}

/**
 * Description: 获取免登token
 */
async function getlogintokenOapiImpaasUserEx(request: GetlogintokenOapiImpaasUserRequest, runtime: Util.RuntimeOptions): GetlogintokenOapiImpaasUserResponse {
  Util.validateModel(request);
  var appParams = Util.stringifyMapValue(Util.toMap(request.params));
  return doRequestOApi('POST', '/topapi/impaas/user/getlogintoken', request.headers, appParams, runtime);
}

